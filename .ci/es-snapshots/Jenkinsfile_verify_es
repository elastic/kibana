#!/bin/groovy

library 'kibana-pipeline-library'
kibanaLibrary.load()

def SNAPSHOT_VERSION = params.SNAPSHOT_VERSION
def SNAPSHOT_ID = params.SNAPSHOT_ID

if (!SNAPSHOT_VERSION) {
  error "Parameter SNAPSHOT_VERSION must be specified"
}

if (!SNAPSHOT_ID) {
  error "Parameter SNAPSHOT_ID must be specified"
}

currentBuild.displayName += " - ${SNAPSHOT_VERSION}"
currentBuild.description = "ES: ${SNAPSHOT_VERSION}<br />Kibana: ${params.branch_specifier}"

def SNAPSHOT_MANIFEST = "https://storage.googleapis.com/kibana-ci-es-snapshots-daily/${SNAPSHOT_VERSION}/archives/${SNAPSHOT_ID}/manifest.json"

timeout(time: 120, unit: 'MINUTES') {
  timestamps {
    ansiColor('xterm') {
      catchError {
        withEnv(["ES_SNAPSHOT_MANIFEST=${SNAPSHOT_MANIFEST}"]) {
          parallel([
            // TODO we just need to run integration tests from intake?
            'kibana-intake-agent': kibanaPipeline.intakeWorker('kibana-intake', './test/scripts/jenkins_unit.sh'),
            'x-pack-intake-agent': kibanaPipeline.intakeWorker('x-pack-intake', './test/scripts/jenkins_xpack.sh'),
            'kibana-oss-agent': kibanaPipeline.withWorkers('kibana-oss-tests', { kibanaPipeline.buildOss() }, [
              'oss-ciGroup1': kibanaPipeline.getOssCiGroupWorker(1),
              'oss-ciGroup2': kibanaPipeline.getOssCiGroupWorker(2),
              'oss-ciGroup3': kibanaPipeline.getOssCiGroupWorker(3),
              'oss-ciGroup4': kibanaPipeline.getOssCiGroupWorker(4),
              'oss-ciGroup5': kibanaPipeline.getOssCiGroupWorker(5),
              'oss-ciGroup6': kibanaPipeline.getOssCiGroupWorker(6),
              'oss-ciGroup7': kibanaPipeline.getOssCiGroupWorker(7),
              'oss-ciGroup8': kibanaPipeline.getOssCiGroupWorker(8),
              'oss-ciGroup9': kibanaPipeline.getOssCiGroupWorker(9),
              'oss-ciGroup10': kibanaPipeline.getOssCiGroupWorker(10),
              'oss-ciGroup11': kibanaPipeline.getOssCiGroupWorker(11),
              'oss-ciGroup12': kibanaPipeline.getOssCiGroupWorker(12),
            ]),
            'kibana-xpack-agent': kibanaPipeline.withWorkers('kibana-xpack-tests', { kibanaPipeline.buildXpack() }, [
              'xpack-ciGroup1': kibanaPipeline.getXpackCiGroupWorker(1),
              'xpack-ciGroup2': kibanaPipeline.getXpackCiGroupWorker(2),
              'xpack-ciGroup3': kibanaPipeline.getXpackCiGroupWorker(3),
              'xpack-ciGroup4': kibanaPipeline.getXpackCiGroupWorker(4),
              'xpack-ciGroup5': kibanaPipeline.getXpackCiGroupWorker(5),
              'xpack-ciGroup6': kibanaPipeline.getXpackCiGroupWorker(6),
              'xpack-ciGroup7': kibanaPipeline.getXpackCiGroupWorker(7),
              'xpack-ciGroup8': kibanaPipeline.getXpackCiGroupWorker(8),
              'xpack-ciGroup9': kibanaPipeline.getXpackCiGroupWorker(9),
              'xpack-ciGroup10': kibanaPipeline.getXpackCiGroupWorker(10),
            ]),
          ])
        }

        promoteSnapshot(SNAPSHOT_VERSION, SNAPSHOT_ID)
      }

      kibanaPipeline.sendMail()
    }
  }
}

def promoteSnapshot(snapshotVersion, snapshotId) {
  node('linux && immutable') {
    esSnapshots.promote(snapshotVersion, snapshotId)
  }
}
