// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MetricsAxisOptions component should init with the default set of props 1`] = `
<Fragment>
  <SeriesPanel
    aggs={
      Object {
        "aggs": Array [
          Object {
            "id": "1",
            "makeLabel": [Function],
            "type": Object {
              "name": "count",
            },
          },
        ],
        "bySchemaName": [Function],
      }
    }
    aggsLabels=""
    changeValueAxis={[Function]}
    setParamByIndex={[Function]}
    setValue={[MockFunction]}
    setVisType={[MockFunction]}
    stateParams={
      Object {
        "categoryAxes": Array [
          Object {
            "id": "CategoryAxis-1",
            "labels": Object {
              "color": "black",
              "filter": true,
              "show": true,
              "truncate": 0,
            },
            "position": "bottom",
            "scale": Object {
              "type": "linear",
            },
            "show": true,
            "style": Object {},
            "title": Object {
              "text": "",
            },
            "type": "category",
          },
        ],
        "grid": Object {
          "valueAxis": "ValueAxis-1",
        },
        "seriesParams": Array [
          Object {
            "data": Object {
              "id": "1",
              "label": "Count",
            },
            "drawLinesBetweenPoints": true,
            "interpolate": "linear",
            "lineWidth": 2,
            "mode": "stacked",
            "show": true,
            "showCircles": true,
            "type": "area",
            "valueAxis": "ValueAxis-1",
          },
        ],
        "valueAxes": Array [
          Object {
            "id": "ValueAxis-1",
            "labels": Object {
              "color": "black",
              "filter": true,
              "show": true,
              "truncate": 0,
            },
            "name": "LeftAxis-1",
            "position": "left",
            "scale": Object {
              "boundsMargin": 1,
              "defaultYExtents": true,
              "max": 2,
              "min": 1,
              "setYExtents": true,
              "type": "linear",
            },
            "show": true,
            "style": Object {},
            "title": Object {
              "text": "",
            },
            "type": "value",
          },
        ],
      }
    }
    vis={
      Object {
        "type": Object {
          "schemas": Object {
            "metrics": Array [
              Object {
                "name": "metric",
              },
            ],
          },
          "type": "area",
        },
      }
    }
  />
  <EuiSpacer
    size="s"
  />
  <ValueAxesPanel
    addValueAxis={[Function]}
    aggs={
      Object {
        "aggs": Array [
          Object {
            "id": "1",
            "makeLabel": [Function],
            "type": Object {
              "name": "count",
            },
          },
        ],
        "bySchemaName": [Function],
      }
    }
    aggsLabels=""
    isCategoryAxisHorizontal={true}
    onValueAxisPositionChanged={[Function]}
    removeValueAxis={[Function]}
    setParamByIndex={[Function]}
    setValue={[MockFunction]}
    setVisType={[MockFunction]}
    stateParams={
      Object {
        "categoryAxes": Array [
          Object {
            "id": "CategoryAxis-1",
            "labels": Object {
              "color": "black",
              "filter": true,
              "show": true,
              "truncate": 0,
            },
            "position": "bottom",
            "scale": Object {
              "type": "linear",
            },
            "show": true,
            "style": Object {},
            "title": Object {
              "text": "",
            },
            "type": "category",
          },
        ],
        "grid": Object {
          "valueAxis": "ValueAxis-1",
        },
        "seriesParams": Array [
          Object {
            "data": Object {
              "id": "1",
              "label": "Count",
            },
            "drawLinesBetweenPoints": true,
            "interpolate": "linear",
            "lineWidth": 2,
            "mode": "stacked",
            "show": true,
            "showCircles": true,
            "type": "area",
            "valueAxis": "ValueAxis-1",
          },
        ],
        "valueAxes": Array [
          Object {
            "id": "ValueAxis-1",
            "labels": Object {
              "color": "black",
              "filter": true,
              "show": true,
              "truncate": 0,
            },
            "name": "LeftAxis-1",
            "position": "left",
            "scale": Object {
              "boundsMargin": 1,
              "defaultYExtents": true,
              "max": 2,
              "min": 1,
              "setYExtents": true,
              "type": "linear",
            },
            "show": true,
            "style": Object {},
            "title": Object {
              "text": "",
            },
            "type": "value",
          },
        ],
      }
    }
    vis={
      Object {
        "type": Object {
          "schemas": Object {
            "metrics": Array [
              Object {
                "name": "metric",
              },
            ],
          },
          "type": "area",
        },
      }
    }
  />
  <EuiSpacer
    size="s"
  />
  <CategoryAxisPanel
    aggs={
      Object {
        "aggs": Array [
          Object {
            "id": "1",
            "makeLabel": [Function],
            "type": Object {
              "name": "count",
            },
          },
        ],
        "bySchemaName": [Function],
      }
    }
    aggsLabels=""
    axis={
      Object {
        "id": "CategoryAxis-1",
        "labels": Object {
          "color": "black",
          "filter": true,
          "show": true,
          "truncate": 0,
        },
        "position": "bottom",
        "scale": Object {
          "type": "linear",
        },
        "show": true,
        "style": Object {},
        "title": Object {
          "text": "",
        },
        "type": "category",
      }
    }
    onPositionChanged={[Function]}
    setCategoryAxis={[Function]}
    setValue={[MockFunction]}
    setVisType={[MockFunction]}
    stateParams={
      Object {
        "categoryAxes": Array [
          Object {
            "id": "CategoryAxis-1",
            "labels": Object {
              "color": "black",
              "filter": true,
              "show": true,
              "truncate": 0,
            },
            "position": "bottom",
            "scale": Object {
              "type": "linear",
            },
            "show": true,
            "style": Object {},
            "title": Object {
              "text": "",
            },
            "type": "category",
          },
        ],
        "grid": Object {
          "valueAxis": "ValueAxis-1",
        },
        "seriesParams": Array [
          Object {
            "data": Object {
              "id": "1",
              "label": "Count",
            },
            "drawLinesBetweenPoints": true,
            "interpolate": "linear",
            "lineWidth": 2,
            "mode": "stacked",
            "show": true,
            "showCircles": true,
            "type": "area",
            "valueAxis": "ValueAxis-1",
          },
        ],
        "valueAxes": Array [
          Object {
            "id": "ValueAxis-1",
            "labels": Object {
              "color": "black",
              "filter": true,
              "show": true,
              "truncate": 0,
            },
            "name": "LeftAxis-1",
            "position": "left",
            "scale": Object {
              "boundsMargin": 1,
              "defaultYExtents": true,
              "max": 2,
              "min": 1,
              "setYExtents": true,
              "type": "linear",
            },
            "show": true,
            "style": Object {},
            "title": Object {
              "text": "",
            },
            "type": "value",
          },
        ],
      }
    }
    vis={
      Object {
        "type": Object {
          "schemas": Object {
            "metrics": Array [
              Object {
                "name": "metric",
              },
            ],
          },
          "type": "area",
        },
      }
    }
  />
</Fragment>
`;
