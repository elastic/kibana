// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DefaultEditorAggParams component should init with the default set of params 1`] = `
<Provider
  services={
    Object {
      "data": Object {
        "__LEGACY": Object {
          "esClient": Object {
            "msearch": [MockFunction],
            "search": [MockFunction],
          },
        },
        "actions": Object {
          "createFiltersFromEvent": [MockFunction],
        },
        "autocomplete": Object {
          "getQuerySuggestions": [MockFunction],
          "getValueSuggestions": [MockFunction],
          "hasQuerySuggestions": [MockFunction],
        },
        "fieldFormats": Object {
          "deserialize": [MockFunction],
          "getByFieldType": [MockFunction],
          "getDefaultConfig": [MockFunction],
          "getDefaultInstance": [MockFunction],
          "getDefaultInstanceCacheResolver": [MockFunction],
          "getDefaultInstancePlain": [MockFunction],
          "getDefaultType": [MockFunction],
          "getDefaultTypeName": [MockFunction],
          "getInstance": [MockFunction],
          "getType": [MockFunction],
          "getTypeNameByEsTypes": [MockFunction],
          "getTypeWithoutMetaParams": [MockFunction],
          "init": [MockFunction],
          "parseDefaultTypeMap": [MockFunction],
          "register": [MockFunction],
        },
        "getSuggestions": [MockFunction],
        "indexPatterns": Object {
          "get": [MockFunction],
          "make": [Function],
        },
        "query": Object {
          "filterManager": [MockFunction],
          "savedQueries": [MockFunction],
          "state$": Observable {
            "_isScalar": false,
          },
          "timefilter": Object {
            "history": Object {
              "add": [MockFunction],
              "get": [MockFunction],
            },
            "timefilter": Object {
              "calculateBounds": [MockFunction],
              "createFilter": [MockFunction],
              "disableAutoRefreshSelector": [MockFunction],
              "disableTimeRangeSelector": [MockFunction],
              "enableAutoRefreshSelector": [MockFunction],
              "enableTimeRangeSelector": [MockFunction],
              "getActiveBounds": [MockFunction],
              "getAutoRefreshFetch$": [MockFunction],
              "getBounds": [MockFunction],
              "getEnabledUpdated$": [MockFunction],
              "getFetch$": [MockFunction],
              "getRefreshInterval": [MockFunction],
              "getRefreshIntervalDefaults": [MockFunction],
              "getRefreshIntervalUpdate$": [MockFunction],
              "getTime": [MockFunction],
              "getTimeDefaults": [MockFunction],
              "getTimeUpdate$": [MockFunction],
              "isAutoRefreshSelectorEnabled": [MockFunction],
              "isTimeRangeSelectorEnabled": [MockFunction],
              "setRefreshInterval": [MockFunction],
              "setTime": [MockFunction],
            },
          },
        },
        "search": Object {
          "__LEGACY": Object {
            "AggConfig": [MockFunction],
            "AggType": [MockFunction],
            "FieldParamType": [MockFunction],
            "MetricAggType": [MockFunction],
            "aggTypeFieldFilters": AggTypeFieldFilters {
              "filters": Set {},
            },
            "esClient": Object {
              "msearch": [MockFunction],
              "search": [MockFunction],
            },
            "parentPipelineAggHelper": [MockFunction],
            "siblingPipelineAggHelper": [MockFunction],
          },
          "aggs": Object {
            "calculateAutoTimeExpression": [Function],
            "createAggConfigs": [MockFunction],
            "types": Object {
              "get": [Function],
              "getAll": [Function],
              "getBuckets": [Function],
              "getMetrics": [Function],
            },
          },
          "search": [MockFunction],
        },
        "ui": Object {
          "IndexPatternSelect": [MockFunction],
          "SearchBar": [MockFunction],
        },
      },
    }
  }
>
  <DefaultEditorAggParams
    agg={
      Object {
        "params": Object {},
        "schema": Object {
          "title": "",
        },
        "type": Object {
          "params": Array [
            Object {
              "deserialize": [MockFunction],
              "name": "interval",
            },
          ],
        },
      }
    }
    formIsTouched={false}
    groupName="metrics"
    indexPattern={Object {}}
    metricAggs={Array []}
    onAggTypeChange={[MockFunction]}
    schemas={Array []}
    setAggParamValue={[MockFunction]}
    setTouched={[MockFunction]}
    setValidity={[MockFunction]}
    state={Object {}}
  />
</Provider>
`;
