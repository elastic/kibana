// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SourceFiltersTable should add a filter 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "save": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "sourceFilters": Array [
          Object {
            "value": "tim*",
          },
          Object {
            "value": "na*",
          },
        ],
      }
    }
    isSaving={false}
    items={
      Array [
        Object {
          "clientId": 2,
          "value": "tim*",
        },
        Object {
          "clientId": 3,
          "value": "na*",
        },
      ]
    }
    saveFilter={[Function]}
  />
</div>
`;

exports[`SourceFiltersTable should filter based on the query bar 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "sourceFilters": Array [
          Object {
            "value": "time*",
          },
          Object {
            "value": "nam*",
          },
          Object {
            "value": "age*",
          },
        ],
      }
    }
    isSaving={false}
    items={
      Array [
        Object {
          "clientId": 1,
          "value": "time*",
        },
      ]
    }
    saveFilter={[Function]}
  />
</div>
`;

exports[`SourceFiltersTable should remove a filter 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "save": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "sourceFilters": Array [
          Object {
            "clientId": 1,
            "value": "tim*",
          },
          Object {
            "clientId": 2,
            "value": "na*",
          },
        ],
      }
    }
    isSaving={false}
    items={
      Array [
        Object {
          "clientId": 3,
          "value": "tim*",
        },
        Object {
          "clientId": 4,
          "value": "na*",
        },
      ]
    }
    saveFilter={[Function]}
  />
</div>
`;

exports[`SourceFiltersTable should render normally 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "sourceFilters": Array [
          Object {
            "value": "time*",
          },
          Object {
            "value": "nam*",
          },
          Object {
            "value": "age*",
          },
        ],
      }
    }
    isSaving={false}
    items={
      Array [
        Object {
          "clientId": 1,
          "value": "time*",
        },
        Object {
          "clientId": 2,
          "value": "nam*",
        },
        Object {
          "clientId": 3,
          "value": "age*",
        },
      ]
    }
    saveFilter={[Function]}
  />
</div>
`;

exports[`SourceFiltersTable should should a loading indicator when saving 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "sourceFilters": Array [
          Object {
            "value": "tim*",
          },
        ],
      }
    }
    isSaving={true}
    items={
      Array [
        Object {
          "clientId": 1,
          "value": "tim*",
        },
      ]
    }
    saveFilter={[Function]}
  />
</div>
`;

exports[`SourceFiltersTable should show a delete modal 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "sourceFilters": Array [
          Object {
            "value": "tim*",
          },
        ],
      }
    }
    isSaving={false}
    items={
      Array [
        Object {
          "clientId": 1,
          "value": "tim*",
        },
      ]
    }
    saveFilter={[Function]}
  />
  <eui-overlay-mask>
    <eui-confirm-modal
      cancelButtonText={
        <FormattedMessage
          defaultMessage="Cancel"
          id="kbn.management.editIndexPattern.source.deleteFilter.cancelButtonLabel"
          values={Object {}}
        />
      }
      confirmButtonText={
        <FormattedMessage
          defaultMessage="Delete"
          id="kbn.management.editIndexPattern.source.deleteFilter.deleteButtonLabel"
          values={Object {}}
        />
      }
      onCancel={[Function]}
      onConfirm={[Function]}
      title={
        <FormattedMessage
          defaultMessage="Delete source filter '{value}'?"
          id="kbn.management.editIndexPattern.source.deleteSourceFilterLabel"
          values={
            Object {
              "value": "tim*",
            }
          }
        />
      }
    />
  </eui-overlay-mask>
</div>
`;

exports[`SourceFiltersTable should update a filter 1`] = `
<div>
  <header />
  <InjectIntl(AddFilterComponent)
    onAddFilter={[Function]}
  />
  <eui-spacer
    size="l"
  />
  <Table
    deleteFilter={[Function]}
    fieldWildcardMatcher={[Function]}
    indexPattern={
      Object {
        "save": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "sourceFilters": Array [
          Object {
            "clientId": 1,
            "value": "tim*",
          },
        ],
      }
    }
    isSaving={false}
    items={
      Array [
        Object {
          "clientId": 2,
          "value": "tim*",
        },
      ]
    }
    saveFilter={[Function]}
  />
</div>
`;
