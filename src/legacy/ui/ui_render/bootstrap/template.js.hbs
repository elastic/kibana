var kbnCsp = JSON.parse(document.querySelector('kbn-csp').getAttribute('data'));
window.__kbnStrictCsp__ = kbnCsp.strictCsp;
window.__kbnDarkMode__ = {{darkMode}};

if (window.__kbnStrictCsp__ && window.__kbnCspNotEnforced__) {
  var legacyBrowserError = document.getElementById('kbn_legacy_browser_error');
  legacyBrowserError.style.display = 'flex';
} else {
  if (!window.__kbnCspNotEnforced__ && window.console) {
    window.console.log("^ A single error about an inline script not firing due to content security policy is expected!");
  }
  var loadingMessage = document.getElementById('kbn_loading_message');
  loadingMessage.style.display = 'flex';

  window.onload = function () {
    function failure() {
      // make subsequent calls to failure() noop
      failure = function () {};

      var err = document.createElement('h1');
      err.style['color'] = 'white';
      err.style['font-family'] = 'monospace';
      err.style['text-align'] = 'center';
      err.style['background'] = '#F44336';
      err.style['padding'] = '25px';
      err.innerText = document.querySelector('[data-error-message]').dataset.errorMessage;

      document.body.innerHTML = err.outerHTML;
    }

    function loadStyleSheet(url, cb) {
      var dom = document.createElement('link');
      dom.addEventListener('error', failure);
      dom.setAttribute('rel', 'stylesheet');
      dom.setAttribute('type', 'text/css');
      dom.setAttribute('href', url);
      dom.addEventListener('load', cb);
      document.head.appendChild(dom);
    }

    function loadScript(url, cb) {
      var dom = document.createElement('script');
      dom.setAttribute('async', '');
      dom.addEventListener('error', failure);
      dom.setAttribute('src', url);
      dom.addEventListener('load', cb);
      document.head.appendChild(dom);
    }

    function load(urlSet, cb) {
      if (urlSet.deps) {
        load({ urls: urlSet.deps }, function () {
          load({ urls: urlSet.urls }, cb);
        });
        return;
      }

      var pending = urlSet.urls.length;
      urlSet.urls.forEach(function (url) {
        var innerCb = function () {
          pending = pending - 1;
          if (pending === 0 && typeof cb === 'function') {
            cb();
          }
        }

        if (typeof url !== 'string') {
          load(url, innerCb);
        } else if (url.slice(-4) === '.css') {
          loadStyleSheet(url, innerCb);
        } else {
          loadScript(url, innerCb);
        }
      });
    }

    load({
      deps: [
        {
          deps: [
            '{{dllBundlePath}}/vendors_runtime.bundle.dll.js'
          ],
          urls: [
            {{#each dllJsChunks}}
              '{{this}}',
            {{/each}}
          ]
        },
        '{{regularBundlePath}}/kbn-ui-shared-deps/{{sharedDepsFilename}}',
        '{{regularBundlePath}}/commons.bundle.js',
      ],
      urls: [
        '{{regularBundlePath}}/{{appId}}.bundle.js',
        {{#each styleSheetPaths}}
          '{{this}}',
        {{/each}},
      ]
    });
  };
}
