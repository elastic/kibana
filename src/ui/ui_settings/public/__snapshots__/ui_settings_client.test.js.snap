// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`#get after a get for an unknown property, the property is not persisted 1`] = `
"Unexpected \`config.get(\\"obscureProperty2\\")\` call on unrecognized configuration setting \\"obscureProperty2\\".
Setting an initial value via \`config.set(\\"obscureProperty2\\", value)\` before attempting to retrieve
any custom setting value for \\"obscureProperty2\\" may fix this issue.
You can use \`config.get(\\"obscureProperty2\\", defaultValue)\`, which will just return
\`defaultValue\` when the key is unrecognized."
`;

exports[`#get gives access to config values 1`] = `"Browser"`;

exports[`#get supports the default value overload 1`] = `"default"`;

exports[`#get throws on unknown properties that don't have a value yet. 1`] = `
"Unexpected \`config.get(\\"throwableProperty\\")\` call on unrecognized configuration setting \\"throwableProperty\\".
Setting an initial value via \`config.set(\\"throwableProperty\\", value)\` before attempting to retrieve
any custom setting value for \\"throwableProperty\\" may fix this issue.
You can use \`config.get(\\"throwableProperty\\", defaultValue)\`, which will just return
\`defaultValue\` when the key is unrecognized."
`;

exports[`#subscribe calls handler with { key, newValue, oldValue } when config changes 1`] = `
Array [
  Array [
    Object {
      "key": "foo",
      "newValue": "bar",
      "oldValue": undefined,
    },
  ],
]
`;

exports[`#subscribe calls handler with { key, newValue, oldValue } when config changes 2`] = `
Array [
  Array [
    Object {
      "key": "foo",
      "newValue": "baz",
      "oldValue": "bar",
    },
  ],
]
`;

exports[`#subscribe returns a subscription object which unsubs when .unsubscribe() is called 1`] = `
Array [
  Array [
    Object {
      "key": "foo",
      "newValue": "bar",
      "oldValue": undefined,
    },
  ],
]
`;
