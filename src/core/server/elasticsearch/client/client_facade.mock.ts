/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { ClientFacade } from './client_facade';

const createFacadeMock = () => {
  const mock: DeeplyMockedKeys<ClientFacade> = {
    /* GENERATED */
    asyncSearch: {
      delete: jest.fn(),
      get: jest.fn(),
      submit: jest.fn(),
    },
    autoscaling: {
      getAutoscalingDecision: jest.fn(),
    },
    bulk: jest.fn(),
    cat: {
      aliases: jest.fn(),
      allocation: jest.fn(),
      count: jest.fn(),
      fielddata: jest.fn(),
      health: jest.fn(),
      help: jest.fn(),
      indices: jest.fn(),
      master: jest.fn(),
      mlDataFrameAnalytics: jest.fn(),
      mlDatafeeds: jest.fn(),
      mlJobs: jest.fn(),
      mlTrainedModels: jest.fn(),
      nodeattrs: jest.fn(),
      nodes: jest.fn(),
      pendingTasks: jest.fn(),
      plugins: jest.fn(),
      recovery: jest.fn(),
      repositories: jest.fn(),
      segments: jest.fn(),
      shards: jest.fn(),
      snapshots: jest.fn(),
      tasks: jest.fn(),
      templates: jest.fn(),
      threadPool: jest.fn(),
      transforms: jest.fn(),
    },
    ccr: {
      deleteAutoFollowPattern: jest.fn(),
      follow: jest.fn(),
      followInfo: jest.fn(),
      followStats: jest.fn(),
      forgetFollower: jest.fn(),
      getAutoFollowPattern: jest.fn(),
      pauseAutoFollowPattern: jest.fn(),
      pauseFollow: jest.fn(),
      putAutoFollowPattern: jest.fn(),
      resumeAutoFollowPattern: jest.fn(),
      resumeFollow: jest.fn(),
      stats: jest.fn(),
      unfollow: jest.fn(),
    },
    clearScroll: jest.fn(),
    cluster: {
      allocationExplain: jest.fn(),
      deleteComponentTemplate: jest.fn(),
      getComponentTemplate: jest.fn(),
      getSettings: jest.fn(),
      health: jest.fn(),
      pendingTasks: jest.fn(),
      putComponentTemplate: jest.fn(),
      putSettings: jest.fn(),
      remoteInfo: jest.fn(),
      reroute: jest.fn(),
      state: jest.fn(),
      stats: jest.fn(),
    },
    count: jest.fn(),
    create: jest.fn(),
    delete: jest.fn(),
    deleteByQuery: jest.fn(),
    deleteByQueryRethrottle: jest.fn(),
    deleteScript: jest.fn(),
    enrich: {
      deletePolicy: jest.fn(),
      executePolicy: jest.fn(),
      getPolicy: jest.fn(),
      putPolicy: jest.fn(),
      stats: jest.fn(),
    },
    eql: {
      search: jest.fn(),
    },
    exists: jest.fn(),
    existsSource: jest.fn(),
    explain: jest.fn(),
    fieldCaps: jest.fn(),
    get: jest.fn(),
    getScript: jest.fn(),
    getScriptContext: jest.fn(),
    getScriptLanguages: jest.fn(),
    getSource: jest.fn(),
    graph: {
      explore: jest.fn(),
    },
    ilm: {
      deleteLifecycle: jest.fn(),
      explainLifecycle: jest.fn(),
      getLifecycle: jest.fn(),
      getStatus: jest.fn(),
      moveToStep: jest.fn(),
      putLifecycle: jest.fn(),
      removePolicy: jest.fn(),
      retry: jest.fn(),
      start: jest.fn(),
      stop: jest.fn(),
    },
    index: jest.fn(),
    indices: {
      analyze: jest.fn(),
      clearCache: jest.fn(),
      clone: jest.fn(),
      close: jest.fn(),
      create: jest.fn(),
      createDataStream: jest.fn(),
      delete: jest.fn(),
      deleteAlias: jest.fn(),
      deleteDataStream: jest.fn(),
      deleteTemplate: jest.fn(),
      exists: jest.fn(),
      existsAlias: jest.fn(),
      existsTemplate: jest.fn(),
      existsType: jest.fn(),
      flush: jest.fn(),
      flushSynced: jest.fn(),
      forcemerge: jest.fn(),
      freeze: jest.fn(),
      get: jest.fn(),
      getAlias: jest.fn(),
      getDataStreams: jest.fn(),
      getFieldMapping: jest.fn(),
      getMapping: jest.fn(),
      getSettings: jest.fn(),
      getTemplate: jest.fn(),
      getUpgrade: jest.fn(),
      open: jest.fn(),
      putAlias: jest.fn(),
      putMapping: jest.fn(),
      putSettings: jest.fn(),
      putTemplate: jest.fn(),
      recovery: jest.fn(),
      refresh: jest.fn(),
      reloadSearchAnalyzers: jest.fn(),
      rollover: jest.fn(),
      segments: jest.fn(),
      shardStores: jest.fn(),
      shrink: jest.fn(),
      split: jest.fn(),
      stats: jest.fn(),
      unfreeze: jest.fn(),
      updateAliases: jest.fn(),
      upgrade: jest.fn(),
      validateQuery: jest.fn(),
    },
    info: jest.fn(),
    ingest: {
      deletePipeline: jest.fn(),
      getPipeline: jest.fn(),
      processorGrok: jest.fn(),
      putPipeline: jest.fn(),
      simulate: jest.fn(),
    },
    license: {
      delete: jest.fn(),
      get: jest.fn(),
      getBasicStatus: jest.fn(),
      getTrialStatus: jest.fn(),
      post: jest.fn(),
      postStartBasic: jest.fn(),
      postStartTrial: jest.fn(),
    },
    mget: jest.fn(),
    migration: {
      deprecations: jest.fn(),
    },
    ml: {
      closeJob: jest.fn(),
      deleteCalendar: jest.fn(),
      deleteCalendarEvent: jest.fn(),
      deleteCalendarJob: jest.fn(),
      deleteDataFrameAnalytics: jest.fn(),
      deleteDatafeed: jest.fn(),
      deleteExpiredData: jest.fn(),
      deleteFilter: jest.fn(),
      deleteForecast: jest.fn(),
      deleteJob: jest.fn(),
      deleteModelSnapshot: jest.fn(),
      deleteTrainedModel: jest.fn(),
      estimateModelMemory: jest.fn(),
      evaluateDataFrame: jest.fn(),
      explainDataFrameAnalytics: jest.fn(),
      findFileStructure: jest.fn(),
      flushJob: jest.fn(),
      forecast: jest.fn(),
      getBuckets: jest.fn(),
      getCalendarEvents: jest.fn(),
      getCalendars: jest.fn(),
      getCategories: jest.fn(),
      getDataFrameAnalytics: jest.fn(),
      getDataFrameAnalyticsStats: jest.fn(),
      getDatafeedStats: jest.fn(),
      getDatafeeds: jest.fn(),
      getFilters: jest.fn(),
      getInfluencers: jest.fn(),
      getJobStats: jest.fn(),
      getJobs: jest.fn(),
      getModelSnapshots: jest.fn(),
      getOverallBuckets: jest.fn(),
      getRecords: jest.fn(),
      getTrainedModels: jest.fn(),
      getTrainedModelsStats: jest.fn(),
      info: jest.fn(),
      openJob: jest.fn(),
      postCalendarEvents: jest.fn(),
      postData: jest.fn(),
      previewDatafeed: jest.fn(),
      putCalendar: jest.fn(),
      putCalendarJob: jest.fn(),
      putDataFrameAnalytics: jest.fn(),
      putDatafeed: jest.fn(),
      putFilter: jest.fn(),
      putJob: jest.fn(),
      putTrainedModel: jest.fn(),
      revertModelSnapshot: jest.fn(),
      setUpgradeMode: jest.fn(),
      startDataFrameAnalytics: jest.fn(),
      startDatafeed: jest.fn(),
      stopDataFrameAnalytics: jest.fn(),
      stopDatafeed: jest.fn(),
      updateDatafeed: jest.fn(),
      updateFilter: jest.fn(),
      updateJob: jest.fn(),
      updateModelSnapshot: jest.fn(),
      validate: jest.fn(),
      validateDetector: jest.fn(),
    },
    monitoring: {
      bulk: jest.fn(),
    },
    msearch: jest.fn(),
    msearchTemplate: jest.fn(),
    mtermvectors: jest.fn(),
    nodes: {
      hotThreads: jest.fn(),
      info: jest.fn(),
      reloadSecureSettings: jest.fn(),
      stats: jest.fn(),
      usage: jest.fn(),
    },
    ping: jest.fn(),
    putScript: jest.fn(),
    rankEval: jest.fn(),
    reindex: jest.fn(),
    reindexRethrottle: jest.fn(),
    renderSearchTemplate: jest.fn(),
    rollup: {
      deleteJob: jest.fn(),
      getJobs: jest.fn(),
      getRollupCaps: jest.fn(),
      getRollupIndexCaps: jest.fn(),
      putJob: jest.fn(),
      rollupSearch: jest.fn(),
      startJob: jest.fn(),
      stopJob: jest.fn(),
    },
    scriptsPainlessExecute: jest.fn(),
    scroll: jest.fn(),
    search: jest.fn(),
    searchShards: jest.fn(),
    searchTemplate: jest.fn(),
    security: {
      authenticate: jest.fn(),
      changePassword: jest.fn(),
      clearCachedRealms: jest.fn(),
      clearCachedRoles: jest.fn(),
      createApiKey: jest.fn(),
      deletePrivileges: jest.fn(),
      deleteRole: jest.fn(),
      deleteRoleMapping: jest.fn(),
      deleteUser: jest.fn(),
      disableUser: jest.fn(),
      enableUser: jest.fn(),
      getApiKey: jest.fn(),
      getBuiltinPrivileges: jest.fn(),
      getPrivileges: jest.fn(),
      getRole: jest.fn(),
      getRoleMapping: jest.fn(),
      getToken: jest.fn(),
      getUser: jest.fn(),
      getUserPrivileges: jest.fn(),
      hasPrivileges: jest.fn(),
      invalidateApiKey: jest.fn(),
      invalidateToken: jest.fn(),
      putPrivileges: jest.fn(),
      putRole: jest.fn(),
      putRoleMapping: jest.fn(),
      putUser: jest.fn(),
    },
    slm: {
      deleteLifecycle: jest.fn(),
      executeLifecycle: jest.fn(),
      executeRetention: jest.fn(),
      getLifecycle: jest.fn(),
      getStats: jest.fn(),
      getStatus: jest.fn(),
      putLifecycle: jest.fn(),
      start: jest.fn(),
      stop: jest.fn(),
    },
    snapshot: {
      cleanupRepository: jest.fn(),
      create: jest.fn(),
      createRepository: jest.fn(),
      delete: jest.fn(),
      deleteRepository: jest.fn(),
      get: jest.fn(),
      getRepository: jest.fn(),
      restore: jest.fn(),
      status: jest.fn(),
      verifyRepository: jest.fn(),
    },
    sql: {
      clearCursor: jest.fn(),
      query: jest.fn(),
      translate: jest.fn(),
    },
    ssl: {
      certificates: jest.fn(),
    },
    tasks: {
      cancel: jest.fn(),
      get: jest.fn(),
      list: jest.fn(),
    },
    termvectors: jest.fn(),
    transform: {
      deleteTransform: jest.fn(),
      getTransform: jest.fn(),
      getTransformStats: jest.fn(),
      previewTransform: jest.fn(),
      putTransform: jest.fn(),
      startTransform: jest.fn(),
      stopTransform: jest.fn(),
      updateTransform: jest.fn(),
    },
    update: jest.fn(),
    updateByQuery: jest.fn(),
    updateByQueryRethrottle: jest.fn(),
    watcher: {
      ackWatch: jest.fn(),
      activateWatch: jest.fn(),
      deactivateWatch: jest.fn(),
      deleteWatch: jest.fn(),
      executeWatch: jest.fn(),
      getWatch: jest.fn(),
      putWatch: jest.fn(),
      start: jest.fn(),
      stats: jest.fn(),
      stop: jest.fn(),
    },
    xpack: {
      info: jest.fn(),
      usage: jest.fn(),
    },
    /* /GENERATED */
  };

  return mock;
};

export const clientFacadeMock = {
  create: createFacadeMock,
};
