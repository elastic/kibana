// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertLegacyTypes converts the legacy mappings using default values if no schemas are specified 1`] = `
Array [
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": undefined,
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldA": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeA",
    "namespaceType": "single",
  },
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": undefined,
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldB": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeB",
    "namespaceType": "single",
  },
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": undefined,
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldC": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeC",
    "namespaceType": "single",
  },
]
`;

exports[`convertLegacyTypes merges everything when all are present 1`] = `
Array [
  Object {
    "convertToAliasScript": undefined,
    "hidden": true,
    "indexPattern": "myIndex",
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldA": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {
      "1.0.0": [Function],
      "2.0.4": [Function],
    },
    "name": "typeA",
    "namespaceType": "agnostic",
  },
  Object {
    "convertToAliasScript": "some alias script",
    "hidden": false,
    "indexPattern": undefined,
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "anotherFieldB": Object {
          "type": "boolean",
        },
        "fieldB": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeB",
    "namespaceType": "single",
  },
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": undefined,
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldC": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {
      "1.5.3": [Function],
    },
    "name": "typeC",
    "namespaceType": "single",
  },
]
`;

exports[`convertLegacyTypes merges the mappings and the schema to create the type when schema exists for the type 1`] = `
Array [
  Object {
    "convertToAliasScript": undefined,
    "hidden": true,
    "indexPattern": "fooBar",
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldA": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeA",
    "namespaceType": "agnostic",
  },
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": "barBaz",
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldB": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeB",
    "namespaceType": "multiple",
  },
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": undefined,
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldC": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeC",
    "namespaceType": "single",
  },
  Object {
    "convertToAliasScript": undefined,
    "hidden": false,
    "indexPattern": "bazQux",
    "management": undefined,
    "mappings": Object {
      "properties": Object {
        "fieldD": Object {
          "type": "text",
        },
      },
    },
    "migrations": Object {},
    "name": "typeD",
    "namespaceType": "agnostic",
  },
]
`;
