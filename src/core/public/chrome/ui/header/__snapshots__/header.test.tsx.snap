// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header renders 1`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentActionMenu$": BehaviorSubject {
        "_isScalar": false,
        "_value": undefined,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "publicBaseUrl": undefined,
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "text": "test",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  breadcrumbsAppendExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Object {
        "baseUrl": "",
        "href": "",
        "id": "cloud-deployment-link",
        "title": "Manage cloud deployment",
        "url": "",
      },
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  headerBanner$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 0,
          "outerValue": undefined,
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": undefined,
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  kibanaDocLink="/docs"
  kibanaVersion="1.0.0"
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsCenter$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "",
          "href": "",
          "id": "kibana",
          "title": "kibana",
          "url": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "dashboard",
          "label": "dashboard",
          "link": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <HeaderTopBanner
    headerBanner$={
      BehaviorSubject {
        "_isScalar": false,
        "_value": undefined,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      }
    }
  />
  <header
    className="hide-for-sharing headerGlobalNav"
    data-test-subj="headerGlobalNav"
  >
    <div
      className="header__bars"
      id="globalHeaderBars"
    >
      <EuiHeader
        className="header__firstBar"
        position="fixed"
        sections={
          Array [
            Object {
              "borders": "none",
              "items": Array [
                <HeaderLogo
                  forceNavigation$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  href="/"
                  loadingCount$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": 0,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  navLinks$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [
                        Object {
                          "baseUrl": "",
                          "href": "",
                          "id": "kibana",
                          "title": "kibana",
                          "url": "",
                        },
                      ],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  navigateToApp={[MockFunction]}
                />,
              ],
            },
            Object {
              "borders": "none",
              "items": Array [
                <EuiShowFor
                  sizes={
                    Array [
                      "m",
                      "l",
                      "xl",
                    ]
                  }
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </EuiShowFor>,
              ],
            },
            Object {
              "borders": "none",
              "items": Array [
                <EuiHideFor
                  sizes={
                    Array [
                      "m",
                      "l",
                      "xl",
                    ]
                  }
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </EuiHideFor>,
                <HeaderHelpMenu
                  helpExtension$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": undefined,
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": undefined,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 0,
                          "outerValue": undefined,
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": undefined,
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": undefined,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  helpSupportUrl$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": undefined,
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": undefined,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 1,
                          "outerValue": undefined,
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": undefined,
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": undefined,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  kibanaDocLink="/docs"
                  kibanaVersion="1.0.0"
                  navigateToUrl={[MockFunction]}
                />,
                <HeaderNavControls
                  navControls$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                />,
              ],
            },
          ]
        }
        theme="dark"
      >
        <div
          className="euiHeader euiHeader--dark euiHeader--fixed header__firstBar"
        >
          <EuiHeaderSection
            key="items-0"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="none"
                key="0"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderLogo
                    forceNavigation$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": false,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    href="/"
                    loadingCount$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": 0,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navLinks$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [
                          Object {
                            "baseUrl": "",
                            "href": "",
                            "id": "kibana",
                            "title": "kibana",
                            "url": "",
                          },
                        ],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navigateToApp={[MockFunction]}
                  >
                    <a
                      aria-label="Elastic home"
                      className="euiHeaderLogo"
                      data-test-subj="logo"
                      href="/"
                      onClick={[Function]}
                    >
                      <LoadingIndicator
                        loadingCount$={
                          BehaviorSubject {
                            "_isScalar": false,
                            "_value": 0,
                            "closed": false,
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [
                              Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": [Circular],
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "thrownError": null,
                          }
                        }
                        showAsBar={false}
                      >
                        <EuiIcon
                          aria-label="Elastic Logo"
                          className="chrHeaderLogo__cluster"
                          data-test-subj="globalLoadingIndicator-hidden"
                          size="l"
                          type="logoElastic"
                        >
                          <span
                            aria-label="Elastic Logo"
                            className="chrHeaderLogo__cluster"
                            data-euiicon-type="logoElastic"
                            data-test-subj="globalLoadingIndicator-hidden"
                            size="l"
                          />
                        </EuiIcon>
                      </LoadingIndicator>
                      <ElasticMark
                        aria-hidden={true}
                        className="chrHeaderLogo__mark"
                      >
                        <svg
                          aria-hidden={true}
                          aria-labelledby="elasticMark"
                          className="chrHeaderLogo__mark"
                          fill="none"
                          height="19"
                          width="64"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title
                            id="elasticMark"
                          >
                            Elastic
                          </title>
                          <path
                            d="M9.74 16.882l.711-.076.046 1.455c-1.879.257-3.485.393-4.818.393-1.773 0-3.03-.515-3.773-1.545C1.164 16.08.8 14.473.8 12.306c0-4.333 1.727-6.5 5.167-6.5 1.666 0 2.909.47 3.727 1.394.818.924 1.227 2.394 1.227 4.379l-.106 1.409H2.664c0 1.364.242 2.379.742 3.03.5.652 1.349.985 2.576.985 1.242.03 2.485-.015 3.757-.121zm-.667-5.349c0-1.515-.243-2.59-.728-3.212-.484-.621-1.272-.94-2.363-.94s-1.924.334-2.47.986c-.545.651-.833 1.712-.848 3.166h6.409zM13.497 18.427V.7h1.848v17.727h-1.848zM27.027 9.806v6.076c0 .621 1.53.742 1.53.742l-.09 1.637c-1.303 0-2.38.106-3.03-.515a10.861 10.861 0 01-4.44.924c-1.136 0-2-.319-2.59-.97-.592-.636-.895-1.56-.895-2.773 0-1.197.303-2.09.91-2.651.605-.56 1.56-.925 2.863-1.046l3.879-.363v-1.06c0-.834-.182-1.44-.546-1.804-.363-.364-.863-.545-1.485-.545H18.27V5.82h4.742c1.394 0 2.41.318 3.046.97.651.636.97 1.651.97 3.015zm-7.606 5.03c0 1.516.621 2.273 1.879 2.273a9.89 9.89 0 003.303-.56l.56-.197v-4.076l-3.65.348c-.743.06-1.274.273-1.607.637-.333.363-.485.894-.485 1.575zM34.255 7.473c-1.788 0-2.697.62-2.697 1.879 0 .575.212.984.62 1.227.41.242 1.35.485 2.819.742 1.47.258 2.5.606 3.106 1.076.606.454.91 1.318.91 2.59 0 1.274-.41 2.198-1.228 2.789-.818.59-2 .894-3.576.894-1.015 0-4.424-.38-4.424-.38l.106-1.605c1.954.182 3.379.333 4.333.333.955 0 1.682-.151 2.182-.454.5-.303.758-.819.758-1.53 0-.713-.212-1.198-.637-1.455-.424-.258-1.363-.5-2.818-.728-1.455-.227-2.485-.56-3.09-1.015-.607-.439-.91-1.272-.91-2.47 0-1.196.424-2.09 1.273-2.666.848-.576 1.909-.864 3.166-.864 1 0 4.485.258 4.485.258v1.621c-1.833-.106-3.333-.242-4.379-.242zM47.952 7.685h-3.925v5.909c0 1.409.106 2.348.303 2.788.212.44.697.666 1.47.666l2.197-.151.121 1.53c-1.106.182-1.94.273-2.515.273-1.288 0-2.167-.318-2.667-.94-.5-.62-.742-1.818-.742-3.575v-6.5h-1.758V6.079h1.758V2.29h1.833v3.773h3.925v1.62zM50.527 3.276V1.139h1.849v2.152l-1.849-.015zm0 15.151V6.08h1.849v12.348h-1.849zM60.406 5.821c.546 0 1.47.106 2.773.303l.59.076-.075 1.5c-1.318-.152-2.288-.227-2.91-.227-1.393 0-2.348.333-2.848 1-.5.666-.757 1.909-.757 3.712 0 1.803.227 3.06.697 3.773.47.712 1.44 1.06 2.924 1.06l2.91-.227.075 1.53c-1.53.227-2.682.349-3.44.349-1.924 0-3.257-.5-3.984-1.485-.728-.985-1.106-2.652-1.106-5 0-2.349.393-4 1.181-4.94.803-.939 2.122-1.424 3.97-1.424z"
                          />
                        </svg>
                      </ElasticMark>
                    </a>
                  </HeaderLogo>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
          <EuiHeaderSection
            key="items-1"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="none"
                key="0"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <EuiShowFor
                    sizes={
                      Array [
                        "m",
                        "l",
                        "xl",
                      ]
                    }
                  >
                    <HeaderNavControls
                      navControls$={
                        BehaviorSubject {
                          "_isScalar": false,
                          "_value": Array [],
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        }
                      }
                    />
                  </EuiShowFor>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
          <EuiHeaderSection
            key="items-2"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="none"
                key="0"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <EuiHideFor
                    sizes={
                      Array [
                        "m",
                        "l",
                        "xl",
                      ]
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="none"
                key="1"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderHelpMenu
                    helpExtension$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 0,
                            "outerValue": undefined,
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    helpSupportUrl$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": "",
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 1,
                            "outerValue": undefined,
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    kibanaDocLink="/docs"
                    kibanaVersion="1.0.0"
                    navigateToUrl={[MockFunction]}
                  >
                    <EuiPopover
                      anchorPosition="downRight"
                      button={
                        <EuiHeaderSectionItemButton
                          aria-expanded={false}
                          aria-haspopup="true"
                          aria-label="Help menu"
                          onClick={[Function]}
                        >
                          <EuiIcon
                            size="m"
                            type="help"
                          />
                        </EuiHeaderSectionItemButton>
                      }
                      closePopover={[Function]}
                      data-test-subj="helpMenuButton"
                      display="inlineBlock"
                      hasArrow={true}
                      id="headerHelpMenu"
                      isOpen={false}
                      ownFocus={true}
                      panelPaddingSize="m"
                      repositionOnScroll={true}
                    >
                      <div
                        className="euiPopover euiPopover--anchorDownRight"
                        data-test-subj="helpMenuButton"
                        id="headerHelpMenu"
                      >
                        <div
                          className="euiPopover__anchor"
                        >
                          <EuiHeaderSectionItemButton
                            aria-expanded={false}
                            aria-haspopup="true"
                            aria-label="Help menu"
                            onClick={[Function]}
                          >
                            <EuiButtonEmpty
                              aria-expanded={false}
                              aria-haspopup="true"
                              aria-label="Help menu"
                              buttonRef={
                                Object {
                                  "current": <button
                                    aria-expanded="false"
                                    aria-haspopup="true"
                                    aria-label="Help menu"
                                    class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                    type="button"
                                  >
                                    <span
                                      class="euiButtonContent euiButtonEmpty__content"
                                    >
                                      <span
                                        class="euiButtonEmpty__text"
                                      >
                                        <span
                                          class="euiHeaderSectionItemButton__content"
                                        >
                                          <span
                                            data-euiicon-type="help"
                                          />
                                        </span>
                                      </span>
                                    </span>
                                  </button>,
                                }
                              }
                              className="euiHeaderSectionItemButton"
                              color="text"
                              onClick={[Function]}
                            >
                              <button
                                aria-expanded={false}
                                aria-haspopup="true"
                                aria-label="Help menu"
                                className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                <EuiButtonContent
                                  className="euiButtonEmpty__content"
                                  iconSide="left"
                                  iconSize="m"
                                  textProps={
                                    Object {
                                      "className": "euiButtonEmpty__text",
                                    }
                                  }
                                >
                                  <span
                                    className="euiButtonContent euiButtonEmpty__content"
                                  >
                                    <span
                                      className="euiButtonEmpty__text"
                                    >
                                      <span
                                        className="euiHeaderSectionItemButton__content"
                                      >
                                        <EuiIcon
                                          size="m"
                                          type="help"
                                        >
                                          <span
                                            data-euiicon-type="help"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </span>
                                    </span>
                                  </span>
                                </EuiButtonContent>
                              </button>
                            </EuiButtonEmpty>
                          </EuiHeaderSectionItemButton>
                        </div>
                      </div>
                    </EuiPopover>
                  </HeaderHelpMenu>
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="none"
                key="2"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
        </div>
      </EuiHeader>
      <EuiHeader
        className="header__secondBar"
        position="fixed"
      >
        <div
          className="euiHeader euiHeader--default euiHeader--fixed header__secondBar"
        >
          <EuiHeaderSection
            grow={false}
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="right"
                className="header__toggleNavButtonSection"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight header__toggleNavButtonSection"
                >
                  <CollapsibleNav
                    appId$={
                      Observable {
                        "_isScalar": false,
                        "source": Subject {
                          "_isScalar": false,
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        },
                      }
                    }
                    basePath={
                      BasePath {
                        "basePath": "/test",
                        "get": [Function],
                        "prepend": [Function],
                        "publicBaseUrl": undefined,
                        "remove": [Function],
                        "serverBasePath": "/test",
                      }
                    }
                    button={
                      <EuiHeaderSectionItemButton
                        aria-controls="mockId"
                        aria-expanded={false}
                        aria-label="Toggle primary navigation"
                        aria-pressed={false}
                        data-test-subj="toggleNavButton"
                        onClick={[Function]}
                      >
                        <EuiIcon
                          size="m"
                          type="menu"
                        />
                      </EuiHeaderSectionItemButton>
                    }
                    closeNav={[Function]}
                    customNavLink$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Object {
                          "baseUrl": "",
                          "href": "",
                          "id": "cloud-deployment-link",
                          "title": "Manage cloud deployment",
                          "url": "",
                        },
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    homeHref="/"
                    id="mockId"
                    isLocked={true}
                    isNavOpen={false}
                    navLinks$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [
                          Object {
                            "baseUrl": "",
                            "href": "",
                            "id": "kibana",
                            "title": "kibana",
                            "url": "",
                          },
                        ],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navigateToApp={[MockFunction]}
                    navigateToUrl={[MockFunction]}
                    onIsLockedUpdate={[Function]}
                    recentlyAccessed$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [
                          Object {
                            "id": "dashboard",
                            "label": "dashboard",
                            "link": "",
                          },
                        ],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  >
                    <EuiCollapsibleNav
                      aria-label="Primary"
                      button={
                        <EuiHeaderSectionItemButton
                          aria-controls="mockId"
                          aria-expanded={false}
                          aria-label="Toggle primary navigation"
                          aria-pressed={false}
                          data-test-subj="toggleNavButton"
                          onClick={[Function]}
                        >
                          <EuiIcon
                            size="m"
                            type="menu"
                          />
                        </EuiHeaderSectionItemButton>
                      }
                      data-test-subj="collapsibleNav"
                      id="mockId"
                      isOpen={false}
                      onClose={[Function]}
                      ownFocus={false}
                      size={240}
                    >
                      <EuiHeaderSectionItemButton
                        aria-controls="mockId"
                        aria-expanded={false}
                        aria-label="Toggle primary navigation"
                        aria-pressed={false}
                        data-test-subj="toggleNavButton"
                        onClick={[Function]}
                        onMouseUpCapture={[Function]}
                        onTouchEnd={[Function]}
                      >
                        <EuiButtonEmpty
                          aria-controls="mockId"
                          aria-expanded={false}
                          aria-label="Toggle primary navigation"
                          aria-pressed={false}
                          buttonRef={
                            Object {
                              "current": <button
                                aria-controls="mockId"
                                aria-expanded="false"
                                aria-label="Toggle primary navigation"
                                aria-pressed="false"
                                class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                data-test-subj="toggleNavButton"
                                type="button"
                              >
                                <span
                                  class="euiButtonContent euiButtonEmpty__content"
                                >
                                  <span
                                    class="euiButtonEmpty__text"
                                  >
                                    <span
                                      class="euiHeaderSectionItemButton__content"
                                    >
                                      <span
                                        data-euiicon-type="menu"
                                      />
                                    </span>
                                  </span>
                                </span>
                              </button>,
                            }
                          }
                          className="euiHeaderSectionItemButton"
                          color="text"
                          data-test-subj="toggleNavButton"
                          onClick={[Function]}
                          onMouseUpCapture={[Function]}
                          onTouchEnd={[Function]}
                        >
                          <button
                            aria-controls="mockId"
                            aria-expanded={false}
                            aria-label="Toggle primary navigation"
                            aria-pressed={false}
                            className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                            data-test-subj="toggleNavButton"
                            disabled={false}
                            onClick={[Function]}
                            onMouseUpCapture={[Function]}
                            onTouchEnd={[Function]}
                            type="button"
                          >
                            <EuiButtonContent
                              className="euiButtonEmpty__content"
                              iconSide="left"
                              iconSize="m"
                              textProps={
                                Object {
                                  "className": "euiButtonEmpty__text",
                                }
                              }
                            >
                              <span
                                className="euiButtonContent euiButtonEmpty__content"
                              >
                                <span
                                  className="euiButtonEmpty__text"
                                >
                                  <span
                                    className="euiHeaderSectionItemButton__content"
                                  >
                                    <EuiIcon
                                      size="m"
                                      type="menu"
                                    >
                                      <span
                                        data-euiicon-type="menu"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </span>
                                </span>
                              </span>
                            </EuiButtonContent>
                          </button>
                        </EuiButtonEmpty>
                      </EuiHeaderSectionItemButton>
                    </EuiCollapsibleNav>
                  </CollapsibleNav>
                </div>
              </EuiHeaderSectionItem>
              <HeaderNavControls
                navControls$={
                  BehaviorSubject {
                    "_isScalar": false,
                    "_value": Array [],
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [
                      Subscriber {
                        "_parentOrParents": null,
                        "_subscriptions": Array [
                          SubjectSubscription {
                            "_parentOrParents": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "subject": [Circular],
                            "subscriber": [Circular],
                          },
                        ],
                        "closed": false,
                        "destination": SafeSubscriber {
                          "_complete": undefined,
                          "_context": [Circular],
                          "_error": undefined,
                          "_next": [Function],
                          "_parentOrParents": null,
                          "_parentSubscriber": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "isStopped": false,
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        "isStopped": false,
                        "syncErrorThrowable": true,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                    ],
                    "thrownError": null,
                  }
                }
                side="left"
              />
            </div>
          </EuiHeaderSection>
          <HeaderBreadcrumbs
            appTitle$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": "test",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
            breadcrumbs$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": Array [
                  Object {
                    "text": "test",
                  },
                ],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
          >
            <EuiHeaderBreadcrumbs
              breadcrumbs={
                Array [
                  Object {
                    "data-test-subj": "breadcrumb first last",
                    "text": "test",
                  },
                ]
              }
              data-test-subj="breadcrumbs"
              max={10}
            >
              <EuiBreadcrumbs
                breadcrumbs={
                  Array [
                    Object {
                      "data-test-subj": "breadcrumb first last",
                      "text": "test",
                    },
                  ]
                }
                className="euiHeaderBreadcrumbs"
                data-test-subj="breadcrumbs"
                max={10}
                truncate={true}
              >
                <nav
                  aria-label="breadcrumb"
                  className="euiBreadcrumbs euiHeaderBreadcrumbs euiBreadcrumbs--truncate"
                  data-test-subj="breadcrumbs"
                >
                  <EuiInnerText>
                    <span
                      aria-current="page"
                      className="euiBreadcrumb euiBreadcrumb--last"
                      data-test-subj="breadcrumb first last"
                      title="test"
                    >
                      test
                    </span>
                  </EuiInnerText>
                </nav>
              </EuiBreadcrumbs>
            </EuiHeaderBreadcrumbs>
          </HeaderBreadcrumbs>
          <HeaderBadge
            badge$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
          />
          <EuiHeaderSection
            side="right"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--right"
            >
              <EuiHeaderSectionItem
                border="none"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderActionMenu
                    actionMenu$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  >
                    <div
                      data-test-subj="headerAppActionMenu"
                    />
                  </HeaderActionMenu>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
        </div>
      </EuiHeader>
    </div>
  </header>
</Header>
`;
