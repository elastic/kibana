// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header renders 1`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "text": "test",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  kibanaDocLink="/docs"
  kibanaVersion="1.0.0"
  legacyMode={false}
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "",
          "id": "kibana",
          "legacy": false,
          "title": "kibana",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  navType$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "modern",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "dashboard",
          "label": "dashboard",
          "link": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
>
  <LoadingIndicator
    loadingCount$={
      BehaviorSubject {
        "_isScalar": false,
        "_value": 0,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      }
    }
  >
    <div
      className="kbnLoadingIndicator hidden"
      data-test-subj="globalLoadingIndicator-hidden"
    >
      <div
        className="kbnLoadingIndicator__bar essentialAnimation"
      />
    </div>
  </LoadingIndicator>
</Header>
`;

exports[`Header renders 2`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "text": "test",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 0,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": undefined,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": undefined,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  kibanaDocLink="/docs"
  kibanaVersion="1.0.0"
  legacyMode={false}
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "",
          "id": "kibana",
          "legacy": false,
          "title": "kibana",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navType$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "modern",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "dashboard",
          "label": "dashboard",
          "link": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <LoadingIndicator
    loadingCount$={
      BehaviorSubject {
        "_isScalar": false,
        "_value": 0,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      }
    }
  >
    <div
      className="kbnLoadingIndicator hidden"
      data-test-subj="globalLoadingIndicator-hidden"
    >
      <div
        className="kbnLoadingIndicator__bar essentialAnimation"
      />
    </div>
  </LoadingIndicator>
  <header
    className="chrHeaderWrapper hide-for-sharing headerWrapper"
    data-test-subj="headerGlobalNav"
  >
    <EuiHeader
      position="fixed"
    >
      <div
        className="euiHeader euiHeader--default euiHeader--fixed"
      >
        <EuiHeaderSection
          grow={false}
        >
          <div
            className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
          >
            <EuiHeaderSectionItem
              border="right"
              className="header__toggleNavButtonSection"
            >
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderRight header__toggleNavButtonSection"
              >
                <EuiHeaderSectionItemButton
                  aria-controls="mockId"
                  aria-expanded={false}
                  aria-label="Toggle primary navigation"
                  aria-pressed={false}
                  data-test-subj="toggleNavButton"
                  onClick={[Function]}
                >
                  <button
                    aria-controls="mockId"
                    aria-expanded={false}
                    aria-label="Toggle primary navigation"
                    aria-pressed={false}
                    className="euiHeaderSectionItem__button"
                    data-test-subj="toggleNavButton"
                    onClick={[Function]}
                    type="button"
                  >
                    <EuiIcon
                      size="m"
                      type="menu"
                    >
                      <div
                        data-euiicon-type="menu"
                        size="m"
                      />
                    </EuiIcon>
                  </button>
                </EuiHeaderSectionItemButton>
              </div>
            </EuiHeaderSectionItem>
            <EuiHeaderSectionItem
              border="right"
            >
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
              >
                <HeaderLogo
                  forceNavigation$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  href="/"
                  navLinks$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [
                        Object {
                          "baseUrl": "",
                          "id": "kibana",
                          "legacy": false,
                          "title": "kibana",
                        },
                      ],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  navigateToApp={[MockFunction]}
                >
                  <EuiHeaderLogo
                    aria-label="Go to home page"
                    data-test-subj="logo"
                    href="/"
                    iconType="logoElastic"
                    onClick={[Function]}
                  >
                    <a
                      aria-label="Go to home page"
                      className="euiHeaderLogo"
                      data-test-subj="logo"
                      href="/"
                      onClick={[Function]}
                      rel="noreferrer"
                    >
                      <EuiIcon
                        aria-label="Elastic"
                        className="euiHeaderLogo__icon"
                        size="l"
                        type="logoElastic"
                      >
                        <div
                          aria-label="Elastic"
                          className="euiHeaderLogo__icon"
                          data-euiicon-type="logoElastic"
                          size="l"
                        />
                      </EuiIcon>
                    </a>
                  </EuiHeaderLogo>
                </HeaderLogo>
              </div>
            </EuiHeaderSectionItem>
            <HeaderNavControls
              navControls$={
                BehaviorSubject {
                  "_isScalar": false,
                  "_value": Array [],
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    Subscriber {
                      "_parentOrParents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": SafeSubscriber {
                        "_complete": undefined,
                        "_context": [Circular],
                        "_error": undefined,
                        "_next": [Function],
                        "_parentOrParents": null,
                        "_parentSubscriber": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "destination": Object {
                          "closed": true,
                          "complete": [Function],
                          "error": [Function],
                          "next": [Function],
                        },
                        "isStopped": false,
                        "syncErrorThrowable": false,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "isStopped": false,
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                }
              }
              side="left"
            />
          </div>
        </EuiHeaderSection>
        <HeaderBreadcrumbs
          appTitle$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": "test",
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
          breadcrumbs$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": Array [
                Object {
                  "text": "test",
                },
              ],
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
        >
          <EuiHeaderBreadcrumbs
            breadcrumbs={
              Array [
                Object {
                  "data-test-subj": "breadcrumb first last",
                  "text": "test",
                },
              ]
            }
            data-test-subj="breadcrumbs"
            max={10}
          >
            <EuiBreadcrumbs
              breadcrumbs={
                Array [
                  Object {
                    "data-test-subj": "breadcrumb first last",
                    "text": "test",
                  },
                ]
              }
              className="euiHeaderBreadcrumbs"
              data-test-subj="breadcrumbs"
              max={10}
              truncate={true}
            >
              <nav
                aria-label="breadcrumb"
                className="euiBreadcrumbs euiHeaderBreadcrumbs euiBreadcrumbs--truncate euiBreadcrumbs--responsive"
                data-test-subj="breadcrumbs"
              >
                <EuiInnerText>
                  <span
                    aria-current="page"
                    className="euiBreadcrumb euiBreadcrumb--last"
                    data-test-subj="breadcrumb first last"
                    title="test"
                  >
                    test
                  </span>
                </EuiInnerText>
              </nav>
            </EuiBreadcrumbs>
          </EuiHeaderBreadcrumbs>
        </HeaderBreadcrumbs>
        <HeaderBadge
          badge$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": undefined,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
        />
        <EuiHeaderSection
          side="right"
        >
          <div
            className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--right"
          >
            <EuiHeaderSectionItem>
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
              >
                <InjectIntl(HeaderHelpMenuUI)
                  helpExtension$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 0,
                          "outerValue": [Circular],
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  helpSupportUrl$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 1,
                          "outerValue": [Circular],
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  kibanaDocLink="/docs"
                  kibanaVersion="1.0.0"
                  useDefaultContent={true}
                >
                  <HeaderHelpMenuUI
                    helpExtension$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 0,
                            "outerValue": [Circular],
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    helpSupportUrl$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": "",
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 1,
                            "outerValue": [Circular],
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {
                          "date": Object {
                            "full": Object {
                              "day": "numeric",
                              "month": "long",
                              "weekday": "long",
                              "year": "numeric",
                            },
                            "long": Object {
                              "day": "numeric",
                              "month": "long",
                              "year": "numeric",
                            },
                            "medium": Object {
                              "day": "numeric",
                              "month": "short",
                              "year": "numeric",
                            },
                            "short": Object {
                              "day": "numeric",
                              "month": "numeric",
                              "year": "2-digit",
                            },
                          },
                          "number": Object {
                            "currency": Object {
                              "style": "currency",
                            },
                            "percent": Object {
                              "style": "percent",
                            },
                          },
                          "relative": Object {
                            "days": Object {
                              "units": "day",
                            },
                            "hours": Object {
                              "units": "hour",
                            },
                            "minutes": Object {
                              "units": "minute",
                            },
                            "months": Object {
                              "units": "month",
                            },
                            "seconds": Object {
                              "units": "second",
                            },
                            "years": Object {
                              "units": "year",
                            },
                          },
                          "time": Object {
                            "full": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                              "timeZoneName": "short",
                            },
                            "long": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                              "timeZoneName": "short",
                            },
                            "medium": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                            },
                            "short": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                            },
                          },
                        },
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": Object {},
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": Symbol(react.fragment),
                        "timeZone": null,
                      }
                    }
                    kibanaDocLink="/docs"
                    kibanaVersion="1.0.0"
                    useDefaultContent={true}
                  >
                    <EuiPopover
                      anchorPosition="downRight"
                      button={
                        <EuiHeaderSectionItemButton
                          aria-expanded={false}
                          aria-haspopup="true"
                          aria-label="Help menu"
                          onClick={[Function]}
                        >
                          <EuiIcon
                            size="m"
                            type="help"
                          />
                        </EuiHeaderSectionItemButton>
                      }
                      closePopover={[Function]}
                      data-test-subj="helpMenuButton"
                      display="inlineBlock"
                      hasArrow={true}
                      id="headerHelpMenu"
                      isOpen={false}
                      ownFocus={true}
                      panelPaddingSize="m"
                      repositionOnScroll={true}
                    >
                      <EuiOutsideClickDetector
                        isDisabled={true}
                        onOutsideClick={[Function]}
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownRight"
                          data-test-subj="helpMenuButton"
                          id="headerHelpMenu"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchStart={[Function]}
                        >
                          <div
                            className="euiPopover__anchor"
                          >
                            <EuiHeaderSectionItemButton
                              aria-expanded={false}
                              aria-haspopup="true"
                              aria-label="Help menu"
                              onClick={[Function]}
                            >
                              <button
                                aria-expanded={false}
                                aria-haspopup="true"
                                aria-label="Help menu"
                                className="euiHeaderSectionItem__button"
                                onClick={[Function]}
                                type="button"
                              >
                                <EuiIcon
                                  size="m"
                                  type="help"
                                >
                                  <div
                                    data-euiicon-type="help"
                                    size="m"
                                  />
                                </EuiIcon>
                              </button>
                            </EuiHeaderSectionItemButton>
                          </div>
                        </div>
                      </EuiOutsideClickDetector>
                    </EuiPopover>
                  </HeaderHelpMenuUI>
                </InjectIntl(HeaderHelpMenuUI)>
              </div>
            </EuiHeaderSectionItem>
            <HeaderNavControls
              navControls$={
                BehaviorSubject {
                  "_isScalar": false,
                  "_value": Array [],
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    Subscriber {
                      "_parentOrParents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": SafeSubscriber {
                        "_complete": undefined,
                        "_context": [Circular],
                        "_error": undefined,
                        "_next": [Function],
                        "_parentOrParents": null,
                        "_parentSubscriber": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "destination": Object {
                          "closed": true,
                          "complete": [Function],
                          "error": [Function],
                          "next": [Function],
                        },
                        "isStopped": false,
                        "syncErrorThrowable": false,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "isStopped": false,
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                }
              }
              side="right"
            />
          </div>
        </EuiHeaderSection>
      </div>
    </EuiHeader>
    <CollapsibleNav
      appId$={
        Observable {
          "_isScalar": false,
          "source": Subject {
            "_isScalar": false,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [
              Subscriber {
                "_parentOrParents": null,
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": [Circular],
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": SafeSubscriber {
                  "_complete": undefined,
                  "_context": [Circular],
                  "_error": undefined,
                  "_next": [Function],
                  "_parentOrParents": null,
                  "_parentSubscriber": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "isStopped": false,
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "thrownError": null,
          },
        }
      }
      basePath={
        BasePath {
          "basePath": "/test",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "/test",
        }
      }
      closeNav={[Function]}
      homeHref="/"
      id="mockId"
      isLocked={false}
      isOpen={false}
      legacyMode={false}
      navLinks$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "baseUrl": "",
              "id": "kibana",
              "legacy": false,
              "title": "kibana",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      navigateToApp={[MockFunction]}
      onIsLockedUpdate={[Function]}
      recentlyAccessed$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "id": "dashboard",
              "label": "dashboard",
              "link": "",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
    >
      <EuiCollapsibleNav
        aria-label="Primary"
        data-test-subj="collapsibleNav"
        id="mockId"
        isDocked={false}
        isOpen={false}
        onClose={[Function]}
      />
    </CollapsibleNav>
  </header>
</Header>
`;

exports[`Header renders 3`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "text": "test",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 0,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": undefined,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": undefined,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  kibanaDocLink="/docs"
  kibanaVersion="1.0.0"
  legacyMode={false}
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "",
          "id": "kibana",
          "legacy": false,
          "title": "kibana",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navType$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "modern",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "dashboard",
          "label": "dashboard",
          "link": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <LoadingIndicator
    loadingCount$={
      BehaviorSubject {
        "_isScalar": false,
        "_value": 0,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      }
    }
  >
    <div
      className="kbnLoadingIndicator hidden"
      data-test-subj="globalLoadingIndicator-hidden"
    >
      <div
        className="kbnLoadingIndicator__bar essentialAnimation"
      />
    </div>
  </LoadingIndicator>
  <header
    className="chrHeaderWrapper hide-for-sharing chrHeaderWrapper--navIsLocked headerWrapper"
    data-test-subj="headerGlobalNav"
  >
    <EuiHeader
      position="fixed"
    >
      <div
        className="euiHeader euiHeader--default euiHeader--fixed"
      >
        <EuiHeaderSection
          grow={false}
        >
          <div
            className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
          >
            <EuiHeaderSectionItem
              border="right"
              className="header__toggleNavButtonSection"
            >
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderRight header__toggleNavButtonSection"
              >
                <EuiHeaderSectionItemButton
                  aria-controls="mockId"
                  aria-expanded={false}
                  aria-label="Toggle primary navigation"
                  aria-pressed={false}
                  data-test-subj="toggleNavButton"
                  onClick={[Function]}
                >
                  <button
                    aria-controls="mockId"
                    aria-expanded={false}
                    aria-label="Toggle primary navigation"
                    aria-pressed={false}
                    className="euiHeaderSectionItem__button"
                    data-test-subj="toggleNavButton"
                    onClick={[Function]}
                    type="button"
                  >
                    <EuiIcon
                      size="m"
                      type="menu"
                    >
                      <div
                        data-euiicon-type="menu"
                        size="m"
                      />
                    </EuiIcon>
                  </button>
                </EuiHeaderSectionItemButton>
              </div>
            </EuiHeaderSectionItem>
            <EuiHeaderSectionItem
              border="right"
            >
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
              >
                <HeaderLogo
                  forceNavigation$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  href="/"
                  navLinks$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [
                        Object {
                          "baseUrl": "",
                          "id": "kibana",
                          "legacy": false,
                          "title": "kibana",
                        },
                      ],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  navigateToApp={[MockFunction]}
                >
                  <EuiHeaderLogo
                    aria-label="Go to home page"
                    data-test-subj="logo"
                    href="/"
                    iconType="logoElastic"
                    onClick={[Function]}
                  >
                    <a
                      aria-label="Go to home page"
                      className="euiHeaderLogo"
                      data-test-subj="logo"
                      href="/"
                      onClick={[Function]}
                      rel="noreferrer"
                    >
                      <EuiIcon
                        aria-label="Elastic"
                        className="euiHeaderLogo__icon"
                        size="l"
                        type="logoElastic"
                      >
                        <div
                          aria-label="Elastic"
                          className="euiHeaderLogo__icon"
                          data-euiicon-type="logoElastic"
                          size="l"
                        />
                      </EuiIcon>
                    </a>
                  </EuiHeaderLogo>
                </HeaderLogo>
              </div>
            </EuiHeaderSectionItem>
            <HeaderNavControls
              navControls$={
                BehaviorSubject {
                  "_isScalar": false,
                  "_value": Array [],
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    Subscriber {
                      "_parentOrParents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": SafeSubscriber {
                        "_complete": undefined,
                        "_context": [Circular],
                        "_error": undefined,
                        "_next": [Function],
                        "_parentOrParents": null,
                        "_parentSubscriber": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "destination": Object {
                          "closed": true,
                          "complete": [Function],
                          "error": [Function],
                          "next": [Function],
                        },
                        "isStopped": false,
                        "syncErrorThrowable": false,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "isStopped": false,
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                }
              }
              side="left"
            />
          </div>
        </EuiHeaderSection>
        <HeaderBreadcrumbs
          appTitle$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": "test",
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
          breadcrumbs$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": Array [
                Object {
                  "text": "test",
                },
              ],
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
        >
          <EuiHeaderBreadcrumbs
            breadcrumbs={
              Array [
                Object {
                  "data-test-subj": "breadcrumb first last",
                  "text": "test",
                },
              ]
            }
            data-test-subj="breadcrumbs"
            max={10}
          >
            <EuiBreadcrumbs
              breadcrumbs={
                Array [
                  Object {
                    "data-test-subj": "breadcrumb first last",
                    "text": "test",
                  },
                ]
              }
              className="euiHeaderBreadcrumbs"
              data-test-subj="breadcrumbs"
              max={10}
              truncate={true}
            >
              <nav
                aria-label="breadcrumb"
                className="euiBreadcrumbs euiHeaderBreadcrumbs euiBreadcrumbs--truncate euiBreadcrumbs--responsive"
                data-test-subj="breadcrumbs"
              >
                <EuiInnerText>
                  <span
                    aria-current="page"
                    className="euiBreadcrumb euiBreadcrumb--last"
                    data-test-subj="breadcrumb first last"
                    title="test"
                  >
                    test
                  </span>
                </EuiInnerText>
              </nav>
            </EuiBreadcrumbs>
          </EuiHeaderBreadcrumbs>
        </HeaderBreadcrumbs>
        <HeaderBadge
          badge$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": undefined,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
        />
        <EuiHeaderSection
          side="right"
        >
          <div
            className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--right"
          >
            <EuiHeaderSectionItem>
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
              >
                <InjectIntl(HeaderHelpMenuUI)
                  helpExtension$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 0,
                          "outerValue": [Circular],
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  helpSupportUrl$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 1,
                          "outerValue": [Circular],
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  kibanaDocLink="/docs"
                  kibanaVersion="1.0.0"
                  useDefaultContent={true}
                >
                  <HeaderHelpMenuUI
                    helpExtension$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 0,
                            "outerValue": [Circular],
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    helpSupportUrl$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": "",
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 1,
                            "outerValue": [Circular],
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {
                          "date": Object {
                            "full": Object {
                              "day": "numeric",
                              "month": "long",
                              "weekday": "long",
                              "year": "numeric",
                            },
                            "long": Object {
                              "day": "numeric",
                              "month": "long",
                              "year": "numeric",
                            },
                            "medium": Object {
                              "day": "numeric",
                              "month": "short",
                              "year": "numeric",
                            },
                            "short": Object {
                              "day": "numeric",
                              "month": "numeric",
                              "year": "2-digit",
                            },
                          },
                          "number": Object {
                            "currency": Object {
                              "style": "currency",
                            },
                            "percent": Object {
                              "style": "percent",
                            },
                          },
                          "relative": Object {
                            "days": Object {
                              "units": "day",
                            },
                            "hours": Object {
                              "units": "hour",
                            },
                            "minutes": Object {
                              "units": "minute",
                            },
                            "months": Object {
                              "units": "month",
                            },
                            "seconds": Object {
                              "units": "second",
                            },
                            "years": Object {
                              "units": "year",
                            },
                          },
                          "time": Object {
                            "full": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                              "timeZoneName": "short",
                            },
                            "long": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                              "timeZoneName": "short",
                            },
                            "medium": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                            },
                            "short": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                            },
                          },
                        },
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": Object {},
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": Symbol(react.fragment),
                        "timeZone": null,
                      }
                    }
                    kibanaDocLink="/docs"
                    kibanaVersion="1.0.0"
                    useDefaultContent={true}
                  >
                    <EuiPopover
                      anchorPosition="downRight"
                      button={
                        <EuiHeaderSectionItemButton
                          aria-expanded={false}
                          aria-haspopup="true"
                          aria-label="Help menu"
                          onClick={[Function]}
                        >
                          <EuiIcon
                            size="m"
                            type="help"
                          />
                        </EuiHeaderSectionItemButton>
                      }
                      closePopover={[Function]}
                      data-test-subj="helpMenuButton"
                      display="inlineBlock"
                      hasArrow={true}
                      id="headerHelpMenu"
                      isOpen={false}
                      ownFocus={true}
                      panelPaddingSize="m"
                      repositionOnScroll={true}
                    >
                      <EuiOutsideClickDetector
                        isDisabled={true}
                        onOutsideClick={[Function]}
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownRight"
                          data-test-subj="helpMenuButton"
                          id="headerHelpMenu"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchStart={[Function]}
                        >
                          <div
                            className="euiPopover__anchor"
                          >
                            <EuiHeaderSectionItemButton
                              aria-expanded={false}
                              aria-haspopup="true"
                              aria-label="Help menu"
                              onClick={[Function]}
                            >
                              <button
                                aria-expanded={false}
                                aria-haspopup="true"
                                aria-label="Help menu"
                                className="euiHeaderSectionItem__button"
                                onClick={[Function]}
                                type="button"
                              >
                                <EuiIcon
                                  size="m"
                                  type="help"
                                >
                                  <div
                                    data-euiicon-type="help"
                                    size="m"
                                  />
                                </EuiIcon>
                              </button>
                            </EuiHeaderSectionItemButton>
                          </div>
                        </div>
                      </EuiOutsideClickDetector>
                    </EuiPopover>
                  </HeaderHelpMenuUI>
                </InjectIntl(HeaderHelpMenuUI)>
              </div>
            </EuiHeaderSectionItem>
            <HeaderNavControls
              navControls$={
                BehaviorSubject {
                  "_isScalar": false,
                  "_value": Array [],
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    Subscriber {
                      "_parentOrParents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": SafeSubscriber {
                        "_complete": undefined,
                        "_context": [Circular],
                        "_error": undefined,
                        "_next": [Function],
                        "_parentOrParents": null,
                        "_parentSubscriber": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "destination": Object {
                          "closed": true,
                          "complete": [Function],
                          "error": [Function],
                          "next": [Function],
                        },
                        "isStopped": false,
                        "syncErrorThrowable": false,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "isStopped": false,
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                }
              }
              side="right"
            />
          </div>
        </EuiHeaderSection>
      </div>
    </EuiHeader>
    <CollapsibleNav
      appId$={
        Observable {
          "_isScalar": false,
          "source": Subject {
            "_isScalar": false,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [
              Subscriber {
                "_parentOrParents": null,
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": [Circular],
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": SafeSubscriber {
                  "_complete": undefined,
                  "_context": [Circular],
                  "_error": undefined,
                  "_next": [Function],
                  "_parentOrParents": null,
                  "_parentSubscriber": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "isStopped": false,
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "thrownError": null,
          },
        }
      }
      basePath={
        BasePath {
          "basePath": "/test",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "/test",
        }
      }
      closeNav={[Function]}
      homeHref="/"
      id="mockId"
      isLocked={true}
      isOpen={false}
      legacyMode={false}
      navLinks$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "baseUrl": "",
              "id": "kibana",
              "legacy": false,
              "title": "kibana",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      navigateToApp={[MockFunction]}
      onIsLockedUpdate={[Function]}
      recentlyAccessed$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "id": "dashboard",
              "label": "dashboard",
              "link": "",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
    >
      <EuiCollapsibleNav
        aria-label="Primary"
        data-test-subj="collapsibleNav"
        id="mockId"
        isDocked={true}
        isOpen={false}
        onClose={[Function]}
      >
        <EuiWindowEvent
          event="keydown"
          handler={[Function]}
        />
        <EuiFocusTrap
          clickOutsideDisables={true}
          disabled={true}
        >
          <EuiOutsideClickDetector
            isDisabled={true}
            onOutsideClick={[Function]}
          >
            <OutsideEventDetector
              handleEvent={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchStart={[Function]}
            >
              <div
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchStart={[Function]}
              >
                <FocusLock
                  as="div"
                  autoFocus={true}
                  disabled={true}
                  lockProps={
                    Object {
                      "style": undefined,
                    }
                  }
                  noFocusGuards={false}
                  persistentFocus={false}
                  returnFocus={true}
                >
                  <div
                    data-focus-guard={true}
                    key="guard-first"
                    style={
                      Object {
                        "height": "0px",
                        "left": "1px",
                        "overflow": "hidden",
                        "padding": 0,
                        "position": "fixed",
                        "top": "1px",
                        "width": "1px",
                      }
                    }
                    tabIndex={-1}
                  />
                  <div
                    data-focus-guard={true}
                    key="guard-nearest"
                    style={
                      Object {
                        "height": "0px",
                        "left": "1px",
                        "overflow": "hidden",
                        "padding": 0,
                        "position": "fixed",
                        "top": "1px",
                        "width": "1px",
                      }
                    }
                    tabIndex={-1}
                  />
                  <div
                    data-focus-lock-disabled="disabled"
                    onBlur={[Function]}
                    onFocus={[Function]}
                  >
                    <SideEffect(FocusWatcher)
                      autoFocus={true}
                      disabled={true}
                      observed={
                        <div
                          data-focus-lock-disabled="disabled"
                        >
                          <nav
                            aria-label="Primary"
                            class="euiCollapsibleNav euiCollapsibleNav--isDocked"
                            data-test-subj="collapsibleNav"
                            id="mockId"
                          >
                            <div
                              class="euiFlexItem euiFlexItem--flexGrowZero"
                              style="flex-shrink: 0;"
                            >
                              <div
                                class="euiCollapsibleNavGroup euiCollapsibleNavGroup--light eui-yScroll"
                                id="mockId"
                                style="max-height: 40vh;"
                              >
                                <div
                                  class="euiCollapsibleNavGroup__children"
                                >
                                  <ul
                                    aria-label="Pinned links"
                                    class="euiListGroup"
                                    style="max-width: none;"
                                  >
                                    <li
                                      class="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                                    >
                                      <a
                                        class="euiListGroupItem__button"
                                        href="/"
                                        rel="noreferrer"
                                      >
                                        <div
                                          class="euiListGroupItem__icon"
                                          data-euiicon-type="home"
                                        />
                                        <span
                                          class="euiListGroupItem__label"
                                          title="Home"
                                        >
                                          Home
                                        </span>
                                      </a>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                            <div
                              class="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--light euiCollapsibleNavGroup--withHeading"
                              data-test-subj="collapsibleNavGroup-recentlyViewed"
                            >
                              <div
                                class="euiAccordion__triggerWrapper"
                              >
                                <button
                                  aria-controls="mockId"
                                  aria-expanded="true"
                                  class="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                                  type="button"
                                >
                                  <span
                                    class="euiAccordion__iconWrapper"
                                  >
                                    <div
                                      class="euiAccordion__icon euiAccordion__icon-isOpen"
                                      data-euiicon-type="arrowRight"
                                    />
                                  </span>
                                  <span
                                    class="euiIEFlexWrapFix"
                                  >
                                    <div
                                      class="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                                    >
                                      <div
                                        class="euiFlexItem"
                                      >
                                        <h3
                                          class="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                          id="mockId__title"
                                        >
                                          Recently viewed
                                        </h3>
                                      </div>
                                    </div>
                                  </span>
                                </button>
                              </div>
                              <div
                                class="euiAccordion__childWrapper"
                                id="mockId"
                              >
                                <div>
                                  <div
                                    class=""
                                  >
                                    <div
                                      class="euiCollapsibleNavGroup__children"
                                    >
                                      <ul
                                        aria-label="Recently viewed links"
                                        class="euiListGroup kbnCollapsibleNav__recentsListGroup"
                                        style="max-width: none;"
                                      >
                                        <li
                                          class="euiListGroupItem euiListGroupItem--small euiListGroupItem--subdued euiListGroupItem-isClickable"
                                        >
                                          <a
                                            aria-label="dashboard, type: kibana"
                                            class="euiListGroupItem__button"
                                            data-test-subj="collapsibleNavAppLink--recent"
                                            href="http://localhost/"
                                            rel="noreferrer"
                                            title="dashboard, type: kibana"
                                          >
                                            <span
                                              class="euiListGroupItem__label"
                                              title="dashboard"
                                            >
                                              dashboard
                                            </span>
                                          </a>
                                        </li>
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <hr
                              class="euiHorizontalRule euiHorizontalRule--full"
                            />
                            <div
                              class="euiFlexItem eui-yScroll"
                            >
                              <div
                                class="euiCollapsibleNavGroup"
                                data-test-subj="collapsibleNavGroup-noCategory"
                                id="mockId"
                              >
                                <div
                                  class="euiCollapsibleNavGroup__children"
                                >
                                  <ul
                                    class="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                                  >
                                    <li
                                      class="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                                    >
                                      <button
                                        class="euiListGroupItem__button"
                                        data-test-subj="collapsibleNavAppLink"
                                        type="button"
                                      >
                                        <span
                                          class="euiListGroupItem__label"
                                          title="kibana"
                                        >
                                          kibana
                                        </span>
                                      </button>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                              <div
                                class="euiCollapsibleNavGroup eui-showFor--l eui-showFor--xl"
                                id="mockId"
                              >
                                <div
                                  class="euiCollapsibleNavGroup__children"
                                >
                                  <ul
                                    class="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                                  >
                                    <li
                                      class="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                                    >
                                      <button
                                        aria-label="Undock primary navigation"
                                        class="euiListGroupItem__button"
                                        data-test-subj="collapsible-nav-lock"
                                        type="button"
                                      >
                                        <div
                                          class="euiListGroupItem__icon"
                                          data-euiicon-type="lock"
                                        />
                                        <span
                                          class="euiListGroupItem__label"
                                          title="Undock navigation"
                                        >
                                          Undock navigation
                                        </span>
                                      </button>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                            <button
                              class="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiScreenReaderOnly--showOnFocus euiCollapsibleNav__closeButton"
                              type="button"
                            >
                              <span
                                class="euiButtonEmpty__content"
                              >
                                <div
                                  aria-hidden="true"
                                  class="euiButtonEmpty__icon"
                                  data-euiicon-type="cross"
                                />
                                <span
                                  class="euiButtonEmpty__text euiCollapsibleNav__closeButtonText"
                                >
                                  close
                                </span>
                              </span>
                            </button>
                          </nav>
                        </div>
                      }
                      onActivation={[Function]}
                      onDeactivation={[Function]}
                      persistentFocus={false}
                    >
                      <FocusWatcher
                        autoFocus={true}
                        disabled={true}
                        observed={
                          <div
                            data-focus-lock-disabled="disabled"
                          >
                            <nav
                              aria-label="Primary"
                              class="euiCollapsibleNav euiCollapsibleNav--isDocked"
                              data-test-subj="collapsibleNav"
                              id="mockId"
                            >
                              <div
                                class="euiFlexItem euiFlexItem--flexGrowZero"
                                style="flex-shrink: 0;"
                              >
                                <div
                                  class="euiCollapsibleNavGroup euiCollapsibleNavGroup--light eui-yScroll"
                                  id="mockId"
                                  style="max-height: 40vh;"
                                >
                                  <div
                                    class="euiCollapsibleNavGroup__children"
                                  >
                                    <ul
                                      aria-label="Pinned links"
                                      class="euiListGroup"
                                      style="max-width: none;"
                                    >
                                      <li
                                        class="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                                      >
                                        <a
                                          class="euiListGroupItem__button"
                                          href="/"
                                          rel="noreferrer"
                                        >
                                          <div
                                            class="euiListGroupItem__icon"
                                            data-euiicon-type="home"
                                          />
                                          <span
                                            class="euiListGroupItem__label"
                                            title="Home"
                                          >
                                            Home
                                          </span>
                                        </a>
                                      </li>
                                    </ul>
                                  </div>
                                </div>
                              </div>
                              <div
                                class="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--light euiCollapsibleNavGroup--withHeading"
                                data-test-subj="collapsibleNavGroup-recentlyViewed"
                              >
                                <div
                                  class="euiAccordion__triggerWrapper"
                                >
                                  <button
                                    aria-controls="mockId"
                                    aria-expanded="true"
                                    class="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                                    type="button"
                                  >
                                    <span
                                      class="euiAccordion__iconWrapper"
                                    >
                                      <div
                                        class="euiAccordion__icon euiAccordion__icon-isOpen"
                                        data-euiicon-type="arrowRight"
                                      />
                                    </span>
                                    <span
                                      class="euiIEFlexWrapFix"
                                    >
                                      <div
                                        class="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                                      >
                                        <div
                                          class="euiFlexItem"
                                        >
                                          <h3
                                            class="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                            id="mockId__title"
                                          >
                                            Recently viewed
                                          </h3>
                                        </div>
                                      </div>
                                    </span>
                                  </button>
                                </div>
                                <div
                                  class="euiAccordion__childWrapper"
                                  id="mockId"
                                >
                                  <div>
                                    <div
                                      class=""
                                    >
                                      <div
                                        class="euiCollapsibleNavGroup__children"
                                      >
                                        <ul
                                          aria-label="Recently viewed links"
                                          class="euiListGroup kbnCollapsibleNav__recentsListGroup"
                                          style="max-width: none;"
                                        >
                                          <li
                                            class="euiListGroupItem euiListGroupItem--small euiListGroupItem--subdued euiListGroupItem-isClickable"
                                          >
                                            <a
                                              aria-label="dashboard, type: kibana"
                                              class="euiListGroupItem__button"
                                              data-test-subj="collapsibleNavAppLink--recent"
                                              href="http://localhost/"
                                              rel="noreferrer"
                                              title="dashboard, type: kibana"
                                            >
                                              <span
                                                class="euiListGroupItem__label"
                                                title="dashboard"
                                              >
                                                dashboard
                                              </span>
                                            </a>
                                          </li>
                                        </ul>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <hr
                                class="euiHorizontalRule euiHorizontalRule--full"
                              />
                              <div
                                class="euiFlexItem eui-yScroll"
                              >
                                <div
                                  class="euiCollapsibleNavGroup"
                                  data-test-subj="collapsibleNavGroup-noCategory"
                                  id="mockId"
                                >
                                  <div
                                    class="euiCollapsibleNavGroup__children"
                                  >
                                    <ul
                                      class="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                                    >
                                      <li
                                        class="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                                      >
                                        <button
                                          class="euiListGroupItem__button"
                                          data-test-subj="collapsibleNavAppLink"
                                          type="button"
                                        >
                                          <span
                                            class="euiListGroupItem__label"
                                            title="kibana"
                                          >
                                            kibana
                                          </span>
                                        </button>
                                      </li>
                                    </ul>
                                  </div>
                                </div>
                                <div
                                  class="euiCollapsibleNavGroup eui-showFor--l eui-showFor--xl"
                                  id="mockId"
                                >
                                  <div
                                    class="euiCollapsibleNavGroup__children"
                                  >
                                    <ul
                                      class="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                                    >
                                      <li
                                        class="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                                      >
                                        <button
                                          aria-label="Undock primary navigation"
                                          class="euiListGroupItem__button"
                                          data-test-subj="collapsible-nav-lock"
                                          type="button"
                                        >
                                          <div
                                            class="euiListGroupItem__icon"
                                            data-euiicon-type="lock"
                                          />
                                          <span
                                            class="euiListGroupItem__label"
                                            title="Undock navigation"
                                          >
                                            Undock navigation
                                          </span>
                                        </button>
                                      </li>
                                    </ul>
                                  </div>
                                </div>
                              </div>
                              <button
                                class="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiScreenReaderOnly--showOnFocus euiCollapsibleNav__closeButton"
                                type="button"
                              >
                                <span
                                  class="euiButtonEmpty__content"
                                >
                                  <div
                                    aria-hidden="true"
                                    class="euiButtonEmpty__icon"
                                    data-euiicon-type="cross"
                                  />
                                  <span
                                    class="euiButtonEmpty__text euiCollapsibleNav__closeButtonText"
                                  >
                                    close
                                  </span>
                                </span>
                              </button>
                            </nav>
                          </div>
                        }
                        onActivation={[Function]}
                        onDeactivation={[Function]}
                        persistentFocus={false}
                      />
                    </SideEffect(FocusWatcher)>
                    <nav
                      aria-label="Primary"
                      className="euiCollapsibleNav euiCollapsibleNav--isDocked"
                      data-test-subj="collapsibleNav"
                      id="mockId"
                    >
                      <EuiFlexItem
                        grow={false}
                        style={
                          Object {
                            "flexShrink": 0,
                          }
                        }
                      >
                        <div
                          className="euiFlexItem euiFlexItem--flexGrowZero"
                          style={
                            Object {
                              "flexShrink": 0,
                            }
                          }
                        >
                          <EuiCollapsibleNavGroup
                            background="light"
                            className="eui-yScroll"
                            style={
                              Object {
                                "maxHeight": "40vh",
                              }
                            }
                          >
                            <div
                              className="euiCollapsibleNavGroup euiCollapsibleNavGroup--light eui-yScroll"
                              id="mockId"
                              style={
                                Object {
                                  "maxHeight": "40vh",
                                }
                              }
                            >
                              <div
                                className="euiCollapsibleNavGroup__children"
                              >
                                <EuiListGroup
                                  aria-label="Pinned links"
                                  color="text"
                                  gutterSize="none"
                                  listItems={
                                    Array [
                                      Object {
                                        "href": "/",
                                        "iconType": "home",
                                        "label": "Home",
                                        "onClick": [Function],
                                      },
                                    ]
                                  }
                                  maxWidth="none"
                                  size="s"
                                >
                                  <ul
                                    aria-label="Pinned links"
                                    className="euiListGroup"
                                    style={
                                      Object {
                                        "maxWidth": "none",
                                      }
                                    }
                                  >
                                    <EuiListGroupItem
                                      color="text"
                                      href="/"
                                      iconType="home"
                                      key="title-0"
                                      label="Home"
                                      onClick={[Function]}
                                      showToolTip={false}
                                      size="s"
                                      wrapText={false}
                                    >
                                      <li
                                        className="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                                      >
                                        <a
                                          className="euiListGroupItem__button"
                                          href="/"
                                          onClick={[Function]}
                                          rel="noreferrer"
                                        >
                                          <EuiIcon
                                            className="euiListGroupItem__icon"
                                            type="home"
                                          >
                                            <div
                                              className="euiListGroupItem__icon"
                                              data-euiicon-type="home"
                                            />
                                          </EuiIcon>
                                          <span
                                            className="euiListGroupItem__label"
                                            title="Home"
                                          >
                                            Home
                                          </span>
                                        </a>
                                      </li>
                                    </EuiListGroupItem>
                                  </ul>
                                </EuiListGroup>
                              </div>
                            </div>
                          </EuiCollapsibleNavGroup>
                        </div>
                      </EuiFlexItem>
                      <EuiCollapsibleNavGroup
                        background="light"
                        data-test-subj="collapsibleNavGroup-recentlyViewed"
                        initialIsOpen={true}
                        isCollapsible={true}
                        key="recentlyViewed"
                        onToggle={[Function]}
                        title="Recently viewed"
                      >
                        <EuiAccordion
                          arrowDisplay="right"
                          buttonClassName="euiCollapsibleNavGroup__heading"
                          buttonContent={
                            <EuiFlexGroup
                              alignItems="center"
                              gutterSize="m"
                              responsive={false}
                            >
                              <EuiFlexItem>
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Recently viewed
                                  </h3>
                                </EuiTitle>
                              </EuiFlexItem>
                            </EuiFlexGroup>
                          }
                          className="euiCollapsibleNavGroup euiCollapsibleNavGroup--light euiCollapsibleNavGroup--withHeading"
                          data-test-subj="collapsibleNavGroup-recentlyViewed"
                          id="mockId"
                          initialIsOpen={true}
                          onToggle={[Function]}
                          paddingSize="none"
                        >
                          <div
                            className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--light euiCollapsibleNavGroup--withHeading"
                            data-test-subj="collapsibleNavGroup-recentlyViewed"
                            onToggle={[Function]}
                          >
                            <div
                              className="euiAccordion__triggerWrapper"
                            >
                              <button
                                aria-controls="mockId"
                                aria-expanded={true}
                                className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                                onClick={[Function]}
                                type="button"
                              >
                                <span
                                  className="euiAccordion__iconWrapper"
                                >
                                  <EuiIcon
                                    className="euiAccordion__icon euiAccordion__icon-isOpen"
                                    size="m"
                                    type="arrowRight"
                                  >
                                    <div
                                      className="euiAccordion__icon euiAccordion__icon-isOpen"
                                      data-euiicon-type="arrowRight"
                                      size="m"
                                    />
                                  </EuiIcon>
                                </span>
                                <span
                                  className="euiIEFlexWrapFix"
                                >
                                  <EuiFlexGroup
                                    alignItems="center"
                                    gutterSize="m"
                                    responsive={false}
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                                    >
                                      <EuiFlexItem>
                                        <div
                                          className="euiFlexItem"
                                        >
                                          <EuiTitle
                                            size="xxs"
                                          >
                                            <h3
                                              className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                              id="mockId__title"
                                            >
                                              Recently viewed
                                            </h3>
                                          </EuiTitle>
                                        </div>
                                      </EuiFlexItem>
                                    </div>
                                  </EuiFlexGroup>
                                </span>
                              </button>
                            </div>
                            <div
                              className="euiAccordion__childWrapper"
                              id="mockId"
                            >
                              <EuiResizeObserver
                                onResize={[Function]}
                              >
                                <div>
                                  <div
                                    className=""
                                  >
                                    <div
                                      className="euiCollapsibleNavGroup__children"
                                    >
                                      <EuiListGroup
                                        aria-label="Recently viewed links"
                                        className="kbnCollapsibleNav__recentsListGroup"
                                        color="subdued"
                                        gutterSize="none"
                                        listItems={
                                          Array [
                                            Object {
                                              "aria-label": "dashboard, type: kibana",
                                              "data-test-subj": "collapsibleNavAppLink--recent",
                                              "href": "http://localhost/",
                                              "label": "dashboard",
                                              "onClick": [Function],
                                              "title": "dashboard, type: kibana",
                                            },
                                          ]
                                        }
                                        maxWidth="none"
                                        size="s"
                                      >
                                        <ul
                                          aria-label="Recently viewed links"
                                          className="euiListGroup kbnCollapsibleNav__recentsListGroup"
                                          style={
                                            Object {
                                              "maxWidth": "none",
                                            }
                                          }
                                        >
                                          <EuiListGroupItem
                                            aria-label="dashboard, type: kibana"
                                            color="subdued"
                                            data-test-subj="collapsibleNavAppLink--recent"
                                            href="http://localhost/"
                                            key="title-0"
                                            label="dashboard"
                                            onClick={[Function]}
                                            showToolTip={false}
                                            size="s"
                                            title="dashboard, type: kibana"
                                            wrapText={false}
                                          >
                                            <li
                                              className="euiListGroupItem euiListGroupItem--small euiListGroupItem--subdued euiListGroupItem-isClickable"
                                            >
                                              <a
                                                aria-label="dashboard, type: kibana"
                                                className="euiListGroupItem__button"
                                                data-test-subj="collapsibleNavAppLink--recent"
                                                href="http://localhost/"
                                                onClick={[Function]}
                                                rel="noreferrer"
                                                title="dashboard, type: kibana"
                                              >
                                                <span
                                                  className="euiListGroupItem__label"
                                                  title="dashboard"
                                                >
                                                  dashboard
                                                </span>
                                              </a>
                                            </li>
                                          </EuiListGroupItem>
                                        </ul>
                                      </EuiListGroup>
                                    </div>
                                  </div>
                                </div>
                              </EuiResizeObserver>
                            </div>
                          </div>
                        </EuiAccordion>
                      </EuiCollapsibleNavGroup>
                      <EuiHorizontalRule
                        margin="none"
                      >
                        <hr
                          className="euiHorizontalRule euiHorizontalRule--full"
                        />
                      </EuiHorizontalRule>
                      <EuiFlexItem
                        className="eui-yScroll"
                      >
                        <div
                          className="euiFlexItem eui-yScroll"
                        >
                          <EuiCollapsibleNavGroup
                            data-test-subj="collapsibleNavGroup-noCategory"
                            key="0"
                          >
                            <div
                              className="euiCollapsibleNavGroup"
                              data-test-subj="collapsibleNavGroup-noCategory"
                              id="mockId"
                            >
                              <div
                                className="euiCollapsibleNavGroup__children"
                              >
                                <EuiListGroup
                                  flush={true}
                                >
                                  <ul
                                    className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                                  >
                                    <EuiListGroupItem
                                      color="text"
                                      data-test-subj="collapsibleNavAppLink"
                                      isActive={false}
                                      label="kibana"
                                      onClick={[Function]}
                                      size="s"
                                    >
                                      <li
                                        className="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                                      >
                                        <button
                                          className="euiListGroupItem__button"
                                          data-test-subj="collapsibleNavAppLink"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <span
                                            className="euiListGroupItem__label"
                                            title="kibana"
                                          >
                                            kibana
                                          </span>
                                        </button>
                                      </li>
                                    </EuiListGroupItem>
                                  </ul>
                                </EuiListGroup>
                              </div>
                            </div>
                          </EuiCollapsibleNavGroup>
                          <EuiShowFor
                            sizes={
                              Array [
                                "l",
                                "xl",
                              ]
                            }
                          >
                            <EuiCollapsibleNavGroup
                              className="eui-showFor--l eui-showFor--xl"
                              key=".0"
                            >
                              <div
                                className="euiCollapsibleNavGroup eui-showFor--l eui-showFor--xl"
                                id="mockId"
                              >
                                <div
                                  className="euiCollapsibleNavGroup__children"
                                >
                                  <EuiListGroup
                                    flush={true}
                                  >
                                    <ul
                                      className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                                    >
                                      <EuiListGroupItem
                                        aria-label="Undock primary navigation"
                                        buttonRef={
                                          Object {
                                            "current": <button
                                              aria-label="Undock primary navigation"
                                              class="euiListGroupItem__button"
                                              data-test-subj="collapsible-nav-lock"
                                              type="button"
                                            >
                                              <div
                                                class="euiListGroupItem__icon"
                                                data-euiicon-type="lock"
                                              />
                                              <span
                                                class="euiListGroupItem__label"
                                                title="Undock navigation"
                                              >
                                                Undock navigation
                                              </span>
                                            </button>,
                                          }
                                        }
                                        color="subdued"
                                        data-test-subj="collapsible-nav-lock"
                                        iconType="lock"
                                        label="Undock navigation"
                                        onClick={[Function]}
                                        size="xs"
                                      >
                                        <li
                                          className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                                        >
                                          <button
                                            aria-label="Undock primary navigation"
                                            className="euiListGroupItem__button"
                                            data-test-subj="collapsible-nav-lock"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <EuiIcon
                                              className="euiListGroupItem__icon"
                                              type="lock"
                                            >
                                              <div
                                                className="euiListGroupItem__icon"
                                                data-euiicon-type="lock"
                                              />
                                            </EuiIcon>
                                            <span
                                              className="euiListGroupItem__label"
                                              title="Undock navigation"
                                            >
                                              Undock navigation
                                            </span>
                                          </button>
                                        </li>
                                      </EuiListGroupItem>
                                    </ul>
                                  </EuiListGroup>
                                </div>
                              </div>
                            </EuiCollapsibleNavGroup>
                          </EuiShowFor>
                        </div>
                      </EuiFlexItem>
                      <EuiScreenReaderOnly
                        showOnFocus={true}
                      >
                        <EuiButtonEmpty
                          className="euiScreenReaderOnly--showOnFocus euiCollapsibleNav__closeButton"
                          iconType="cross"
                          onClick={[Function]}
                          size="xs"
                          textProps={
                            Object {
                              "className": "euiCollapsibleNav__closeButtonText",
                            }
                          }
                        >
                          <button
                            className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiScreenReaderOnly--showOnFocus euiCollapsibleNav__closeButton"
                            onClick={[Function]}
                            type="button"
                          >
                            <span
                              className="euiButtonEmpty__content"
                            >
                              <EuiIcon
                                aria-hidden="true"
                                className="euiButtonEmpty__icon"
                                size="m"
                                type="cross"
                              >
                                <div
                                  aria-hidden="true"
                                  className="euiButtonEmpty__icon"
                                  data-euiicon-type="cross"
                                  size="m"
                                />
                              </EuiIcon>
                              <span
                                className="euiButtonEmpty__text euiCollapsibleNav__closeButtonText"
                              >
                                <EuiI18n
                                  default="close"
                                  token="euiCollapsibleNav.closeButtonLabel"
                                >
                                  close
                                </EuiI18n>
                              </span>
                            </span>
                          </button>
                        </EuiButtonEmpty>
                      </EuiScreenReaderOnly>
                    </nav>
                  </div>
                  <div
                    data-focus-guard={true}
                    style={
                      Object {
                        "height": "0px",
                        "left": "1px",
                        "overflow": "hidden",
                        "padding": 0,
                        "position": "fixed",
                        "top": "1px",
                        "width": "1px",
                      }
                    }
                    tabIndex={-1}
                  />
                </FocusLock>
              </div>
            </OutsideEventDetector>
          </EuiOutsideClickDetector>
        </EuiFocusTrap>
      </EuiCollapsibleNav>
    </CollapsibleNav>
  </header>
</Header>
`;

exports[`Header renders 4`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "text": "test",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 0,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": "",
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": undefined,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": [Circular],
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": BehaviorSubject {
                  "_isScalar": false,
                  "_value": undefined,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    [Circular],
                  ],
                  "thrownError": null,
                },
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": [Circular],
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": null,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  kibanaDocLink="/docs"
  kibanaVersion="1.0.0"
  legacyMode={false}
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "",
          "id": "kibana",
          "legacy": false,
          "title": "kibana",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navType$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "legacy",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "dashboard",
          "label": "dashboard",
          "link": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <LoadingIndicator
    loadingCount$={
      BehaviorSubject {
        "_isScalar": false,
        "_value": 0,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      }
    }
  >
    <div
      className="kbnLoadingIndicator hidden"
      data-test-subj="globalLoadingIndicator-hidden"
    >
      <div
        className="kbnLoadingIndicator__bar essentialAnimation"
      />
    </div>
  </LoadingIndicator>
  <header
    className="chrHeaderWrapper hide-for-sharing chrHeaderWrapper--navIsLocked"
    data-test-subj="headerGlobalNav"
  >
    <EuiHeader
      position="fixed"
    >
      <div
        className="euiHeader euiHeader--default euiHeader--fixed"
      >
        <EuiHeaderSection
          grow={false}
        >
          <div
            className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
          >
            <EuiShowFor
              sizes={
                Array [
                  "xs",
                  "s",
                ]
              }
            >
              <EuiHeaderSectionItem
                border="right"
                className="eui-showFor--xs eui-showFor--s"
                key=".0"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight eui-showFor--xs eui-showFor--s"
                >
                  <EuiHeaderSectionItemButton
                    aria-label="Toggle side navigation"
                    onClick={[Function]}
                  >
                    <button
                      aria-label="Toggle side navigation"
                      className="euiHeaderSectionItem__button"
                      onClick={[Function]}
                      type="button"
                    >
                      <EuiIcon
                        size="m"
                        type="apps"
                      >
                        <div
                          data-euiicon-type="apps"
                          size="m"
                        />
                      </EuiIcon>
                    </button>
                  </EuiHeaderSectionItemButton>
                </div>
              </EuiHeaderSectionItem>
            </EuiShowFor>
            <EuiHeaderSectionItem
              border="right"
            >
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
              >
                <HeaderLogo
                  forceNavigation$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  href="/"
                  navLinks$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [
                        Object {
                          "baseUrl": "",
                          "id": "kibana",
                          "legacy": false,
                          "title": "kibana",
                        },
                      ],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  navigateToApp={[MockFunction]}
                >
                  <EuiHeaderLogo
                    aria-label="Go to home page"
                    data-test-subj="logo"
                    href="/"
                    iconType="logoElastic"
                    onClick={[Function]}
                  >
                    <a
                      aria-label="Go to home page"
                      className="euiHeaderLogo"
                      data-test-subj="logo"
                      href="/"
                      onClick={[Function]}
                      rel="noreferrer"
                    >
                      <EuiIcon
                        aria-label="Elastic"
                        className="euiHeaderLogo__icon"
                        size="l"
                        type="logoElastic"
                      >
                        <div
                          aria-label="Elastic"
                          className="euiHeaderLogo__icon"
                          data-euiicon-type="logoElastic"
                          size="l"
                        />
                      </EuiIcon>
                    </a>
                  </EuiHeaderLogo>
                </HeaderLogo>
              </div>
            </EuiHeaderSectionItem>
            <HeaderNavControls
              navControls$={
                BehaviorSubject {
                  "_isScalar": false,
                  "_value": Array [],
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    Subscriber {
                      "_parentOrParents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": SafeSubscriber {
                        "_complete": undefined,
                        "_context": [Circular],
                        "_error": undefined,
                        "_next": [Function],
                        "_parentOrParents": null,
                        "_parentSubscriber": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "destination": Object {
                          "closed": true,
                          "complete": [Function],
                          "error": [Function],
                          "next": [Function],
                        },
                        "isStopped": false,
                        "syncErrorThrowable": false,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "isStopped": false,
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                }
              }
              side="left"
            />
          </div>
        </EuiHeaderSection>
        <HeaderBreadcrumbs
          appTitle$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": "test",
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
          breadcrumbs$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": Array [
                Object {
                  "text": "test",
                },
              ],
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
        >
          <EuiHeaderBreadcrumbs
            breadcrumbs={
              Array [
                Object {
                  "data-test-subj": "breadcrumb first last",
                  "text": "test",
                },
              ]
            }
            data-test-subj="breadcrumbs"
            max={10}
          >
            <EuiBreadcrumbs
              breadcrumbs={
                Array [
                  Object {
                    "data-test-subj": "breadcrumb first last",
                    "text": "test",
                  },
                ]
              }
              className="euiHeaderBreadcrumbs"
              data-test-subj="breadcrumbs"
              max={10}
              truncate={true}
            >
              <nav
                aria-label="breadcrumb"
                className="euiBreadcrumbs euiHeaderBreadcrumbs euiBreadcrumbs--truncate euiBreadcrumbs--responsive"
                data-test-subj="breadcrumbs"
              >
                <EuiInnerText>
                  <span
                    aria-current="page"
                    className="euiBreadcrumb euiBreadcrumb--last"
                    data-test-subj="breadcrumb first last"
                    title="test"
                  >
                    test
                  </span>
                </EuiInnerText>
              </nav>
            </EuiBreadcrumbs>
          </EuiHeaderBreadcrumbs>
        </HeaderBreadcrumbs>
        <HeaderBadge
          badge$={
            BehaviorSubject {
              "_isScalar": false,
              "_value": undefined,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "observers": Array [
                Subscriber {
                  "_parentOrParents": null,
                  "_subscriptions": Array [
                    SubjectSubscription {
                      "_parentOrParents": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "subject": [Circular],
                      "subscriber": [Circular],
                    },
                  ],
                  "closed": false,
                  "destination": SafeSubscriber {
                    "_complete": undefined,
                    "_context": [Circular],
                    "_error": undefined,
                    "_next": [Function],
                    "_parentOrParents": null,
                    "_parentSubscriber": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "isStopped": false,
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                  "isStopped": false,
                  "syncErrorThrowable": true,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
              ],
              "thrownError": null,
            }
          }
        />
        <EuiHeaderSection
          side="right"
        >
          <div
            className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--right"
          >
            <EuiHeaderSectionItem>
              <div
                className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
              >
                <InjectIntl(HeaderHelpMenuUI)
                  helpExtension$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 0,
                          "outerValue": [Circular],
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              [Circular],
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": "",
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 1,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              [Circular],
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": "",
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  helpSupportUrl$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        InnerSubscriber {
                          "_parentOrParents": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "index": 1,
                          "isStopped": false,
                          "outerIndex": 1,
                          "outerValue": [Circular],
                          "parent": CombineLatestSubscriber {
                            "_parentOrParents": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "_subscriptions": Array [
                              InnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  SubjectSubscription {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "subject": BehaviorSubject {
                                      "_isScalar": false,
                                      "_value": undefined,
                                      "closed": false,
                                      "hasError": false,
                                      "isStopped": false,
                                      "observers": Array [
                                        [Circular],
                                      ],
                                      "thrownError": null,
                                    },
                                    "subscriber": [Circular],
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "index": 1,
                                "isStopped": false,
                                "outerIndex": 0,
                                "outerValue": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    [Circular],
                                  ],
                                  "thrownError": null,
                                },
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              [Circular],
                            ],
                            "active": 2,
                            "closed": false,
                            "destination": Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                [Circular],
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": true,
                            "observables": Array [
                              BehaviorSubject {
                                "_isScalar": false,
                                "_value": undefined,
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": [Circular],
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": [Circular],
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "thrownError": null,
                              },
                              [Circular],
                            ],
                            "resultSelector": null,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                            "toRespond": 0,
                            "values": Array [
                              undefined,
                              "",
                            ],
                          },
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  kibanaDocLink="/docs"
                  kibanaVersion="1.0.0"
                  useDefaultContent={true}
                >
                  <HeaderHelpMenuUI
                    helpExtension$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 0,
                            "outerValue": [Circular],
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    helpSupportUrl$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": "",
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 1,
                            "outerValue": [Circular],
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      [Circular],
                                    ],
                                    "thrownError": null,
                                  },
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": [Circular],
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": null,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatHTMLMessage": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatPlural": [Function],
                        "formatRelative": [Function],
                        "formatTime": [Function],
                        "formats": Object {
                          "date": Object {
                            "full": Object {
                              "day": "numeric",
                              "month": "long",
                              "weekday": "long",
                              "year": "numeric",
                            },
                            "long": Object {
                              "day": "numeric",
                              "month": "long",
                              "year": "numeric",
                            },
                            "medium": Object {
                              "day": "numeric",
                              "month": "short",
                              "year": "numeric",
                            },
                            "short": Object {
                              "day": "numeric",
                              "month": "numeric",
                              "year": "2-digit",
                            },
                          },
                          "number": Object {
                            "currency": Object {
                              "style": "currency",
                            },
                            "percent": Object {
                              "style": "percent",
                            },
                          },
                          "relative": Object {
                            "days": Object {
                              "units": "day",
                            },
                            "hours": Object {
                              "units": "hour",
                            },
                            "minutes": Object {
                              "units": "minute",
                            },
                            "months": Object {
                              "units": "month",
                            },
                            "seconds": Object {
                              "units": "second",
                            },
                            "years": Object {
                              "units": "year",
                            },
                          },
                          "time": Object {
                            "full": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                              "timeZoneName": "short",
                            },
                            "long": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                              "timeZoneName": "short",
                            },
                            "medium": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                              "second": "numeric",
                            },
                            "short": Object {
                              "hour": "numeric",
                              "minute": "numeric",
                            },
                          },
                        },
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralFormat": [Function],
                          "getRelativeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": Object {},
                        "now": [Function],
                        "onError": [Function],
                        "textComponent": Symbol(react.fragment),
                        "timeZone": null,
                      }
                    }
                    kibanaDocLink="/docs"
                    kibanaVersion="1.0.0"
                    useDefaultContent={true}
                  >
                    <EuiPopover
                      anchorPosition="downRight"
                      button={
                        <EuiHeaderSectionItemButton
                          aria-expanded={false}
                          aria-haspopup="true"
                          aria-label="Help menu"
                          onClick={[Function]}
                        >
                          <EuiIcon
                            size="m"
                            type="help"
                          />
                        </EuiHeaderSectionItemButton>
                      }
                      closePopover={[Function]}
                      data-test-subj="helpMenuButton"
                      display="inlineBlock"
                      hasArrow={true}
                      id="headerHelpMenu"
                      isOpen={false}
                      ownFocus={true}
                      panelPaddingSize="m"
                      repositionOnScroll={true}
                    >
                      <EuiOutsideClickDetector
                        isDisabled={true}
                        onOutsideClick={[Function]}
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownRight"
                          data-test-subj="helpMenuButton"
                          id="headerHelpMenu"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchStart={[Function]}
                        >
                          <div
                            className="euiPopover__anchor"
                          >
                            <EuiHeaderSectionItemButton
                              aria-expanded={false}
                              aria-haspopup="true"
                              aria-label="Help menu"
                              onClick={[Function]}
                            >
                              <button
                                aria-expanded={false}
                                aria-haspopup="true"
                                aria-label="Help menu"
                                className="euiHeaderSectionItem__button"
                                onClick={[Function]}
                                type="button"
                              >
                                <EuiIcon
                                  size="m"
                                  type="help"
                                >
                                  <div
                                    data-euiicon-type="help"
                                    size="m"
                                  />
                                </EuiIcon>
                              </button>
                            </EuiHeaderSectionItemButton>
                          </div>
                        </div>
                      </EuiOutsideClickDetector>
                    </EuiPopover>
                  </HeaderHelpMenuUI>
                </InjectIntl(HeaderHelpMenuUI)>
              </div>
            </EuiHeaderSectionItem>
            <HeaderNavControls
              navControls$={
                BehaviorSubject {
                  "_isScalar": false,
                  "_value": Array [],
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    Subscriber {
                      "_parentOrParents": null,
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "closed": false,
                      "destination": SafeSubscriber {
                        "_complete": undefined,
                        "_context": [Circular],
                        "_error": undefined,
                        "_next": [Function],
                        "_parentOrParents": null,
                        "_parentSubscriber": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "destination": Object {
                          "closed": true,
                          "complete": [Function],
                          "error": [Function],
                          "next": [Function],
                        },
                        "isStopped": false,
                        "syncErrorThrowable": false,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "isStopped": false,
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                }
              }
              side="right"
            />
          </div>
        </EuiHeaderSection>
      </div>
    </EuiHeader>
    <ForwardRef(NavDrawerRenderer)
      appId$={
        Observable {
          "_isScalar": false,
          "source": Subject {
            "_isScalar": false,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [
              Subscriber {
                "_parentOrParents": null,
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": [Circular],
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": SafeSubscriber {
                  "_complete": undefined,
                  "_context": [Circular],
                  "_error": undefined,
                  "_next": [Function],
                  "_parentOrParents": null,
                  "_parentSubscriber": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "isStopped": false,
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "thrownError": null,
          },
        }
      }
      basePath={
        BasePath {
          "basePath": "/test",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "/test",
        }
      }
      isLocked={true}
      legacyMode={false}
      navLinks$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "baseUrl": "",
              "id": "kibana",
              "legacy": false,
              "title": "kibana",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      navigateToApp={[MockFunction]}
      onIsLockedUpdate={[Function]}
      recentlyAccessed$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "id": "dashboard",
              "label": "dashboard",
              "link": "",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
    >
      <EuiNavDrawer
        aria-label="Primary"
        data-test-subj="navDrawer"
        isLocked={true}
        onIsLockedUpdate={[Function]}
        showExpandButton={true}
        showToolTips={true}
      >
        <EuiOutsideClickDetector
          isDisabled={true}
          onOutsideClick={[Function]}
        >
          <nav
            aria-label="Primary"
            className="euiNavDrawer euiNavDrawer-isExpanded euiNavDrawer-isLocked euiNavDrawer-flyoutIsCollapsed"
            data-test-subj="navDrawer"
            onMouseDown={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchStart={[Function]}
          >
            <EuiFlexGroup
              gutterSize="none"
              responsive={false}
            >
              <div
                className="euiFlexGroup euiFlexGroup--directionRow"
              >
                <EuiFlexItem
                  grow={false}
                >
                  <div
                    className="euiFlexItem euiFlexItem--flexGrowZero"
                  >
                    <div
                      className="euiNavDrawerMenu euiNavDrawerMenu-hasFooter"
                      id="navDrawerMenu"
                      onClick={[Function]}
                    >
                      <EuiListGroup
                        className="euiNavDrawer__expandButton"
                        flush={true}
                      >
                        <ul
                          className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault euiNavDrawer__expandButton"
                        >
                          <EuiI18n
                            defaults={
                              Array [
                                "Collapse",
                                "Expand",
                                "Dock navigation",
                                "Navigation is docked",
                                "Navigation is undocked",
                              ]
                            }
                            tokens={
                              Array [
                                "euiNavDrawer.sideNavCollapse",
                                "euiNavDrawer.sideNavExpand",
                                "euiNavDrawer.sideNavLockAriaLabel",
                                "euiNavDrawer.sideNavLockExpanded",
                                "euiNavDrawer.sideNavLockCollapsed",
                              ]
                            }
                          >
                            <EuiListGroupItem
                              buttonRef={
                                Object {
                                  "current": <button
                                    class="euiListGroupItem__button"
                                    data-test-subj="navDrawerExpandButton-isExpanded"
                                    type="button"
                                  >
                                    <div
                                      class="euiListGroupItem__icon"
                                      data-euiicon-type="menuLeft"
                                    />
                                    <span
                                      class="euiListGroupItem__label"
                                      title="Collapse"
                                    >
                                      Collapse
                                    </span>
                                  </button>,
                                }
                              }
                              className="navDrawerExpandButton-isExpanded"
                              data-test-subj="navDrawerExpandButton-isExpanded"
                              extraAction={
                                Object {
                                  "aria-label": "Dock navigation",
                                  "aria-pressed": true,
                                  "className": "euiNavDrawer__expandButtonLockAction",
                                  "color": "text",
                                  "iconSize": "s",
                                  "iconType": "lock",
                                  "onClick": [Function],
                                  "title": "Navigation is docked",
                                }
                              }
                              iconType="menuLeft"
                              label="Collapse"
                              onClick={[Function]}
                              showToolTip={false}
                              size="s"
                            >
                              <li
                                className="euiListGroupItem euiListGroupItem--small euiListGroupItem-isClickable euiListGroupItem-hasExtraAction navDrawerExpandButton-isExpanded"
                              >
                                <button
                                  className="euiListGroupItem__button"
                                  data-test-subj="navDrawerExpandButton-isExpanded"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    className="euiListGroupItem__icon"
                                    type="menuLeft"
                                  >
                                    <div
                                      className="euiListGroupItem__icon"
                                      data-euiicon-type="menuLeft"
                                    />
                                  </EuiIcon>
                                  <span
                                    className="euiListGroupItem__label"
                                    title="Collapse"
                                  >
                                    Collapse
                                  </span>
                                </button>
                                <EuiButtonIcon
                                  aria-label="Dock navigation"
                                  aria-pressed={true}
                                  className="euiListGroupItem__extraAction euiNavDrawer__expandButtonLockAction"
                                  color="text"
                                  disabled={false}
                                  iconSize="s"
                                  iconType="lock"
                                  onClick={[Function]}
                                  title="Navigation is docked"
                                >
                                  <button
                                    aria-label="Dock navigation"
                                    aria-pressed={true}
                                    className="euiButtonIcon euiButtonIcon--text euiListGroupItem__extraAction euiNavDrawer__expandButtonLockAction"
                                    disabled={false}
                                    onClick={[Function]}
                                    title="Navigation is docked"
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      size="s"
                                      type="lock"
                                    >
                                      <div
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        data-euiicon-type="lock"
                                        size="s"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </li>
                            </EuiListGroupItem>
                          </EuiI18n>
                        </ul>
                      </EuiListGroup>
                      <EuiNavDrawerGroup
                        aria-label="Recently viewed links, navigation"
                        flyoutMenuButtonClick={[Function]}
                        key=".$.0"
                        listItems={
                          Array [
                            Object {
                              "flyoutMenu": Object {
                                "listItems": Array [
                                  Object {
                                    "aria-label": "dashboard, type: kibana",
                                    "href": "http://localhost/",
                                    "iconType": undefined,
                                    "label": "dashboard",
                                    "title": "dashboard, type: kibana",
                                  },
                                ],
                                "title": "Recent items",
                              },
                              "iconType": "recentlyViewedApp",
                              "isDisabled": false,
                              "label": "Recently viewed",
                            },
                          ]
                        }
                        showToolTips={true}
                      >
                        <EuiListGroup
                          aria-label="Recently viewed links, navigation"
                          className="euiNavDrawerGroup"
                          listItems={
                            Array [
                              Object {
                                "aria-expanded": false,
                                "aria-label": "Recently viewed",
                                "className": "euiNavDrawerGroup__item",
                                "data-name": "Recently viewed",
                                "iconType": "recentlyViewedApp",
                                "isDisabled": false,
                                "label": "Recently viewed",
                                "onClick": [Function],
                                "size": "s",
                              },
                            ]
                          }
                          showToolTips={true}
                        >
                          <ul
                            aria-label="Recently viewed links, navigation"
                            className="euiListGroup euiListGroup--gutterSmall euiListGroup-maxWidthDefault euiNavDrawerGroup"
                          >
                            <EuiListGroupItem
                              aria-expanded={false}
                              aria-label="Recently viewed"
                              className="euiNavDrawerGroup__item"
                              data-name="Recently viewed"
                              iconType="recentlyViewedApp"
                              isDisabled={false}
                              key="title-0"
                              label="Recently viewed"
                              onClick={[Function]}
                              showToolTip={true}
                              size="s"
                              wrapText={false}
                            >
                              <li
                                className="euiListGroupItem euiListGroupItem--small euiListGroupItem-isClickable euiNavDrawerGroup__item"
                              >
                                <EuiToolTip
                                  anchorClassName="euiListGroupItem__tooltip"
                                  content="Recently viewed"
                                  delay="long"
                                  position="right"
                                >
                                  <span
                                    className="euiToolTipAnchor euiListGroupItem__tooltip"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <button
                                      aria-expanded={false}
                                      aria-label="Recently viewed"
                                      className="euiListGroupItem__button"
                                      data-name="Recently viewed"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      type="button"
                                    >
                                      <EuiIcon
                                        className="euiListGroupItem__icon"
                                        type="recentlyViewedApp"
                                      >
                                        <div
                                          className="euiListGroupItem__icon"
                                          data-euiicon-type="recentlyViewedApp"
                                        />
                                      </EuiIcon>
                                      <span
                                        className="euiListGroupItem__label"
                                      >
                                        Recently viewed
                                      </span>
                                    </button>
                                  </span>
                                </EuiToolTip>
                              </li>
                            </EuiListGroupItem>
                          </ul>
                        </EuiListGroup>
                      </EuiNavDrawerGroup>
                      <EuiHorizontalRule
                        key=".$.1"
                        margin="none"
                      >
                        <hr
                          className="euiHorizontalRule euiHorizontalRule--full"
                        />
                      </EuiHorizontalRule>
                      <EuiNavDrawerGroup
                        aria-label="Primary navigation links"
                        data-test-subj="navDrawerAppsMenu"
                        flyoutMenuButtonClick={[Function]}
                        key=".$.2"
                        listItems={
                          Array [
                            Object {
                              "data-test-subj": "navDrawerAppsMenuLink",
                              "href": undefined,
                              "icon": undefined,
                              "iconType": undefined,
                              "isActive": false,
                              "isDisabled": undefined,
                              "label": "kibana",
                              "onClick": [Function],
                            },
                          ]
                        }
                        showToolTips={true}
                      >
                        <EuiListGroup
                          aria-label="Primary navigation links"
                          className="euiNavDrawerGroup"
                          data-test-subj="navDrawerAppsMenu"
                          listItems={
                            Array [
                              Object {
                                "aria-label": "kibana",
                                "className": "euiNavDrawerGroup__item",
                                "data-name": "kibana",
                                "data-test-subj": "navDrawerAppsMenuLink",
                                "href": undefined,
                                "icon": <span
                                  className="euiNavDrawerGroup__itemDefaultIcon"
                                >
                                  k
                                </span>,
                                "iconType": undefined,
                                "isActive": false,
                                "isDisabled": undefined,
                                "label": "kibana",
                                "onClick": [Function],
                                "size": "s",
                              },
                            ]
                          }
                          showToolTips={true}
                        >
                          <ul
                            aria-label="Primary navigation links"
                            className="euiListGroup euiListGroup--gutterSmall euiListGroup-maxWidthDefault euiNavDrawerGroup"
                            data-test-subj="navDrawerAppsMenu"
                          >
                            <EuiListGroupItem
                              aria-label="kibana"
                              className="euiNavDrawerGroup__item"
                              data-name="kibana"
                              data-test-subj="navDrawerAppsMenuLink"
                              icon={
                                <span
                                  className="euiNavDrawerGroup__itemDefaultIcon"
                                >
                                  k
                                </span>
                              }
                              isActive={false}
                              key="title-0"
                              label="kibana"
                              onClick={[Function]}
                              showToolTip={true}
                              size="s"
                              wrapText={false}
                            >
                              <li
                                className="euiListGroupItem euiListGroupItem--small euiListGroupItem-isClickable euiNavDrawerGroup__item"
                              >
                                <EuiToolTip
                                  anchorClassName="euiListGroupItem__tooltip"
                                  content="kibana"
                                  delay="long"
                                  position="right"
                                >
                                  <span
                                    className="euiToolTipAnchor euiListGroupItem__tooltip"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <button
                                      aria-label="kibana"
                                      className="euiListGroupItem__button"
                                      data-name="kibana"
                                      data-test-subj="navDrawerAppsMenuLink"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      type="button"
                                    >
                                      <span
                                        className="euiListGroupItem__icon euiNavDrawerGroup__itemDefaultIcon"
                                      >
                                        k
                                      </span>
                                      <span
                                        className="euiListGroupItem__label"
                                      >
                                        kibana
                                      </span>
                                    </button>
                                  </span>
                                </EuiToolTip>
                              </li>
                            </EuiListGroupItem>
                          </ul>
                        </EuiListGroup>
                      </EuiNavDrawerGroup>
                    </div>
                  </div>
                </EuiFlexItem>
                <EuiNavDrawerFlyout
                  id="navDrawerFlyout"
                  isCollapsed={true}
                  listItems={null}
                  onClose={[Function]}
                  wrapText={true}
                >
                  <div
                    aria-labelledby="navDrawerFlyoutTitle"
                    className="euiNavDrawerFlyout euiNavDrawerFlyout-isCollapsed"
                    id="navDrawerFlyout"
                    onKeyDown={[Function]}
                  >
                    <EuiTitle
                      className="euiNavDrawerFlyout__title"
                      size="xxs"
                    >
                      <div
                        className="euiTitle euiTitle--xxsmall euiNavDrawerFlyout__title"
                        id="navDrawerFlyoutTitle"
                        tabIndex={-1}
                      />
                    </EuiTitle>
                  </div>
                </EuiNavDrawerFlyout>
              </div>
            </EuiFlexGroup>
          </nav>
        </EuiOutsideClickDetector>
      </EuiNavDrawer>
    </ForwardRef(NavDrawerRenderer)>
  </header>
</Header>
`;
