/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import { run } from '@kbn/dev-cli-runner';
import { REPO_ROOT } from '@kbn/repo-info';
import { readdirSync, readFileSync, writeFileSync } from 'fs';
import Path from 'path';

const PATTERNS_DIR = Path.resolve(REPO_ROOT, 'src/platform/packages/shared/kbn-grok-ui/patterns');
const PATTERN_MAP_DIR = Path.resolve(
  REPO_ROOT,
  'src/platform/packages/shared/kbn-grok-ui/constants'
);
const patternLineRegex = /^([A-Z0-9_]+)\s+(.+)/;
const splitLineRegex = /\r?\n/;

run(async ({ log }) => {
  const files = readdirSync(PATTERNS_DIR);

  const patternMap: Record<string, string> = {};

  const writePatternMap = (patterns: Record<string, string>) => {
    const patternMapContent = `
    // !This file is auto-generated by generate_patterns_cli.ts!
    export const PATTERN_MAP = ${JSON.stringify(patterns, null, 2)};`;
    writeFileSync(Path.join(PATTERN_MAP_DIR, 'pattern_map.ts'), patternMapContent);
  };

  const handleFile = (fileContent: Buffer, patterns: Record<string, string>) => {
    if (fileContent) {
      const lines = fileContent.toString().split(splitLineRegex);

      if (lines && lines.length) {
        lines.forEach((line) => {
          const elements = patternLineRegex.exec(line);

          if (elements && elements.length > 2) {
            patterns[elements[1]] = elements[2];
          }
        });
      }
    }
  };

  files.forEach((file, index) => {
    const fileContent = readFileSync(Path.join(PATTERNS_DIR, file));
    handleFile(fileContent, patternMap);
    if (index === files.length - 1) {
      writePatternMap(patternMap);
      log.success('All patterns generated successfully');
    }
  });
});
