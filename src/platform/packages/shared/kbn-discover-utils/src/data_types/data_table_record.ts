/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import type { SearchHit } from '@elastic/elasticsearch/lib/api/typesWithBodyKey';

type DiscoverSearchHit = SearchHit<Record<string, unknown>>;

export interface EsHitRecord extends Omit<DiscoverSearchHit, '_index' | '_id' | '_source'> {
  _index?: DiscoverSearchHit['_index'];
  _id?: DiscoverSearchHit['_id'];
  _source?: DiscoverSearchHit['_source'];
}

/**
 * This is the record/row of data provided to our Data Table
 */
export class DataTableRecord {
  /**
   * A unique id generated by index, id and routing of a record
   */
  readonly id: string;
  /**
   * The document returned by Elasticsearch for search queries
   */
  readonly raw: EsHitRecord;
  /**
   * A flattened version of the ES doc or data provided by SQL, aggregations ...
   */
  readonly flattened: Record<string, unknown>;
  /**
   * Determines that the given doc is the anchor doc when rendering view surrounding docs
   */
  readonly isAnchor?: boolean;

  constructor({
    id,
    raw,
    flattened,
    isAnchor,
  }: {
    id: string;
    raw: EsHitRecord;
    flattened: Record<string, unknown>;
    isAnchor?: boolean;
  }) {
    this.id = id;
    this.raw = raw;
    this.isAnchor = isAnchor;
    this.flattened = flattened;
  }
}
