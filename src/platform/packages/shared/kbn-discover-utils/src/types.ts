/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import type { SearchHit } from '@elastic/elasticsearch/lib/api/types';
import type { DatatableColumnMeta } from '@kbn/expressions-plugin/common';

export type { IgnoredReason, ShouldShowFieldInTableHandler } from './utils';
export type {
  RowControlColumn,
  RowControlComponent,
  RowControlProps,
  RowControlRowProps,
} from './components/custom_control_columns/types';
export type * from './components/app_menu/types';
export { AppMenuActionId, AppMenuActionType } from './components/app_menu/types';

type DiscoverSearchHit = SearchHit<Record<string, unknown>>;

export interface EsHitRecord extends Omit<DiscoverSearchHit, '_index' | '_id' | '_source'> {
  _index?: DiscoverSearchHit['_index'];
  _id?: DiscoverSearchHit['_id'];
  _source?: DiscoverSearchHit['_source'];
}

/**
 * This is the record/row of data provided to our Data Table
 */
export interface DataTableRecord {
  /**
   * A unique id generated by index, id and routing of a record
   */
  id: string;
  /**
   * The document returned by Elasticsearch for search queries
   */
  raw: EsHitRecord;
  /**
   * A flattened version of the ES doc or data provided by SQL, aggregations ...
   */
  flattened: Record<string, unknown>;
  /**
   * Determines that the given doc is the anchor doc when rendering view surrounding docs
   */
  isAnchor?: boolean;
}

/**
 * Custom column types per column name
 */
export type DataTableColumnsMeta = Record<
  string,
  {
    type: DatatableColumnMeta['type'];
    esType?: DatatableColumnMeta['esType'];
  }
>;

type FormattedHitPair = readonly [
  fieldDisplayName: string,
  formattedValue: string,
  fieldName: string | null // `null` is when number of fields is limited and there is an extra pair about it
];

/**
 * Pairs array for each field in the hit
 */
export type FormattedHit = FormattedHitPair[];

export interface LogDocumentOverview
  extends LogResourceFields,
    LogStackTraceFields,
    LogCloudFields {
  '@timestamp': string;
  'log.level'?: string;
  message?: string;
  'error.message'?: string;
  'event.original'?: string;
  'trace.id'?: string;
  'log.file.path'?: string;
  'data_stream.namespace': string;
  'data_stream.dataset': string;
}

export interface LogResourceFields {
  'host.name'?: string;
  'service.name'?: string;
  'agent.name'?: string;
  'orchestrator.cluster.name'?: string;
  'orchestrator.cluster.id'?: string;
  'orchestrator.resource.id'?: string;
  'orchestrator.namespace'?: string;
  'container.name'?: string;
  'container.id'?: string;
}

export interface LogStackTraceFields {
  'error.stack_trace'?: string;
  'error.exception.stacktrace'?: string;
  'error.log.stacktrace'?: string;
}

export interface LogCloudFields {
  'cloud.provider'?: string;
  'cloud.region'?: string;
  'cloud.availability_zone'?: string;
  'cloud.project.id'?: string;
  'cloud.instance.id'?: string;
}

export interface TraceDocumentOverview
  extends ServiceFields,
    TransactionTraceFields,
    SpanTraceFields,
    UserAgentTraceFields {
  '@timestamp': number;
  'trace.id': string;
  'parent.id'?: string;
  'http.response.status_code'?: number;
  'processor.event'?: 'span' | 'transaction';
}

export interface ServiceFields {
  'service.name': string;
  'service.environment': string;
  'agent.name': string;
}

export interface TransactionTraceFields {
  'transaction.id'?: string;
  'transaction.name'?: string;
  'transaction.duration.us'?: number;
}

export interface SpanTraceFields {
  'span.name'?: string;
  'span.action'?: string;
  'span.duration.us'?: number;
  'span.type'?: string;
  'span.subtype'?: string;
  'span.destination.service.resource'?: string;
}

export interface UserAgentTraceFields {
  'user_agent.name'?: string;
  'user_agent.version'?: string;
}
