/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

/* eslint-disable no-console */

import { camelCase } from 'lodash';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import type { ElasticsearchSettingsDefinition } from '../src/definitions/types';
import { readElasticsearchDefinitions } from './utils/elasticsearch_definitions';

const GENERATED_DEFINITIONS_PATH = '../src/definitions/generated';
const ELASTICSEARCH_SETTINGS_PATH =
  '/docs/reference/query-languages/esql/kibana/definition/settings';

async function generateElasticsearchSettingsDefinitions(): Promise<void> {
  const pathToElasticsearch = process.argv[2];

  const esSettingsDefinitions = readElasticsearchDefinitions<ElasticsearchSettingsDefinition>({
    pathToElasticsearch,
    definitionsPath: ELASTICSEARCH_SETTINGS_PATH,
    definitionType: 'Settings',
  });

  const outputSettingsDir = join(__dirname, GENERATED_DEFINITIONS_PATH);
  await mkdir(outputSettingsDir, { recursive: true });

  const outputTsPath = join(outputSettingsDir, 'settings.ts');

  // Generate individual setting constants
  const settingConstants = esSettingsDefinitions
    .map((setting) => {
      const settingName = setting.name;
      return `const ${camelCase(settingName)} = ${JSON.stringify(setting, null, 2)};`;
    })
    .join('\n\n');

  // Generate array of setting names for export
  const settingNames = esSettingsDefinitions.map((setting) => camelCase(setting.name)).join(', ');

  const tsContent = `
// Do not edit this manually... generated by scripts/generate_settings.ts
${settingConstants}

export const settings = [
  ${settingNames}
];
`;

  await writeFile(outputTsPath, tsContent);

  console.log(`Successfully generated settings to: ${outputTsPath}`);
}

generateElasticsearchSettingsDefinitions().catch((error) => {
  console.error('An unhandled error occurred:', error);
  process.exit(1);
});
