/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

/**
 * __AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.__
 *
 * @note This file is generated by the `generate_function_definitions.ts`
 * script. Do not edit it manually.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

import { i18n } from '@kbn/i18n';
import { type FunctionDefinition, FunctionDefinitionTypes } from '../types';
import { Location } from '../../commands_registry/types';

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const avgOverTimeDefinition: FunctionDefinition = {
  type: FunctionDefinitionTypes.TIME_SERIES_AGG,
  name: 'avg_over_time',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.avg_over_time', {
    defaultMessage: 'The average over time of a numeric field.',
  }),
  ignoreAsSuggestion: true,
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'number',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'number',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
  ],
  locationsAvailable: [Location.STATS_TIMESERIES],
  validate: undefined,
  examples: [
    'TS k8s\n| STATS max_cost=max(avg_over_time(network.cost)) BY cluster, time_bucket = bucket(@timestamp,1minute)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const firstOverTimeDefinition: FunctionDefinition = {
  type: FunctionDefinitionTypes.TIME_SERIES_AGG,
  name: 'first_over_time',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.first_over_time', {
    defaultMessage:
      'The earliest value of a field, where recency determined by the `@timestamp` field.',
  }),
  ignoreAsSuggestion: true,
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'field',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'field',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
  ],
  locationsAvailable: [Location.STATS_TIMESERIES],
  validate: undefined,
  examples: [
    'TS k8s\n| STATS max_cost=max(first_over_time(network.cost)) BY cluster, time_bucket = bucket(@timestamp,1minute)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const lastOverTimeDefinition: FunctionDefinition = {
  type: FunctionDefinitionTypes.TIME_SERIES_AGG,
  name: 'last_over_time',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.last_over_time', {
    defaultMessage:
      'The latest value of a field, where recency determined by the `@timestamp` field.',
  }),
  ignoreAsSuggestion: true,
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'field',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'field',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
  ],
  locationsAvailable: [Location.STATS_TIMESERIES],
  validate: undefined,
  examples: [
    'TS k8s\n| STATS max_cost=max(last_over_time(network.cost)) BY cluster, time_bucket = bucket(@timestamp,1minute)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const maxOverTimeDefinition: FunctionDefinition = {
  type: FunctionDefinitionTypes.TIME_SERIES_AGG,
  name: 'max_over_time',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.max_over_time', {
    defaultMessage: 'The maximum over time value of a field.',
  }),
  ignoreAsSuggestion: true,
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'field',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'field',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'keyword',
    },
    {
      params: [
        {
          name: 'field',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'field',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'keyword',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  locationsAvailable: [Location.STATS_TIMESERIES],
  validate: undefined,
  examples: [
    'TS k8s\n| STATS cost=sum(max_over_time(network.cost)) BY cluster, time_bucket = bucket(@timestamp,1minute)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const minOverTimeDefinition: FunctionDefinition = {
  type: FunctionDefinitionTypes.TIME_SERIES_AGG,
  name: 'min_over_time',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.min_over_time', {
    defaultMessage: 'The minimum over time value of a field.',
  }),
  ignoreAsSuggestion: true,
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'field',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'field',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'keyword',
    },
    {
      params: [
        {
          name: 'field',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'field',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'keyword',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  locationsAvailable: [Location.STATS_TIMESERIES],
  validate: undefined,
  examples: [
    'TS k8s\n| STATS cost=sum(min_over_time(network.cost)) BY cluster, time_bucket = bucket(@timestamp,1minute)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const rateDefinition: FunctionDefinition = {
  type: FunctionDefinitionTypes.TIME_SERIES_AGG,
  name: 'rate',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.rate', {
    defaultMessage: 'The rate of a counter field.',
  }),
  ignoreAsSuggestion: true,
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'counter_double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'field',
          type: 'counter_integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'field',
          type: 'counter_long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
  ],
  locationsAvailable: [Location.STATS_TIMESERIES],
  validate: undefined,
  examples: [
    'TS k8s\n| STATS max(rate(network.total_bytes_in)) BY time_bucket = bucket(@timestamp,5minute)',
  ],
};
export const timeSeriesAggFunctionDefinitions = [
  avgOverTimeDefinition,
  firstOverTimeDefinition,
  lastOverTimeDefinition,
  maxOverTimeDefinition,
  minOverTimeDefinition,
  rateDefinition,
];
