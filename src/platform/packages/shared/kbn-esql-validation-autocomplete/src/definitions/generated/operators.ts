/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

/**
 * __AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.__
 *
 * @note This file is generated by the `generate_function_definitions.ts`
 * script. Do not edit it manually.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

import { i18n } from '@kbn/i18n';
import type { FunctionDefinition } from '../types';

import { isNumericType } from '../../shared/esql_types';

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const addDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '+',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.add', {
    defaultMessage:
      'Add two numbers together. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_period',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_period',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_period',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date_period',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_duration',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_duration',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_duration',
          optional: false,
        },
        {
          name: 'right',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'time_duration',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'unsigned_long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_literal',
        },
        {
          name: 'right',
          type: 'date',
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
        },
        {
          name: 'right',
          type: 'time_literal',
        },
      ],
      returnType: 'date',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const divDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '/',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.div', {
    defaultMessage:
      'Divide one number by another. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'unsigned_long',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: (fnDef) => {
    const [left, right] = fnDef.args;
    const messages = [];
    if (!Array.isArray(left) && !Array.isArray(right)) {
      if (right.type === 'literal' && isNumericType(right.literalType)) {
        if (right.value === 0) {
          messages.push({
            type: 'warning' as const,
            code: 'divideByZero',
            text: i18n.translate(
              'kbn-esql-validation-autocomplete.esql.divide.warning.divideByZero',
              {
                defaultMessage: 'Cannot divide by zero: {left}/{right}',
                values: {
                  left: left.text,
                  right: right.value,
                },
              }
            ),
            location: fnDef.location,
          });
        }
      }
    }
    return messages;
  },
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const equalsDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '==',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.equals', {
    defaultMessage:
      'Check if two fields are equal. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'right',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'ip',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'version',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
        },
        {
          name: 'right',
          type: 'boolean',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
        },
        {
          name: 'right',
          type: 'keyword',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'boolean',
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const greaterThanDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '>',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.greater_than', {
    defaultMessage:
      'Check if one field is greater than another. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'ip',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'version',
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const greaterThanOrEqualDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '>=',
  description: i18n.translate(
    'kbn-esql-validation-autocomplete.esql.definitions.greater_than_or_equal',
    {
      defaultMessage:
        'Check if one field is greater than or equal to another. If either field is multivalued then the result is `null`.',
    }
  ),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'ip',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'version',
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const inDefinition: FunctionDefinition = {
  type: 'builtin',
  name: 'in',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.in', {
    defaultMessage:
      'The `IN` operator allows testing whether a field or expression equals an element in a list of literals, fields or expressions.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'right',
          type: 'boolean[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_point[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_shape[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_point[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_shape[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['eval', 'where', 'row', 'sort'],
  supportedOptions: undefined,
  validate: undefined,
  examples: ['ROW a = 1, b = 4, c = 3\n| WHERE c-a IN (3, b / 2, a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const lessThanDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '<',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.less_than', {
    defaultMessage:
      'Check if one field is less than another. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'ip',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'version',
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const lessThanOrEqualDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '<=',
  description: i18n.translate(
    'kbn-esql-validation-autocomplete.esql.definitions.less_than_or_equal',
    {
      defaultMessage:
        'Check if one field is less than or equal to another. If either field is multivalued then the result is `null`.',
    }
  ),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const likeDefinition: FunctionDefinition = {
  type: 'builtin',
  name: 'like',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.like', {
    defaultMessage:
      'Use `LIKE` to filter data based on string patterns using wildcards. `LIKE`\nusually acts on a field placed on the left-hand side of the operator, but it can\nalso act on a constant (literal) expression. The right-hand side of the operator\nrepresents the pattern.\n\nThe following wildcard characters are supported:\n\n* `*` matches zero or more characters.\n* `?` matches one character.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'text',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'text',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['eval', 'where', 'row', 'sort'],
  supportedOptions: undefined,
  validate: undefined,
  examples: ['FROM employees\n| WHERE first_name LIKE """?b*"""\n| KEEP first_name, last_name'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const matchOperatorDefinition: FunctionDefinition = {
  type: 'builtin',
  name: ':',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.match_operator', {
    defaultMessage:
      'Use the match operator (`:`) to perform a match query on the specified field.\nUsing `:` is equivalent to using the `match` query in the Elasticsearch Query DSL.\n\nThe match operator is equivalent to the match function.\n\nFor using the function syntax, or adding match query parameters, you can use the\nmatch function.\n\n`:` returns true if the provided query matches the row.',
  }),
  preview: true,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'boolean',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'date',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'date_nanos',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'double',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'integer',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'long',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'double',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'integer',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'long',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'ip',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'double',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'integer',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'long',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'double',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'integer',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'long',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'unsigned_long',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'keyword',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
          fieldsOnly: true,
        },
        {
          name: 'query',
          type: 'version',
          optional: false,
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['where'],
  supportedOptions: [],
  validate: undefined,
  examples: [
    'FROM books \n| WHERE MATCH(author, "Faulkner")\n| KEEP book_no, author \n| SORT book_no \n| LIMIT 5;',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const modDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '%',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mod', {
    defaultMessage:
      'Divide one number by another and return the remainder. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'unsigned_long',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: (fnDef) => {
    const [left, right] = fnDef.args;
    const messages = [];
    if (!Array.isArray(left) && !Array.isArray(right)) {
      if (right.type === 'literal' && isNumericType(right.literalType)) {
        if (right.value === 0) {
          messages.push({
            type: 'warning' as const,
            code: 'moduleByZero',
            text: i18n.translate(
              'kbn-esql-validation-autocomplete.esql.divide.warning.zeroModule',
              {
                defaultMessage: 'Module by zero can return null value: {left}%{right}',
                values: {
                  left: left.text,
                  right: right.value,
                },
              }
            ),
            location: fnDef.location,
          });
        }
      }
    }
    return messages;
  },
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mulDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '*',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mul', {
    defaultMessage:
      'Multiply two numbers together. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'unsigned_long',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const negDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '-',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.neg', {
    defaultMessage: 'Returns the negation of the argument.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date_period',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'time_duration',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics'],
  supportedOptions: undefined,
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const notEqualsDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '!=',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.not_equals', {
    defaultMessage:
      'Check if two fields are unequal. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'right',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'ip',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
        },
        {
          name: 'right',
          type: 'text',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'version',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
        },
        {
          name: 'right',
          type: 'boolean',
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
        },
        {
          name: 'right',
          type: 'keyword',
          constantOnly: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          constantOnly: true,
        },
        {
          name: 'right',
          type: 'boolean',
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const notInDefinition: FunctionDefinition = {
  type: 'builtin',
  name: 'not_in',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.not_in', {
    defaultMessage:
      'The `NOT IN` operator allows testing whether a field or expression does *not* equal any element in a list of literals, fields or expressions.',
  }),
  ignoreAsSuggestion: true,

  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'right',
          type: 'boolean[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_point[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'cartesian_shape[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_point[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'right',
          type: 'geo_shape[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'ip',
          optional: false,
        },
        {
          name: 'right',
          type: 'ip[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'right',
          type: 'text[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'keyword[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'text',
          optional: false,
        },
        {
          name: 'right',
          type: 'text[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'left',
          type: 'version',
          optional: false,
        },
        {
          name: 'right',
          type: 'version[]',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['eval', 'where', 'row', 'sort'],
  supportedOptions: undefined,
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const notLikeDefinition: FunctionDefinition = {
  type: 'builtin',
  name: 'not_like',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.not_like', {
    defaultMessage:
      'Use `NOT LIKE` to filter data based on string patterns using wildcards. `NOT LIKE`\nusually acts on a field placed on the left-hand side of the operator, but it can\nalso act on a constant (literal) expression. The right-hand side of the operator\nrepresents the pattern.\n\nThe following wildcard characters are supported:\n\n* `*` matches zero or more characters.\n* `?` matches one character.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'text',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['eval', 'where', 'row', 'sort'],
  supportedOptions: undefined,
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const notRlikeDefinition: FunctionDefinition = {
  type: 'builtin',
  name: 'not_rlike',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.not_rlike', {
    defaultMessage:
      'Use `NOT RLIKE` to filter data based on string patterns using using\nregular expressions. `NOT RLIKE` usually acts on a field placed on\nthe left-hand side of the operator, but it can also act on a constant (literal)\nexpression. The right-hand side of the operator represents the pattern.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'text',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['eval', 'where', 'row', 'sort'],
  supportedOptions: undefined,
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const rlikeDefinition: FunctionDefinition = {
  type: 'builtin',
  name: 'rlike',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.rlike', {
    defaultMessage:
      'Use `RLIKE` to filter data based on string patterns using using\nregular expressions. `RLIKE` usually acts on a field placed on\nthe left-hand side of the operator, but it can also act on a constant (literal)\nexpression. The right-hand side of the operator represents the pattern.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'text',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'text',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'keyword',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
    {
      params: [
        {
          name: 'str',
          type: 'keyword',
          optional: false,
        },
        {
          name: 'pattern',
          type: 'text',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['eval', 'where', 'row', 'sort'],
  supportedOptions: undefined,
  validate: undefined,
  examples: [
    'FROM employees\n| WHERE first_name RLIKE """.leja.*"""\n| KEEP first_name, last_name',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const subDefinition: FunctionDefinition = {
  type: 'builtin',
  name: '-',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.sub', {
    defaultMessage:
      'Subtract one number from another. If either field is multivalued then the result is `null`.',
  }),
  preview: false,
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
          optional: false,
        },
        {
          name: 'right',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_nanos',
          optional: false,
        },
        {
          name: 'right',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_period',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date_period',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_period',
          optional: false,
        },
      ],
      returnType: 'date_period',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'double',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'integer',
    },
    {
      params: [
        {
          name: 'left',
          type: 'integer',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'double',
          optional: false,
        },
      ],
      returnType: 'double',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'integer',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'long',
          optional: false,
        },
        {
          name: 'right',
          type: 'long',
          optional: false,
        },
      ],
      returnType: 'long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_duration',
          optional: false,
        },
        {
          name: 'right',
          type: 'date_nanos',
          optional: false,
        },
      ],
      returnType: 'date_nanos',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_duration',
          optional: false,
        },
        {
          name: 'right',
          type: 'time_duration',
          optional: false,
        },
      ],
      returnType: 'time_duration',
    },
    {
      params: [
        {
          name: 'left',
          type: 'unsigned_long',
          optional: false,
        },
        {
          name: 'right',
          type: 'unsigned_long',
          optional: false,
        },
      ],
      returnType: 'unsigned_long',
    },
    {
      params: [
        {
          name: 'left',
          type: 'time_literal',
        },
        {
          name: 'right',
          type: 'date',
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'left',
          type: 'date',
        },
        {
          name: 'right',
          type: 'time_literal',
        },
      ],
      returnType: 'date',
    },
  ],
  supportedCommands: ['stats', 'inlinestats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};
export const operatorsFunctionDefinitions = [
  addDefinition,
  divDefinition,
  equalsDefinition,
  greaterThanDefinition,
  greaterThanOrEqualDefinition,
  inDefinition,
  lessThanDefinition,
  lessThanOrEqualDefinition,
  likeDefinition,
  matchOperatorDefinition,
  modDefinition,
  mulDefinition,
  negDefinition,
  notEqualsDefinition,
  notInDefinition,
  notLikeDefinition,
  notRlikeDefinition,
  rlikeDefinition,
  subDefinition,
];
