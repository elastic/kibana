/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import type { ESQLAstQueryExpression } from '@kbn/esql-ast';
import { BasicPrettyPrinter, Builder } from '@kbn/esql-ast';
import type {
  ESQLColumnData,
  ESQLFieldWithMetadata,
  ESQLPolicy,
} from '@kbn/esql-ast/src/commands_registry/types';
import { getCurrentQueryAvailableColumns, getFieldsFromES } from './helpers';
import type { ESQLCallbacks } from './types';

export const NOT_SUGGESTED_TYPES = ['unsupported'];

/**
 * Responsible for efficiently computing the list of columns generated by a specific ESQL query.
 */
export class QueryColumns {
  private static readonly cache = new Map<string, ESQLColumnData[]>();

  /**
   * Retrieves from cache the columns for a given query, ignoring case.
   * @param query
   * @returns
   */
  private static fromCache(query: string) {
    for (const key of QueryColumns.cache.keys()) {
      if (key.toLowerCase() === query.toLowerCase()) {
        return QueryColumns.cache.get(key);
      }
    }
    return undefined;
  }

  // once computed, the columns for the query will be cached here
  private readonly fullQueryCacheKey: string;

  constructor(
    private readonly query: ESQLAstQueryExpression,
    private readonly originalQueryText: string,
    private readonly resourceRetriever?: ESQLCallbacks
  ) {
    this.fullQueryCacheKey = BasicPrettyPrinter.print(this.query);
  }

  /**
   * Returns columns for this query, filtered by type and optionally ignoring some names.
   */
  async byType(
    expectedType: Readonly<string> | Readonly<string[]> = 'any',
    ignored: string[] = []
  ): Promise<ESQLColumnData[]> {
    const types = Array.isArray(expectedType) ? expectedType : [expectedType];
    await this.buildCache();
    const cachedFields = QueryColumns.fromCache(this.fullQueryCacheKey);
    return (
      cachedFields?.filter(({ name, type }) => {
        const ts = Array.isArray(type) ? type : [type];
        return (
          !ignored.includes(name) &&
          (types[0] === 'any' || ts.some((t) => types.includes(t))) &&
          !NOT_SUGGESTED_TYPES.includes(type)
        );
      }) || []
    );
  }

  /**
   * Returns a map of column name to column metadata for this query.
   */
  async asMap(): Promise<Map<string, ESQLColumnData>> {
    await this.buildCache();
    const cachedFields = QueryColumns.fromCache(this.fullQueryCacheKey);
    const cacheCopy = new Map<string, ESQLColumnData>();
    cachedFields?.forEach((field) => cacheCopy.set(field.name, field));
    return cacheCopy;
  }

  /**
   * Ensures the cache is populated for all subqueries of this query context.
   */
  private async buildCache() {
    if (!this.fullQueryCacheKey) return;

    const getFields = async (queryToES: string) => {
      const cached = QueryColumns.fromCache(queryToES);
      if (cached) return cached as ESQLFieldWithMetadata[];
      const fields = await getFieldsFromES(queryToES, this.resourceRetriever);
      QueryColumns.cache.set(queryToES, fields);
      return fields;
    };

    const subqueries = [];
    for (let i = 0; i < this.query.commands.length; i++) {
      subqueries.push(Builder.expression.query(this.query.commands.slice(0, i + 1)));
    }

    const getPolicies = async () => {
      const policies = (await this.resourceRetriever?.getPolicies?.()) ?? [];
      return new Map(policies.map((p) => [p.name, p]));
    };

    for (const subquery of subqueries) {
      await this.cacheColumnsForQuery(subquery, getFields, getPolicies);
    }
  }

  /**
   * Caches the columns for a given query if not already cached.
   * @param query
   * @param fetchFields
   * @param getPolicies
   */
  async cacheColumnsForQuery(
    query: ESQLAstQueryExpression,
    fetchFields: (query: string) => Promise<ESQLFieldWithMetadata[]>,
    getPolicies: () => Promise<Map<string, ESQLPolicy>>
  ) {
    let cacheKey: string;
    try {
      cacheKey = BasicPrettyPrinter.print(query);
    } catch {
      // for some syntactically incorrect queries
      // the printer will throw. They're incorrect
      // anyways, so just move on â€” ANTLR errors will
      // be reported.
      return;
    }

    const existsInCache = Boolean(QueryColumns.fromCache(cacheKey));
    if (existsInCache) {
      // this is already in the cache
      return;
    }

    const queryBeforeCurrentCommand = BasicPrettyPrinter.print({
      ...query,
      commands: query.commands.slice(0, -1),
    });
    const fieldsAvailableAfterPreviousCommand =
      QueryColumns.fromCache(queryBeforeCurrentCommand) ?? [];

    const availableFields = await getCurrentQueryAvailableColumns(
      query.commands,
      fieldsAvailableAfterPreviousCommand,
      fetchFields,
      getPolicies,
      this.originalQueryText
    );

    QueryColumns.cache.set(cacheKey, availableFields);
  }
}

export function getPolicyHelper(resourceRetriever?: ESQLCallbacks) {
  const getPolicies = async () => {
    return (await resourceRetriever?.getPolicies?.()) || [];
  };
  return {
    getPolicies: async () => {
      const policies = await getPolicies();
      return policies;
    },
    getPolicyMetadata: async (policyName: string) => {
      const policies = await getPolicies();
      return policies.find(({ name }) => name === policyName);
    },
  };
}

export function getSourcesHelper(resourceRetriever?: ESQLCallbacks) {
  return async () => {
    return (await resourceRetriever?.getSources?.()) || [];
  };
}
