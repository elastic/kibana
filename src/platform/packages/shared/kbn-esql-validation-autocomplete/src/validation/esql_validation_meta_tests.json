{
  "indexes": [
    "a_index",
    "index",
    "other_index",
    ".secret_index",
    "my-index",
    "unsupported_index"
  ],
  "fields": [
    {
      "name": "booleanField",
      "type": "boolean"
    },
    {
      "name": "dateField",
      "type": "date"
    },
    {
      "name": "doubleField",
      "type": "double"
    },
    {
      "name": "ipField",
      "type": "ip"
    },
    {
      "name": "keywordField",
      "type": "keyword"
    },
    {
      "name": "integerField",
      "type": "integer"
    },
    {
      "name": "longField",
      "type": "long"
    },
    {
      "name": "textField",
      "type": "text"
    },
    {
      "name": "unsignedLongField",
      "type": "unsigned_long"
    },
    {
      "name": "versionField",
      "type": "version"
    },
    {
      "name": "cartesianPointField",
      "type": "cartesian_point"
    },
    {
      "name": "cartesianShapeField",
      "type": "cartesian_shape"
    },
    {
      "name": "geoPointField",
      "type": "geo_point"
    },
    {
      "name": "geoShapeField",
      "type": "geo_shape"
    },
    {
      "name": "counterIntegerField",
      "type": "counter_integer"
    },
    {
      "name": "counterLongField",
      "type": "counter_long"
    },
    {
      "name": "counterDoubleField",
      "type": "counter_double"
    },
    {
      "name": "unsupportedField",
      "type": "unsupported"
    },
    {
      "name": "dateNanosField",
      "type": "date_nanos"
    },
    {
      "name": "functionNamedParametersField",
      "type": "function_named_parameters"
    },
    {
      "name": "any#Char$Field",
      "type": "double"
    },
    {
      "name": "kubernetes.something.something",
      "type": "double"
    },
    {
      "name": "@timestamp",
      "type": "date"
    },
    {
      "name": "otherStringField",
      "type": "keyword"
    }
  ],
  "enrichFields": [
    {
      "name": "otherField",
      "type": "text"
    },
    {
      "name": "yetAnotherField",
      "type": "double"
    },
    {
      "name": "otherStringField",
      "type": "keyword"
    }
  ],
  "policies": [
    {
      "name": "policy",
      "sourceIndices": [
        "enrich_index"
      ],
      "matchField": "otherStringField",
      "enrichFields": [
        "otherField",
        "yetAnotherField"
      ]
    },
    {
      "name": "policy$",
      "sourceIndices": [
        "enrich_index"
      ],
      "matchField": "otherStringField",
      "enrichFields": [
        "otherField",
        "yetAnotherField"
      ]
    }
  ],
  "unsupported_field": [
    {
      "name": "unsupported_field",
      "type": "unsupported"
    }
  ],
  "testCases": [
    {
      "query": "",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": " ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "     ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "eval",
      "error": [
        "SyntaxError: mismatched input 'eval' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "stats",
      "error": [
        "SyntaxError: mismatched input 'stats' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "rename",
      "error": [
        "SyntaxError: mismatched input 'rename' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "limit",
      "error": [
        "SyntaxError: mismatched input 'limit' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "keep",
      "error": [
        "SyntaxError: mismatched input 'keep' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "drop",
      "error": [
        "SyntaxError: mismatched input 'drop' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "mv_expand",
      "error": [
        "SyntaxError: mismatched input 'mv_expand' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "dissect",
      "error": [
        "SyntaxError: mismatched input 'dissect' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "grok",
      "error": [
        "SyntaxError: mismatched input 'grok' expecting {'row', 'from', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "row",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
<<<<<<< HEAD
      "query": "show",
      "error": [
        "SyntaxError: missing 'info' at '<EOF>'"
=======
      "query": "row missing_column",
      "error": [
        "Unknown column [missing_column]"
>>>>>>> main
      ],
      "warning": []
    },
    {
<<<<<<< HEAD
      "query": "show info",
=======
      "query": "row fn()",
      "error": [
        "Unknown function [fn]"
      ],
      "warning": []
    },
    {
      "query": "row missing_column, missing_column2",
      "error": [
        "Unknown column [missing_column]",
        "Unknown column [missing_column2]"
      ],
      "warning": []
    },
    {
      "query": "row a=1",
>>>>>>> main
      "error": [],
      "warning": []
    },
    {
<<<<<<< HEAD
      "query": "show doubleField",
      "error": [
        "SyntaxError: token recognition error at: 'd'",
        "SyntaxError: token recognition error at: 'o'",
        "SyntaxError: token recognition error at: 'u'",
        "SyntaxError: token recognition error at: 'b'",
        "SyntaxError: token recognition error at: 'l'",
        "SyntaxError: token recognition error at: 'e'",
        "SyntaxError: token recognition error at: 'F'",
        "SyntaxError: token recognition error at: 'ie'",
        "SyntaxError: token recognition error at: 'l'",
        "SyntaxError: token recognition error at: 'd'",
        "SyntaxError: missing 'info' at '<EOF>'"
=======
      "query": "row a=1, missing_column",
      "error": [
        "Unknown column [missing_column]"
      ],
      "warning": []
    },
    {
      "query": "row a=1, b = average()",
      "error": [
        "Unknown function [average]"
      ],
      "warning": []
    },
    {
      "query": "row a = [1, 2, 3]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [true, false]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [\"a\", \"b\"]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = null",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = (1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = (1, 2, 3)",
      "error": [
        "SyntaxError: no viable alternative at input '(1,'",
        "SyntaxError: extraneous input ')' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a=NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "row NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "row a=NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "row NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true and false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true and null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null and false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null and null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true or false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true or null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null or false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null or null",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField > 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") > to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() > now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false > false",
      "error": [
        "Argument of [>] must be [date], found value [false] type [boolean]",
        "Argument of [>] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() > \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" > now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField >= 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") >= to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() >= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false >= false",
      "error": [
        "Argument of [>=] must be [date], found value [false] type [boolean]",
        "Argument of [>=] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() >= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" >= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField < 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") < to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() < now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false < false",
      "error": [
        "Argument of [<] must be [date], found value [false] type [boolean]",
        "Argument of [<] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() < \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" < now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField <= 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") <= to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() <= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false <= false",
      "error": [
        "Argument of [<=] must be [date], found value [false] type [boolean]",
        "Argument of [<=] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() <= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" <= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField == 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") == to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() == now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false == false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() == \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" == now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField != 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") != to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() != now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false != false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() != \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" != now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 + 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + now()",
      "error": [
        "Argument of [+] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 - 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - now()",
      "error": [
        "Argument of [-] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 * 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * now()",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 / 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() / now()",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 % 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() % now()",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = \"a\" like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 like \"?a\"",
      "error": [
        "Argument of [like] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = 5 NOT like \"?a\"",
      "error": [
        "Argument of [not like] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 like \"?a\"",
      "error": [
        "Argument of [like] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 NOT like \"?a\"",
      "error": [
        "Argument of [not like] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = \"a\" rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = 5 NOT rlike \"?a\"",
      "error": [
        "Argument of [not rlike] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 NOT rlike \"?a\"",
      "error": [
        "Argument of [not rlike] must be [keyword], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"bogus\")",
      "error": [],
      "warning": [
        "Invalid option [\"bogus\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"ASC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"DESC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 anno",
      "error": [
        "ROW does not support [date_period] in expression [1 anno]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "row now() + 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "row 1 year",
      "error": [
        "ROW does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "row 1                year",
      "error": [
        "ROW does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 YEAR",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 year + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 year",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 year",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 year",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 years",
      "error": [
        "ROW does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "row 1                years",
      "error": [
        "ROW does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 YEARS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Years",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 years + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 years",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 years",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 years",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 quarter",
      "error": [
        "ROW does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "row 1                quarter",
      "error": [
        "ROW does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 QUARTER",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 quarter + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 quarter",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 quarter",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 quarter",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 quarters",
      "error": [
        "ROW does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "row 1                quarters",
      "error": [
        "ROW does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 QUARTERS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 quarters + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 quarters",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 quarters",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 quarters",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 month",
      "error": [
        "ROW does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "row 1                month",
      "error": [
        "ROW does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MONTH",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Month",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 month + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 month",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 month",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 month",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 months",
      "error": [
        "ROW does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "row 1                months",
      "error": [
        "ROW does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MONTHS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Months",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 months + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 months",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 months",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 months",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 week",
      "error": [
        "ROW does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "row 1                week",
      "error": [
        "ROW does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 WEEK",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Week",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 week + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 week",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 week",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 week",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 weeks",
      "error": [
        "ROW does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "row 1                weeks",
      "error": [
        "ROW does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 WEEKS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 weeks + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 weeks",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 weeks",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 weeks",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 day",
      "error": [
        "ROW does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "row 1                day",
      "error": [
        "ROW does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 DAY",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Day",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 day + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 day",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 day",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 day",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 days",
      "error": [
        "ROW does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "row 1                days",
      "error": [
        "ROW does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 DAYS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Days",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 days + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 days",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 days",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 days",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 hour",
      "error": [
        "ROW does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "row 1                hour",
      "error": [
        "ROW does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 HOUR",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 hour + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 hour",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 hour",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 hour",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 hours",
      "error": [
        "ROW does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "row 1                hours",
      "error": [
        "ROW does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 HOURS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 hours + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 hours",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 hours",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 hours",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 minute",
      "error": [
        "ROW does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "row 1                minute",
      "error": [
        "ROW does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MINUTE",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 minute + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 minute",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 minute",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 minute",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 minutes",
      "error": [
        "ROW does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "row 1                minutes",
      "error": [
        "ROW does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MINUTES",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 minutes + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 minutes",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 minutes",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 minutes",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 second",
      "error": [
        "ROW does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "row 1                second",
      "error": [
        "ROW does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 SECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Second",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 second + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 second",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 second",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 second",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 seconds",
      "error": [
        "ROW does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "row 1                seconds",
      "error": [
        "ROW does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 SECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 seconds + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 seconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 seconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 seconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 millisecond",
      "error": [
        "ROW does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "row 1                millisecond",
      "error": [
        "ROW does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MILLISECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 millisecond + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 millisecond",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 millisecond",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 millisecond",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 milliseconds",
      "error": [
        "ROW does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "row 1                milliseconds",
      "error": [
        "ROW does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MILLISECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 milliseconds + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * 1 milliseconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 milliseconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 milliseconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 milliseconds] type [duration]"
>>>>>>> main
      ],
      "warning": []
    },
    {
      "query": "from index | limit ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, '['}"
      ],
      "warning": []
    },
    {
      "query": "from index | limit 4 ",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | limit a",
      "error": [
        "SyntaxError: mismatched input 'a' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, '['}"
      ],
      "warning": []
    },
    {
      "query": "from index | limit doubleField",
      "error": [
        "SyntaxError: mismatched input 'doubleField' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, '['}"
      ],
      "warning": []
    },
    {
      "query": "from index | limit textField",
      "error": [
        "SyntaxError: mismatched input 'textField' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, '['}"
      ],
      "warning": []
    },
    {
      "query": "from index | limit 4",
      "error": [],
      "warning": []
    },
    {
      "query": "ROW a=1::LONG | LOOKUP JOIN t ON a",
      "error": [
        "[t] index is not a valid JOIN index. Please use a \"lookup\" mode index JOIN commands."
      ],
      "warning": []
    },
    {
      "query": "from index | drop ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from index | drop 4.5",
      "error": [
        "SyntaxError: token recognition error at: '4'",
        "SyntaxError: token recognition error at: '5'",
        "SyntaxError: mismatched input '.' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}",
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}",
        "Unknown column [.]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop missingField, doubleField, dateField",
      "error": [
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand doubleField, b",
      "error": [
        "SyntaxError: token recognition error at: ','",
        "SyntaxError: extraneous input 'b' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField",
      "error": [
        "SyntaxError: no viable alternative at input 'textField'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename a",
      "error": [
        "SyntaxError: no viable alternative at input 'a'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField as",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}",
        "Error: [as] function expects exactly 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "row a = 10 | rename a as this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField",
      "error": [
        "SyntaxError: missing QUOTED_STRING at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField 2",
      "error": [
        "SyntaxError: mismatched input '2' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField .",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField %a",
      "error": [
        "SyntaxError: mismatched input '%' expecting QUOTED_STRING",
        "SyntaxError: mismatched input '<EOF>' expecting '='"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField",
      "error": [
        "SyntaxError: missing QUOTED_STRING at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField 2",
      "error": [
        "SyntaxError: mismatched input '2' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField .",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField %a",
      "error": [
        "SyntaxError: mismatched input '%' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where *+ doubleField",
      "error": [
        "SyntaxError: extraneous input '*' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where /+ doubleField",
      "error": [
        "SyntaxError: extraneous input '/' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where %+ doubleField",
      "error": [
        "SyntaxError: extraneous input '%' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + ",
      "error": [
        "SyntaxError: no viable alternative at input 'doubleField + '"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(",
      "error": [
        "SyntaxError: no viable alternative at input 'round('"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField), ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval *+ doubleField",
      "error": [
        "SyntaxError: extraneous input '*' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval /+ doubleField",
      "error": [
        "SyntaxError: extraneous input '/' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval %+ doubleField",
      "error": [
        "SyntaxError: extraneous input '%' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField, ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'not', 'null', '?', 'true', '+', '-', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, '[', '(', UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls ",
      "error": [
        "SyntaxError: missing {'first', 'last'} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls ",
      "error": [
        "SyntaxError: missing {'first', 'last'} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich",
      "error": [
        "SyntaxError: missing ENRICH_POLICY_NAME at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [_]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich :policy",
      "error": [
        "SyntaxError: token recognition error at: ':'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', '??', NAMED_OR_POSITIONAL_PARAM, NAMED_OR_POSITIONAL_DOUBLE_PARAMS, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField = 5",
      "error": [],
      "warning": [
        "Column [textField] of type text has been overwritten as new type: integer"
      ]
    },
    {
      "query": "from a_index | eval doubleField = \"5\"",
      "error": [],
      "warning": [
        "Column [doubleField] of type double has been overwritten as new type: keyword"
      ]
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | keep ```round(doubleField) + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | keep ```````round(doubleField) + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | eval ```````round(doubleField) + 1```` + 1`` + 1` + 1 | keep ```````````````round(doubleField) + 1```````` + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | eval ```````round(doubleField) + 1```` + 1`` + 1` + 1 | eval ```````````````round(doubleField) + 1```````` + 1```` + 1`` + 1` + 1 | keep ```````````````````````````````round(doubleField) + 1```````````````` + 1```````` + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1::keyword",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1::keyword::long::double",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1::string==\"keyword\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(\"23\"::double)",
      "error": [
        "Argument of [trim] must be [keyword], found value [\"23\"::double] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::long",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::LONG",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::Long",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::LoNg",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"",
      "error": [
        "Argument of [+] must be [date], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(to_double(\"23\")::keyword::double::long::keyword::double)",
      "error": [
        "Argument of [trim] must be [keyword], found value [to_double(\"23\")::keyword::double::long::keyword::double] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::long)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::unsigned_long)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::int)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::integer)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::Integer)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::double)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::DOUBLE)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::doubla)",
      "error": [
        "Argument of [ceil] must be [double], found value [23::doubla] type [doubla]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::text)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND 0::boolean",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND 0::bool",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND 0",
      "error": [
        "Argument of [and] must be [boolean], found value [0] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(trim(doubleField)::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(trim(doubleField)::keyword::keyword::keyword::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(to_upper(trim(doubleField)::keyword)::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | keep unsupportedField",
      "error": [],
      "warning": [
        "Field [unsupportedField] cannot be retrieved, it is unsupported or not indexed; returning null"
      ]
    }
  ]
}