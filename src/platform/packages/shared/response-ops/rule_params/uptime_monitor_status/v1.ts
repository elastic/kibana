/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import { TypeOf, schema } from '@kbn/config-schema';

export const uptimeMonitorStatusRuleParamsSchema = schema.object({
  stackVersion: schema.maybe(schema.string()),
  availability: schema.maybe(
    schema.object({
      range: schema.number(),
      rangeUnit: schema.string(),
      threshold: schema.string(),
    })
  ),
  // deprecated
  filters: schema.maybe(
    schema.oneOf([
      // deprecated
      schema.object({
        'monitor.type': schema.maybe(schema.arrayOf(schema.string())),
        'observer.geo.name': schema.maybe(schema.arrayOf(schema.string())),
        tags: schema.maybe(schema.arrayOf(schema.string())),
        'url.port': schema.maybe(schema.arrayOf(schema.string())),
      }),
      schema.string(),
    ])
  ),
  locations: schema.maybe(schema.arrayOf(schema.string())),
  numTimes: schema.number(),
  search: schema.maybe(schema.string()),
  shouldCheckStatus: schema.boolean(),
  shouldCheckAvailability: schema.boolean(),
  timerangeCount: schema.maybe(schema.number()),
  timerangeUnit: schema.maybe(schema.string()),
  // deprecated
  timerange: schema.maybe(
    schema.object({
      from: schema.string(),
      to: schema.string(),
    })
  ),
  version: schema.maybe(schema.number()),
  isAutoGenerated: schema.maybe(schema.boolean()),
});

export type UptimeMonitorStatusParams = TypeOf<typeof uptimeMonitorStatusRuleParamsSchema>;
