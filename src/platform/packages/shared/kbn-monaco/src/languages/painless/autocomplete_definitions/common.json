{
  "suggestions": [
    {
      "label": "Appendable",
      "kind": "class",
      "documentation": "Class: Appendable",
      "insertText": "Appendable",
      "properties": [
        {
          "label": "append",
          "kind": "method",
          "documentation": "append(CharSequence a, int b, int c): Appendable",
          "insertText": "append"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ArithmeticException",
      "kind": "class",
      "documentation": "Class: ArithmeticException",
      "insertText": "ArithmeticException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ArithmeticException",
        "kind": "constructor",
        "documentation": "Constructor: ArithmeticException",
        "insertText": "ArithmeticException"
      }
    },
    {
      "label": "ArrayIndexOutOfBoundsException",
      "kind": "class",
      "documentation": "Class: ArrayIndexOutOfBoundsException",
      "insertText": "ArrayIndexOutOfBoundsException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ArrayIndexOutOfBoundsException",
        "kind": "constructor",
        "documentation": "Constructor: ArrayIndexOutOfBoundsException",
        "insertText": "ArrayIndexOutOfBoundsException"
      }
    },
    {
      "label": "ArrayStoreException",
      "kind": "class",
      "documentation": "Class: ArrayStoreException",
      "insertText": "ArrayStoreException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ArrayStoreException",
        "kind": "constructor",
        "documentation": "Constructor: ArrayStoreException",
        "insertText": "ArrayStoreException"
      }
    },
    {
      "label": "Boolean",
      "kind": "class",
      "documentation": "Class: Boolean",
      "insertText": "Boolean",
      "properties": [
        {
          "label": "FALSE",
          "kind": "property",
          "documentation": "FALSE: Boolean",
          "insertText": "FALSE"
        },
        {
          "label": "TRUE",
          "kind": "property",
          "documentation": "TRUE: Boolean",
          "insertText": "TRUE"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(boolean a, boolean b): int",
          "insertText": "compare"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(boolean a): int",
          "insertText": "hashCode"
        },
        {
          "label": "logicalAnd",
          "kind": "method",
          "documentation": "logicalAnd(boolean a, boolean b): boolean",
          "insertText": "logicalAnd"
        },
        {
          "label": "logicalOr",
          "kind": "method",
          "documentation": "logicalOr(boolean a, boolean b): boolean",
          "insertText": "logicalOr"
        },
        {
          "label": "logicalXor",
          "kind": "method",
          "documentation": "logicalXor(boolean a, boolean b): boolean",
          "insertText": "logicalXor"
        },
        {
          "label": "parseBoolean",
          "kind": "method",
          "documentation": "parseBoolean(String a): boolean",
          "insertText": "parseBoolean"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(boolean a): String",
          "insertText": "toString"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(boolean a): Boolean",
          "insertText": "valueOf"
        },
        {
          "label": "booleanValue",
          "kind": "method",
          "documentation": "booleanValue(): boolean",
          "insertText": "booleanValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Boolean a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Byte",
      "kind": "class",
      "documentation": "Class: Byte",
      "insertText": "Byte",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: byte",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: byte",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(byte a, byte b): int",
          "insertText": "compare"
        },
        {
          "label": "decode",
          "kind": "method",
          "documentation": "decode(String a): Byte",
          "insertText": "decode"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(byte a): int",
          "insertText": "hashCode"
        },
        {
          "label": "parseByte",
          "kind": "method",
          "documentation": "parseByte(String a, int b | String a): byte",
          "insertText": "parseByte"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(byte a): String",
          "insertText": "toString"
        },
        {
          "label": "toUnsignedInt",
          "kind": "method",
          "documentation": "toUnsignedInt(byte a): int",
          "insertText": "toUnsignedInt"
        },
        {
          "label": "toUnsignedLong",
          "kind": "method",
          "documentation": "toUnsignedLong(byte a): long",
          "insertText": "toUnsignedLong"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a, int b | byte a): Byte",
          "insertText": "valueOf"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Byte a): int",
          "insertText": "compareTo"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "CharSequence",
      "kind": "class",
      "documentation": "Class: CharSequence",
      "insertText": "CharSequence",
      "properties": [
        {
          "label": "charAt",
          "kind": "method",
          "documentation": "charAt(int a): char",
          "insertText": "charAt"
        },
        {
          "label": "chars",
          "kind": "method",
          "documentation": "chars(): IntStream",
          "insertText": "chars"
        },
        {
          "label": "codePoints",
          "kind": "method",
          "documentation": "codePoints(): IntStream",
          "insertText": "codePoints"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(Pattern a, Function b): String",
          "insertText": "replaceAll"
        },
        {
          "label": "replaceFirst",
          "kind": "method",
          "documentation": "replaceFirst(Pattern a, Function b): String",
          "insertText": "replaceFirst"
        },
        {
          "label": "subSequence",
          "kind": "method",
          "documentation": "subSequence(int a, int b): CharSequence",
          "insertText": "subSequence"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Character",
      "kind": "class",
      "documentation": "Class: Character",
      "insertText": "Character",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "COMBINING_SPACING_MARK",
          "kind": "property",
          "documentation": "COMBINING_SPACING_MARK: byte",
          "insertText": "COMBINING_SPACING_MARK"
        },
        {
          "label": "CONNECTOR_PUNCTUATION",
          "kind": "property",
          "documentation": "CONNECTOR_PUNCTUATION: byte",
          "insertText": "CONNECTOR_PUNCTUATION"
        },
        {
          "label": "CONTROL",
          "kind": "property",
          "documentation": "CONTROL: byte",
          "insertText": "CONTROL"
        },
        {
          "label": "CURRENCY_SYMBOL",
          "kind": "property",
          "documentation": "CURRENCY_SYMBOL: byte",
          "insertText": "CURRENCY_SYMBOL"
        },
        {
          "label": "DASH_PUNCTUATION",
          "kind": "property",
          "documentation": "DASH_PUNCTUATION: byte",
          "insertText": "DASH_PUNCTUATION"
        },
        {
          "label": "DECIMAL_DIGIT_NUMBER",
          "kind": "property",
          "documentation": "DECIMAL_DIGIT_NUMBER: byte",
          "insertText": "DECIMAL_DIGIT_NUMBER"
        },
        {
          "label": "DIRECTIONALITY_ARABIC_NUMBER",
          "kind": "property",
          "documentation": "DIRECTIONALITY_ARABIC_NUMBER: byte",
          "insertText": "DIRECTIONALITY_ARABIC_NUMBER"
        },
        {
          "label": "DIRECTIONALITY_BOUNDARY_NEUTRAL",
          "kind": "property",
          "documentation": "DIRECTIONALITY_BOUNDARY_NEUTRAL: byte",
          "insertText": "DIRECTIONALITY_BOUNDARY_NEUTRAL"
        },
        {
          "label": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR",
          "kind": "property",
          "documentation": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: byte",
          "insertText": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"
        },
        {
          "label": "DIRECTIONALITY_EUROPEAN_NUMBER",
          "kind": "property",
          "documentation": "DIRECTIONALITY_EUROPEAN_NUMBER: byte",
          "insertText": "DIRECTIONALITY_EUROPEAN_NUMBER"
        },
        {
          "label": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR",
          "kind": "property",
          "documentation": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: byte",
          "insertText": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"
        },
        {
          "label": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR",
          "kind": "property",
          "documentation": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: byte",
          "insertText": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"
        },
        {
          "label": "DIRECTIONALITY_LEFT_TO_RIGHT",
          "kind": "property",
          "documentation": "DIRECTIONALITY_LEFT_TO_RIGHT: byte",
          "insertText": "DIRECTIONALITY_LEFT_TO_RIGHT"
        },
        {
          "label": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING",
          "kind": "property",
          "documentation": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: byte",
          "insertText": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"
        },
        {
          "label": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE",
          "kind": "property",
          "documentation": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: byte",
          "insertText": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"
        },
        {
          "label": "DIRECTIONALITY_NONSPACING_MARK",
          "kind": "property",
          "documentation": "DIRECTIONALITY_NONSPACING_MARK: byte",
          "insertText": "DIRECTIONALITY_NONSPACING_MARK"
        },
        {
          "label": "DIRECTIONALITY_OTHER_NEUTRALS",
          "kind": "property",
          "documentation": "DIRECTIONALITY_OTHER_NEUTRALS: byte",
          "insertText": "DIRECTIONALITY_OTHER_NEUTRALS"
        },
        {
          "label": "DIRECTIONALITY_PARAGRAPH_SEPARATOR",
          "kind": "property",
          "documentation": "DIRECTIONALITY_PARAGRAPH_SEPARATOR: byte",
          "insertText": "DIRECTIONALITY_PARAGRAPH_SEPARATOR"
        },
        {
          "label": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT",
          "kind": "property",
          "documentation": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: byte",
          "insertText": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"
        },
        {
          "label": "DIRECTIONALITY_RIGHT_TO_LEFT",
          "kind": "property",
          "documentation": "DIRECTIONALITY_RIGHT_TO_LEFT: byte",
          "insertText": "DIRECTIONALITY_RIGHT_TO_LEFT"
        },
        {
          "label": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC",
          "kind": "property",
          "documentation": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: byte",
          "insertText": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"
        },
        {
          "label": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING",
          "kind": "property",
          "documentation": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: byte",
          "insertText": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"
        },
        {
          "label": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE",
          "kind": "property",
          "documentation": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: byte",
          "insertText": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"
        },
        {
          "label": "DIRECTIONALITY_SEGMENT_SEPARATOR",
          "kind": "property",
          "documentation": "DIRECTIONALITY_SEGMENT_SEPARATOR: byte",
          "insertText": "DIRECTIONALITY_SEGMENT_SEPARATOR"
        },
        {
          "label": "DIRECTIONALITY_UNDEFINED",
          "kind": "property",
          "documentation": "DIRECTIONALITY_UNDEFINED: byte",
          "insertText": "DIRECTIONALITY_UNDEFINED"
        },
        {
          "label": "DIRECTIONALITY_WHITESPACE",
          "kind": "property",
          "documentation": "DIRECTIONALITY_WHITESPACE: byte",
          "insertText": "DIRECTIONALITY_WHITESPACE"
        },
        {
          "label": "ENCLOSING_MARK",
          "kind": "property",
          "documentation": "ENCLOSING_MARK: byte",
          "insertText": "ENCLOSING_MARK"
        },
        {
          "label": "END_PUNCTUATION",
          "kind": "property",
          "documentation": "END_PUNCTUATION: byte",
          "insertText": "END_PUNCTUATION"
        },
        {
          "label": "FINAL_QUOTE_PUNCTUATION",
          "kind": "property",
          "documentation": "FINAL_QUOTE_PUNCTUATION: byte",
          "insertText": "FINAL_QUOTE_PUNCTUATION"
        },
        {
          "label": "FORMAT",
          "kind": "property",
          "documentation": "FORMAT: byte",
          "insertText": "FORMAT"
        },
        {
          "label": "INITIAL_QUOTE_PUNCTUATION",
          "kind": "property",
          "documentation": "INITIAL_QUOTE_PUNCTUATION: byte",
          "insertText": "INITIAL_QUOTE_PUNCTUATION"
        },
        {
          "label": "LETTER_NUMBER",
          "kind": "property",
          "documentation": "LETTER_NUMBER: byte",
          "insertText": "LETTER_NUMBER"
        },
        {
          "label": "LINE_SEPARATOR",
          "kind": "property",
          "documentation": "LINE_SEPARATOR: byte",
          "insertText": "LINE_SEPARATOR"
        },
        {
          "label": "LOWERCASE_LETTER",
          "kind": "property",
          "documentation": "LOWERCASE_LETTER: byte",
          "insertText": "LOWERCASE_LETTER"
        },
        {
          "label": "MATH_SYMBOL",
          "kind": "property",
          "documentation": "MATH_SYMBOL: byte",
          "insertText": "MATH_SYMBOL"
        },
        {
          "label": "MAX_CODE_POINT",
          "kind": "property",
          "documentation": "MAX_CODE_POINT: int",
          "insertText": "MAX_CODE_POINT"
        },
        {
          "label": "MAX_HIGH_SURROGATE",
          "kind": "property",
          "documentation": "MAX_HIGH_SURROGATE: char",
          "insertText": "MAX_HIGH_SURROGATE"
        },
        {
          "label": "MAX_LOW_SURROGATE",
          "kind": "property",
          "documentation": "MAX_LOW_SURROGATE: char",
          "insertText": "MAX_LOW_SURROGATE"
        },
        {
          "label": "MAX_RADIX",
          "kind": "property",
          "documentation": "MAX_RADIX: int",
          "insertText": "MAX_RADIX"
        },
        {
          "label": "MAX_SURROGATE",
          "kind": "property",
          "documentation": "MAX_SURROGATE: char",
          "insertText": "MAX_SURROGATE"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: char",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_CODE_POINT",
          "kind": "property",
          "documentation": "MIN_CODE_POINT: int",
          "insertText": "MIN_CODE_POINT"
        },
        {
          "label": "MIN_HIGH_SURROGATE",
          "kind": "property",
          "documentation": "MIN_HIGH_SURROGATE: char",
          "insertText": "MIN_HIGH_SURROGATE"
        },
        {
          "label": "MIN_LOW_SURROGATE",
          "kind": "property",
          "documentation": "MIN_LOW_SURROGATE: char",
          "insertText": "MIN_LOW_SURROGATE"
        },
        {
          "label": "MIN_RADIX",
          "kind": "property",
          "documentation": "MIN_RADIX: int",
          "insertText": "MIN_RADIX"
        },
        {
          "label": "MIN_SUPPLEMENTARY_CODE_POINT",
          "kind": "property",
          "documentation": "MIN_SUPPLEMENTARY_CODE_POINT: int",
          "insertText": "MIN_SUPPLEMENTARY_CODE_POINT"
        },
        {
          "label": "MIN_SURROGATE",
          "kind": "property",
          "documentation": "MIN_SURROGATE: char",
          "insertText": "MIN_SURROGATE"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: char",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "MODIFIER_LETTER",
          "kind": "property",
          "documentation": "MODIFIER_LETTER: byte",
          "insertText": "MODIFIER_LETTER"
        },
        {
          "label": "MODIFIER_SYMBOL",
          "kind": "property",
          "documentation": "MODIFIER_SYMBOL: byte",
          "insertText": "MODIFIER_SYMBOL"
        },
        {
          "label": "NON_SPACING_MARK",
          "kind": "property",
          "documentation": "NON_SPACING_MARK: byte",
          "insertText": "NON_SPACING_MARK"
        },
        {
          "label": "OTHER_LETTER",
          "kind": "property",
          "documentation": "OTHER_LETTER: byte",
          "insertText": "OTHER_LETTER"
        },
        {
          "label": "OTHER_NUMBER",
          "kind": "property",
          "documentation": "OTHER_NUMBER: byte",
          "insertText": "OTHER_NUMBER"
        },
        {
          "label": "OTHER_PUNCTUATION",
          "kind": "property",
          "documentation": "OTHER_PUNCTUATION: byte",
          "insertText": "OTHER_PUNCTUATION"
        },
        {
          "label": "OTHER_SYMBOL",
          "kind": "property",
          "documentation": "OTHER_SYMBOL: byte",
          "insertText": "OTHER_SYMBOL"
        },
        {
          "label": "PARAGRAPH_SEPARATOR",
          "kind": "property",
          "documentation": "PARAGRAPH_SEPARATOR: byte",
          "insertText": "PARAGRAPH_SEPARATOR"
        },
        {
          "label": "PRIVATE_USE",
          "kind": "property",
          "documentation": "PRIVATE_USE: byte",
          "insertText": "PRIVATE_USE"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "SPACE_SEPARATOR",
          "kind": "property",
          "documentation": "SPACE_SEPARATOR: byte",
          "insertText": "SPACE_SEPARATOR"
        },
        {
          "label": "START_PUNCTUATION",
          "kind": "property",
          "documentation": "START_PUNCTUATION: byte",
          "insertText": "START_PUNCTUATION"
        },
        {
          "label": "SURROGATE",
          "kind": "property",
          "documentation": "SURROGATE: byte",
          "insertText": "SURROGATE"
        },
        {
          "label": "TITLECASE_LETTER",
          "kind": "property",
          "documentation": "TITLECASE_LETTER: byte",
          "insertText": "TITLECASE_LETTER"
        },
        {
          "label": "UNASSIGNED",
          "kind": "property",
          "documentation": "UNASSIGNED: byte",
          "insertText": "UNASSIGNED"
        },
        {
          "label": "UPPERCASE_LETTER",
          "kind": "property",
          "documentation": "UPPERCASE_LETTER: byte",
          "insertText": "UPPERCASE_LETTER"
        },
        {
          "label": "charCount",
          "kind": "method",
          "documentation": "charCount(int a): int",
          "insertText": "charCount"
        },
        {
          "label": "codePointAt",
          "kind": "method",
          "documentation": "codePointAt(char[] a, int b, int c | CharSequence a, int b): int",
          "insertText": "codePointAt"
        },
        {
          "label": "codePointBefore",
          "kind": "method",
          "documentation": "codePointBefore(char[] a, int b, int c | CharSequence a, int b): int",
          "insertText": "codePointBefore"
        },
        {
          "label": "codePointCount",
          "kind": "method",
          "documentation": "codePointCount(CharSequence a, int b, int c): int",
          "insertText": "codePointCount"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(char a, char b): int",
          "insertText": "compare"
        },
        {
          "label": "digit",
          "kind": "method",
          "documentation": "digit(int a, int b): int",
          "insertText": "digit"
        },
        {
          "label": "forDigit",
          "kind": "method",
          "documentation": "forDigit(int a, int b): char",
          "insertText": "forDigit"
        },
        {
          "label": "getDirectionality",
          "kind": "method",
          "documentation": "getDirectionality(int a): byte",
          "insertText": "getDirectionality"
        },
        {
          "label": "getName",
          "kind": "method",
          "documentation": "getName(int a): String",
          "insertText": "getName"
        },
        {
          "label": "getNumericValue",
          "kind": "method",
          "documentation": "getNumericValue(int a): int",
          "insertText": "getNumericValue"
        },
        {
          "label": "getType",
          "kind": "method",
          "documentation": "getType(int a): int",
          "insertText": "getType"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(char a): int",
          "insertText": "hashCode"
        },
        {
          "label": "highSurrogate",
          "kind": "method",
          "documentation": "highSurrogate(int a): char",
          "insertText": "highSurrogate"
        },
        {
          "label": "isAlphabetic",
          "kind": "method",
          "documentation": "isAlphabetic(int a): boolean",
          "insertText": "isAlphabetic"
        },
        {
          "label": "isBmpCodePoint",
          "kind": "method",
          "documentation": "isBmpCodePoint(int a): boolean",
          "insertText": "isBmpCodePoint"
        },
        {
          "label": "isDefined",
          "kind": "method",
          "documentation": "isDefined(int a): boolean",
          "insertText": "isDefined"
        },
        {
          "label": "isDigit",
          "kind": "method",
          "documentation": "isDigit(int a): boolean",
          "insertText": "isDigit"
        },
        {
          "label": "isHighSurrogate",
          "kind": "method",
          "documentation": "isHighSurrogate(char a): boolean",
          "insertText": "isHighSurrogate"
        },
        {
          "label": "isISOControl",
          "kind": "method",
          "documentation": "isISOControl(int a): boolean",
          "insertText": "isISOControl"
        },
        {
          "label": "isIdentifierIgnorable",
          "kind": "method",
          "documentation": "isIdentifierIgnorable(int a): boolean",
          "insertText": "isIdentifierIgnorable"
        },
        {
          "label": "isIdeographic",
          "kind": "method",
          "documentation": "isIdeographic(int a): boolean",
          "insertText": "isIdeographic"
        },
        {
          "label": "isJavaIdentifierPart",
          "kind": "method",
          "documentation": "isJavaIdentifierPart(int a): boolean",
          "insertText": "isJavaIdentifierPart"
        },
        {
          "label": "isJavaIdentifierStart",
          "kind": "method",
          "documentation": "isJavaIdentifierStart(int a): boolean",
          "insertText": "isJavaIdentifierStart"
        },
        {
          "label": "isLetter",
          "kind": "method",
          "documentation": "isLetter(int a): boolean",
          "insertText": "isLetter"
        },
        {
          "label": "isLetterOrDigit",
          "kind": "method",
          "documentation": "isLetterOrDigit(int a): boolean",
          "insertText": "isLetterOrDigit"
        },
        {
          "label": "isLowerCase",
          "kind": "method",
          "documentation": "isLowerCase(int a): boolean",
          "insertText": "isLowerCase"
        },
        {
          "label": "isMirrored",
          "kind": "method",
          "documentation": "isMirrored(int a): boolean",
          "insertText": "isMirrored"
        },
        {
          "label": "isSpaceChar",
          "kind": "method",
          "documentation": "isSpaceChar(int a): boolean",
          "insertText": "isSpaceChar"
        },
        {
          "label": "isSupplementaryCodePoint",
          "kind": "method",
          "documentation": "isSupplementaryCodePoint(int a): boolean",
          "insertText": "isSupplementaryCodePoint"
        },
        {
          "label": "isSurrogate",
          "kind": "method",
          "documentation": "isSurrogate(char a): boolean",
          "insertText": "isSurrogate"
        },
        {
          "label": "isSurrogatePair",
          "kind": "method",
          "documentation": "isSurrogatePair(char a, char b): boolean",
          "insertText": "isSurrogatePair"
        },
        {
          "label": "isTitleCase",
          "kind": "method",
          "documentation": "isTitleCase(int a): boolean",
          "insertText": "isTitleCase"
        },
        {
          "label": "isUnicodeIdentifierPart",
          "kind": "method",
          "documentation": "isUnicodeIdentifierPart(int a): boolean",
          "insertText": "isUnicodeIdentifierPart"
        },
        {
          "label": "isUnicodeIdentifierStart",
          "kind": "method",
          "documentation": "isUnicodeIdentifierStart(int a): boolean",
          "insertText": "isUnicodeIdentifierStart"
        },
        {
          "label": "isUpperCase",
          "kind": "method",
          "documentation": "isUpperCase(int a): boolean",
          "insertText": "isUpperCase"
        },
        {
          "label": "isValidCodePoint",
          "kind": "method",
          "documentation": "isValidCodePoint(int a): boolean",
          "insertText": "isValidCodePoint"
        },
        {
          "label": "isWhitespace",
          "kind": "method",
          "documentation": "isWhitespace(int a): boolean",
          "insertText": "isWhitespace"
        },
        {
          "label": "lowSurrogate",
          "kind": "method",
          "documentation": "lowSurrogate(int a): char",
          "insertText": "lowSurrogate"
        },
        {
          "label": "offsetByCodePoints",
          "kind": "method",
          "documentation": "offsetByCodePoints(char[] a, int b, int c, int d, int e | CharSequence a, int b, int c): int",
          "insertText": "offsetByCodePoints"
        },
        {
          "label": "reverseBytes",
          "kind": "method",
          "documentation": "reverseBytes(char a): char",
          "insertText": "reverseBytes"
        },
        {
          "label": "toChars",
          "kind": "method",
          "documentation": "toChars(int a, char[] b, int c | int a): int | char[]",
          "insertText": "toChars"
        },
        {
          "label": "toCodePoint",
          "kind": "method",
          "documentation": "toCodePoint(char a, char b): int",
          "insertText": "toCodePoint"
        },
        {
          "label": "toLowerCase",
          "kind": "method",
          "documentation": "toLowerCase(char a): char",
          "insertText": "toLowerCase"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(char a): String",
          "insertText": "toString"
        },
        {
          "label": "toTitleCase",
          "kind": "method",
          "documentation": "toTitleCase(char a): char",
          "insertText": "toTitleCase"
        },
        {
          "label": "toUpperCase",
          "kind": "method",
          "documentation": "toUpperCase(char a): char",
          "insertText": "toUpperCase"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(char a): Character",
          "insertText": "valueOf"
        },
        {
          "label": "charValue",
          "kind": "method",
          "documentation": "charValue(): char",
          "insertText": "charValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Character a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Subset",
      "kind": "class",
      "documentation": "Class: Subset",
      "insertText": "Subset",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "UnicodeBlock",
      "kind": "class",
      "documentation": "Class: UnicodeBlock",
      "insertText": "UnicodeBlock",
      "properties": [
        {
          "label": "AEGEAN_NUMBERS",
          "kind": "property",
          "documentation": "AEGEAN_NUMBERS: Character.UnicodeBlock",
          "insertText": "AEGEAN_NUMBERS"
        },
        {
          "label": "ALCHEMICAL_SYMBOLS",
          "kind": "property",
          "documentation": "ALCHEMICAL_SYMBOLS: Character.UnicodeBlock",
          "insertText": "ALCHEMICAL_SYMBOLS"
        },
        {
          "label": "ALPHABETIC_PRESENTATION_FORMS",
          "kind": "property",
          "documentation": "ALPHABETIC_PRESENTATION_FORMS: Character.UnicodeBlock",
          "insertText": "ALPHABETIC_PRESENTATION_FORMS"
        },
        {
          "label": "ANCIENT_GREEK_MUSICAL_NOTATION",
          "kind": "property",
          "documentation": "ANCIENT_GREEK_MUSICAL_NOTATION: Character.UnicodeBlock",
          "insertText": "ANCIENT_GREEK_MUSICAL_NOTATION"
        },
        {
          "label": "ANCIENT_GREEK_NUMBERS",
          "kind": "property",
          "documentation": "ANCIENT_GREEK_NUMBERS: Character.UnicodeBlock",
          "insertText": "ANCIENT_GREEK_NUMBERS"
        },
        {
          "label": "ANCIENT_SYMBOLS",
          "kind": "property",
          "documentation": "ANCIENT_SYMBOLS: Character.UnicodeBlock",
          "insertText": "ANCIENT_SYMBOLS"
        },
        {
          "label": "ARABIC",
          "kind": "property",
          "documentation": "ARABIC: Character.UnicodeBlock",
          "insertText": "ARABIC"
        },
        {
          "label": "ARABIC_EXTENDED_A",
          "kind": "property",
          "documentation": "ARABIC_EXTENDED_A: Character.UnicodeBlock",
          "insertText": "ARABIC_EXTENDED_A"
        },
        {
          "label": "ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS",
          "kind": "property",
          "documentation": "ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS: Character.UnicodeBlock",
          "insertText": "ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"
        },
        {
          "label": "ARABIC_PRESENTATION_FORMS_A",
          "kind": "property",
          "documentation": "ARABIC_PRESENTATION_FORMS_A: Character.UnicodeBlock",
          "insertText": "ARABIC_PRESENTATION_FORMS_A"
        },
        {
          "label": "ARABIC_PRESENTATION_FORMS_B",
          "kind": "property",
          "documentation": "ARABIC_PRESENTATION_FORMS_B: Character.UnicodeBlock",
          "insertText": "ARABIC_PRESENTATION_FORMS_B"
        },
        {
          "label": "ARABIC_SUPPLEMENT",
          "kind": "property",
          "documentation": "ARABIC_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "ARABIC_SUPPLEMENT"
        },
        {
          "label": "ARMENIAN",
          "kind": "property",
          "documentation": "ARMENIAN: Character.UnicodeBlock",
          "insertText": "ARMENIAN"
        },
        {
          "label": "ARROWS",
          "kind": "property",
          "documentation": "ARROWS: Character.UnicodeBlock",
          "insertText": "ARROWS"
        },
        {
          "label": "AVESTAN",
          "kind": "property",
          "documentation": "AVESTAN: Character.UnicodeBlock",
          "insertText": "AVESTAN"
        },
        {
          "label": "BALINESE",
          "kind": "property",
          "documentation": "BALINESE: Character.UnicodeBlock",
          "insertText": "BALINESE"
        },
        {
          "label": "BAMUM",
          "kind": "property",
          "documentation": "BAMUM: Character.UnicodeBlock",
          "insertText": "BAMUM"
        },
        {
          "label": "BAMUM_SUPPLEMENT",
          "kind": "property",
          "documentation": "BAMUM_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "BAMUM_SUPPLEMENT"
        },
        {
          "label": "BASIC_LATIN",
          "kind": "property",
          "documentation": "BASIC_LATIN: Character.UnicodeBlock",
          "insertText": "BASIC_LATIN"
        },
        {
          "label": "BATAK",
          "kind": "property",
          "documentation": "BATAK: Character.UnicodeBlock",
          "insertText": "BATAK"
        },
        {
          "label": "BENGALI",
          "kind": "property",
          "documentation": "BENGALI: Character.UnicodeBlock",
          "insertText": "BENGALI"
        },
        {
          "label": "BLOCK_ELEMENTS",
          "kind": "property",
          "documentation": "BLOCK_ELEMENTS: Character.UnicodeBlock",
          "insertText": "BLOCK_ELEMENTS"
        },
        {
          "label": "BOPOMOFO",
          "kind": "property",
          "documentation": "BOPOMOFO: Character.UnicodeBlock",
          "insertText": "BOPOMOFO"
        },
        {
          "label": "BOPOMOFO_EXTENDED",
          "kind": "property",
          "documentation": "BOPOMOFO_EXTENDED: Character.UnicodeBlock",
          "insertText": "BOPOMOFO_EXTENDED"
        },
        {
          "label": "BOX_DRAWING",
          "kind": "property",
          "documentation": "BOX_DRAWING: Character.UnicodeBlock",
          "insertText": "BOX_DRAWING"
        },
        {
          "label": "BRAHMI",
          "kind": "property",
          "documentation": "BRAHMI: Character.UnicodeBlock",
          "insertText": "BRAHMI"
        },
        {
          "label": "BRAILLE_PATTERNS",
          "kind": "property",
          "documentation": "BRAILLE_PATTERNS: Character.UnicodeBlock",
          "insertText": "BRAILLE_PATTERNS"
        },
        {
          "label": "BUGINESE",
          "kind": "property",
          "documentation": "BUGINESE: Character.UnicodeBlock",
          "insertText": "BUGINESE"
        },
        {
          "label": "BUHID",
          "kind": "property",
          "documentation": "BUHID: Character.UnicodeBlock",
          "insertText": "BUHID"
        },
        {
          "label": "BYZANTINE_MUSICAL_SYMBOLS",
          "kind": "property",
          "documentation": "BYZANTINE_MUSICAL_SYMBOLS: Character.UnicodeBlock",
          "insertText": "BYZANTINE_MUSICAL_SYMBOLS"
        },
        {
          "label": "CARIAN",
          "kind": "property",
          "documentation": "CARIAN: Character.UnicodeBlock",
          "insertText": "CARIAN"
        },
        {
          "label": "CHAKMA",
          "kind": "property",
          "documentation": "CHAKMA: Character.UnicodeBlock",
          "insertText": "CHAKMA"
        },
        {
          "label": "CHAM",
          "kind": "property",
          "documentation": "CHAM: Character.UnicodeBlock",
          "insertText": "CHAM"
        },
        {
          "label": "CHEROKEE",
          "kind": "property",
          "documentation": "CHEROKEE: Character.UnicodeBlock",
          "insertText": "CHEROKEE"
        },
        {
          "label": "CJK_COMPATIBILITY",
          "kind": "property",
          "documentation": "CJK_COMPATIBILITY: Character.UnicodeBlock",
          "insertText": "CJK_COMPATIBILITY"
        },
        {
          "label": "CJK_COMPATIBILITY_FORMS",
          "kind": "property",
          "documentation": "CJK_COMPATIBILITY_FORMS: Character.UnicodeBlock",
          "insertText": "CJK_COMPATIBILITY_FORMS"
        },
        {
          "label": "CJK_COMPATIBILITY_IDEOGRAPHS",
          "kind": "property",
          "documentation": "CJK_COMPATIBILITY_IDEOGRAPHS: Character.UnicodeBlock",
          "insertText": "CJK_COMPATIBILITY_IDEOGRAPHS"
        },
        {
          "label": "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT",
          "kind": "property",
          "documentation": "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"
        },
        {
          "label": "CJK_RADICALS_SUPPLEMENT",
          "kind": "property",
          "documentation": "CJK_RADICALS_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "CJK_RADICALS_SUPPLEMENT"
        },
        {
          "label": "CJK_STROKES",
          "kind": "property",
          "documentation": "CJK_STROKES: Character.UnicodeBlock",
          "insertText": "CJK_STROKES"
        },
        {
          "label": "CJK_SYMBOLS_AND_PUNCTUATION",
          "kind": "property",
          "documentation": "CJK_SYMBOLS_AND_PUNCTUATION: Character.UnicodeBlock",
          "insertText": "CJK_SYMBOLS_AND_PUNCTUATION"
        },
        {
          "label": "CJK_UNIFIED_IDEOGRAPHS",
          "kind": "property",
          "documentation": "CJK_UNIFIED_IDEOGRAPHS: Character.UnicodeBlock",
          "insertText": "CJK_UNIFIED_IDEOGRAPHS"
        },
        {
          "label": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A",
          "kind": "property",
          "documentation": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: Character.UnicodeBlock",
          "insertText": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"
        },
        {
          "label": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B",
          "kind": "property",
          "documentation": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: Character.UnicodeBlock",
          "insertText": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"
        },
        {
          "label": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C",
          "kind": "property",
          "documentation": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: Character.UnicodeBlock",
          "insertText": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"
        },
        {
          "label": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D",
          "kind": "property",
          "documentation": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: Character.UnicodeBlock",
          "insertText": "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"
        },
        {
          "label": "COMBINING_DIACRITICAL_MARKS",
          "kind": "property",
          "documentation": "COMBINING_DIACRITICAL_MARKS: Character.UnicodeBlock",
          "insertText": "COMBINING_DIACRITICAL_MARKS"
        },
        {
          "label": "COMBINING_DIACRITICAL_MARKS_SUPPLEMENT",
          "kind": "property",
          "documentation": "COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"
        },
        {
          "label": "COMBINING_HALF_MARKS",
          "kind": "property",
          "documentation": "COMBINING_HALF_MARKS: Character.UnicodeBlock",
          "insertText": "COMBINING_HALF_MARKS"
        },
        {
          "label": "COMBINING_MARKS_FOR_SYMBOLS",
          "kind": "property",
          "documentation": "COMBINING_MARKS_FOR_SYMBOLS: Character.UnicodeBlock",
          "insertText": "COMBINING_MARKS_FOR_SYMBOLS"
        },
        {
          "label": "COMMON_INDIC_NUMBER_FORMS",
          "kind": "property",
          "documentation": "COMMON_INDIC_NUMBER_FORMS: Character.UnicodeBlock",
          "insertText": "COMMON_INDIC_NUMBER_FORMS"
        },
        {
          "label": "CONTROL_PICTURES",
          "kind": "property",
          "documentation": "CONTROL_PICTURES: Character.UnicodeBlock",
          "insertText": "CONTROL_PICTURES"
        },
        {
          "label": "COPTIC",
          "kind": "property",
          "documentation": "COPTIC: Character.UnicodeBlock",
          "insertText": "COPTIC"
        },
        {
          "label": "COUNTING_ROD_NUMERALS",
          "kind": "property",
          "documentation": "COUNTING_ROD_NUMERALS: Character.UnicodeBlock",
          "insertText": "COUNTING_ROD_NUMERALS"
        },
        {
          "label": "CUNEIFORM",
          "kind": "property",
          "documentation": "CUNEIFORM: Character.UnicodeBlock",
          "insertText": "CUNEIFORM"
        },
        {
          "label": "CUNEIFORM_NUMBERS_AND_PUNCTUATION",
          "kind": "property",
          "documentation": "CUNEIFORM_NUMBERS_AND_PUNCTUATION: Character.UnicodeBlock",
          "insertText": "CUNEIFORM_NUMBERS_AND_PUNCTUATION"
        },
        {
          "label": "CURRENCY_SYMBOLS",
          "kind": "property",
          "documentation": "CURRENCY_SYMBOLS: Character.UnicodeBlock",
          "insertText": "CURRENCY_SYMBOLS"
        },
        {
          "label": "CYPRIOT_SYLLABARY",
          "kind": "property",
          "documentation": "CYPRIOT_SYLLABARY: Character.UnicodeBlock",
          "insertText": "CYPRIOT_SYLLABARY"
        },
        {
          "label": "CYRILLIC",
          "kind": "property",
          "documentation": "CYRILLIC: Character.UnicodeBlock",
          "insertText": "CYRILLIC"
        },
        {
          "label": "CYRILLIC_EXTENDED_A",
          "kind": "property",
          "documentation": "CYRILLIC_EXTENDED_A: Character.UnicodeBlock",
          "insertText": "CYRILLIC_EXTENDED_A"
        },
        {
          "label": "CYRILLIC_EXTENDED_B",
          "kind": "property",
          "documentation": "CYRILLIC_EXTENDED_B: Character.UnicodeBlock",
          "insertText": "CYRILLIC_EXTENDED_B"
        },
        {
          "label": "CYRILLIC_SUPPLEMENTARY",
          "kind": "property",
          "documentation": "CYRILLIC_SUPPLEMENTARY: Character.UnicodeBlock",
          "insertText": "CYRILLIC_SUPPLEMENTARY"
        },
        {
          "label": "DESERET",
          "kind": "property",
          "documentation": "DESERET: Character.UnicodeBlock",
          "insertText": "DESERET"
        },
        {
          "label": "DEVANAGARI",
          "kind": "property",
          "documentation": "DEVANAGARI: Character.UnicodeBlock",
          "insertText": "DEVANAGARI"
        },
        {
          "label": "DEVANAGARI_EXTENDED",
          "kind": "property",
          "documentation": "DEVANAGARI_EXTENDED: Character.UnicodeBlock",
          "insertText": "DEVANAGARI_EXTENDED"
        },
        {
          "label": "DINGBATS",
          "kind": "property",
          "documentation": "DINGBATS: Character.UnicodeBlock",
          "insertText": "DINGBATS"
        },
        {
          "label": "DOMINO_TILES",
          "kind": "property",
          "documentation": "DOMINO_TILES: Character.UnicodeBlock",
          "insertText": "DOMINO_TILES"
        },
        {
          "label": "EGYPTIAN_HIEROGLYPHS",
          "kind": "property",
          "documentation": "EGYPTIAN_HIEROGLYPHS: Character.UnicodeBlock",
          "insertText": "EGYPTIAN_HIEROGLYPHS"
        },
        {
          "label": "EMOTICONS",
          "kind": "property",
          "documentation": "EMOTICONS: Character.UnicodeBlock",
          "insertText": "EMOTICONS"
        },
        {
          "label": "ENCLOSED_ALPHANUMERICS",
          "kind": "property",
          "documentation": "ENCLOSED_ALPHANUMERICS: Character.UnicodeBlock",
          "insertText": "ENCLOSED_ALPHANUMERICS"
        },
        {
          "label": "ENCLOSED_ALPHANUMERIC_SUPPLEMENT",
          "kind": "property",
          "documentation": "ENCLOSED_ALPHANUMERIC_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "ENCLOSED_ALPHANUMERIC_SUPPLEMENT"
        },
        {
          "label": "ENCLOSED_CJK_LETTERS_AND_MONTHS",
          "kind": "property",
          "documentation": "ENCLOSED_CJK_LETTERS_AND_MONTHS: Character.UnicodeBlock",
          "insertText": "ENCLOSED_CJK_LETTERS_AND_MONTHS"
        },
        {
          "label": "ENCLOSED_IDEOGRAPHIC_SUPPLEMENT",
          "kind": "property",
          "documentation": "ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"
        },
        {
          "label": "ETHIOPIC",
          "kind": "property",
          "documentation": "ETHIOPIC: Character.UnicodeBlock",
          "insertText": "ETHIOPIC"
        },
        {
          "label": "ETHIOPIC_EXTENDED",
          "kind": "property",
          "documentation": "ETHIOPIC_EXTENDED: Character.UnicodeBlock",
          "insertText": "ETHIOPIC_EXTENDED"
        },
        {
          "label": "ETHIOPIC_EXTENDED_A",
          "kind": "property",
          "documentation": "ETHIOPIC_EXTENDED_A: Character.UnicodeBlock",
          "insertText": "ETHIOPIC_EXTENDED_A"
        },
        {
          "label": "ETHIOPIC_SUPPLEMENT",
          "kind": "property",
          "documentation": "ETHIOPIC_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "ETHIOPIC_SUPPLEMENT"
        },
        {
          "label": "GENERAL_PUNCTUATION",
          "kind": "property",
          "documentation": "GENERAL_PUNCTUATION: Character.UnicodeBlock",
          "insertText": "GENERAL_PUNCTUATION"
        },
        {
          "label": "GEOMETRIC_SHAPES",
          "kind": "property",
          "documentation": "GEOMETRIC_SHAPES: Character.UnicodeBlock",
          "insertText": "GEOMETRIC_SHAPES"
        },
        {
          "label": "GEORGIAN",
          "kind": "property",
          "documentation": "GEORGIAN: Character.UnicodeBlock",
          "insertText": "GEORGIAN"
        },
        {
          "label": "GEORGIAN_SUPPLEMENT",
          "kind": "property",
          "documentation": "GEORGIAN_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "GEORGIAN_SUPPLEMENT"
        },
        {
          "label": "GLAGOLITIC",
          "kind": "property",
          "documentation": "GLAGOLITIC: Character.UnicodeBlock",
          "insertText": "GLAGOLITIC"
        },
        {
          "label": "GOTHIC",
          "kind": "property",
          "documentation": "GOTHIC: Character.UnicodeBlock",
          "insertText": "GOTHIC"
        },
        {
          "label": "GREEK",
          "kind": "property",
          "documentation": "GREEK: Character.UnicodeBlock",
          "insertText": "GREEK"
        },
        {
          "label": "GREEK_EXTENDED",
          "kind": "property",
          "documentation": "GREEK_EXTENDED: Character.UnicodeBlock",
          "insertText": "GREEK_EXTENDED"
        },
        {
          "label": "GUJARATI",
          "kind": "property",
          "documentation": "GUJARATI: Character.UnicodeBlock",
          "insertText": "GUJARATI"
        },
        {
          "label": "GURMUKHI",
          "kind": "property",
          "documentation": "GURMUKHI: Character.UnicodeBlock",
          "insertText": "GURMUKHI"
        },
        {
          "label": "HALFWIDTH_AND_FULLWIDTH_FORMS",
          "kind": "property",
          "documentation": "HALFWIDTH_AND_FULLWIDTH_FORMS: Character.UnicodeBlock",
          "insertText": "HALFWIDTH_AND_FULLWIDTH_FORMS"
        },
        {
          "label": "HANGUL_COMPATIBILITY_JAMO",
          "kind": "property",
          "documentation": "HANGUL_COMPATIBILITY_JAMO: Character.UnicodeBlock",
          "insertText": "HANGUL_COMPATIBILITY_JAMO"
        },
        {
          "label": "HANGUL_JAMO",
          "kind": "property",
          "documentation": "HANGUL_JAMO: Character.UnicodeBlock",
          "insertText": "HANGUL_JAMO"
        },
        {
          "label": "HANGUL_JAMO_EXTENDED_A",
          "kind": "property",
          "documentation": "HANGUL_JAMO_EXTENDED_A: Character.UnicodeBlock",
          "insertText": "HANGUL_JAMO_EXTENDED_A"
        },
        {
          "label": "HANGUL_JAMO_EXTENDED_B",
          "kind": "property",
          "documentation": "HANGUL_JAMO_EXTENDED_B: Character.UnicodeBlock",
          "insertText": "HANGUL_JAMO_EXTENDED_B"
        },
        {
          "label": "HANGUL_SYLLABLES",
          "kind": "property",
          "documentation": "HANGUL_SYLLABLES: Character.UnicodeBlock",
          "insertText": "HANGUL_SYLLABLES"
        },
        {
          "label": "HANUNOO",
          "kind": "property",
          "documentation": "HANUNOO: Character.UnicodeBlock",
          "insertText": "HANUNOO"
        },
        {
          "label": "HEBREW",
          "kind": "property",
          "documentation": "HEBREW: Character.UnicodeBlock",
          "insertText": "HEBREW"
        },
        {
          "label": "HIGH_PRIVATE_USE_SURROGATES",
          "kind": "property",
          "documentation": "HIGH_PRIVATE_USE_SURROGATES: Character.UnicodeBlock",
          "insertText": "HIGH_PRIVATE_USE_SURROGATES"
        },
        {
          "label": "HIGH_SURROGATES",
          "kind": "property",
          "documentation": "HIGH_SURROGATES: Character.UnicodeBlock",
          "insertText": "HIGH_SURROGATES"
        },
        {
          "label": "HIRAGANA",
          "kind": "property",
          "documentation": "HIRAGANA: Character.UnicodeBlock",
          "insertText": "HIRAGANA"
        },
        {
          "label": "IDEOGRAPHIC_DESCRIPTION_CHARACTERS",
          "kind": "property",
          "documentation": "IDEOGRAPHIC_DESCRIPTION_CHARACTERS: Character.UnicodeBlock",
          "insertText": "IDEOGRAPHIC_DESCRIPTION_CHARACTERS"
        },
        {
          "label": "IMPERIAL_ARAMAIC",
          "kind": "property",
          "documentation": "IMPERIAL_ARAMAIC: Character.UnicodeBlock",
          "insertText": "IMPERIAL_ARAMAIC"
        },
        {
          "label": "INSCRIPTIONAL_PAHLAVI",
          "kind": "property",
          "documentation": "INSCRIPTIONAL_PAHLAVI: Character.UnicodeBlock",
          "insertText": "INSCRIPTIONAL_PAHLAVI"
        },
        {
          "label": "INSCRIPTIONAL_PARTHIAN",
          "kind": "property",
          "documentation": "INSCRIPTIONAL_PARTHIAN: Character.UnicodeBlock",
          "insertText": "INSCRIPTIONAL_PARTHIAN"
        },
        {
          "label": "IPA_EXTENSIONS",
          "kind": "property",
          "documentation": "IPA_EXTENSIONS: Character.UnicodeBlock",
          "insertText": "IPA_EXTENSIONS"
        },
        {
          "label": "JAVANESE",
          "kind": "property",
          "documentation": "JAVANESE: Character.UnicodeBlock",
          "insertText": "JAVANESE"
        },
        {
          "label": "KAITHI",
          "kind": "property",
          "documentation": "KAITHI: Character.UnicodeBlock",
          "insertText": "KAITHI"
        },
        {
          "label": "KANA_SUPPLEMENT",
          "kind": "property",
          "documentation": "KANA_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "KANA_SUPPLEMENT"
        },
        {
          "label": "KANBUN",
          "kind": "property",
          "documentation": "KANBUN: Character.UnicodeBlock",
          "insertText": "KANBUN"
        },
        {
          "label": "KANGXI_RADICALS",
          "kind": "property",
          "documentation": "KANGXI_RADICALS: Character.UnicodeBlock",
          "insertText": "KANGXI_RADICALS"
        },
        {
          "label": "KANNADA",
          "kind": "property",
          "documentation": "KANNADA: Character.UnicodeBlock",
          "insertText": "KANNADA"
        },
        {
          "label": "KATAKANA",
          "kind": "property",
          "documentation": "KATAKANA: Character.UnicodeBlock",
          "insertText": "KATAKANA"
        },
        {
          "label": "KATAKANA_PHONETIC_EXTENSIONS",
          "kind": "property",
          "documentation": "KATAKANA_PHONETIC_EXTENSIONS: Character.UnicodeBlock",
          "insertText": "KATAKANA_PHONETIC_EXTENSIONS"
        },
        {
          "label": "KAYAH_LI",
          "kind": "property",
          "documentation": "KAYAH_LI: Character.UnicodeBlock",
          "insertText": "KAYAH_LI"
        },
        {
          "label": "KHAROSHTHI",
          "kind": "property",
          "documentation": "KHAROSHTHI: Character.UnicodeBlock",
          "insertText": "KHAROSHTHI"
        },
        {
          "label": "KHMER",
          "kind": "property",
          "documentation": "KHMER: Character.UnicodeBlock",
          "insertText": "KHMER"
        },
        {
          "label": "KHMER_SYMBOLS",
          "kind": "property",
          "documentation": "KHMER_SYMBOLS: Character.UnicodeBlock",
          "insertText": "KHMER_SYMBOLS"
        },
        {
          "label": "LAO",
          "kind": "property",
          "documentation": "LAO: Character.UnicodeBlock",
          "insertText": "LAO"
        },
        {
          "label": "LATIN_1_SUPPLEMENT",
          "kind": "property",
          "documentation": "LATIN_1_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "LATIN_1_SUPPLEMENT"
        },
        {
          "label": "LATIN_EXTENDED_A",
          "kind": "property",
          "documentation": "LATIN_EXTENDED_A: Character.UnicodeBlock",
          "insertText": "LATIN_EXTENDED_A"
        },
        {
          "label": "LATIN_EXTENDED_ADDITIONAL",
          "kind": "property",
          "documentation": "LATIN_EXTENDED_ADDITIONAL: Character.UnicodeBlock",
          "insertText": "LATIN_EXTENDED_ADDITIONAL"
        },
        {
          "label": "LATIN_EXTENDED_B",
          "kind": "property",
          "documentation": "LATIN_EXTENDED_B: Character.UnicodeBlock",
          "insertText": "LATIN_EXTENDED_B"
        },
        {
          "label": "LATIN_EXTENDED_C",
          "kind": "property",
          "documentation": "LATIN_EXTENDED_C: Character.UnicodeBlock",
          "insertText": "LATIN_EXTENDED_C"
        },
        {
          "label": "LATIN_EXTENDED_D",
          "kind": "property",
          "documentation": "LATIN_EXTENDED_D: Character.UnicodeBlock",
          "insertText": "LATIN_EXTENDED_D"
        },
        {
          "label": "LEPCHA",
          "kind": "property",
          "documentation": "LEPCHA: Character.UnicodeBlock",
          "insertText": "LEPCHA"
        },
        {
          "label": "LETTERLIKE_SYMBOLS",
          "kind": "property",
          "documentation": "LETTERLIKE_SYMBOLS: Character.UnicodeBlock",
          "insertText": "LETTERLIKE_SYMBOLS"
        },
        {
          "label": "LIMBU",
          "kind": "property",
          "documentation": "LIMBU: Character.UnicodeBlock",
          "insertText": "LIMBU"
        },
        {
          "label": "LINEAR_B_IDEOGRAMS",
          "kind": "property",
          "documentation": "LINEAR_B_IDEOGRAMS: Character.UnicodeBlock",
          "insertText": "LINEAR_B_IDEOGRAMS"
        },
        {
          "label": "LINEAR_B_SYLLABARY",
          "kind": "property",
          "documentation": "LINEAR_B_SYLLABARY: Character.UnicodeBlock",
          "insertText": "LINEAR_B_SYLLABARY"
        },
        {
          "label": "LISU",
          "kind": "property",
          "documentation": "LISU: Character.UnicodeBlock",
          "insertText": "LISU"
        },
        {
          "label": "LOW_SURROGATES",
          "kind": "property",
          "documentation": "LOW_SURROGATES: Character.UnicodeBlock",
          "insertText": "LOW_SURROGATES"
        },
        {
          "label": "LYCIAN",
          "kind": "property",
          "documentation": "LYCIAN: Character.UnicodeBlock",
          "insertText": "LYCIAN"
        },
        {
          "label": "LYDIAN",
          "kind": "property",
          "documentation": "LYDIAN: Character.UnicodeBlock",
          "insertText": "LYDIAN"
        },
        {
          "label": "MAHJONG_TILES",
          "kind": "property",
          "documentation": "MAHJONG_TILES: Character.UnicodeBlock",
          "insertText": "MAHJONG_TILES"
        },
        {
          "label": "MALAYALAM",
          "kind": "property",
          "documentation": "MALAYALAM: Character.UnicodeBlock",
          "insertText": "MALAYALAM"
        },
        {
          "label": "MANDAIC",
          "kind": "property",
          "documentation": "MANDAIC: Character.UnicodeBlock",
          "insertText": "MANDAIC"
        },
        {
          "label": "MATHEMATICAL_ALPHANUMERIC_SYMBOLS",
          "kind": "property",
          "documentation": "MATHEMATICAL_ALPHANUMERIC_SYMBOLS: Character.UnicodeBlock",
          "insertText": "MATHEMATICAL_ALPHANUMERIC_SYMBOLS"
        },
        {
          "label": "MATHEMATICAL_OPERATORS",
          "kind": "property",
          "documentation": "MATHEMATICAL_OPERATORS: Character.UnicodeBlock",
          "insertText": "MATHEMATICAL_OPERATORS"
        },
        {
          "label": "MEETEI_MAYEK",
          "kind": "property",
          "documentation": "MEETEI_MAYEK: Character.UnicodeBlock",
          "insertText": "MEETEI_MAYEK"
        },
        {
          "label": "MEETEI_MAYEK_EXTENSIONS",
          "kind": "property",
          "documentation": "MEETEI_MAYEK_EXTENSIONS: Character.UnicodeBlock",
          "insertText": "MEETEI_MAYEK_EXTENSIONS"
        },
        {
          "label": "MEROITIC_CURSIVE",
          "kind": "property",
          "documentation": "MEROITIC_CURSIVE: Character.UnicodeBlock",
          "insertText": "MEROITIC_CURSIVE"
        },
        {
          "label": "MEROITIC_HIEROGLYPHS",
          "kind": "property",
          "documentation": "MEROITIC_HIEROGLYPHS: Character.UnicodeBlock",
          "insertText": "MEROITIC_HIEROGLYPHS"
        },
        {
          "label": "MIAO",
          "kind": "property",
          "documentation": "MIAO: Character.UnicodeBlock",
          "insertText": "MIAO"
        },
        {
          "label": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A",
          "kind": "property",
          "documentation": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: Character.UnicodeBlock",
          "insertText": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"
        },
        {
          "label": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B",
          "kind": "property",
          "documentation": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: Character.UnicodeBlock",
          "insertText": "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"
        },
        {
          "label": "MISCELLANEOUS_SYMBOLS",
          "kind": "property",
          "documentation": "MISCELLANEOUS_SYMBOLS: Character.UnicodeBlock",
          "insertText": "MISCELLANEOUS_SYMBOLS"
        },
        {
          "label": "MISCELLANEOUS_SYMBOLS_AND_ARROWS",
          "kind": "property",
          "documentation": "MISCELLANEOUS_SYMBOLS_AND_ARROWS: Character.UnicodeBlock",
          "insertText": "MISCELLANEOUS_SYMBOLS_AND_ARROWS"
        },
        {
          "label": "MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS",
          "kind": "property",
          "documentation": "MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: Character.UnicodeBlock",
          "insertText": "MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"
        },
        {
          "label": "MISCELLANEOUS_TECHNICAL",
          "kind": "property",
          "documentation": "MISCELLANEOUS_TECHNICAL: Character.UnicodeBlock",
          "insertText": "MISCELLANEOUS_TECHNICAL"
        },
        {
          "label": "MODIFIER_TONE_LETTERS",
          "kind": "property",
          "documentation": "MODIFIER_TONE_LETTERS: Character.UnicodeBlock",
          "insertText": "MODIFIER_TONE_LETTERS"
        },
        {
          "label": "MONGOLIAN",
          "kind": "property",
          "documentation": "MONGOLIAN: Character.UnicodeBlock",
          "insertText": "MONGOLIAN"
        },
        {
          "label": "MUSICAL_SYMBOLS",
          "kind": "property",
          "documentation": "MUSICAL_SYMBOLS: Character.UnicodeBlock",
          "insertText": "MUSICAL_SYMBOLS"
        },
        {
          "label": "MYANMAR",
          "kind": "property",
          "documentation": "MYANMAR: Character.UnicodeBlock",
          "insertText": "MYANMAR"
        },
        {
          "label": "MYANMAR_EXTENDED_A",
          "kind": "property",
          "documentation": "MYANMAR_EXTENDED_A: Character.UnicodeBlock",
          "insertText": "MYANMAR_EXTENDED_A"
        },
        {
          "label": "NEW_TAI_LUE",
          "kind": "property",
          "documentation": "NEW_TAI_LUE: Character.UnicodeBlock",
          "insertText": "NEW_TAI_LUE"
        },
        {
          "label": "NKO",
          "kind": "property",
          "documentation": "NKO: Character.UnicodeBlock",
          "insertText": "NKO"
        },
        {
          "label": "NUMBER_FORMS",
          "kind": "property",
          "documentation": "NUMBER_FORMS: Character.UnicodeBlock",
          "insertText": "NUMBER_FORMS"
        },
        {
          "label": "OGHAM",
          "kind": "property",
          "documentation": "OGHAM: Character.UnicodeBlock",
          "insertText": "OGHAM"
        },
        {
          "label": "OLD_ITALIC",
          "kind": "property",
          "documentation": "OLD_ITALIC: Character.UnicodeBlock",
          "insertText": "OLD_ITALIC"
        },
        {
          "label": "OLD_PERSIAN",
          "kind": "property",
          "documentation": "OLD_PERSIAN: Character.UnicodeBlock",
          "insertText": "OLD_PERSIAN"
        },
        {
          "label": "OLD_SOUTH_ARABIAN",
          "kind": "property",
          "documentation": "OLD_SOUTH_ARABIAN: Character.UnicodeBlock",
          "insertText": "OLD_SOUTH_ARABIAN"
        },
        {
          "label": "OLD_TURKIC",
          "kind": "property",
          "documentation": "OLD_TURKIC: Character.UnicodeBlock",
          "insertText": "OLD_TURKIC"
        },
        {
          "label": "OL_CHIKI",
          "kind": "property",
          "documentation": "OL_CHIKI: Character.UnicodeBlock",
          "insertText": "OL_CHIKI"
        },
        {
          "label": "OPTICAL_CHARACTER_RECOGNITION",
          "kind": "property",
          "documentation": "OPTICAL_CHARACTER_RECOGNITION: Character.UnicodeBlock",
          "insertText": "OPTICAL_CHARACTER_RECOGNITION"
        },
        {
          "label": "ORIYA",
          "kind": "property",
          "documentation": "ORIYA: Character.UnicodeBlock",
          "insertText": "ORIYA"
        },
        {
          "label": "OSMANYA",
          "kind": "property",
          "documentation": "OSMANYA: Character.UnicodeBlock",
          "insertText": "OSMANYA"
        },
        {
          "label": "PHAGS_PA",
          "kind": "property",
          "documentation": "PHAGS_PA: Character.UnicodeBlock",
          "insertText": "PHAGS_PA"
        },
        {
          "label": "PHAISTOS_DISC",
          "kind": "property",
          "documentation": "PHAISTOS_DISC: Character.UnicodeBlock",
          "insertText": "PHAISTOS_DISC"
        },
        {
          "label": "PHOENICIAN",
          "kind": "property",
          "documentation": "PHOENICIAN: Character.UnicodeBlock",
          "insertText": "PHOENICIAN"
        },
        {
          "label": "PHONETIC_EXTENSIONS",
          "kind": "property",
          "documentation": "PHONETIC_EXTENSIONS: Character.UnicodeBlock",
          "insertText": "PHONETIC_EXTENSIONS"
        },
        {
          "label": "PHONETIC_EXTENSIONS_SUPPLEMENT",
          "kind": "property",
          "documentation": "PHONETIC_EXTENSIONS_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "PHONETIC_EXTENSIONS_SUPPLEMENT"
        },
        {
          "label": "PLAYING_CARDS",
          "kind": "property",
          "documentation": "PLAYING_CARDS: Character.UnicodeBlock",
          "insertText": "PLAYING_CARDS"
        },
        {
          "label": "PRIVATE_USE_AREA",
          "kind": "property",
          "documentation": "PRIVATE_USE_AREA: Character.UnicodeBlock",
          "insertText": "PRIVATE_USE_AREA"
        },
        {
          "label": "REJANG",
          "kind": "property",
          "documentation": "REJANG: Character.UnicodeBlock",
          "insertText": "REJANG"
        },
        {
          "label": "RUMI_NUMERAL_SYMBOLS",
          "kind": "property",
          "documentation": "RUMI_NUMERAL_SYMBOLS: Character.UnicodeBlock",
          "insertText": "RUMI_NUMERAL_SYMBOLS"
        },
        {
          "label": "RUNIC",
          "kind": "property",
          "documentation": "RUNIC: Character.UnicodeBlock",
          "insertText": "RUNIC"
        },
        {
          "label": "SAMARITAN",
          "kind": "property",
          "documentation": "SAMARITAN: Character.UnicodeBlock",
          "insertText": "SAMARITAN"
        },
        {
          "label": "SAURASHTRA",
          "kind": "property",
          "documentation": "SAURASHTRA: Character.UnicodeBlock",
          "insertText": "SAURASHTRA"
        },
        {
          "label": "SHARADA",
          "kind": "property",
          "documentation": "SHARADA: Character.UnicodeBlock",
          "insertText": "SHARADA"
        },
        {
          "label": "SHAVIAN",
          "kind": "property",
          "documentation": "SHAVIAN: Character.UnicodeBlock",
          "insertText": "SHAVIAN"
        },
        {
          "label": "SINHALA",
          "kind": "property",
          "documentation": "SINHALA: Character.UnicodeBlock",
          "insertText": "SINHALA"
        },
        {
          "label": "SMALL_FORM_VARIANTS",
          "kind": "property",
          "documentation": "SMALL_FORM_VARIANTS: Character.UnicodeBlock",
          "insertText": "SMALL_FORM_VARIANTS"
        },
        {
          "label": "SORA_SOMPENG",
          "kind": "property",
          "documentation": "SORA_SOMPENG: Character.UnicodeBlock",
          "insertText": "SORA_SOMPENG"
        },
        {
          "label": "SPACING_MODIFIER_LETTERS",
          "kind": "property",
          "documentation": "SPACING_MODIFIER_LETTERS: Character.UnicodeBlock",
          "insertText": "SPACING_MODIFIER_LETTERS"
        },
        {
          "label": "SPECIALS",
          "kind": "property",
          "documentation": "SPECIALS: Character.UnicodeBlock",
          "insertText": "SPECIALS"
        },
        {
          "label": "SUNDANESE",
          "kind": "property",
          "documentation": "SUNDANESE: Character.UnicodeBlock",
          "insertText": "SUNDANESE"
        },
        {
          "label": "SUNDANESE_SUPPLEMENT",
          "kind": "property",
          "documentation": "SUNDANESE_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "SUNDANESE_SUPPLEMENT"
        },
        {
          "label": "SUPERSCRIPTS_AND_SUBSCRIPTS",
          "kind": "property",
          "documentation": "SUPERSCRIPTS_AND_SUBSCRIPTS: Character.UnicodeBlock",
          "insertText": "SUPERSCRIPTS_AND_SUBSCRIPTS"
        },
        {
          "label": "SUPPLEMENTAL_ARROWS_A",
          "kind": "property",
          "documentation": "SUPPLEMENTAL_ARROWS_A: Character.UnicodeBlock",
          "insertText": "SUPPLEMENTAL_ARROWS_A"
        },
        {
          "label": "SUPPLEMENTAL_ARROWS_B",
          "kind": "property",
          "documentation": "SUPPLEMENTAL_ARROWS_B: Character.UnicodeBlock",
          "insertText": "SUPPLEMENTAL_ARROWS_B"
        },
        {
          "label": "SUPPLEMENTAL_MATHEMATICAL_OPERATORS",
          "kind": "property",
          "documentation": "SUPPLEMENTAL_MATHEMATICAL_OPERATORS: Character.UnicodeBlock",
          "insertText": "SUPPLEMENTAL_MATHEMATICAL_OPERATORS"
        },
        {
          "label": "SUPPLEMENTAL_PUNCTUATION",
          "kind": "property",
          "documentation": "SUPPLEMENTAL_PUNCTUATION: Character.UnicodeBlock",
          "insertText": "SUPPLEMENTAL_PUNCTUATION"
        },
        {
          "label": "SUPPLEMENTARY_PRIVATE_USE_AREA_A",
          "kind": "property",
          "documentation": "SUPPLEMENTARY_PRIVATE_USE_AREA_A: Character.UnicodeBlock",
          "insertText": "SUPPLEMENTARY_PRIVATE_USE_AREA_A"
        },
        {
          "label": "SUPPLEMENTARY_PRIVATE_USE_AREA_B",
          "kind": "property",
          "documentation": "SUPPLEMENTARY_PRIVATE_USE_AREA_B: Character.UnicodeBlock",
          "insertText": "SUPPLEMENTARY_PRIVATE_USE_AREA_B"
        },
        {
          "label": "SYLOTI_NAGRI",
          "kind": "property",
          "documentation": "SYLOTI_NAGRI: Character.UnicodeBlock",
          "insertText": "SYLOTI_NAGRI"
        },
        {
          "label": "SYRIAC",
          "kind": "property",
          "documentation": "SYRIAC: Character.UnicodeBlock",
          "insertText": "SYRIAC"
        },
        {
          "label": "TAGALOG",
          "kind": "property",
          "documentation": "TAGALOG: Character.UnicodeBlock",
          "insertText": "TAGALOG"
        },
        {
          "label": "TAGBANWA",
          "kind": "property",
          "documentation": "TAGBANWA: Character.UnicodeBlock",
          "insertText": "TAGBANWA"
        },
        {
          "label": "TAGS",
          "kind": "property",
          "documentation": "TAGS: Character.UnicodeBlock",
          "insertText": "TAGS"
        },
        {
          "label": "TAI_LE",
          "kind": "property",
          "documentation": "TAI_LE: Character.UnicodeBlock",
          "insertText": "TAI_LE"
        },
        {
          "label": "TAI_THAM",
          "kind": "property",
          "documentation": "TAI_THAM: Character.UnicodeBlock",
          "insertText": "TAI_THAM"
        },
        {
          "label": "TAI_VIET",
          "kind": "property",
          "documentation": "TAI_VIET: Character.UnicodeBlock",
          "insertText": "TAI_VIET"
        },
        {
          "label": "TAI_XUAN_JING_SYMBOLS",
          "kind": "property",
          "documentation": "TAI_XUAN_JING_SYMBOLS: Character.UnicodeBlock",
          "insertText": "TAI_XUAN_JING_SYMBOLS"
        },
        {
          "label": "TAKRI",
          "kind": "property",
          "documentation": "TAKRI: Character.UnicodeBlock",
          "insertText": "TAKRI"
        },
        {
          "label": "TAMIL",
          "kind": "property",
          "documentation": "TAMIL: Character.UnicodeBlock",
          "insertText": "TAMIL"
        },
        {
          "label": "TELUGU",
          "kind": "property",
          "documentation": "TELUGU: Character.UnicodeBlock",
          "insertText": "TELUGU"
        },
        {
          "label": "THAANA",
          "kind": "property",
          "documentation": "THAANA: Character.UnicodeBlock",
          "insertText": "THAANA"
        },
        {
          "label": "THAI",
          "kind": "property",
          "documentation": "THAI: Character.UnicodeBlock",
          "insertText": "THAI"
        },
        {
          "label": "TIBETAN",
          "kind": "property",
          "documentation": "TIBETAN: Character.UnicodeBlock",
          "insertText": "TIBETAN"
        },
        {
          "label": "TIFINAGH",
          "kind": "property",
          "documentation": "TIFINAGH: Character.UnicodeBlock",
          "insertText": "TIFINAGH"
        },
        {
          "label": "TRANSPORT_AND_MAP_SYMBOLS",
          "kind": "property",
          "documentation": "TRANSPORT_AND_MAP_SYMBOLS: Character.UnicodeBlock",
          "insertText": "TRANSPORT_AND_MAP_SYMBOLS"
        },
        {
          "label": "UGARITIC",
          "kind": "property",
          "documentation": "UGARITIC: Character.UnicodeBlock",
          "insertText": "UGARITIC"
        },
        {
          "label": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
          "kind": "property",
          "documentation": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: Character.UnicodeBlock",
          "insertText": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"
        },
        {
          "label": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED",
          "kind": "property",
          "documentation": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: Character.UnicodeBlock",
          "insertText": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"
        },
        {
          "label": "VAI",
          "kind": "property",
          "documentation": "VAI: Character.UnicodeBlock",
          "insertText": "VAI"
        },
        {
          "label": "VARIATION_SELECTORS",
          "kind": "property",
          "documentation": "VARIATION_SELECTORS: Character.UnicodeBlock",
          "insertText": "VARIATION_SELECTORS"
        },
        {
          "label": "VARIATION_SELECTORS_SUPPLEMENT",
          "kind": "property",
          "documentation": "VARIATION_SELECTORS_SUPPLEMENT: Character.UnicodeBlock",
          "insertText": "VARIATION_SELECTORS_SUPPLEMENT"
        },
        {
          "label": "VEDIC_EXTENSIONS",
          "kind": "property",
          "documentation": "VEDIC_EXTENSIONS: Character.UnicodeBlock",
          "insertText": "VEDIC_EXTENSIONS"
        },
        {
          "label": "VERTICAL_FORMS",
          "kind": "property",
          "documentation": "VERTICAL_FORMS: Character.UnicodeBlock",
          "insertText": "VERTICAL_FORMS"
        },
        {
          "label": "YIJING_HEXAGRAM_SYMBOLS",
          "kind": "property",
          "documentation": "YIJING_HEXAGRAM_SYMBOLS: Character.UnicodeBlock",
          "insertText": "YIJING_HEXAGRAM_SYMBOLS"
        },
        {
          "label": "YI_RADICALS",
          "kind": "property",
          "documentation": "YI_RADICALS: Character.UnicodeBlock",
          "insertText": "YI_RADICALS"
        },
        {
          "label": "YI_SYLLABLES",
          "kind": "property",
          "documentation": "YI_SYLLABLES: Character.UnicodeBlock",
          "insertText": "YI_SYLLABLES"
        },
        {
          "label": "forName",
          "kind": "method",
          "documentation": "forName(String a): Character.UnicodeBlock",
          "insertText": "forName"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): Character.UnicodeBlock",
          "insertText": "of"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "UnicodeScript",
      "kind": "class",
      "documentation": "Class: UnicodeScript",
      "insertText": "UnicodeScript",
      "properties": [
        {
          "label": "ARABIC",
          "kind": "property",
          "documentation": "ARABIC: Character.UnicodeScript",
          "insertText": "ARABIC"
        },
        {
          "label": "ARMENIAN",
          "kind": "property",
          "documentation": "ARMENIAN: Character.UnicodeScript",
          "insertText": "ARMENIAN"
        },
        {
          "label": "AVESTAN",
          "kind": "property",
          "documentation": "AVESTAN: Character.UnicodeScript",
          "insertText": "AVESTAN"
        },
        {
          "label": "BALINESE",
          "kind": "property",
          "documentation": "BALINESE: Character.UnicodeScript",
          "insertText": "BALINESE"
        },
        {
          "label": "BAMUM",
          "kind": "property",
          "documentation": "BAMUM: Character.UnicodeScript",
          "insertText": "BAMUM"
        },
        {
          "label": "BATAK",
          "kind": "property",
          "documentation": "BATAK: Character.UnicodeScript",
          "insertText": "BATAK"
        },
        {
          "label": "BENGALI",
          "kind": "property",
          "documentation": "BENGALI: Character.UnicodeScript",
          "insertText": "BENGALI"
        },
        {
          "label": "BOPOMOFO",
          "kind": "property",
          "documentation": "BOPOMOFO: Character.UnicodeScript",
          "insertText": "BOPOMOFO"
        },
        {
          "label": "BRAHMI",
          "kind": "property",
          "documentation": "BRAHMI: Character.UnicodeScript",
          "insertText": "BRAHMI"
        },
        {
          "label": "BRAILLE",
          "kind": "property",
          "documentation": "BRAILLE: Character.UnicodeScript",
          "insertText": "BRAILLE"
        },
        {
          "label": "BUGINESE",
          "kind": "property",
          "documentation": "BUGINESE: Character.UnicodeScript",
          "insertText": "BUGINESE"
        },
        {
          "label": "BUHID",
          "kind": "property",
          "documentation": "BUHID: Character.UnicodeScript",
          "insertText": "BUHID"
        },
        {
          "label": "CANADIAN_ABORIGINAL",
          "kind": "property",
          "documentation": "CANADIAN_ABORIGINAL: Character.UnicodeScript",
          "insertText": "CANADIAN_ABORIGINAL"
        },
        {
          "label": "CARIAN",
          "kind": "property",
          "documentation": "CARIAN: Character.UnicodeScript",
          "insertText": "CARIAN"
        },
        {
          "label": "CHAKMA",
          "kind": "property",
          "documentation": "CHAKMA: Character.UnicodeScript",
          "insertText": "CHAKMA"
        },
        {
          "label": "CHAM",
          "kind": "property",
          "documentation": "CHAM: Character.UnicodeScript",
          "insertText": "CHAM"
        },
        {
          "label": "CHEROKEE",
          "kind": "property",
          "documentation": "CHEROKEE: Character.UnicodeScript",
          "insertText": "CHEROKEE"
        },
        {
          "label": "COMMON",
          "kind": "property",
          "documentation": "COMMON: Character.UnicodeScript",
          "insertText": "COMMON"
        },
        {
          "label": "COPTIC",
          "kind": "property",
          "documentation": "COPTIC: Character.UnicodeScript",
          "insertText": "COPTIC"
        },
        {
          "label": "CUNEIFORM",
          "kind": "property",
          "documentation": "CUNEIFORM: Character.UnicodeScript",
          "insertText": "CUNEIFORM"
        },
        {
          "label": "CYPRIOT",
          "kind": "property",
          "documentation": "CYPRIOT: Character.UnicodeScript",
          "insertText": "CYPRIOT"
        },
        {
          "label": "CYRILLIC",
          "kind": "property",
          "documentation": "CYRILLIC: Character.UnicodeScript",
          "insertText": "CYRILLIC"
        },
        {
          "label": "DESERET",
          "kind": "property",
          "documentation": "DESERET: Character.UnicodeScript",
          "insertText": "DESERET"
        },
        {
          "label": "DEVANAGARI",
          "kind": "property",
          "documentation": "DEVANAGARI: Character.UnicodeScript",
          "insertText": "DEVANAGARI"
        },
        {
          "label": "EGYPTIAN_HIEROGLYPHS",
          "kind": "property",
          "documentation": "EGYPTIAN_HIEROGLYPHS: Character.UnicodeScript",
          "insertText": "EGYPTIAN_HIEROGLYPHS"
        },
        {
          "label": "ETHIOPIC",
          "kind": "property",
          "documentation": "ETHIOPIC: Character.UnicodeScript",
          "insertText": "ETHIOPIC"
        },
        {
          "label": "GEORGIAN",
          "kind": "property",
          "documentation": "GEORGIAN: Character.UnicodeScript",
          "insertText": "GEORGIAN"
        },
        {
          "label": "GLAGOLITIC",
          "kind": "property",
          "documentation": "GLAGOLITIC: Character.UnicodeScript",
          "insertText": "GLAGOLITIC"
        },
        {
          "label": "GOTHIC",
          "kind": "property",
          "documentation": "GOTHIC: Character.UnicodeScript",
          "insertText": "GOTHIC"
        },
        {
          "label": "GREEK",
          "kind": "property",
          "documentation": "GREEK: Character.UnicodeScript",
          "insertText": "GREEK"
        },
        {
          "label": "GUJARATI",
          "kind": "property",
          "documentation": "GUJARATI: Character.UnicodeScript",
          "insertText": "GUJARATI"
        },
        {
          "label": "GURMUKHI",
          "kind": "property",
          "documentation": "GURMUKHI: Character.UnicodeScript",
          "insertText": "GURMUKHI"
        },
        {
          "label": "HAN",
          "kind": "property",
          "documentation": "HAN: Character.UnicodeScript",
          "insertText": "HAN"
        },
        {
          "label": "HANGUL",
          "kind": "property",
          "documentation": "HANGUL: Character.UnicodeScript",
          "insertText": "HANGUL"
        },
        {
          "label": "HANUNOO",
          "kind": "property",
          "documentation": "HANUNOO: Character.UnicodeScript",
          "insertText": "HANUNOO"
        },
        {
          "label": "HEBREW",
          "kind": "property",
          "documentation": "HEBREW: Character.UnicodeScript",
          "insertText": "HEBREW"
        },
        {
          "label": "HIRAGANA",
          "kind": "property",
          "documentation": "HIRAGANA: Character.UnicodeScript",
          "insertText": "HIRAGANA"
        },
        {
          "label": "IMPERIAL_ARAMAIC",
          "kind": "property",
          "documentation": "IMPERIAL_ARAMAIC: Character.UnicodeScript",
          "insertText": "IMPERIAL_ARAMAIC"
        },
        {
          "label": "INHERITED",
          "kind": "property",
          "documentation": "INHERITED: Character.UnicodeScript",
          "insertText": "INHERITED"
        },
        {
          "label": "INSCRIPTIONAL_PAHLAVI",
          "kind": "property",
          "documentation": "INSCRIPTIONAL_PAHLAVI: Character.UnicodeScript",
          "insertText": "INSCRIPTIONAL_PAHLAVI"
        },
        {
          "label": "INSCRIPTIONAL_PARTHIAN",
          "kind": "property",
          "documentation": "INSCRIPTIONAL_PARTHIAN: Character.UnicodeScript",
          "insertText": "INSCRIPTIONAL_PARTHIAN"
        },
        {
          "label": "JAVANESE",
          "kind": "property",
          "documentation": "JAVANESE: Character.UnicodeScript",
          "insertText": "JAVANESE"
        },
        {
          "label": "KAITHI",
          "kind": "property",
          "documentation": "KAITHI: Character.UnicodeScript",
          "insertText": "KAITHI"
        },
        {
          "label": "KANNADA",
          "kind": "property",
          "documentation": "KANNADA: Character.UnicodeScript",
          "insertText": "KANNADA"
        },
        {
          "label": "KATAKANA",
          "kind": "property",
          "documentation": "KATAKANA: Character.UnicodeScript",
          "insertText": "KATAKANA"
        },
        {
          "label": "KAYAH_LI",
          "kind": "property",
          "documentation": "KAYAH_LI: Character.UnicodeScript",
          "insertText": "KAYAH_LI"
        },
        {
          "label": "KHAROSHTHI",
          "kind": "property",
          "documentation": "KHAROSHTHI: Character.UnicodeScript",
          "insertText": "KHAROSHTHI"
        },
        {
          "label": "KHMER",
          "kind": "property",
          "documentation": "KHMER: Character.UnicodeScript",
          "insertText": "KHMER"
        },
        {
          "label": "LAO",
          "kind": "property",
          "documentation": "LAO: Character.UnicodeScript",
          "insertText": "LAO"
        },
        {
          "label": "LATIN",
          "kind": "property",
          "documentation": "LATIN: Character.UnicodeScript",
          "insertText": "LATIN"
        },
        {
          "label": "LEPCHA",
          "kind": "property",
          "documentation": "LEPCHA: Character.UnicodeScript",
          "insertText": "LEPCHA"
        },
        {
          "label": "LIMBU",
          "kind": "property",
          "documentation": "LIMBU: Character.UnicodeScript",
          "insertText": "LIMBU"
        },
        {
          "label": "LINEAR_B",
          "kind": "property",
          "documentation": "LINEAR_B: Character.UnicodeScript",
          "insertText": "LINEAR_B"
        },
        {
          "label": "LISU",
          "kind": "property",
          "documentation": "LISU: Character.UnicodeScript",
          "insertText": "LISU"
        },
        {
          "label": "LYCIAN",
          "kind": "property",
          "documentation": "LYCIAN: Character.UnicodeScript",
          "insertText": "LYCIAN"
        },
        {
          "label": "LYDIAN",
          "kind": "property",
          "documentation": "LYDIAN: Character.UnicodeScript",
          "insertText": "LYDIAN"
        },
        {
          "label": "MALAYALAM",
          "kind": "property",
          "documentation": "MALAYALAM: Character.UnicodeScript",
          "insertText": "MALAYALAM"
        },
        {
          "label": "MANDAIC",
          "kind": "property",
          "documentation": "MANDAIC: Character.UnicodeScript",
          "insertText": "MANDAIC"
        },
        {
          "label": "MEETEI_MAYEK",
          "kind": "property",
          "documentation": "MEETEI_MAYEK: Character.UnicodeScript",
          "insertText": "MEETEI_MAYEK"
        },
        {
          "label": "MEROITIC_CURSIVE",
          "kind": "property",
          "documentation": "MEROITIC_CURSIVE: Character.UnicodeScript",
          "insertText": "MEROITIC_CURSIVE"
        },
        {
          "label": "MEROITIC_HIEROGLYPHS",
          "kind": "property",
          "documentation": "MEROITIC_HIEROGLYPHS: Character.UnicodeScript",
          "insertText": "MEROITIC_HIEROGLYPHS"
        },
        {
          "label": "MIAO",
          "kind": "property",
          "documentation": "MIAO: Character.UnicodeScript",
          "insertText": "MIAO"
        },
        {
          "label": "MONGOLIAN",
          "kind": "property",
          "documentation": "MONGOLIAN: Character.UnicodeScript",
          "insertText": "MONGOLIAN"
        },
        {
          "label": "MYANMAR",
          "kind": "property",
          "documentation": "MYANMAR: Character.UnicodeScript",
          "insertText": "MYANMAR"
        },
        {
          "label": "NEW_TAI_LUE",
          "kind": "property",
          "documentation": "NEW_TAI_LUE: Character.UnicodeScript",
          "insertText": "NEW_TAI_LUE"
        },
        {
          "label": "NKO",
          "kind": "property",
          "documentation": "NKO: Character.UnicodeScript",
          "insertText": "NKO"
        },
        {
          "label": "OGHAM",
          "kind": "property",
          "documentation": "OGHAM: Character.UnicodeScript",
          "insertText": "OGHAM"
        },
        {
          "label": "OLD_ITALIC",
          "kind": "property",
          "documentation": "OLD_ITALIC: Character.UnicodeScript",
          "insertText": "OLD_ITALIC"
        },
        {
          "label": "OLD_PERSIAN",
          "kind": "property",
          "documentation": "OLD_PERSIAN: Character.UnicodeScript",
          "insertText": "OLD_PERSIAN"
        },
        {
          "label": "OLD_SOUTH_ARABIAN",
          "kind": "property",
          "documentation": "OLD_SOUTH_ARABIAN: Character.UnicodeScript",
          "insertText": "OLD_SOUTH_ARABIAN"
        },
        {
          "label": "OLD_TURKIC",
          "kind": "property",
          "documentation": "OLD_TURKIC: Character.UnicodeScript",
          "insertText": "OLD_TURKIC"
        },
        {
          "label": "OL_CHIKI",
          "kind": "property",
          "documentation": "OL_CHIKI: Character.UnicodeScript",
          "insertText": "OL_CHIKI"
        },
        {
          "label": "ORIYA",
          "kind": "property",
          "documentation": "ORIYA: Character.UnicodeScript",
          "insertText": "ORIYA"
        },
        {
          "label": "OSMANYA",
          "kind": "property",
          "documentation": "OSMANYA: Character.UnicodeScript",
          "insertText": "OSMANYA"
        },
        {
          "label": "PHAGS_PA",
          "kind": "property",
          "documentation": "PHAGS_PA: Character.UnicodeScript",
          "insertText": "PHAGS_PA"
        },
        {
          "label": "PHOENICIAN",
          "kind": "property",
          "documentation": "PHOENICIAN: Character.UnicodeScript",
          "insertText": "PHOENICIAN"
        },
        {
          "label": "REJANG",
          "kind": "property",
          "documentation": "REJANG: Character.UnicodeScript",
          "insertText": "REJANG"
        },
        {
          "label": "RUNIC",
          "kind": "property",
          "documentation": "RUNIC: Character.UnicodeScript",
          "insertText": "RUNIC"
        },
        {
          "label": "SAMARITAN",
          "kind": "property",
          "documentation": "SAMARITAN: Character.UnicodeScript",
          "insertText": "SAMARITAN"
        },
        {
          "label": "SAURASHTRA",
          "kind": "property",
          "documentation": "SAURASHTRA: Character.UnicodeScript",
          "insertText": "SAURASHTRA"
        },
        {
          "label": "SHARADA",
          "kind": "property",
          "documentation": "SHARADA: Character.UnicodeScript",
          "insertText": "SHARADA"
        },
        {
          "label": "SHAVIAN",
          "kind": "property",
          "documentation": "SHAVIAN: Character.UnicodeScript",
          "insertText": "SHAVIAN"
        },
        {
          "label": "SINHALA",
          "kind": "property",
          "documentation": "SINHALA: Character.UnicodeScript",
          "insertText": "SINHALA"
        },
        {
          "label": "SORA_SOMPENG",
          "kind": "property",
          "documentation": "SORA_SOMPENG: Character.UnicodeScript",
          "insertText": "SORA_SOMPENG"
        },
        {
          "label": "SUNDANESE",
          "kind": "property",
          "documentation": "SUNDANESE: Character.UnicodeScript",
          "insertText": "SUNDANESE"
        },
        {
          "label": "SYLOTI_NAGRI",
          "kind": "property",
          "documentation": "SYLOTI_NAGRI: Character.UnicodeScript",
          "insertText": "SYLOTI_NAGRI"
        },
        {
          "label": "SYRIAC",
          "kind": "property",
          "documentation": "SYRIAC: Character.UnicodeScript",
          "insertText": "SYRIAC"
        },
        {
          "label": "TAGALOG",
          "kind": "property",
          "documentation": "TAGALOG: Character.UnicodeScript",
          "insertText": "TAGALOG"
        },
        {
          "label": "TAGBANWA",
          "kind": "property",
          "documentation": "TAGBANWA: Character.UnicodeScript",
          "insertText": "TAGBANWA"
        },
        {
          "label": "TAI_LE",
          "kind": "property",
          "documentation": "TAI_LE: Character.UnicodeScript",
          "insertText": "TAI_LE"
        },
        {
          "label": "TAI_THAM",
          "kind": "property",
          "documentation": "TAI_THAM: Character.UnicodeScript",
          "insertText": "TAI_THAM"
        },
        {
          "label": "TAI_VIET",
          "kind": "property",
          "documentation": "TAI_VIET: Character.UnicodeScript",
          "insertText": "TAI_VIET"
        },
        {
          "label": "TAKRI",
          "kind": "property",
          "documentation": "TAKRI: Character.UnicodeScript",
          "insertText": "TAKRI"
        },
        {
          "label": "TAMIL",
          "kind": "property",
          "documentation": "TAMIL: Character.UnicodeScript",
          "insertText": "TAMIL"
        },
        {
          "label": "TELUGU",
          "kind": "property",
          "documentation": "TELUGU: Character.UnicodeScript",
          "insertText": "TELUGU"
        },
        {
          "label": "THAANA",
          "kind": "property",
          "documentation": "THAANA: Character.UnicodeScript",
          "insertText": "THAANA"
        },
        {
          "label": "THAI",
          "kind": "property",
          "documentation": "THAI: Character.UnicodeScript",
          "insertText": "THAI"
        },
        {
          "label": "TIBETAN",
          "kind": "property",
          "documentation": "TIBETAN: Character.UnicodeScript",
          "insertText": "TIBETAN"
        },
        {
          "label": "TIFINAGH",
          "kind": "property",
          "documentation": "TIFINAGH: Character.UnicodeScript",
          "insertText": "TIFINAGH"
        },
        {
          "label": "UGARITIC",
          "kind": "property",
          "documentation": "UGARITIC: Character.UnicodeScript",
          "insertText": "UGARITIC"
        },
        {
          "label": "UNKNOWN",
          "kind": "property",
          "documentation": "UNKNOWN: Character.UnicodeScript",
          "insertText": "UNKNOWN"
        },
        {
          "label": "VAI",
          "kind": "property",
          "documentation": "VAI: Character.UnicodeScript",
          "insertText": "VAI"
        },
        {
          "label": "YI",
          "kind": "property",
          "documentation": "YI: Character.UnicodeScript",
          "insertText": "YI"
        },
        {
          "label": "forName",
          "kind": "method",
          "documentation": "forName(String a): Character.UnicodeScript",
          "insertText": "forName"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): Character.UnicodeScript",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): Character.UnicodeScript",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Character.UnicodeScript[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ClassCastException",
      "kind": "class",
      "documentation": "Class: ClassCastException",
      "insertText": "ClassCastException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ClassCastException",
        "kind": "constructor",
        "documentation": "Constructor: ClassCastException",
        "insertText": "ClassCastException"
      }
    },
    {
      "label": "ClassNotFoundException",
      "kind": "class",
      "documentation": "Class: ClassNotFoundException",
      "insertText": "ClassNotFoundException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ClassNotFoundException",
        "kind": "constructor",
        "documentation": "Constructor: ClassNotFoundException",
        "insertText": "ClassNotFoundException"
      }
    },
    {
      "label": "CloneNotSupportedException",
      "kind": "class",
      "documentation": "Class: CloneNotSupportedException",
      "insertText": "CloneNotSupportedException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "CloneNotSupportedException",
        "kind": "constructor",
        "documentation": "Constructor: CloneNotSupportedException",
        "insertText": "CloneNotSupportedException"
      }
    },
    {
      "label": "Comparable",
      "kind": "class",
      "documentation": "Class: Comparable",
      "insertText": "Comparable",
      "properties": [
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(def a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Double",
      "kind": "class",
      "documentation": "Class: Double",
      "insertText": "Double",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "MAX_EXPONENT",
          "kind": "property",
          "documentation": "MAX_EXPONENT: int",
          "insertText": "MAX_EXPONENT"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: double",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_EXPONENT",
          "kind": "property",
          "documentation": "MIN_EXPONENT: int",
          "insertText": "MIN_EXPONENT"
        },
        {
          "label": "MIN_NORMAL",
          "kind": "property",
          "documentation": "MIN_NORMAL: double",
          "insertText": "MIN_NORMAL"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: double",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "NEGATIVE_INFINITY",
          "kind": "property",
          "documentation": "NEGATIVE_INFINITY: double",
          "insertText": "NEGATIVE_INFINITY"
        },
        {
          "label": "NaN",
          "kind": "property",
          "documentation": "NaN: double",
          "insertText": "NaN"
        },
        {
          "label": "POSITIVE_INFINITY",
          "kind": "property",
          "documentation": "POSITIVE_INFINITY: double",
          "insertText": "POSITIVE_INFINITY"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(double a, double b): int",
          "insertText": "compare"
        },
        {
          "label": "doubleToLongBits",
          "kind": "method",
          "documentation": "doubleToLongBits(double a): long",
          "insertText": "doubleToLongBits"
        },
        {
          "label": "doubleToRawLongBits",
          "kind": "method",
          "documentation": "doubleToRawLongBits(double a): long",
          "insertText": "doubleToRawLongBits"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(double a): int",
          "insertText": "hashCode"
        },
        {
          "label": "isFinite",
          "kind": "method",
          "documentation": "isFinite(double a): boolean",
          "insertText": "isFinite"
        },
        {
          "label": "isInfinite",
          "kind": "method",
          "documentation": "isInfinite(double a): boolean",
          "insertText": "isInfinite"
        },
        {
          "label": "isNaN",
          "kind": "method",
          "documentation": "isNaN(double a): boolean",
          "insertText": "isNaN"
        },
        {
          "label": "longBitsToDouble",
          "kind": "method",
          "documentation": "longBitsToDouble(long a): double",
          "insertText": "longBitsToDouble"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(double a, double b): double",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(double a, double b): double",
          "insertText": "min"
        },
        {
          "label": "parseDouble",
          "kind": "method",
          "documentation": "parseDouble(String a): double",
          "insertText": "parseDouble"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(double a, double b): double",
          "insertText": "sum"
        },
        {
          "label": "toHexString",
          "kind": "method",
          "documentation": "toHexString(double a): String",
          "insertText": "toHexString"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(double a): String",
          "insertText": "toString"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(double a): Double",
          "insertText": "valueOf"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Double a): int",
          "insertText": "compareTo"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "isInfinite",
          "kind": "method",
          "documentation": "isInfinite(): boolean",
          "insertText": "isInfinite"
        },
        {
          "label": "isNaN",
          "kind": "method",
          "documentation": "isNaN(): boolean",
          "insertText": "isNaN"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Enum",
      "kind": "class",
      "documentation": "Class: Enum",
      "insertText": "Enum",
      "properties": [
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "EnumConstantNotPresentException",
      "kind": "class",
      "documentation": "Class: EnumConstantNotPresentException",
      "insertText": "EnumConstantNotPresentException",
      "properties": [
        {
          "label": "constantName",
          "kind": "method",
          "documentation": "constantName(): String",
          "insertText": "constantName"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Exception",
      "kind": "class",
      "documentation": "Class: Exception",
      "insertText": "Exception",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Exception",
        "kind": "constructor",
        "documentation": "Constructor: Exception",
        "insertText": "Exception"
      }
    },
    {
      "label": "Float",
      "kind": "class",
      "documentation": "Class: Float",
      "insertText": "Float",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "MAX_EXPONENT",
          "kind": "property",
          "documentation": "MAX_EXPONENT: int",
          "insertText": "MAX_EXPONENT"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: float",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_EXPONENT",
          "kind": "property",
          "documentation": "MIN_EXPONENT: int",
          "insertText": "MIN_EXPONENT"
        },
        {
          "label": "MIN_NORMAL",
          "kind": "property",
          "documentation": "MIN_NORMAL: float",
          "insertText": "MIN_NORMAL"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: float",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "NEGATIVE_INFINITY",
          "kind": "property",
          "documentation": "NEGATIVE_INFINITY: float",
          "insertText": "NEGATIVE_INFINITY"
        },
        {
          "label": "NaN",
          "kind": "property",
          "documentation": "NaN: float",
          "insertText": "NaN"
        },
        {
          "label": "POSITIVE_INFINITY",
          "kind": "property",
          "documentation": "POSITIVE_INFINITY: float",
          "insertText": "POSITIVE_INFINITY"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(float a, float b): int",
          "insertText": "compare"
        },
        {
          "label": "floatToIntBits",
          "kind": "method",
          "documentation": "floatToIntBits(float a): int",
          "insertText": "floatToIntBits"
        },
        {
          "label": "floatToRawIntBits",
          "kind": "method",
          "documentation": "floatToRawIntBits(float a): int",
          "insertText": "floatToRawIntBits"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(float a): int",
          "insertText": "hashCode"
        },
        {
          "label": "intBitsToFloat",
          "kind": "method",
          "documentation": "intBitsToFloat(int a): float",
          "insertText": "intBitsToFloat"
        },
        {
          "label": "isFinite",
          "kind": "method",
          "documentation": "isFinite(float a): boolean",
          "insertText": "isFinite"
        },
        {
          "label": "isInfinite",
          "kind": "method",
          "documentation": "isInfinite(float a): boolean",
          "insertText": "isInfinite"
        },
        {
          "label": "isNaN",
          "kind": "method",
          "documentation": "isNaN(float a): boolean",
          "insertText": "isNaN"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(float a, float b): float",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(float a, float b): float",
          "insertText": "min"
        },
        {
          "label": "parseFloat",
          "kind": "method",
          "documentation": "parseFloat(String a): float",
          "insertText": "parseFloat"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(float a, float b): float",
          "insertText": "sum"
        },
        {
          "label": "toHexString",
          "kind": "method",
          "documentation": "toHexString(float a): String",
          "insertText": "toHexString"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(float a): String",
          "insertText": "toString"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(float a): Float",
          "insertText": "valueOf"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Float a): int",
          "insertText": "compareTo"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "isInfinite",
          "kind": "method",
          "documentation": "isInfinite(): boolean",
          "insertText": "isInfinite"
        },
        {
          "label": "isNaN",
          "kind": "method",
          "documentation": "isNaN(): boolean",
          "insertText": "isNaN"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IllegalAccessException",
      "kind": "class",
      "documentation": "Class: IllegalAccessException",
      "insertText": "IllegalAccessException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalAccessException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalAccessException",
        "insertText": "IllegalAccessException"
      }
    },
    {
      "label": "IllegalArgumentException",
      "kind": "class",
      "documentation": "Class: IllegalArgumentException",
      "insertText": "IllegalArgumentException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalArgumentException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalArgumentException",
        "insertText": "IllegalArgumentException"
      }
    },
    {
      "label": "IllegalMonitorStateException",
      "kind": "class",
      "documentation": "Class: IllegalMonitorStateException",
      "insertText": "IllegalMonitorStateException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalMonitorStateException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalMonitorStateException",
        "insertText": "IllegalMonitorStateException"
      }
    },
    {
      "label": "IllegalStateException",
      "kind": "class",
      "documentation": "Class: IllegalStateException",
      "insertText": "IllegalStateException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalStateException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalStateException",
        "insertText": "IllegalStateException"
      }
    },
    {
      "label": "IllegalThreadStateException",
      "kind": "class",
      "documentation": "Class: IllegalThreadStateException",
      "insertText": "IllegalThreadStateException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalThreadStateException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalThreadStateException",
        "insertText": "IllegalThreadStateException"
      }
    },
    {
      "label": "IndexOutOfBoundsException",
      "kind": "class",
      "documentation": "Class: IndexOutOfBoundsException",
      "insertText": "IndexOutOfBoundsException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IndexOutOfBoundsException",
        "kind": "constructor",
        "documentation": "Constructor: IndexOutOfBoundsException",
        "insertText": "IndexOutOfBoundsException"
      }
    },
    {
      "label": "InstantiationException",
      "kind": "class",
      "documentation": "Class: InstantiationException",
      "insertText": "InstantiationException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "InstantiationException",
        "kind": "constructor",
        "documentation": "Constructor: InstantiationException",
        "insertText": "InstantiationException"
      }
    },
    {
      "label": "Integer",
      "kind": "class",
      "documentation": "Class: Integer",
      "insertText": "Integer",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: int",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: int",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "bitCount",
          "kind": "method",
          "documentation": "bitCount(int a): int",
          "insertText": "bitCount"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(int a, int b): int",
          "insertText": "compare"
        },
        {
          "label": "compareUnsigned",
          "kind": "method",
          "documentation": "compareUnsigned(int a, int b): int",
          "insertText": "compareUnsigned"
        },
        {
          "label": "decode",
          "kind": "method",
          "documentation": "decode(String a): Integer",
          "insertText": "decode"
        },
        {
          "label": "divideUnsigned",
          "kind": "method",
          "documentation": "divideUnsigned(int a, int b): int",
          "insertText": "divideUnsigned"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(int a): int",
          "insertText": "hashCode"
        },
        {
          "label": "highestOneBit",
          "kind": "method",
          "documentation": "highestOneBit(int a): int",
          "insertText": "highestOneBit"
        },
        {
          "label": "lowestOneBit",
          "kind": "method",
          "documentation": "lowestOneBit(int a): int",
          "insertText": "lowestOneBit"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(int a, int b): int",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(int a, int b): int",
          "insertText": "min"
        },
        {
          "label": "numberOfLeadingZeros",
          "kind": "method",
          "documentation": "numberOfLeadingZeros(int a): int",
          "insertText": "numberOfLeadingZeros"
        },
        {
          "label": "numberOfTrailingZeros",
          "kind": "method",
          "documentation": "numberOfTrailingZeros(int a): int",
          "insertText": "numberOfTrailingZeros"
        },
        {
          "label": "parseInt",
          "kind": "method",
          "documentation": "parseInt(String a, int b | String a): int",
          "insertText": "parseInt"
        },
        {
          "label": "parseUnsignedInt",
          "kind": "method",
          "documentation": "parseUnsignedInt(String a, int b | String a): int",
          "insertText": "parseUnsignedInt"
        },
        {
          "label": "remainderUnsigned",
          "kind": "method",
          "documentation": "remainderUnsigned(int a, int b): int",
          "insertText": "remainderUnsigned"
        },
        {
          "label": "reverse",
          "kind": "method",
          "documentation": "reverse(int a): int",
          "insertText": "reverse"
        },
        {
          "label": "reverseBytes",
          "kind": "method",
          "documentation": "reverseBytes(int a): int",
          "insertText": "reverseBytes"
        },
        {
          "label": "rotateLeft",
          "kind": "method",
          "documentation": "rotateLeft(int a, int b): int",
          "insertText": "rotateLeft"
        },
        {
          "label": "rotateRight",
          "kind": "method",
          "documentation": "rotateRight(int a, int b): int",
          "insertText": "rotateRight"
        },
        {
          "label": "signum",
          "kind": "method",
          "documentation": "signum(int a): int",
          "insertText": "signum"
        },
        {
          "label": "toBinaryString",
          "kind": "method",
          "documentation": "toBinaryString(int a): String",
          "insertText": "toBinaryString"
        },
        {
          "label": "toHexString",
          "kind": "method",
          "documentation": "toHexString(int a): String",
          "insertText": "toHexString"
        },
        {
          "label": "toOctalString",
          "kind": "method",
          "documentation": "toOctalString(int a): String",
          "insertText": "toOctalString"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(int a, int b | int a): String",
          "insertText": "toString"
        },
        {
          "label": "toUnsignedLong",
          "kind": "method",
          "documentation": "toUnsignedLong(int a): long",
          "insertText": "toUnsignedLong"
        },
        {
          "label": "toUnsignedString",
          "kind": "method",
          "documentation": "toUnsignedString(int a, int b | int a): String",
          "insertText": "toUnsignedString"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a, int b | int a): Integer",
          "insertText": "valueOf"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Integer a): int",
          "insertText": "compareTo"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "InterruptedException",
      "kind": "class",
      "documentation": "Class: InterruptedException",
      "insertText": "InterruptedException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "InterruptedException",
        "kind": "constructor",
        "documentation": "Constructor: InterruptedException",
        "insertText": "InterruptedException"
      }
    },
    {
      "label": "Iterable",
      "kind": "class",
      "documentation": "Class: Iterable",
      "insertText": "Iterable",
      "properties": [
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Long",
      "kind": "class",
      "documentation": "Class: Long",
      "insertText": "Long",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: long",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: long",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "bitCount",
          "kind": "method",
          "documentation": "bitCount(long a): int",
          "insertText": "bitCount"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(long a, long b): int",
          "insertText": "compare"
        },
        {
          "label": "compareUnsigned",
          "kind": "method",
          "documentation": "compareUnsigned(long a, long b): int",
          "insertText": "compareUnsigned"
        },
        {
          "label": "decode",
          "kind": "method",
          "documentation": "decode(String a): Long",
          "insertText": "decode"
        },
        {
          "label": "divideUnsigned",
          "kind": "method",
          "documentation": "divideUnsigned(long a, long b): long",
          "insertText": "divideUnsigned"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(long a): int",
          "insertText": "hashCode"
        },
        {
          "label": "highestOneBit",
          "kind": "method",
          "documentation": "highestOneBit(long a): long",
          "insertText": "highestOneBit"
        },
        {
          "label": "lowestOneBit",
          "kind": "method",
          "documentation": "lowestOneBit(long a): long",
          "insertText": "lowestOneBit"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(long a, long b): long",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(long a, long b): long",
          "insertText": "min"
        },
        {
          "label": "numberOfLeadingZeros",
          "kind": "method",
          "documentation": "numberOfLeadingZeros(long a): int",
          "insertText": "numberOfLeadingZeros"
        },
        {
          "label": "numberOfTrailingZeros",
          "kind": "method",
          "documentation": "numberOfTrailingZeros(long a): int",
          "insertText": "numberOfTrailingZeros"
        },
        {
          "label": "parseLong",
          "kind": "method",
          "documentation": "parseLong(String a, int b | String a): long",
          "insertText": "parseLong"
        },
        {
          "label": "parseUnsignedLong",
          "kind": "method",
          "documentation": "parseUnsignedLong(String a, int b | String a): long",
          "insertText": "parseUnsignedLong"
        },
        {
          "label": "remainderUnsigned",
          "kind": "method",
          "documentation": "remainderUnsigned(long a, long b): long",
          "insertText": "remainderUnsigned"
        },
        {
          "label": "reverse",
          "kind": "method",
          "documentation": "reverse(long a): long",
          "insertText": "reverse"
        },
        {
          "label": "reverseBytes",
          "kind": "method",
          "documentation": "reverseBytes(long a): long",
          "insertText": "reverseBytes"
        },
        {
          "label": "rotateLeft",
          "kind": "method",
          "documentation": "rotateLeft(long a, int b): long",
          "insertText": "rotateLeft"
        },
        {
          "label": "rotateRight",
          "kind": "method",
          "documentation": "rotateRight(long a, int b): long",
          "insertText": "rotateRight"
        },
        {
          "label": "signum",
          "kind": "method",
          "documentation": "signum(long a): int",
          "insertText": "signum"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(long a, long b): long",
          "insertText": "sum"
        },
        {
          "label": "toBinaryString",
          "kind": "method",
          "documentation": "toBinaryString(long a): String",
          "insertText": "toBinaryString"
        },
        {
          "label": "toHexString",
          "kind": "method",
          "documentation": "toHexString(long a): String",
          "insertText": "toHexString"
        },
        {
          "label": "toOctalString",
          "kind": "method",
          "documentation": "toOctalString(long a): String",
          "insertText": "toOctalString"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(long a, int b | long a): String",
          "insertText": "toString"
        },
        {
          "label": "toUnsignedString",
          "kind": "method",
          "documentation": "toUnsignedString(long a, int b | long a): String",
          "insertText": "toUnsignedString"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a, int b | long a): Long",
          "insertText": "valueOf"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Long a): int",
          "insertText": "compareTo"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Math",
      "kind": "class",
      "documentation": "Class: Math",
      "insertText": "Math",
      "properties": [
        {
          "label": "E",
          "kind": "property",
          "documentation": "E: double",
          "insertText": "E"
        },
        {
          "label": "PI",
          "kind": "property",
          "documentation": "PI: double",
          "insertText": "PI"
        },
        {
          "label": "IEEEremainder",
          "kind": "method",
          "documentation": "IEEEremainder(double a, double b): double",
          "insertText": "IEEEremainder"
        },
        {
          "label": "abs",
          "kind": "method",
          "documentation": "abs(double a): double",
          "insertText": "abs"
        },
        {
          "label": "acos",
          "kind": "method",
          "documentation": "acos(double a): double",
          "insertText": "acos"
        },
        {
          "label": "asin",
          "kind": "method",
          "documentation": "asin(double a): double",
          "insertText": "asin"
        },
        {
          "label": "atan",
          "kind": "method",
          "documentation": "atan(double a): double",
          "insertText": "atan"
        },
        {
          "label": "atan2",
          "kind": "method",
          "documentation": "atan2(double a, double b): double",
          "insertText": "atan2"
        },
        {
          "label": "cbrt",
          "kind": "method",
          "documentation": "cbrt(double a): double",
          "insertText": "cbrt"
        },
        {
          "label": "ceil",
          "kind": "method",
          "documentation": "ceil(double a): double",
          "insertText": "ceil"
        },
        {
          "label": "copySign",
          "kind": "method",
          "documentation": "copySign(double a, double b): double",
          "insertText": "copySign"
        },
        {
          "label": "cos",
          "kind": "method",
          "documentation": "cos(double a): double",
          "insertText": "cos"
        },
        {
          "label": "cosh",
          "kind": "method",
          "documentation": "cosh(double a): double",
          "insertText": "cosh"
        },
        {
          "label": "exp",
          "kind": "method",
          "documentation": "exp(double a): double",
          "insertText": "exp"
        },
        {
          "label": "expm1",
          "kind": "method",
          "documentation": "expm1(double a): double",
          "insertText": "expm1"
        },
        {
          "label": "floor",
          "kind": "method",
          "documentation": "floor(double a): double",
          "insertText": "floor"
        },
        {
          "label": "hypot",
          "kind": "method",
          "documentation": "hypot(double a, double b): double",
          "insertText": "hypot"
        },
        {
          "label": "log",
          "kind": "method",
          "documentation": "log(double a): double",
          "insertText": "log"
        },
        {
          "label": "log10",
          "kind": "method",
          "documentation": "log10(double a): double",
          "insertText": "log10"
        },
        {
          "label": "log1p",
          "kind": "method",
          "documentation": "log1p(double a): double",
          "insertText": "log1p"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(double a, double b): double",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(double a, double b): double",
          "insertText": "min"
        },
        {
          "label": "nextAfter",
          "kind": "method",
          "documentation": "nextAfter(double a, double b): double",
          "insertText": "nextAfter"
        },
        {
          "label": "nextDown",
          "kind": "method",
          "documentation": "nextDown(double a): double",
          "insertText": "nextDown"
        },
        {
          "label": "nextUp",
          "kind": "method",
          "documentation": "nextUp(double a): double",
          "insertText": "nextUp"
        },
        {
          "label": "pow",
          "kind": "method",
          "documentation": "pow(double a, double b): double",
          "insertText": "pow"
        },
        {
          "label": "random",
          "kind": "method",
          "documentation": "random(): double",
          "insertText": "random"
        },
        {
          "label": "rint",
          "kind": "method",
          "documentation": "rint(double a): double",
          "insertText": "rint"
        },
        {
          "label": "round",
          "kind": "method",
          "documentation": "round(double a): long",
          "insertText": "round"
        },
        {
          "label": "scalb",
          "kind": "method",
          "documentation": "scalb(double a, int b): double",
          "insertText": "scalb"
        },
        {
          "label": "signum",
          "kind": "method",
          "documentation": "signum(double a): double",
          "insertText": "signum"
        },
        {
          "label": "sin",
          "kind": "method",
          "documentation": "sin(double a): double",
          "insertText": "sin"
        },
        {
          "label": "sinh",
          "kind": "method",
          "documentation": "sinh(double a): double",
          "insertText": "sinh"
        },
        {
          "label": "sqrt",
          "kind": "method",
          "documentation": "sqrt(double a): double",
          "insertText": "sqrt"
        },
        {
          "label": "tan",
          "kind": "method",
          "documentation": "tan(double a): double",
          "insertText": "tan"
        },
        {
          "label": "tanh",
          "kind": "method",
          "documentation": "tanh(double a): double",
          "insertText": "tanh"
        },
        {
          "label": "toDegrees",
          "kind": "method",
          "documentation": "toDegrees(double a): double",
          "insertText": "toDegrees"
        },
        {
          "label": "toRadians",
          "kind": "method",
          "documentation": "toRadians(double a): double",
          "insertText": "toRadians"
        },
        {
          "label": "ulp",
          "kind": "method",
          "documentation": "ulp(double a): double",
          "insertText": "ulp"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "NegativeArraySizeException",
      "kind": "class",
      "documentation": "Class: NegativeArraySizeException",
      "insertText": "NegativeArraySizeException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "NegativeArraySizeException",
        "kind": "constructor",
        "documentation": "Constructor: NegativeArraySizeException",
        "insertText": "NegativeArraySizeException"
      }
    },
    {
      "label": "NoSuchFieldException",
      "kind": "class",
      "documentation": "Class: NoSuchFieldException",
      "insertText": "NoSuchFieldException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "NoSuchFieldException",
        "kind": "constructor",
        "documentation": "Constructor: NoSuchFieldException",
        "insertText": "NoSuchFieldException"
      }
    },
    {
      "label": "NoSuchMethodException",
      "kind": "class",
      "documentation": "Class: NoSuchMethodException",
      "insertText": "NoSuchMethodException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "NoSuchMethodException",
        "kind": "constructor",
        "documentation": "Constructor: NoSuchMethodException",
        "insertText": "NoSuchMethodException"
      }
    },
    {
      "label": "NullPointerException",
      "kind": "class",
      "documentation": "Class: NullPointerException",
      "insertText": "NullPointerException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "NullPointerException",
        "kind": "constructor",
        "documentation": "Constructor: NullPointerException",
        "insertText": "NullPointerException"
      }
    },
    {
      "label": "Number",
      "kind": "class",
      "documentation": "Class: Number",
      "insertText": "Number",
      "properties": [
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "NumberFormatException",
      "kind": "class",
      "documentation": "Class: NumberFormatException",
      "insertText": "NumberFormatException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "NumberFormatException",
        "kind": "constructor",
        "documentation": "Constructor: NumberFormatException",
        "insertText": "NumberFormatException"
      }
    },
    {
      "label": "Object",
      "kind": "class",
      "documentation": "Class: Object",
      "insertText": "Object",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ReflectiveOperationException",
      "kind": "class",
      "documentation": "Class: ReflectiveOperationException",
      "insertText": "ReflectiveOperationException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ReflectiveOperationException",
        "kind": "constructor",
        "documentation": "Constructor: ReflectiveOperationException",
        "insertText": "ReflectiveOperationException"
      }
    },
    {
      "label": "RuntimeException",
      "kind": "class",
      "documentation": "Class: RuntimeException",
      "insertText": "RuntimeException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "RuntimeException",
        "kind": "constructor",
        "documentation": "Constructor: RuntimeException",
        "insertText": "RuntimeException"
      }
    },
    {
      "label": "SecurityException",
      "kind": "class",
      "documentation": "Class: SecurityException",
      "insertText": "SecurityException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "SecurityException",
        "kind": "constructor",
        "documentation": "Constructor: SecurityException",
        "insertText": "SecurityException"
      }
    },
    {
      "label": "Short",
      "kind": "class",
      "documentation": "Class: Short",
      "insertText": "Short",
      "properties": [
        {
          "label": "BYTES",
          "kind": "property",
          "documentation": "BYTES: int",
          "insertText": "BYTES"
        },
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: short",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: short",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "SIZE",
          "kind": "property",
          "documentation": "SIZE: int",
          "insertText": "SIZE"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(short a, short b): int",
          "insertText": "compare"
        },
        {
          "label": "decode",
          "kind": "method",
          "documentation": "decode(String a): Short",
          "insertText": "decode"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(short a): int",
          "insertText": "hashCode"
        },
        {
          "label": "parseShort",
          "kind": "method",
          "documentation": "parseShort(String a, int b | String a): short",
          "insertText": "parseShort"
        },
        {
          "label": "reverseBytes",
          "kind": "method",
          "documentation": "reverseBytes(short a): short",
          "insertText": "reverseBytes"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(short a): String",
          "insertText": "toString"
        },
        {
          "label": "toUnsignedInt",
          "kind": "method",
          "documentation": "toUnsignedInt(short a): int",
          "insertText": "toUnsignedInt"
        },
        {
          "label": "toUnsignedLong",
          "kind": "method",
          "documentation": "toUnsignedLong(short a): long",
          "insertText": "toUnsignedLong"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a, int b | short a): Short",
          "insertText": "valueOf"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Short a): int",
          "insertText": "compareTo"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "StackTraceElement",
      "kind": "class",
      "documentation": "Class: StackTraceElement",
      "insertText": "StackTraceElement",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getClassName",
          "kind": "method",
          "documentation": "getClassName(): String",
          "insertText": "getClassName"
        },
        {
          "label": "getFileName",
          "kind": "method",
          "documentation": "getFileName(): String",
          "insertText": "getFileName"
        },
        {
          "label": "getLineNumber",
          "kind": "method",
          "documentation": "getLineNumber(): int",
          "insertText": "getLineNumber"
        },
        {
          "label": "getMethodName",
          "kind": "method",
          "documentation": "getMethodName(): String",
          "insertText": "getMethodName"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isNativeMethod",
          "kind": "method",
          "documentation": "isNativeMethod(): boolean",
          "insertText": "isNativeMethod"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StackTraceElement",
        "kind": "constructor",
        "documentation": "Constructor: StackTraceElement",
        "insertText": "StackTraceElement"
      }
    },
    {
      "label": "StrictMath",
      "kind": "class",
      "documentation": "Class: StrictMath",
      "insertText": "StrictMath",
      "properties": [
        {
          "label": "E",
          "kind": "property",
          "documentation": "E: double",
          "insertText": "E"
        },
        {
          "label": "PI",
          "kind": "property",
          "documentation": "PI: double",
          "insertText": "PI"
        },
        {
          "label": "IEEEremainder",
          "kind": "method",
          "documentation": "IEEEremainder(double a, double b): double",
          "insertText": "IEEEremainder"
        },
        {
          "label": "abs",
          "kind": "method",
          "documentation": "abs(double a): double",
          "insertText": "abs"
        },
        {
          "label": "acos",
          "kind": "method",
          "documentation": "acos(double a): double",
          "insertText": "acos"
        },
        {
          "label": "asin",
          "kind": "method",
          "documentation": "asin(double a): double",
          "insertText": "asin"
        },
        {
          "label": "atan",
          "kind": "method",
          "documentation": "atan(double a): double",
          "insertText": "atan"
        },
        {
          "label": "atan2",
          "kind": "method",
          "documentation": "atan2(double a, double b): double",
          "insertText": "atan2"
        },
        {
          "label": "cbrt",
          "kind": "method",
          "documentation": "cbrt(double a): double",
          "insertText": "cbrt"
        },
        {
          "label": "ceil",
          "kind": "method",
          "documentation": "ceil(double a): double",
          "insertText": "ceil"
        },
        {
          "label": "copySign",
          "kind": "method",
          "documentation": "copySign(double a, double b): double",
          "insertText": "copySign"
        },
        {
          "label": "cos",
          "kind": "method",
          "documentation": "cos(double a): double",
          "insertText": "cos"
        },
        {
          "label": "cosh",
          "kind": "method",
          "documentation": "cosh(double a): double",
          "insertText": "cosh"
        },
        {
          "label": "exp",
          "kind": "method",
          "documentation": "exp(double a): double",
          "insertText": "exp"
        },
        {
          "label": "expm1",
          "kind": "method",
          "documentation": "expm1(double a): double",
          "insertText": "expm1"
        },
        {
          "label": "floor",
          "kind": "method",
          "documentation": "floor(double a): double",
          "insertText": "floor"
        },
        {
          "label": "hypot",
          "kind": "method",
          "documentation": "hypot(double a, double b): double",
          "insertText": "hypot"
        },
        {
          "label": "log",
          "kind": "method",
          "documentation": "log(double a): double",
          "insertText": "log"
        },
        {
          "label": "log10",
          "kind": "method",
          "documentation": "log10(double a): double",
          "insertText": "log10"
        },
        {
          "label": "log1p",
          "kind": "method",
          "documentation": "log1p(double a): double",
          "insertText": "log1p"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(double a, double b): double",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(double a, double b): double",
          "insertText": "min"
        },
        {
          "label": "nextAfter",
          "kind": "method",
          "documentation": "nextAfter(double a, double b): double",
          "insertText": "nextAfter"
        },
        {
          "label": "nextDown",
          "kind": "method",
          "documentation": "nextDown(double a): double",
          "insertText": "nextDown"
        },
        {
          "label": "nextUp",
          "kind": "method",
          "documentation": "nextUp(double a): double",
          "insertText": "nextUp"
        },
        {
          "label": "pow",
          "kind": "method",
          "documentation": "pow(double a, double b): double",
          "insertText": "pow"
        },
        {
          "label": "random",
          "kind": "method",
          "documentation": "random(): double",
          "insertText": "random"
        },
        {
          "label": "rint",
          "kind": "method",
          "documentation": "rint(double a): double",
          "insertText": "rint"
        },
        {
          "label": "round",
          "kind": "method",
          "documentation": "round(double a): long",
          "insertText": "round"
        },
        {
          "label": "scalb",
          "kind": "method",
          "documentation": "scalb(double a, int b): double",
          "insertText": "scalb"
        },
        {
          "label": "signum",
          "kind": "method",
          "documentation": "signum(double a): double",
          "insertText": "signum"
        },
        {
          "label": "sin",
          "kind": "method",
          "documentation": "sin(double a): double",
          "insertText": "sin"
        },
        {
          "label": "sinh",
          "kind": "method",
          "documentation": "sinh(double a): double",
          "insertText": "sinh"
        },
        {
          "label": "sqrt",
          "kind": "method",
          "documentation": "sqrt(double a): double",
          "insertText": "sqrt"
        },
        {
          "label": "tan",
          "kind": "method",
          "documentation": "tan(double a): double",
          "insertText": "tan"
        },
        {
          "label": "tanh",
          "kind": "method",
          "documentation": "tanh(double a): double",
          "insertText": "tanh"
        },
        {
          "label": "toDegrees",
          "kind": "method",
          "documentation": "toDegrees(double a): double",
          "insertText": "toDegrees"
        },
        {
          "label": "toRadians",
          "kind": "method",
          "documentation": "toRadians(double a): double",
          "insertText": "toRadians"
        },
        {
          "label": "ulp",
          "kind": "method",
          "documentation": "ulp(double a): double",
          "insertText": "ulp"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "StringBuffer",
      "kind": "class",
      "documentation": "Class: StringBuffer",
      "insertText": "StringBuffer",
      "properties": [
        {
          "label": "append",
          "kind": "method",
          "documentation": "append(CharSequence a, int b, int c | def a): StringBuffer",
          "insertText": "append"
        },
        {
          "label": "appendCodePoint",
          "kind": "method",
          "documentation": "appendCodePoint(int a): StringBuffer",
          "insertText": "appendCodePoint"
        },
        {
          "label": "capacity",
          "kind": "method",
          "documentation": "capacity(): int",
          "insertText": "capacity"
        },
        {
          "label": "charAt",
          "kind": "method",
          "documentation": "charAt(int a): char",
          "insertText": "charAt"
        },
        {
          "label": "chars",
          "kind": "method",
          "documentation": "chars(): IntStream",
          "insertText": "chars"
        },
        {
          "label": "codePointAt",
          "kind": "method",
          "documentation": "codePointAt(int a): int",
          "insertText": "codePointAt"
        },
        {
          "label": "codePointBefore",
          "kind": "method",
          "documentation": "codePointBefore(int a): int",
          "insertText": "codePointBefore"
        },
        {
          "label": "codePointCount",
          "kind": "method",
          "documentation": "codePointCount(int a, int b): int",
          "insertText": "codePointCount"
        },
        {
          "label": "codePoints",
          "kind": "method",
          "documentation": "codePoints(): IntStream",
          "insertText": "codePoints"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(def a): int",
          "insertText": "compareTo"
        },
        {
          "label": "delete",
          "kind": "method",
          "documentation": "delete(int a, int b): StringBuffer",
          "insertText": "delete"
        },
        {
          "label": "deleteCharAt",
          "kind": "method",
          "documentation": "deleteCharAt(int a): StringBuffer",
          "insertText": "deleteCharAt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getChars",
          "kind": "method",
          "documentation": "getChars(int a, int b, char[] c, int d): void",
          "insertText": "getChars"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(String a, int b | String a): int",
          "insertText": "indexOf"
        },
        {
          "label": "insert",
          "kind": "method",
          "documentation": "insert(int a, def b): StringBuffer",
          "insertText": "insert"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(String a, int b | String a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "offsetByCodePoints",
          "kind": "method",
          "documentation": "offsetByCodePoints(int a, int b): int",
          "insertText": "offsetByCodePoints"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(int a, int b, String c): StringBuffer",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(Pattern a, Function b): String",
          "insertText": "replaceAll"
        },
        {
          "label": "replaceFirst",
          "kind": "method",
          "documentation": "replaceFirst(Pattern a, Function b): String",
          "insertText": "replaceFirst"
        },
        {
          "label": "reverse",
          "kind": "method",
          "documentation": "reverse(): StringBuffer",
          "insertText": "reverse"
        },
        {
          "label": "setCharAt",
          "kind": "method",
          "documentation": "setCharAt(int a, char b): void",
          "insertText": "setCharAt"
        },
        {
          "label": "setLength",
          "kind": "method",
          "documentation": "setLength(int a): void",
          "insertText": "setLength"
        },
        {
          "label": "subSequence",
          "kind": "method",
          "documentation": "subSequence(int a, int b): CharSequence",
          "insertText": "subSequence"
        },
        {
          "label": "substring",
          "kind": "method",
          "documentation": "substring(int a, int b | int a): String",
          "insertText": "substring"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StringBuffer",
        "kind": "constructor",
        "documentation": "Constructor: StringBuffer",
        "insertText": "StringBuffer"
      }
    },
    {
      "label": "StringBuilder",
      "kind": "class",
      "documentation": "Class: StringBuilder",
      "insertText": "StringBuilder",
      "properties": [
        {
          "label": "append",
          "kind": "method",
          "documentation": "append(CharSequence a, int b, int c | def a): StringBuilder",
          "insertText": "append"
        },
        {
          "label": "appendCodePoint",
          "kind": "method",
          "documentation": "appendCodePoint(int a): StringBuilder",
          "insertText": "appendCodePoint"
        },
        {
          "label": "capacity",
          "kind": "method",
          "documentation": "capacity(): int",
          "insertText": "capacity"
        },
        {
          "label": "charAt",
          "kind": "method",
          "documentation": "charAt(int a): char",
          "insertText": "charAt"
        },
        {
          "label": "chars",
          "kind": "method",
          "documentation": "chars(): IntStream",
          "insertText": "chars"
        },
        {
          "label": "codePointAt",
          "kind": "method",
          "documentation": "codePointAt(int a): int",
          "insertText": "codePointAt"
        },
        {
          "label": "codePointBefore",
          "kind": "method",
          "documentation": "codePointBefore(int a): int",
          "insertText": "codePointBefore"
        },
        {
          "label": "codePointCount",
          "kind": "method",
          "documentation": "codePointCount(int a, int b): int",
          "insertText": "codePointCount"
        },
        {
          "label": "codePoints",
          "kind": "method",
          "documentation": "codePoints(): IntStream",
          "insertText": "codePoints"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(def a): int",
          "insertText": "compareTo"
        },
        {
          "label": "delete",
          "kind": "method",
          "documentation": "delete(int a, int b): StringBuilder",
          "insertText": "delete"
        },
        {
          "label": "deleteCharAt",
          "kind": "method",
          "documentation": "deleteCharAt(int a): StringBuilder",
          "insertText": "deleteCharAt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getChars",
          "kind": "method",
          "documentation": "getChars(int a, int b, char[] c, int d): void",
          "insertText": "getChars"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(String a, int b | String a): int",
          "insertText": "indexOf"
        },
        {
          "label": "insert",
          "kind": "method",
          "documentation": "insert(int a, def b): StringBuilder",
          "insertText": "insert"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(String a, int b | String a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "offsetByCodePoints",
          "kind": "method",
          "documentation": "offsetByCodePoints(int a, int b): int",
          "insertText": "offsetByCodePoints"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(int a, int b, String c): StringBuilder",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(Pattern a, Function b): String",
          "insertText": "replaceAll"
        },
        {
          "label": "replaceFirst",
          "kind": "method",
          "documentation": "replaceFirst(Pattern a, Function b): String",
          "insertText": "replaceFirst"
        },
        {
          "label": "reverse",
          "kind": "method",
          "documentation": "reverse(): StringBuilder",
          "insertText": "reverse"
        },
        {
          "label": "setCharAt",
          "kind": "method",
          "documentation": "setCharAt(int a, char b): void",
          "insertText": "setCharAt"
        },
        {
          "label": "setLength",
          "kind": "method",
          "documentation": "setLength(int a): void",
          "insertText": "setLength"
        },
        {
          "label": "subSequence",
          "kind": "method",
          "documentation": "subSequence(int a, int b): CharSequence",
          "insertText": "subSequence"
        },
        {
          "label": "substring",
          "kind": "method",
          "documentation": "substring(int a, int b | int a): String",
          "insertText": "substring"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StringBuilder",
        "kind": "constructor",
        "documentation": "Constructor: StringBuilder",
        "insertText": "StringBuilder"
      }
    },
    {
      "label": "StringIndexOutOfBoundsException",
      "kind": "class",
      "documentation": "Class: StringIndexOutOfBoundsException",
      "insertText": "StringIndexOutOfBoundsException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StringIndexOutOfBoundsException",
        "kind": "constructor",
        "documentation": "Constructor: StringIndexOutOfBoundsException",
        "insertText": "StringIndexOutOfBoundsException"
      }
    },
    {
      "label": "System",
      "kind": "class",
      "documentation": "Class: System",
      "insertText": "System",
      "properties": [
        {
          "label": "arraycopy",
          "kind": "method",
          "documentation": "arraycopy(Object a, int b, Object c, int d, int e): void",
          "insertText": "arraycopy"
        },
        {
          "label": "currentTimeMillis",
          "kind": "method",
          "documentation": "currentTimeMillis(): long",
          "insertText": "currentTimeMillis"
        },
        {
          "label": "nanoTime",
          "kind": "method",
          "documentation": "nanoTime(): long",
          "insertText": "nanoTime"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TypeNotPresentException",
      "kind": "class",
      "documentation": "Class: TypeNotPresentException",
      "insertText": "TypeNotPresentException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "typeName",
          "kind": "method",
          "documentation": "typeName(): String",
          "insertText": "typeName"
        }
      ]
    },
    {
      "label": "UnsupportedOperationException",
      "kind": "class",
      "documentation": "Class: UnsupportedOperationException",
      "insertText": "UnsupportedOperationException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "UnsupportedOperationException",
        "kind": "constructor",
        "documentation": "Constructor: UnsupportedOperationException",
        "insertText": "UnsupportedOperationException"
      }
    },
    {
      "label": "Void",
      "kind": "class",
      "documentation": "Class: Void",
      "insertText": "Void",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BigDecimal",
      "kind": "class",
      "documentation": "Class: BigDecimal",
      "insertText": "BigDecimal",
      "properties": [
        {
          "label": "ONE",
          "kind": "property",
          "documentation": "ONE: BigDecimal",
          "insertText": "ONE"
        },
        {
          "label": "TEN",
          "kind": "property",
          "documentation": "TEN: BigDecimal",
          "insertText": "TEN"
        },
        {
          "label": "ZERO",
          "kind": "property",
          "documentation": "ZERO: BigDecimal",
          "insertText": "ZERO"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(double a): BigDecimal",
          "insertText": "valueOf"
        },
        {
          "label": "abs",
          "kind": "method",
          "documentation": "abs(MathContext a): BigDecimal",
          "insertText": "abs"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(BigDecimal a, MathContext b | BigDecimal a): BigDecimal",
          "insertText": "add"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "byteValueExact",
          "kind": "method",
          "documentation": "byteValueExact(): byte",
          "insertText": "byteValueExact"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(BigDecimal a): int",
          "insertText": "compareTo"
        },
        {
          "label": "divide",
          "kind": "method",
          "documentation": "divide(BigDecimal a, MathContext b | BigDecimal a): BigDecimal",
          "insertText": "divide"
        },
        {
          "label": "divideAndRemainder",
          "kind": "method",
          "documentation": "divideAndRemainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal[]",
          "insertText": "divideAndRemainder"
        },
        {
          "label": "divideToIntegralValue",
          "kind": "method",
          "documentation": "divideToIntegralValue(BigDecimal a, MathContext b | BigDecimal a): BigDecimal",
          "insertText": "divideToIntegralValue"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "intValueExact",
          "kind": "method",
          "documentation": "intValueExact(): int",
          "insertText": "intValueExact"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "longValueExact",
          "kind": "method",
          "documentation": "longValueExact(): long",
          "insertText": "longValueExact"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(BigDecimal a): BigDecimal",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(BigDecimal a): BigDecimal",
          "insertText": "min"
        },
        {
          "label": "movePointLeft",
          "kind": "method",
          "documentation": "movePointLeft(int a): BigDecimal",
          "insertText": "movePointLeft"
        },
        {
          "label": "movePointRight",
          "kind": "method",
          "documentation": "movePointRight(int a): BigDecimal",
          "insertText": "movePointRight"
        },
        {
          "label": "multiply",
          "kind": "method",
          "documentation": "multiply(BigDecimal a, MathContext b | BigDecimal a): BigDecimal",
          "insertText": "multiply"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(MathContext a): BigDecimal",
          "insertText": "negate"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(MathContext a): BigDecimal",
          "insertText": "plus"
        },
        {
          "label": "pow",
          "kind": "method",
          "documentation": "pow(int a, MathContext b | int a): BigDecimal",
          "insertText": "pow"
        },
        {
          "label": "precision",
          "kind": "method",
          "documentation": "precision(): int",
          "insertText": "precision"
        },
        {
          "label": "remainder",
          "kind": "method",
          "documentation": "remainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal",
          "insertText": "remainder"
        },
        {
          "label": "round",
          "kind": "method",
          "documentation": "round(MathContext a): BigDecimal",
          "insertText": "round"
        },
        {
          "label": "scale",
          "kind": "method",
          "documentation": "scale(): int",
          "insertText": "scale"
        },
        {
          "label": "scaleByPowerOfTen",
          "kind": "method",
          "documentation": "scaleByPowerOfTen(int a): BigDecimal",
          "insertText": "scaleByPowerOfTen"
        },
        {
          "label": "setScale",
          "kind": "method",
          "documentation": "setScale(int a, RoundingMode b | int a): BigDecimal",
          "insertText": "setScale"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "shortValueExact",
          "kind": "method",
          "documentation": "shortValueExact(): short",
          "insertText": "shortValueExact"
        },
        {
          "label": "signum",
          "kind": "method",
          "documentation": "signum(): int",
          "insertText": "signum"
        },
        {
          "label": "stripTrailingZeros",
          "kind": "method",
          "documentation": "stripTrailingZeros(): BigDecimal",
          "insertText": "stripTrailingZeros"
        },
        {
          "label": "subtract",
          "kind": "method",
          "documentation": "subtract(BigDecimal a, MathContext b | BigDecimal a): BigDecimal",
          "insertText": "subtract"
        },
        {
          "label": "toBigInteger",
          "kind": "method",
          "documentation": "toBigInteger(): BigInteger",
          "insertText": "toBigInteger"
        },
        {
          "label": "toBigIntegerExact",
          "kind": "method",
          "documentation": "toBigIntegerExact(): BigInteger",
          "insertText": "toBigIntegerExact"
        },
        {
          "label": "toEngineeringString",
          "kind": "method",
          "documentation": "toEngineeringString(): String",
          "insertText": "toEngineeringString"
        },
        {
          "label": "toPlainString",
          "kind": "method",
          "documentation": "toPlainString(): String",
          "insertText": "toPlainString"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "ulp",
          "kind": "method",
          "documentation": "ulp(): BigDecimal",
          "insertText": "ulp"
        }
      ],
      "constructorDefinition": {
        "label": "BigDecimal",
        "kind": "constructor",
        "documentation": "Constructor: BigDecimal",
        "insertText": "BigDecimal"
      }
    },
    {
      "label": "BigInteger",
      "kind": "class",
      "documentation": "Class: BigInteger",
      "insertText": "BigInteger",
      "properties": [
        {
          "label": "ONE",
          "kind": "property",
          "documentation": "ONE: BigInteger",
          "insertText": "ONE"
        },
        {
          "label": "TEN",
          "kind": "property",
          "documentation": "TEN: BigInteger",
          "insertText": "TEN"
        },
        {
          "label": "ZERO",
          "kind": "property",
          "documentation": "ZERO: BigInteger",
          "insertText": "ZERO"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(long a): BigInteger",
          "insertText": "valueOf"
        },
        {
          "label": "abs",
          "kind": "method",
          "documentation": "abs(): BigInteger",
          "insertText": "abs"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(BigInteger a): BigInteger",
          "insertText": "add"
        },
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(BigInteger a): BigInteger",
          "insertText": "and"
        },
        {
          "label": "andNot",
          "kind": "method",
          "documentation": "andNot(BigInteger a): BigInteger",
          "insertText": "andNot"
        },
        {
          "label": "bitCount",
          "kind": "method",
          "documentation": "bitCount(): int",
          "insertText": "bitCount"
        },
        {
          "label": "bitLength",
          "kind": "method",
          "documentation": "bitLength(): int",
          "insertText": "bitLength"
        },
        {
          "label": "byteValue",
          "kind": "method",
          "documentation": "byteValue(): byte",
          "insertText": "byteValue"
        },
        {
          "label": "byteValueExact",
          "kind": "method",
          "documentation": "byteValueExact(): byte",
          "insertText": "byteValueExact"
        },
        {
          "label": "clearBit",
          "kind": "method",
          "documentation": "clearBit(int a): BigInteger",
          "insertText": "clearBit"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(BigInteger a): int",
          "insertText": "compareTo"
        },
        {
          "label": "divide",
          "kind": "method",
          "documentation": "divide(BigInteger a): BigInteger",
          "insertText": "divide"
        },
        {
          "label": "divideAndRemainder",
          "kind": "method",
          "documentation": "divideAndRemainder(BigInteger a): BigInteger[]",
          "insertText": "divideAndRemainder"
        },
        {
          "label": "doubleValue",
          "kind": "method",
          "documentation": "doubleValue(): double",
          "insertText": "doubleValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "flipBit",
          "kind": "method",
          "documentation": "flipBit(int a): BigInteger",
          "insertText": "flipBit"
        },
        {
          "label": "floatValue",
          "kind": "method",
          "documentation": "floatValue(): float",
          "insertText": "floatValue"
        },
        {
          "label": "gcd",
          "kind": "method",
          "documentation": "gcd(BigInteger a): BigInteger",
          "insertText": "gcd"
        },
        {
          "label": "getLowestSetBit",
          "kind": "method",
          "documentation": "getLowestSetBit(): int",
          "insertText": "getLowestSetBit"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intValue",
          "kind": "method",
          "documentation": "intValue(): int",
          "insertText": "intValue"
        },
        {
          "label": "intValueExact",
          "kind": "method",
          "documentation": "intValueExact(): int",
          "insertText": "intValueExact"
        },
        {
          "label": "longValue",
          "kind": "method",
          "documentation": "longValue(): long",
          "insertText": "longValue"
        },
        {
          "label": "longValueExact",
          "kind": "method",
          "documentation": "longValueExact(): long",
          "insertText": "longValueExact"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(BigInteger a): BigInteger",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(BigInteger a): BigInteger",
          "insertText": "min"
        },
        {
          "label": "mod",
          "kind": "method",
          "documentation": "mod(BigInteger a): BigInteger",
          "insertText": "mod"
        },
        {
          "label": "modInverse",
          "kind": "method",
          "documentation": "modInverse(BigInteger a): BigInteger",
          "insertText": "modInverse"
        },
        {
          "label": "modPow",
          "kind": "method",
          "documentation": "modPow(BigInteger a, BigInteger b): BigInteger",
          "insertText": "modPow"
        },
        {
          "label": "multiply",
          "kind": "method",
          "documentation": "multiply(BigInteger a): BigInteger",
          "insertText": "multiply"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(): BigInteger",
          "insertText": "negate"
        },
        {
          "label": "not",
          "kind": "method",
          "documentation": "not(): BigInteger",
          "insertText": "not"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(BigInteger a): BigInteger",
          "insertText": "or"
        },
        {
          "label": "pow",
          "kind": "method",
          "documentation": "pow(int a): BigInteger",
          "insertText": "pow"
        },
        {
          "label": "remainder",
          "kind": "method",
          "documentation": "remainder(BigInteger a): BigInteger",
          "insertText": "remainder"
        },
        {
          "label": "setBit",
          "kind": "method",
          "documentation": "setBit(int a): BigInteger",
          "insertText": "setBit"
        },
        {
          "label": "shiftLeft",
          "kind": "method",
          "documentation": "shiftLeft(int a): BigInteger",
          "insertText": "shiftLeft"
        },
        {
          "label": "shiftRight",
          "kind": "method",
          "documentation": "shiftRight(int a): BigInteger",
          "insertText": "shiftRight"
        },
        {
          "label": "shortValue",
          "kind": "method",
          "documentation": "shortValue(): short",
          "insertText": "shortValue"
        },
        {
          "label": "shortValueExact",
          "kind": "method",
          "documentation": "shortValueExact(): short",
          "insertText": "shortValueExact"
        },
        {
          "label": "signum",
          "kind": "method",
          "documentation": "signum(): int",
          "insertText": "signum"
        },
        {
          "label": "subtract",
          "kind": "method",
          "documentation": "subtract(BigInteger a): BigInteger",
          "insertText": "subtract"
        },
        {
          "label": "testBit",
          "kind": "method",
          "documentation": "testBit(int a): boolean",
          "insertText": "testBit"
        },
        {
          "label": "toByteArray",
          "kind": "method",
          "documentation": "toByteArray(): byte[]",
          "insertText": "toByteArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(int a): String",
          "insertText": "toString"
        },
        {
          "label": "xor",
          "kind": "method",
          "documentation": "xor(BigInteger a): BigInteger",
          "insertText": "xor"
        }
      ],
      "constructorDefinition": {
        "label": "BigInteger",
        "kind": "constructor",
        "documentation": "Constructor: BigInteger",
        "insertText": "BigInteger"
      }
    },
    {
      "label": "MathContext",
      "kind": "class",
      "documentation": "Class: MathContext",
      "insertText": "MathContext",
      "properties": [
        {
          "label": "DECIMAL128",
          "kind": "property",
          "documentation": "DECIMAL128: MathContext",
          "insertText": "DECIMAL128"
        },
        {
          "label": "DECIMAL32",
          "kind": "property",
          "documentation": "DECIMAL32: MathContext",
          "insertText": "DECIMAL32"
        },
        {
          "label": "DECIMAL64",
          "kind": "property",
          "documentation": "DECIMAL64: MathContext",
          "insertText": "DECIMAL64"
        },
        {
          "label": "UNLIMITED",
          "kind": "property",
          "documentation": "UNLIMITED: MathContext",
          "insertText": "UNLIMITED"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getPrecision",
          "kind": "method",
          "documentation": "getPrecision(): int",
          "insertText": "getPrecision"
        },
        {
          "label": "getRoundingMode",
          "kind": "method",
          "documentation": "getRoundingMode(): RoundingMode",
          "insertText": "getRoundingMode"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "MathContext",
        "kind": "constructor",
        "documentation": "Constructor: MathContext",
        "insertText": "MathContext"
      }
    },
    {
      "label": "RoundingMode",
      "kind": "class",
      "documentation": "Class: RoundingMode",
      "insertText": "RoundingMode",
      "properties": [
        {
          "label": "CEILING",
          "kind": "property",
          "documentation": "CEILING: RoundingMode",
          "insertText": "CEILING"
        },
        {
          "label": "DOWN",
          "kind": "property",
          "documentation": "DOWN: RoundingMode",
          "insertText": "DOWN"
        },
        {
          "label": "FLOOR",
          "kind": "property",
          "documentation": "FLOOR: RoundingMode",
          "insertText": "FLOOR"
        },
        {
          "label": "HALF_DOWN",
          "kind": "property",
          "documentation": "HALF_DOWN: RoundingMode",
          "insertText": "HALF_DOWN"
        },
        {
          "label": "HALF_EVEN",
          "kind": "property",
          "documentation": "HALF_EVEN: RoundingMode",
          "insertText": "HALF_EVEN"
        },
        {
          "label": "HALF_UP",
          "kind": "property",
          "documentation": "HALF_UP: RoundingMode",
          "insertText": "HALF_UP"
        },
        {
          "label": "UNNECESSARY",
          "kind": "property",
          "documentation": "UNNECESSARY: RoundingMode",
          "insertText": "UNNECESSARY"
        },
        {
          "label": "UP",
          "kind": "property",
          "documentation": "UP: RoundingMode",
          "insertText": "UP"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): RoundingMode",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): RoundingMode[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Annotation",
      "kind": "class",
      "documentation": "Class: Annotation",
      "insertText": "Annotation",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): def",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Annotation",
        "kind": "constructor",
        "documentation": "Constructor: Annotation",
        "insertText": "Annotation"
      }
    },
    {
      "label": "AttributedCharacterIterator",
      "kind": "class",
      "documentation": "Class: AttributedCharacterIterator",
      "insertText": "AttributedCharacterIterator",
      "properties": [
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "current",
          "kind": "method",
          "documentation": "current(): char",
          "insertText": "current"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): char",
          "insertText": "first"
        },
        {
          "label": "getAllAttributeKeys",
          "kind": "method",
          "documentation": "getAllAttributeKeys(): Set",
          "insertText": "getAllAttributeKeys"
        },
        {
          "label": "getAttribute",
          "kind": "method",
          "documentation": "getAttribute(AttributedCharacterIterator.Attribute a): def",
          "insertText": "getAttribute"
        },
        {
          "label": "getAttributes",
          "kind": "method",
          "documentation": "getAttributes(): Map",
          "insertText": "getAttributes"
        },
        {
          "label": "getBeginIndex",
          "kind": "method",
          "documentation": "getBeginIndex(): int",
          "insertText": "getBeginIndex"
        },
        {
          "label": "getEndIndex",
          "kind": "method",
          "documentation": "getEndIndex(): int",
          "insertText": "getEndIndex"
        },
        {
          "label": "getIndex",
          "kind": "method",
          "documentation": "getIndex(): int",
          "insertText": "getIndex"
        },
        {
          "label": "getRunLimit",
          "kind": "method",
          "documentation": "getRunLimit(Set a): int",
          "insertText": "getRunLimit"
        },
        {
          "label": "getRunStart",
          "kind": "method",
          "documentation": "getRunStart(Set a): int",
          "insertText": "getRunStart"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): char",
          "insertText": "last"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): char",
          "insertText": "next"
        },
        {
          "label": "previous",
          "kind": "method",
          "documentation": "previous(): char",
          "insertText": "previous"
        },
        {
          "label": "setIndex",
          "kind": "method",
          "documentation": "setIndex(int a): char",
          "insertText": "setIndex"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Attribute",
      "kind": "class",
      "documentation": "Class: Attribute",
      "insertText": "Attribute",
      "properties": [
        {
          "label": "INPUT_METHOD_SEGMENT",
          "kind": "property",
          "documentation": "INPUT_METHOD_SEGMENT: AttributedCharacterIterator.Attribute",
          "insertText": "INPUT_METHOD_SEGMENT"
        },
        {
          "label": "LANGUAGE",
          "kind": "property",
          "documentation": "LANGUAGE: AttributedCharacterIterator.Attribute",
          "insertText": "LANGUAGE"
        },
        {
          "label": "READING",
          "kind": "property",
          "documentation": "READING: AttributedCharacterIterator.Attribute",
          "insertText": "READING"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "AttributedString",
      "kind": "class",
      "documentation": "Class: AttributedString",
      "insertText": "AttributedString",
      "properties": [
        {
          "label": "addAttribute",
          "kind": "method",
          "documentation": "addAttribute(AttributedCharacterIterator.Attribute a, Object b, int c, int d | AttributedCharacterIterator.Attribute a, Object b): void",
          "insertText": "addAttribute"
        },
        {
          "label": "addAttributes",
          "kind": "method",
          "documentation": "addAttributes(Map a, int b, int c): void",
          "insertText": "addAttributes"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getIterator",
          "kind": "method",
          "documentation": "getIterator(AttributedCharacterIterator.Attribute[] a, int b, int c | AttributedCharacterIterator.Attribute[] a): AttributedCharacterIterator",
          "insertText": "getIterator"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "AttributedString",
        "kind": "constructor",
        "documentation": "Constructor: AttributedString",
        "insertText": "AttributedString"
      }
    },
    {
      "label": "Bidi",
      "kind": "class",
      "documentation": "Class: Bidi",
      "insertText": "Bidi",
      "properties": [
        {
          "label": "DIRECTION_DEFAULT_LEFT_TO_RIGHT",
          "kind": "property",
          "documentation": "DIRECTION_DEFAULT_LEFT_TO_RIGHT: int",
          "insertText": "DIRECTION_DEFAULT_LEFT_TO_RIGHT"
        },
        {
          "label": "DIRECTION_DEFAULT_RIGHT_TO_LEFT",
          "kind": "property",
          "documentation": "DIRECTION_DEFAULT_RIGHT_TO_LEFT: int",
          "insertText": "DIRECTION_DEFAULT_RIGHT_TO_LEFT"
        },
        {
          "label": "DIRECTION_LEFT_TO_RIGHT",
          "kind": "property",
          "documentation": "DIRECTION_LEFT_TO_RIGHT: int",
          "insertText": "DIRECTION_LEFT_TO_RIGHT"
        },
        {
          "label": "DIRECTION_RIGHT_TO_LEFT",
          "kind": "property",
          "documentation": "DIRECTION_RIGHT_TO_LEFT: int",
          "insertText": "DIRECTION_RIGHT_TO_LEFT"
        },
        {
          "label": "reorderVisually",
          "kind": "method",
          "documentation": "reorderVisually(byte[] a, int b, Object[] c, int d, int e): void",
          "insertText": "reorderVisually"
        },
        {
          "label": "requiresBidi",
          "kind": "method",
          "documentation": "requiresBidi(char[] a, int b, int c): boolean",
          "insertText": "requiresBidi"
        },
        {
          "label": "baseIsLeftToRight",
          "kind": "method",
          "documentation": "baseIsLeftToRight(): boolean",
          "insertText": "baseIsLeftToRight"
        },
        {
          "label": "createLineBidi",
          "kind": "method",
          "documentation": "createLineBidi(int a, int b): Bidi",
          "insertText": "createLineBidi"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getBaseLevel",
          "kind": "method",
          "documentation": "getBaseLevel(): int",
          "insertText": "getBaseLevel"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getLevelAt",
          "kind": "method",
          "documentation": "getLevelAt(int a): int",
          "insertText": "getLevelAt"
        },
        {
          "label": "getRunCount",
          "kind": "method",
          "documentation": "getRunCount(): int",
          "insertText": "getRunCount"
        },
        {
          "label": "getRunLevel",
          "kind": "method",
          "documentation": "getRunLevel(int a): int",
          "insertText": "getRunLevel"
        },
        {
          "label": "getRunLimit",
          "kind": "method",
          "documentation": "getRunLimit(int a): int",
          "insertText": "getRunLimit"
        },
        {
          "label": "getRunStart",
          "kind": "method",
          "documentation": "getRunStart(int a): int",
          "insertText": "getRunStart"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeftToRight",
          "kind": "method",
          "documentation": "isLeftToRight(): boolean",
          "insertText": "isLeftToRight"
        },
        {
          "label": "isMixed",
          "kind": "method",
          "documentation": "isMixed(): boolean",
          "insertText": "isMixed"
        },
        {
          "label": "isRightToLeft",
          "kind": "method",
          "documentation": "isRightToLeft(): boolean",
          "insertText": "isRightToLeft"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Bidi",
        "kind": "constructor",
        "documentation": "Constructor: Bidi",
        "insertText": "Bidi"
      }
    },
    {
      "label": "BreakIterator",
      "kind": "class",
      "documentation": "Class: BreakIterator",
      "insertText": "BreakIterator",
      "properties": [
        {
          "label": "DONE",
          "kind": "property",
          "documentation": "DONE: int",
          "insertText": "DONE"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getCharacterInstance",
          "kind": "method",
          "documentation": "getCharacterInstance(Locale a): BreakIterator",
          "insertText": "getCharacterInstance"
        },
        {
          "label": "getLineInstance",
          "kind": "method",
          "documentation": "getLineInstance(Locale a): BreakIterator",
          "insertText": "getLineInstance"
        },
        {
          "label": "getSentenceInstance",
          "kind": "method",
          "documentation": "getSentenceInstance(Locale a): BreakIterator",
          "insertText": "getSentenceInstance"
        },
        {
          "label": "getWordInstance",
          "kind": "method",
          "documentation": "getWordInstance(Locale a): BreakIterator",
          "insertText": "getWordInstance"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "current",
          "kind": "method",
          "documentation": "current(): int",
          "insertText": "current"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): int",
          "insertText": "first"
        },
        {
          "label": "following",
          "kind": "method",
          "documentation": "following(int a): int",
          "insertText": "following"
        },
        {
          "label": "getText",
          "kind": "method",
          "documentation": "getText(): CharacterIterator",
          "insertText": "getText"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isBoundary",
          "kind": "method",
          "documentation": "isBoundary(int a): boolean",
          "insertText": "isBoundary"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): int",
          "insertText": "last"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(int a): int",
          "insertText": "next"
        },
        {
          "label": "preceding",
          "kind": "method",
          "documentation": "preceding(int a): int",
          "insertText": "preceding"
        },
        {
          "label": "previous",
          "kind": "method",
          "documentation": "previous(): int",
          "insertText": "previous"
        },
        {
          "label": "setText",
          "kind": "method",
          "documentation": "setText(String a): void",
          "insertText": "setText"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "CharacterIterator",
      "kind": "class",
      "documentation": "Class: CharacterIterator",
      "insertText": "CharacterIterator",
      "properties": [
        {
          "label": "DONE",
          "kind": "property",
          "documentation": "DONE: char",
          "insertText": "DONE"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "current",
          "kind": "method",
          "documentation": "current(): char",
          "insertText": "current"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): char",
          "insertText": "first"
        },
        {
          "label": "getBeginIndex",
          "kind": "method",
          "documentation": "getBeginIndex(): int",
          "insertText": "getBeginIndex"
        },
        {
          "label": "getEndIndex",
          "kind": "method",
          "documentation": "getEndIndex(): int",
          "insertText": "getEndIndex"
        },
        {
          "label": "getIndex",
          "kind": "method",
          "documentation": "getIndex(): int",
          "insertText": "getIndex"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): char",
          "insertText": "last"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): char",
          "insertText": "next"
        },
        {
          "label": "previous",
          "kind": "method",
          "documentation": "previous(): char",
          "insertText": "previous"
        },
        {
          "label": "setIndex",
          "kind": "method",
          "documentation": "setIndex(int a): char",
          "insertText": "setIndex"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ChoiceFormat",
      "kind": "class",
      "documentation": "Class: ChoiceFormat",
      "insertText": "ChoiceFormat",
      "properties": [
        {
          "label": "nextDouble",
          "kind": "method",
          "documentation": "nextDouble(double a, boolean b | double a): double",
          "insertText": "nextDouble"
        },
        {
          "label": "previousDouble",
          "kind": "method",
          "documentation": "previousDouble(double a): double",
          "insertText": "previousDouble"
        },
        {
          "label": "applyPattern",
          "kind": "method",
          "documentation": "applyPattern(String a): void",
          "insertText": "applyPattern"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "getCurrency",
          "kind": "method",
          "documentation": "getCurrency(): Currency",
          "insertText": "getCurrency"
        },
        {
          "label": "getFormats",
          "kind": "method",
          "documentation": "getFormats(): def[]",
          "insertText": "getFormats"
        },
        {
          "label": "getLimits",
          "kind": "method",
          "documentation": "getLimits(): double[]",
          "insertText": "getLimits"
        },
        {
          "label": "getMaximumFractionDigits",
          "kind": "method",
          "documentation": "getMaximumFractionDigits(): int",
          "insertText": "getMaximumFractionDigits"
        },
        {
          "label": "getMaximumIntegerDigits",
          "kind": "method",
          "documentation": "getMaximumIntegerDigits(): int",
          "insertText": "getMaximumIntegerDigits"
        },
        {
          "label": "getMinimumFractionDigits",
          "kind": "method",
          "documentation": "getMinimumFractionDigits(): int",
          "insertText": "getMinimumFractionDigits"
        },
        {
          "label": "getMinimumIntegerDigits",
          "kind": "method",
          "documentation": "getMinimumIntegerDigits(): int",
          "insertText": "getMinimumIntegerDigits"
        },
        {
          "label": "getRoundingMode",
          "kind": "method",
          "documentation": "getRoundingMode(): RoundingMode",
          "insertText": "getRoundingMode"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isGroupingUsed",
          "kind": "method",
          "documentation": "isGroupingUsed(): boolean",
          "insertText": "isGroupingUsed"
        },
        {
          "label": "isParseIntegerOnly",
          "kind": "method",
          "documentation": "isParseIntegerOnly(): boolean",
          "insertText": "isParseIntegerOnly"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, ParsePosition b | String a): Number",
          "insertText": "parse"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "setChoices",
          "kind": "method",
          "documentation": "setChoices(double[] a, String[] b): void",
          "insertText": "setChoices"
        },
        {
          "label": "setCurrency",
          "kind": "method",
          "documentation": "setCurrency(Currency a): void",
          "insertText": "setCurrency"
        },
        {
          "label": "setGroupingUsed",
          "kind": "method",
          "documentation": "setGroupingUsed(boolean a): void",
          "insertText": "setGroupingUsed"
        },
        {
          "label": "setMaximumFractionDigits",
          "kind": "method",
          "documentation": "setMaximumFractionDigits(int a): void",
          "insertText": "setMaximumFractionDigits"
        },
        {
          "label": "setMaximumIntegerDigits",
          "kind": "method",
          "documentation": "setMaximumIntegerDigits(int a): void",
          "insertText": "setMaximumIntegerDigits"
        },
        {
          "label": "setMinimumFractionDigits",
          "kind": "method",
          "documentation": "setMinimumFractionDigits(int a): void",
          "insertText": "setMinimumFractionDigits"
        },
        {
          "label": "setMinimumIntegerDigits",
          "kind": "method",
          "documentation": "setMinimumIntegerDigits(int a): void",
          "insertText": "setMinimumIntegerDigits"
        },
        {
          "label": "setParseIntegerOnly",
          "kind": "method",
          "documentation": "setParseIntegerOnly(boolean a): void",
          "insertText": "setParseIntegerOnly"
        },
        {
          "label": "setRoundingMode",
          "kind": "method",
          "documentation": "setRoundingMode(RoundingMode a): void",
          "insertText": "setRoundingMode"
        },
        {
          "label": "toPattern",
          "kind": "method",
          "documentation": "toPattern(): String",
          "insertText": "toPattern"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ChoiceFormat",
        "kind": "constructor",
        "documentation": "Constructor: ChoiceFormat",
        "insertText": "ChoiceFormat"
      }
    },
    {
      "label": "CollationElementIterator",
      "kind": "class",
      "documentation": "Class: CollationElementIterator",
      "insertText": "CollationElementIterator",
      "properties": [
        {
          "label": "NULLORDER",
          "kind": "property",
          "documentation": "NULLORDER: int",
          "insertText": "NULLORDER"
        },
        {
          "label": "primaryOrder",
          "kind": "method",
          "documentation": "primaryOrder(int a): int",
          "insertText": "primaryOrder"
        },
        {
          "label": "secondaryOrder",
          "kind": "method",
          "documentation": "secondaryOrder(int a): short",
          "insertText": "secondaryOrder"
        },
        {
          "label": "tertiaryOrder",
          "kind": "method",
          "documentation": "tertiaryOrder(int a): short",
          "insertText": "tertiaryOrder"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getMaxExpansion",
          "kind": "method",
          "documentation": "getMaxExpansion(int a): int",
          "insertText": "getMaxExpansion"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(): int",
          "insertText": "getOffset"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): int",
          "insertText": "next"
        },
        {
          "label": "previous",
          "kind": "method",
          "documentation": "previous(): int",
          "insertText": "previous"
        },
        {
          "label": "reset",
          "kind": "method",
          "documentation": "reset(): void",
          "insertText": "reset"
        },
        {
          "label": "setOffset",
          "kind": "method",
          "documentation": "setOffset(int a): void",
          "insertText": "setOffset"
        },
        {
          "label": "setText",
          "kind": "method",
          "documentation": "setText(String a): void",
          "insertText": "setText"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "CollationKey",
      "kind": "class",
      "documentation": "Class: CollationKey",
      "insertText": "CollationKey",
      "properties": [
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(CollationKey a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getSourceString",
          "kind": "method",
          "documentation": "getSourceString(): String",
          "insertText": "getSourceString"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toByteArray",
          "kind": "method",
          "documentation": "toByteArray(): byte[]",
          "insertText": "toByteArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Collator",
      "kind": "class",
      "documentation": "Class: Collator",
      "insertText": "Collator",
      "properties": [
        {
          "label": "CANONICAL_DECOMPOSITION",
          "kind": "property",
          "documentation": "CANONICAL_DECOMPOSITION: int",
          "insertText": "CANONICAL_DECOMPOSITION"
        },
        {
          "label": "FULL_DECOMPOSITION",
          "kind": "property",
          "documentation": "FULL_DECOMPOSITION: int",
          "insertText": "FULL_DECOMPOSITION"
        },
        {
          "label": "IDENTICAL",
          "kind": "property",
          "documentation": "IDENTICAL: int",
          "insertText": "IDENTICAL"
        },
        {
          "label": "NO_DECOMPOSITION",
          "kind": "property",
          "documentation": "NO_DECOMPOSITION: int",
          "insertText": "NO_DECOMPOSITION"
        },
        {
          "label": "PRIMARY",
          "kind": "property",
          "documentation": "PRIMARY: int",
          "insertText": "PRIMARY"
        },
        {
          "label": "SECONDARY",
          "kind": "property",
          "documentation": "SECONDARY: int",
          "insertText": "SECONDARY"
        },
        {
          "label": "TERTIARY",
          "kind": "property",
          "documentation": "TERTIARY: int",
          "insertText": "TERTIARY"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(Locale a): Collator",
          "insertText": "getInstance"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(def a, def b): int",
          "insertText": "compare"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(String a, String b | Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCollationKey",
          "kind": "method",
          "documentation": "getCollationKey(String a): CollationKey",
          "insertText": "getCollationKey"
        },
        {
          "label": "getDecomposition",
          "kind": "method",
          "documentation": "getDecomposition(): int",
          "insertText": "getDecomposition"
        },
        {
          "label": "getStrength",
          "kind": "method",
          "documentation": "getStrength(): int",
          "insertText": "getStrength"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "reversed",
          "kind": "method",
          "documentation": "reversed(): Comparator",
          "insertText": "reversed"
        },
        {
          "label": "setDecomposition",
          "kind": "method",
          "documentation": "setDecomposition(int a): void",
          "insertText": "setDecomposition"
        },
        {
          "label": "setStrength",
          "kind": "method",
          "documentation": "setStrength(int a): void",
          "insertText": "setStrength"
        },
        {
          "label": "thenComparing",
          "kind": "method",
          "documentation": "thenComparing(Function a, Comparator b | Comparator a): Comparator",
          "insertText": "thenComparing"
        },
        {
          "label": "thenComparingDouble",
          "kind": "method",
          "documentation": "thenComparingDouble(ToDoubleFunction a): Comparator",
          "insertText": "thenComparingDouble"
        },
        {
          "label": "thenComparingInt",
          "kind": "method",
          "documentation": "thenComparingInt(ToIntFunction a): Comparator",
          "insertText": "thenComparingInt"
        },
        {
          "label": "thenComparingLong",
          "kind": "method",
          "documentation": "thenComparingLong(ToLongFunction a): Comparator",
          "insertText": "thenComparingLong"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DateFormat",
      "kind": "class",
      "documentation": "Class: DateFormat",
      "insertText": "DateFormat",
      "properties": [
        {
          "label": "AM_PM_FIELD",
          "kind": "property",
          "documentation": "AM_PM_FIELD: int",
          "insertText": "AM_PM_FIELD"
        },
        {
          "label": "DATE_FIELD",
          "kind": "property",
          "documentation": "DATE_FIELD: int",
          "insertText": "DATE_FIELD"
        },
        {
          "label": "DAY_OF_WEEK_FIELD",
          "kind": "property",
          "documentation": "DAY_OF_WEEK_FIELD: int",
          "insertText": "DAY_OF_WEEK_FIELD"
        },
        {
          "label": "DAY_OF_WEEK_IN_MONTH_FIELD",
          "kind": "property",
          "documentation": "DAY_OF_WEEK_IN_MONTH_FIELD: int",
          "insertText": "DAY_OF_WEEK_IN_MONTH_FIELD"
        },
        {
          "label": "DAY_OF_YEAR_FIELD",
          "kind": "property",
          "documentation": "DAY_OF_YEAR_FIELD: int",
          "insertText": "DAY_OF_YEAR_FIELD"
        },
        {
          "label": "DEFAULT",
          "kind": "property",
          "documentation": "DEFAULT: int",
          "insertText": "DEFAULT"
        },
        {
          "label": "ERA_FIELD",
          "kind": "property",
          "documentation": "ERA_FIELD: int",
          "insertText": "ERA_FIELD"
        },
        {
          "label": "FULL",
          "kind": "property",
          "documentation": "FULL: int",
          "insertText": "FULL"
        },
        {
          "label": "HOUR0_FIELD",
          "kind": "property",
          "documentation": "HOUR0_FIELD: int",
          "insertText": "HOUR0_FIELD"
        },
        {
          "label": "HOUR1_FIELD",
          "kind": "property",
          "documentation": "HOUR1_FIELD: int",
          "insertText": "HOUR1_FIELD"
        },
        {
          "label": "HOUR_OF_DAY0_FIELD",
          "kind": "property",
          "documentation": "HOUR_OF_DAY0_FIELD: int",
          "insertText": "HOUR_OF_DAY0_FIELD"
        },
        {
          "label": "HOUR_OF_DAY1_FIELD",
          "kind": "property",
          "documentation": "HOUR_OF_DAY1_FIELD: int",
          "insertText": "HOUR_OF_DAY1_FIELD"
        },
        {
          "label": "LONG",
          "kind": "property",
          "documentation": "LONG: int",
          "insertText": "LONG"
        },
        {
          "label": "MEDIUM",
          "kind": "property",
          "documentation": "MEDIUM: int",
          "insertText": "MEDIUM"
        },
        {
          "label": "MILLISECOND_FIELD",
          "kind": "property",
          "documentation": "MILLISECOND_FIELD: int",
          "insertText": "MILLISECOND_FIELD"
        },
        {
          "label": "MINUTE_FIELD",
          "kind": "property",
          "documentation": "MINUTE_FIELD: int",
          "insertText": "MINUTE_FIELD"
        },
        {
          "label": "MONTH_FIELD",
          "kind": "property",
          "documentation": "MONTH_FIELD: int",
          "insertText": "MONTH_FIELD"
        },
        {
          "label": "SECOND_FIELD",
          "kind": "property",
          "documentation": "SECOND_FIELD: int",
          "insertText": "SECOND_FIELD"
        },
        {
          "label": "SHORT",
          "kind": "property",
          "documentation": "SHORT: int",
          "insertText": "SHORT"
        },
        {
          "label": "TIMEZONE_FIELD",
          "kind": "property",
          "documentation": "TIMEZONE_FIELD: int",
          "insertText": "TIMEZONE_FIELD"
        },
        {
          "label": "WEEK_OF_MONTH_FIELD",
          "kind": "property",
          "documentation": "WEEK_OF_MONTH_FIELD: int",
          "insertText": "WEEK_OF_MONTH_FIELD"
        },
        {
          "label": "WEEK_OF_YEAR_FIELD",
          "kind": "property",
          "documentation": "WEEK_OF_YEAR_FIELD: int",
          "insertText": "WEEK_OF_YEAR_FIELD"
        },
        {
          "label": "YEAR_FIELD",
          "kind": "property",
          "documentation": "YEAR_FIELD: int",
          "insertText": "YEAR_FIELD"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getDateInstance",
          "kind": "method",
          "documentation": "getDateInstance(int a, Locale b | int a): DateFormat",
          "insertText": "getDateInstance"
        },
        {
          "label": "getDateTimeInstance",
          "kind": "method",
          "documentation": "getDateTimeInstance(int a, int b, Locale c | int a, int b): DateFormat",
          "insertText": "getDateTimeInstance"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(): DateFormat",
          "insertText": "getInstance"
        },
        {
          "label": "getTimeInstance",
          "kind": "method",
          "documentation": "getTimeInstance(int a, Locale b | int a): DateFormat",
          "insertText": "getTimeInstance"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "getCalendar",
          "kind": "method",
          "documentation": "getCalendar(): Calendar",
          "insertText": "getCalendar"
        },
        {
          "label": "getNumberFormat",
          "kind": "method",
          "documentation": "getNumberFormat(): NumberFormat",
          "insertText": "getNumberFormat"
        },
        {
          "label": "getTimeZone",
          "kind": "method",
          "documentation": "getTimeZone(): TimeZone",
          "insertText": "getTimeZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLenient",
          "kind": "method",
          "documentation": "isLenient(): boolean",
          "insertText": "isLenient"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, ParsePosition b | String a): Date",
          "insertText": "parse"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "setCalendar",
          "kind": "method",
          "documentation": "setCalendar(Calendar a): void",
          "insertText": "setCalendar"
        },
        {
          "label": "setLenient",
          "kind": "method",
          "documentation": "setLenient(boolean a): void",
          "insertText": "setLenient"
        },
        {
          "label": "setNumberFormat",
          "kind": "method",
          "documentation": "setNumberFormat(NumberFormat a): void",
          "insertText": "setNumberFormat"
        },
        {
          "label": "setTimeZone",
          "kind": "method",
          "documentation": "setTimeZone(TimeZone a): void",
          "insertText": "setTimeZone"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Field",
      "kind": "class",
      "documentation": "Class: Field",
      "insertText": "Field",
      "properties": [
        {
          "label": "AM_PM",
          "kind": "property",
          "documentation": "AM_PM: DateFormat.Field",
          "insertText": "AM_PM"
        },
        {
          "label": "DAY_OF_MONTH",
          "kind": "property",
          "documentation": "DAY_OF_MONTH: DateFormat.Field",
          "insertText": "DAY_OF_MONTH"
        },
        {
          "label": "DAY_OF_WEEK",
          "kind": "property",
          "documentation": "DAY_OF_WEEK: DateFormat.Field",
          "insertText": "DAY_OF_WEEK"
        },
        {
          "label": "DAY_OF_WEEK_IN_MONTH",
          "kind": "property",
          "documentation": "DAY_OF_WEEK_IN_MONTH: DateFormat.Field",
          "insertText": "DAY_OF_WEEK_IN_MONTH"
        },
        {
          "label": "DAY_OF_YEAR",
          "kind": "property",
          "documentation": "DAY_OF_YEAR: DateFormat.Field",
          "insertText": "DAY_OF_YEAR"
        },
        {
          "label": "ERA",
          "kind": "property",
          "documentation": "ERA: DateFormat.Field",
          "insertText": "ERA"
        },
        {
          "label": "HOUR0",
          "kind": "property",
          "documentation": "HOUR0: DateFormat.Field",
          "insertText": "HOUR0"
        },
        {
          "label": "HOUR1",
          "kind": "property",
          "documentation": "HOUR1: DateFormat.Field",
          "insertText": "HOUR1"
        },
        {
          "label": "HOUR_OF_DAY0",
          "kind": "property",
          "documentation": "HOUR_OF_DAY0: DateFormat.Field",
          "insertText": "HOUR_OF_DAY0"
        },
        {
          "label": "HOUR_OF_DAY1",
          "kind": "property",
          "documentation": "HOUR_OF_DAY1: DateFormat.Field",
          "insertText": "HOUR_OF_DAY1"
        },
        {
          "label": "MILLISECOND",
          "kind": "property",
          "documentation": "MILLISECOND: DateFormat.Field",
          "insertText": "MILLISECOND"
        },
        {
          "label": "MINUTE",
          "kind": "property",
          "documentation": "MINUTE: DateFormat.Field",
          "insertText": "MINUTE"
        },
        {
          "label": "MONTH",
          "kind": "property",
          "documentation": "MONTH: DateFormat.Field",
          "insertText": "MONTH"
        },
        {
          "label": "SECOND",
          "kind": "property",
          "documentation": "SECOND: DateFormat.Field",
          "insertText": "SECOND"
        },
        {
          "label": "TIME_ZONE",
          "kind": "property",
          "documentation": "TIME_ZONE: DateFormat.Field",
          "insertText": "TIME_ZONE"
        },
        {
          "label": "WEEK_OF_MONTH",
          "kind": "property",
          "documentation": "WEEK_OF_MONTH: DateFormat.Field",
          "insertText": "WEEK_OF_MONTH"
        },
        {
          "label": "WEEK_OF_YEAR",
          "kind": "property",
          "documentation": "WEEK_OF_YEAR: DateFormat.Field",
          "insertText": "WEEK_OF_YEAR"
        },
        {
          "label": "YEAR",
          "kind": "property",
          "documentation": "YEAR: DateFormat.Field",
          "insertText": "YEAR"
        },
        {
          "label": "ofCalendarField",
          "kind": "method",
          "documentation": "ofCalendarField(int a): DateFormat.Field",
          "insertText": "ofCalendarField"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCalendarField",
          "kind": "method",
          "documentation": "getCalendarField(): int",
          "insertText": "getCalendarField"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DateFormatSymbols",
      "kind": "class",
      "documentation": "Class: DateFormatSymbols",
      "insertText": "DateFormatSymbols",
      "properties": [
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(Locale a): DateFormatSymbols",
          "insertText": "getInstance"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAmPmStrings",
          "kind": "method",
          "documentation": "getAmPmStrings(): String[]",
          "insertText": "getAmPmStrings"
        },
        {
          "label": "getEras",
          "kind": "method",
          "documentation": "getEras(): String[]",
          "insertText": "getEras"
        },
        {
          "label": "getLocalPatternChars",
          "kind": "method",
          "documentation": "getLocalPatternChars(): String",
          "insertText": "getLocalPatternChars"
        },
        {
          "label": "getMonths",
          "kind": "method",
          "documentation": "getMonths(): String[]",
          "insertText": "getMonths"
        },
        {
          "label": "getShortMonths",
          "kind": "method",
          "documentation": "getShortMonths(): String[]",
          "insertText": "getShortMonths"
        },
        {
          "label": "getShortWeekdays",
          "kind": "method",
          "documentation": "getShortWeekdays(): String[]",
          "insertText": "getShortWeekdays"
        },
        {
          "label": "getWeekdays",
          "kind": "method",
          "documentation": "getWeekdays(): String[]",
          "insertText": "getWeekdays"
        },
        {
          "label": "getZoneStrings",
          "kind": "method",
          "documentation": "getZoneStrings(): String[][]",
          "insertText": "getZoneStrings"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setAmPmStrings",
          "kind": "method",
          "documentation": "setAmPmStrings(String[] a): void",
          "insertText": "setAmPmStrings"
        },
        {
          "label": "setEras",
          "kind": "method",
          "documentation": "setEras(String[] a): void",
          "insertText": "setEras"
        },
        {
          "label": "setLocalPatternChars",
          "kind": "method",
          "documentation": "setLocalPatternChars(String a): void",
          "insertText": "setLocalPatternChars"
        },
        {
          "label": "setMonths",
          "kind": "method",
          "documentation": "setMonths(String[] a): void",
          "insertText": "setMonths"
        },
        {
          "label": "setShortMonths",
          "kind": "method",
          "documentation": "setShortMonths(String[] a): void",
          "insertText": "setShortMonths"
        },
        {
          "label": "setShortWeekdays",
          "kind": "method",
          "documentation": "setShortWeekdays(String[] a): void",
          "insertText": "setShortWeekdays"
        },
        {
          "label": "setWeekdays",
          "kind": "method",
          "documentation": "setWeekdays(String[] a): void",
          "insertText": "setWeekdays"
        },
        {
          "label": "setZoneStrings",
          "kind": "method",
          "documentation": "setZoneStrings(String[][] a): void",
          "insertText": "setZoneStrings"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DateFormatSymbols",
        "kind": "constructor",
        "documentation": "Constructor: DateFormatSymbols",
        "insertText": "DateFormatSymbols"
      }
    },
    {
      "label": "DecimalFormat",
      "kind": "class",
      "documentation": "Class: DecimalFormat",
      "insertText": "DecimalFormat",
      "properties": [
        {
          "label": "applyLocalizedPattern",
          "kind": "method",
          "documentation": "applyLocalizedPattern(String a): void",
          "insertText": "applyLocalizedPattern"
        },
        {
          "label": "applyPattern",
          "kind": "method",
          "documentation": "applyPattern(String a): void",
          "insertText": "applyPattern"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "getCurrency",
          "kind": "method",
          "documentation": "getCurrency(): Currency",
          "insertText": "getCurrency"
        },
        {
          "label": "getDecimalFormatSymbols",
          "kind": "method",
          "documentation": "getDecimalFormatSymbols(): DecimalFormatSymbols",
          "insertText": "getDecimalFormatSymbols"
        },
        {
          "label": "getGroupingSize",
          "kind": "method",
          "documentation": "getGroupingSize(): int",
          "insertText": "getGroupingSize"
        },
        {
          "label": "getMaximumFractionDigits",
          "kind": "method",
          "documentation": "getMaximumFractionDigits(): int",
          "insertText": "getMaximumFractionDigits"
        },
        {
          "label": "getMaximumIntegerDigits",
          "kind": "method",
          "documentation": "getMaximumIntegerDigits(): int",
          "insertText": "getMaximumIntegerDigits"
        },
        {
          "label": "getMinimumFractionDigits",
          "kind": "method",
          "documentation": "getMinimumFractionDigits(): int",
          "insertText": "getMinimumFractionDigits"
        },
        {
          "label": "getMinimumIntegerDigits",
          "kind": "method",
          "documentation": "getMinimumIntegerDigits(): int",
          "insertText": "getMinimumIntegerDigits"
        },
        {
          "label": "getMultiplier",
          "kind": "method",
          "documentation": "getMultiplier(): int",
          "insertText": "getMultiplier"
        },
        {
          "label": "getNegativePrefix",
          "kind": "method",
          "documentation": "getNegativePrefix(): String",
          "insertText": "getNegativePrefix"
        },
        {
          "label": "getNegativeSuffix",
          "kind": "method",
          "documentation": "getNegativeSuffix(): String",
          "insertText": "getNegativeSuffix"
        },
        {
          "label": "getPositivePrefix",
          "kind": "method",
          "documentation": "getPositivePrefix(): String",
          "insertText": "getPositivePrefix"
        },
        {
          "label": "getPositiveSuffix",
          "kind": "method",
          "documentation": "getPositiveSuffix(): String",
          "insertText": "getPositiveSuffix"
        },
        {
          "label": "getRoundingMode",
          "kind": "method",
          "documentation": "getRoundingMode(): RoundingMode",
          "insertText": "getRoundingMode"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isDecimalSeparatorAlwaysShown",
          "kind": "method",
          "documentation": "isDecimalSeparatorAlwaysShown(): boolean",
          "insertText": "isDecimalSeparatorAlwaysShown"
        },
        {
          "label": "isGroupingUsed",
          "kind": "method",
          "documentation": "isGroupingUsed(): boolean",
          "insertText": "isGroupingUsed"
        },
        {
          "label": "isParseBigDecimal",
          "kind": "method",
          "documentation": "isParseBigDecimal(): boolean",
          "insertText": "isParseBigDecimal"
        },
        {
          "label": "isParseIntegerOnly",
          "kind": "method",
          "documentation": "isParseIntegerOnly(): boolean",
          "insertText": "isParseIntegerOnly"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, ParsePosition b | String a): Number",
          "insertText": "parse"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "setCurrency",
          "kind": "method",
          "documentation": "setCurrency(Currency a): void",
          "insertText": "setCurrency"
        },
        {
          "label": "setDecimalFormatSymbols",
          "kind": "method",
          "documentation": "setDecimalFormatSymbols(DecimalFormatSymbols a): void",
          "insertText": "setDecimalFormatSymbols"
        },
        {
          "label": "setDecimalSeparatorAlwaysShown",
          "kind": "method",
          "documentation": "setDecimalSeparatorAlwaysShown(boolean a): void",
          "insertText": "setDecimalSeparatorAlwaysShown"
        },
        {
          "label": "setGroupingSize",
          "kind": "method",
          "documentation": "setGroupingSize(int a): void",
          "insertText": "setGroupingSize"
        },
        {
          "label": "setGroupingUsed",
          "kind": "method",
          "documentation": "setGroupingUsed(boolean a): void",
          "insertText": "setGroupingUsed"
        },
        {
          "label": "setMaximumFractionDigits",
          "kind": "method",
          "documentation": "setMaximumFractionDigits(int a): void",
          "insertText": "setMaximumFractionDigits"
        },
        {
          "label": "setMaximumIntegerDigits",
          "kind": "method",
          "documentation": "setMaximumIntegerDigits(int a): void",
          "insertText": "setMaximumIntegerDigits"
        },
        {
          "label": "setMinimumFractionDigits",
          "kind": "method",
          "documentation": "setMinimumFractionDigits(int a): void",
          "insertText": "setMinimumFractionDigits"
        },
        {
          "label": "setMinimumIntegerDigits",
          "kind": "method",
          "documentation": "setMinimumIntegerDigits(int a): void",
          "insertText": "setMinimumIntegerDigits"
        },
        {
          "label": "setMultiplier",
          "kind": "method",
          "documentation": "setMultiplier(int a): void",
          "insertText": "setMultiplier"
        },
        {
          "label": "setNegativePrefix",
          "kind": "method",
          "documentation": "setNegativePrefix(String a): void",
          "insertText": "setNegativePrefix"
        },
        {
          "label": "setNegativeSuffix",
          "kind": "method",
          "documentation": "setNegativeSuffix(String a): void",
          "insertText": "setNegativeSuffix"
        },
        {
          "label": "setParseBigDecimal",
          "kind": "method",
          "documentation": "setParseBigDecimal(boolean a): void",
          "insertText": "setParseBigDecimal"
        },
        {
          "label": "setParseIntegerOnly",
          "kind": "method",
          "documentation": "setParseIntegerOnly(boolean a): void",
          "insertText": "setParseIntegerOnly"
        },
        {
          "label": "setPositivePrefix",
          "kind": "method",
          "documentation": "setPositivePrefix(String a): void",
          "insertText": "setPositivePrefix"
        },
        {
          "label": "setPositiveSuffix",
          "kind": "method",
          "documentation": "setPositiveSuffix(String a): void",
          "insertText": "setPositiveSuffix"
        },
        {
          "label": "setRoundingMode",
          "kind": "method",
          "documentation": "setRoundingMode(RoundingMode a): void",
          "insertText": "setRoundingMode"
        },
        {
          "label": "toLocalizedPattern",
          "kind": "method",
          "documentation": "toLocalizedPattern(): String",
          "insertText": "toLocalizedPattern"
        },
        {
          "label": "toPattern",
          "kind": "method",
          "documentation": "toPattern(): String",
          "insertText": "toPattern"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DecimalFormat",
        "kind": "constructor",
        "documentation": "Constructor: DecimalFormat",
        "insertText": "DecimalFormat"
      }
    },
    {
      "label": "DecimalFormatSymbols",
      "kind": "class",
      "documentation": "Class: DecimalFormatSymbols",
      "insertText": "DecimalFormatSymbols",
      "properties": [
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(Locale a): DecimalFormatSymbols",
          "insertText": "getInstance"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCurrency",
          "kind": "method",
          "documentation": "getCurrency(): Currency",
          "insertText": "getCurrency"
        },
        {
          "label": "getCurrencySymbol",
          "kind": "method",
          "documentation": "getCurrencySymbol(): String",
          "insertText": "getCurrencySymbol"
        },
        {
          "label": "getDecimalSeparator",
          "kind": "method",
          "documentation": "getDecimalSeparator(): char",
          "insertText": "getDecimalSeparator"
        },
        {
          "label": "getDigit",
          "kind": "method",
          "documentation": "getDigit(): char",
          "insertText": "getDigit"
        },
        {
          "label": "getExponentSeparator",
          "kind": "method",
          "documentation": "getExponentSeparator(): String",
          "insertText": "getExponentSeparator"
        },
        {
          "label": "getGroupingSeparator",
          "kind": "method",
          "documentation": "getGroupingSeparator(): char",
          "insertText": "getGroupingSeparator"
        },
        {
          "label": "getInfinity",
          "kind": "method",
          "documentation": "getInfinity(): String",
          "insertText": "getInfinity"
        },
        {
          "label": "getInternationalCurrencySymbol",
          "kind": "method",
          "documentation": "getInternationalCurrencySymbol(): String",
          "insertText": "getInternationalCurrencySymbol"
        },
        {
          "label": "getMinusSign",
          "kind": "method",
          "documentation": "getMinusSign(): char",
          "insertText": "getMinusSign"
        },
        {
          "label": "getMonetaryDecimalSeparator",
          "kind": "method",
          "documentation": "getMonetaryDecimalSeparator(): char",
          "insertText": "getMonetaryDecimalSeparator"
        },
        {
          "label": "getNaN",
          "kind": "method",
          "documentation": "getNaN(): String",
          "insertText": "getNaN"
        },
        {
          "label": "getPatternSeparator",
          "kind": "method",
          "documentation": "getPatternSeparator(): char",
          "insertText": "getPatternSeparator"
        },
        {
          "label": "getPerMill",
          "kind": "method",
          "documentation": "getPerMill(): char",
          "insertText": "getPerMill"
        },
        {
          "label": "getPercent",
          "kind": "method",
          "documentation": "getPercent(): char",
          "insertText": "getPercent"
        },
        {
          "label": "getZeroDigit",
          "kind": "method",
          "documentation": "getZeroDigit(): char",
          "insertText": "getZeroDigit"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setCurrency",
          "kind": "method",
          "documentation": "setCurrency(Currency a): void",
          "insertText": "setCurrency"
        },
        {
          "label": "setCurrencySymbol",
          "kind": "method",
          "documentation": "setCurrencySymbol(String a): void",
          "insertText": "setCurrencySymbol"
        },
        {
          "label": "setDecimalSeparator",
          "kind": "method",
          "documentation": "setDecimalSeparator(char a): void",
          "insertText": "setDecimalSeparator"
        },
        {
          "label": "setDigit",
          "kind": "method",
          "documentation": "setDigit(char a): void",
          "insertText": "setDigit"
        },
        {
          "label": "setExponentSeparator",
          "kind": "method",
          "documentation": "setExponentSeparator(String a): void",
          "insertText": "setExponentSeparator"
        },
        {
          "label": "setGroupingSeparator",
          "kind": "method",
          "documentation": "setGroupingSeparator(char a): void",
          "insertText": "setGroupingSeparator"
        },
        {
          "label": "setInfinity",
          "kind": "method",
          "documentation": "setInfinity(String a): void",
          "insertText": "setInfinity"
        },
        {
          "label": "setInternationalCurrencySymbol",
          "kind": "method",
          "documentation": "setInternationalCurrencySymbol(String a): void",
          "insertText": "setInternationalCurrencySymbol"
        },
        {
          "label": "setMinusSign",
          "kind": "method",
          "documentation": "setMinusSign(char a): void",
          "insertText": "setMinusSign"
        },
        {
          "label": "setMonetaryDecimalSeparator",
          "kind": "method",
          "documentation": "setMonetaryDecimalSeparator(char a): void",
          "insertText": "setMonetaryDecimalSeparator"
        },
        {
          "label": "setNaN",
          "kind": "method",
          "documentation": "setNaN(String a): void",
          "insertText": "setNaN"
        },
        {
          "label": "setPatternSeparator",
          "kind": "method",
          "documentation": "setPatternSeparator(char a): void",
          "insertText": "setPatternSeparator"
        },
        {
          "label": "setPerMill",
          "kind": "method",
          "documentation": "setPerMill(char a): void",
          "insertText": "setPerMill"
        },
        {
          "label": "setPercent",
          "kind": "method",
          "documentation": "setPercent(char a): void",
          "insertText": "setPercent"
        },
        {
          "label": "setZeroDigit",
          "kind": "method",
          "documentation": "setZeroDigit(char a): void",
          "insertText": "setZeroDigit"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DecimalFormatSymbols",
        "kind": "constructor",
        "documentation": "Constructor: DecimalFormatSymbols",
        "insertText": "DecimalFormatSymbols"
      }
    },
    {
      "label": "FieldPosition",
      "kind": "class",
      "documentation": "Class: FieldPosition",
      "insertText": "FieldPosition",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getBeginIndex",
          "kind": "method",
          "documentation": "getBeginIndex(): int",
          "insertText": "getBeginIndex"
        },
        {
          "label": "getEndIndex",
          "kind": "method",
          "documentation": "getEndIndex(): int",
          "insertText": "getEndIndex"
        },
        {
          "label": "getField",
          "kind": "method",
          "documentation": "getField(): int",
          "insertText": "getField"
        },
        {
          "label": "getFieldAttribute",
          "kind": "method",
          "documentation": "getFieldAttribute(): Format.Field",
          "insertText": "getFieldAttribute"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setBeginIndex",
          "kind": "method",
          "documentation": "setBeginIndex(int a): void",
          "insertText": "setBeginIndex"
        },
        {
          "label": "setEndIndex",
          "kind": "method",
          "documentation": "setEndIndex(int a): void",
          "insertText": "setEndIndex"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "FieldPosition",
        "kind": "constructor",
        "documentation": "Constructor: FieldPosition",
        "insertText": "FieldPosition"
      }
    },
    {
      "label": "Format",
      "kind": "class",
      "documentation": "Class: Format",
      "insertText": "Format",
      "properties": [
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Field",
      "kind": "class",
      "documentation": "Class: Field",
      "insertText": "Field",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "MessageFormat",
      "kind": "class",
      "documentation": "Class: MessageFormat",
      "insertText": "MessageFormat",
      "properties": [
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(String a, Object[] b): String",
          "insertText": "format"
        },
        {
          "label": "applyPattern",
          "kind": "method",
          "documentation": "applyPattern(String a): void",
          "insertText": "applyPattern"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "getFormats",
          "kind": "method",
          "documentation": "getFormats(): Format[]",
          "insertText": "getFormats"
        },
        {
          "label": "getFormatsByArgumentIndex",
          "kind": "method",
          "documentation": "getFormatsByArgumentIndex(): Format[]",
          "insertText": "getFormatsByArgumentIndex"
        },
        {
          "label": "getLocale",
          "kind": "method",
          "documentation": "getLocale(): Locale",
          "insertText": "getLocale"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, ParsePosition b | String a): Object[]",
          "insertText": "parse"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "setFormat",
          "kind": "method",
          "documentation": "setFormat(int a, Format b): void",
          "insertText": "setFormat"
        },
        {
          "label": "setFormatByArgumentIndex",
          "kind": "method",
          "documentation": "setFormatByArgumentIndex(int a, Format b): void",
          "insertText": "setFormatByArgumentIndex"
        },
        {
          "label": "setFormats",
          "kind": "method",
          "documentation": "setFormats(Format[] a): void",
          "insertText": "setFormats"
        },
        {
          "label": "setFormatsByArgumentIndex",
          "kind": "method",
          "documentation": "setFormatsByArgumentIndex(Format[] a): void",
          "insertText": "setFormatsByArgumentIndex"
        },
        {
          "label": "setLocale",
          "kind": "method",
          "documentation": "setLocale(Locale a): void",
          "insertText": "setLocale"
        },
        {
          "label": "toPattern",
          "kind": "method",
          "documentation": "toPattern(): String",
          "insertText": "toPattern"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Field",
      "kind": "class",
      "documentation": "Class: Field",
      "insertText": "Field",
      "properties": [
        {
          "label": "ARGUMENT",
          "kind": "property",
          "documentation": "ARGUMENT: MessageFormat.Field",
          "insertText": "ARGUMENT"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Normalizer",
      "kind": "class",
      "documentation": "Class: Normalizer",
      "insertText": "Normalizer",
      "properties": [
        {
          "label": "isNormalized",
          "kind": "method",
          "documentation": "isNormalized(CharSequence a, Normalizer.Form b): boolean",
          "insertText": "isNormalized"
        },
        {
          "label": "normalize",
          "kind": "method",
          "documentation": "normalize(CharSequence a, Normalizer.Form b): String",
          "insertText": "normalize"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Form",
      "kind": "class",
      "documentation": "Class: Form",
      "insertText": "Form",
      "properties": [
        {
          "label": "NFC",
          "kind": "property",
          "documentation": "NFC: Normalizer.Form",
          "insertText": "NFC"
        },
        {
          "label": "NFD",
          "kind": "property",
          "documentation": "NFD: Normalizer.Form",
          "insertText": "NFD"
        },
        {
          "label": "NFKC",
          "kind": "property",
          "documentation": "NFKC: Normalizer.Form",
          "insertText": "NFKC"
        },
        {
          "label": "NFKD",
          "kind": "property",
          "documentation": "NFKD: Normalizer.Form",
          "insertText": "NFKD"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): Normalizer.Form",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Normalizer.Form[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "NumberFormat",
      "kind": "class",
      "documentation": "Class: NumberFormat",
      "insertText": "NumberFormat",
      "properties": [
        {
          "label": "FRACTION_FIELD",
          "kind": "property",
          "documentation": "FRACTION_FIELD: int",
          "insertText": "FRACTION_FIELD"
        },
        {
          "label": "INTEGER_FIELD",
          "kind": "property",
          "documentation": "INTEGER_FIELD: int",
          "insertText": "INTEGER_FIELD"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getCurrencyInstance",
          "kind": "method",
          "documentation": "getCurrencyInstance(Locale a): NumberFormat",
          "insertText": "getCurrencyInstance"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(Locale a): NumberFormat",
          "insertText": "getInstance"
        },
        {
          "label": "getIntegerInstance",
          "kind": "method",
          "documentation": "getIntegerInstance(Locale a): NumberFormat",
          "insertText": "getIntegerInstance"
        },
        {
          "label": "getNumberInstance",
          "kind": "method",
          "documentation": "getNumberInstance(Locale a): NumberFormat",
          "insertText": "getNumberInstance"
        },
        {
          "label": "getPercentInstance",
          "kind": "method",
          "documentation": "getPercentInstance(Locale a): NumberFormat",
          "insertText": "getPercentInstance"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "getCurrency",
          "kind": "method",
          "documentation": "getCurrency(): Currency",
          "insertText": "getCurrency"
        },
        {
          "label": "getMaximumFractionDigits",
          "kind": "method",
          "documentation": "getMaximumFractionDigits(): int",
          "insertText": "getMaximumFractionDigits"
        },
        {
          "label": "getMaximumIntegerDigits",
          "kind": "method",
          "documentation": "getMaximumIntegerDigits(): int",
          "insertText": "getMaximumIntegerDigits"
        },
        {
          "label": "getMinimumFractionDigits",
          "kind": "method",
          "documentation": "getMinimumFractionDigits(): int",
          "insertText": "getMinimumFractionDigits"
        },
        {
          "label": "getMinimumIntegerDigits",
          "kind": "method",
          "documentation": "getMinimumIntegerDigits(): int",
          "insertText": "getMinimumIntegerDigits"
        },
        {
          "label": "getRoundingMode",
          "kind": "method",
          "documentation": "getRoundingMode(): RoundingMode",
          "insertText": "getRoundingMode"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isGroupingUsed",
          "kind": "method",
          "documentation": "isGroupingUsed(): boolean",
          "insertText": "isGroupingUsed"
        },
        {
          "label": "isParseIntegerOnly",
          "kind": "method",
          "documentation": "isParseIntegerOnly(): boolean",
          "insertText": "isParseIntegerOnly"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, ParsePosition b | String a): Number",
          "insertText": "parse"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "setCurrency",
          "kind": "method",
          "documentation": "setCurrency(Currency a): void",
          "insertText": "setCurrency"
        },
        {
          "label": "setGroupingUsed",
          "kind": "method",
          "documentation": "setGroupingUsed(boolean a): void",
          "insertText": "setGroupingUsed"
        },
        {
          "label": "setMaximumFractionDigits",
          "kind": "method",
          "documentation": "setMaximumFractionDigits(int a): void",
          "insertText": "setMaximumFractionDigits"
        },
        {
          "label": "setMaximumIntegerDigits",
          "kind": "method",
          "documentation": "setMaximumIntegerDigits(int a): void",
          "insertText": "setMaximumIntegerDigits"
        },
        {
          "label": "setMinimumFractionDigits",
          "kind": "method",
          "documentation": "setMinimumFractionDigits(int a): void",
          "insertText": "setMinimumFractionDigits"
        },
        {
          "label": "setMinimumIntegerDigits",
          "kind": "method",
          "documentation": "setMinimumIntegerDigits(int a): void",
          "insertText": "setMinimumIntegerDigits"
        },
        {
          "label": "setParseIntegerOnly",
          "kind": "method",
          "documentation": "setParseIntegerOnly(boolean a): void",
          "insertText": "setParseIntegerOnly"
        },
        {
          "label": "setRoundingMode",
          "kind": "method",
          "documentation": "setRoundingMode(RoundingMode a): void",
          "insertText": "setRoundingMode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Field",
      "kind": "class",
      "documentation": "Class: Field",
      "insertText": "Field",
      "properties": [
        {
          "label": "CURRENCY",
          "kind": "property",
          "documentation": "CURRENCY: NumberFormat.Field",
          "insertText": "CURRENCY"
        },
        {
          "label": "DECIMAL_SEPARATOR",
          "kind": "property",
          "documentation": "DECIMAL_SEPARATOR: NumberFormat.Field",
          "insertText": "DECIMAL_SEPARATOR"
        },
        {
          "label": "EXPONENT",
          "kind": "property",
          "documentation": "EXPONENT: NumberFormat.Field",
          "insertText": "EXPONENT"
        },
        {
          "label": "EXPONENT_SIGN",
          "kind": "property",
          "documentation": "EXPONENT_SIGN: NumberFormat.Field",
          "insertText": "EXPONENT_SIGN"
        },
        {
          "label": "EXPONENT_SYMBOL",
          "kind": "property",
          "documentation": "EXPONENT_SYMBOL: NumberFormat.Field",
          "insertText": "EXPONENT_SYMBOL"
        },
        {
          "label": "FRACTION",
          "kind": "property",
          "documentation": "FRACTION: NumberFormat.Field",
          "insertText": "FRACTION"
        },
        {
          "label": "GROUPING_SEPARATOR",
          "kind": "property",
          "documentation": "GROUPING_SEPARATOR: NumberFormat.Field",
          "insertText": "GROUPING_SEPARATOR"
        },
        {
          "label": "INTEGER",
          "kind": "property",
          "documentation": "INTEGER: NumberFormat.Field",
          "insertText": "INTEGER"
        },
        {
          "label": "PERCENT",
          "kind": "property",
          "documentation": "PERCENT: NumberFormat.Field",
          "insertText": "PERCENT"
        },
        {
          "label": "PERMILLE",
          "kind": "property",
          "documentation": "PERMILLE: NumberFormat.Field",
          "insertText": "PERMILLE"
        },
        {
          "label": "SIGN",
          "kind": "property",
          "documentation": "SIGN: NumberFormat.Field",
          "insertText": "SIGN"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ParseException",
      "kind": "class",
      "documentation": "Class: ParseException",
      "insertText": "ParseException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getErrorOffset",
          "kind": "method",
          "documentation": "getErrorOffset(): int",
          "insertText": "getErrorOffset"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ParseException",
        "kind": "constructor",
        "documentation": "Constructor: ParseException",
        "insertText": "ParseException"
      }
    },
    {
      "label": "ParsePosition",
      "kind": "class",
      "documentation": "Class: ParsePosition",
      "insertText": "ParsePosition",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getErrorIndex",
          "kind": "method",
          "documentation": "getErrorIndex(): int",
          "insertText": "getErrorIndex"
        },
        {
          "label": "getIndex",
          "kind": "method",
          "documentation": "getIndex(): int",
          "insertText": "getIndex"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setErrorIndex",
          "kind": "method",
          "documentation": "setErrorIndex(int a): void",
          "insertText": "setErrorIndex"
        },
        {
          "label": "setIndex",
          "kind": "method",
          "documentation": "setIndex(int a): void",
          "insertText": "setIndex"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ParsePosition",
        "kind": "constructor",
        "documentation": "Constructor: ParsePosition",
        "insertText": "ParsePosition"
      }
    },
    {
      "label": "RuleBasedCollator",
      "kind": "class",
      "documentation": "Class: RuleBasedCollator",
      "insertText": "RuleBasedCollator",
      "properties": [
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(def a, def b): int",
          "insertText": "compare"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(String a, String b | Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCollationElementIterator",
          "kind": "method",
          "documentation": "getCollationElementIterator(String a): CollationElementIterator",
          "insertText": "getCollationElementIterator"
        },
        {
          "label": "getCollationKey",
          "kind": "method",
          "documentation": "getCollationKey(String a): CollationKey",
          "insertText": "getCollationKey"
        },
        {
          "label": "getDecomposition",
          "kind": "method",
          "documentation": "getDecomposition(): int",
          "insertText": "getDecomposition"
        },
        {
          "label": "getRules",
          "kind": "method",
          "documentation": "getRules(): String",
          "insertText": "getRules"
        },
        {
          "label": "getStrength",
          "kind": "method",
          "documentation": "getStrength(): int",
          "insertText": "getStrength"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "reversed",
          "kind": "method",
          "documentation": "reversed(): Comparator",
          "insertText": "reversed"
        },
        {
          "label": "setDecomposition",
          "kind": "method",
          "documentation": "setDecomposition(int a): void",
          "insertText": "setDecomposition"
        },
        {
          "label": "setStrength",
          "kind": "method",
          "documentation": "setStrength(int a): void",
          "insertText": "setStrength"
        },
        {
          "label": "thenComparing",
          "kind": "method",
          "documentation": "thenComparing(Function a, Comparator b | Comparator a): Comparator",
          "insertText": "thenComparing"
        },
        {
          "label": "thenComparingDouble",
          "kind": "method",
          "documentation": "thenComparingDouble(ToDoubleFunction a): Comparator",
          "insertText": "thenComparingDouble"
        },
        {
          "label": "thenComparingInt",
          "kind": "method",
          "documentation": "thenComparingInt(ToIntFunction a): Comparator",
          "insertText": "thenComparingInt"
        },
        {
          "label": "thenComparingLong",
          "kind": "method",
          "documentation": "thenComparingLong(ToLongFunction a): Comparator",
          "insertText": "thenComparingLong"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "RuleBasedCollator",
        "kind": "constructor",
        "documentation": "Constructor: RuleBasedCollator",
        "insertText": "RuleBasedCollator"
      }
    },
    {
      "label": "SimpleDateFormat",
      "kind": "class",
      "documentation": "Class: SimpleDateFormat",
      "insertText": "SimpleDateFormat",
      "properties": [
        {
          "label": "applyLocalizedPattern",
          "kind": "method",
          "documentation": "applyLocalizedPattern(String a): void",
          "insertText": "applyLocalizedPattern"
        },
        {
          "label": "applyPattern",
          "kind": "method",
          "documentation": "applyPattern(String a): void",
          "insertText": "applyPattern"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String",
          "insertText": "format"
        },
        {
          "label": "formatToCharacterIterator",
          "kind": "method",
          "documentation": "formatToCharacterIterator(Object a): AttributedCharacterIterator",
          "insertText": "formatToCharacterIterator"
        },
        {
          "label": "get2DigitYearStart",
          "kind": "method",
          "documentation": "get2DigitYearStart(): Date",
          "insertText": "get2DigitYearStart"
        },
        {
          "label": "getCalendar",
          "kind": "method",
          "documentation": "getCalendar(): Calendar",
          "insertText": "getCalendar"
        },
        {
          "label": "getDateFormatSymbols",
          "kind": "method",
          "documentation": "getDateFormatSymbols(): DateFormatSymbols",
          "insertText": "getDateFormatSymbols"
        },
        {
          "label": "getNumberFormat",
          "kind": "method",
          "documentation": "getNumberFormat(): NumberFormat",
          "insertText": "getNumberFormat"
        },
        {
          "label": "getTimeZone",
          "kind": "method",
          "documentation": "getTimeZone(): TimeZone",
          "insertText": "getTimeZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLenient",
          "kind": "method",
          "documentation": "isLenient(): boolean",
          "insertText": "isLenient"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, ParsePosition b | String a): Date",
          "insertText": "parse"
        },
        {
          "label": "parseObject",
          "kind": "method",
          "documentation": "parseObject(String a, ParsePosition b | String a): Object",
          "insertText": "parseObject"
        },
        {
          "label": "set2DigitYearStart",
          "kind": "method",
          "documentation": "set2DigitYearStart(Date a): void",
          "insertText": "set2DigitYearStart"
        },
        {
          "label": "setCalendar",
          "kind": "method",
          "documentation": "setCalendar(Calendar a): void",
          "insertText": "setCalendar"
        },
        {
          "label": "setDateFormatSymbols",
          "kind": "method",
          "documentation": "setDateFormatSymbols(DateFormatSymbols a): void",
          "insertText": "setDateFormatSymbols"
        },
        {
          "label": "setLenient",
          "kind": "method",
          "documentation": "setLenient(boolean a): void",
          "insertText": "setLenient"
        },
        {
          "label": "setNumberFormat",
          "kind": "method",
          "documentation": "setNumberFormat(NumberFormat a): void",
          "insertText": "setNumberFormat"
        },
        {
          "label": "setTimeZone",
          "kind": "method",
          "documentation": "setTimeZone(TimeZone a): void",
          "insertText": "setTimeZone"
        },
        {
          "label": "toLocalizedPattern",
          "kind": "method",
          "documentation": "toLocalizedPattern(): String",
          "insertText": "toLocalizedPattern"
        },
        {
          "label": "toPattern",
          "kind": "method",
          "documentation": "toPattern(): String",
          "insertText": "toPattern"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "SimpleDateFormat",
        "kind": "constructor",
        "documentation": "Constructor: SimpleDateFormat",
        "insertText": "SimpleDateFormat"
      }
    },
    {
      "label": "StringCharacterIterator",
      "kind": "class",
      "documentation": "Class: StringCharacterIterator",
      "insertText": "StringCharacterIterator",
      "properties": [
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "current",
          "kind": "method",
          "documentation": "current(): char",
          "insertText": "current"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): char",
          "insertText": "first"
        },
        {
          "label": "getBeginIndex",
          "kind": "method",
          "documentation": "getBeginIndex(): int",
          "insertText": "getBeginIndex"
        },
        {
          "label": "getEndIndex",
          "kind": "method",
          "documentation": "getEndIndex(): int",
          "insertText": "getEndIndex"
        },
        {
          "label": "getIndex",
          "kind": "method",
          "documentation": "getIndex(): int",
          "insertText": "getIndex"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): char",
          "insertText": "last"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): char",
          "insertText": "next"
        },
        {
          "label": "previous",
          "kind": "method",
          "documentation": "previous(): char",
          "insertText": "previous"
        },
        {
          "label": "setIndex",
          "kind": "method",
          "documentation": "setIndex(int a): char",
          "insertText": "setIndex"
        },
        {
          "label": "setText",
          "kind": "method",
          "documentation": "setText(String a): void",
          "insertText": "setText"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StringCharacterIterator",
        "kind": "constructor",
        "documentation": "Constructor: StringCharacterIterator",
        "insertText": "StringCharacterIterator"
      }
    },
    {
      "label": "Clock",
      "kind": "class",
      "documentation": "Class: Clock",
      "insertText": "Clock",
      "properties": [
        {
          "label": "fixed",
          "kind": "method",
          "documentation": "fixed(Instant a, ZoneId b): Clock",
          "insertText": "fixed"
        },
        {
          "label": "offset",
          "kind": "method",
          "documentation": "offset(Clock a, Duration b): Clock",
          "insertText": "offset"
        },
        {
          "label": "tick",
          "kind": "method",
          "documentation": "tick(Clock a, Duration b): Clock",
          "insertText": "tick"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getZone",
          "kind": "method",
          "documentation": "getZone(): ZoneId",
          "insertText": "getZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "instant",
          "kind": "method",
          "documentation": "instant(): Instant",
          "insertText": "instant"
        },
        {
          "label": "millis",
          "kind": "method",
          "documentation": "millis(): long",
          "insertText": "millis"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DateTimeException",
      "kind": "class",
      "documentation": "Class: DateTimeException",
      "insertText": "DateTimeException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DateTimeException",
        "kind": "constructor",
        "documentation": "Constructor: DateTimeException",
        "insertText": "DateTimeException"
      }
    },
    {
      "label": "DayOfWeek",
      "kind": "class",
      "documentation": "Class: DayOfWeek",
      "insertText": "DayOfWeek",
      "properties": [
        {
          "label": "FRIDAY",
          "kind": "property",
          "documentation": "FRIDAY: DayOfWeek",
          "insertText": "FRIDAY"
        },
        {
          "label": "MONDAY",
          "kind": "property",
          "documentation": "MONDAY: DayOfWeek",
          "insertText": "MONDAY"
        },
        {
          "label": "SATURDAY",
          "kind": "property",
          "documentation": "SATURDAY: DayOfWeek",
          "insertText": "SATURDAY"
        },
        {
          "label": "SUNDAY",
          "kind": "property",
          "documentation": "SUNDAY: DayOfWeek",
          "insertText": "SUNDAY"
        },
        {
          "label": "THURSDAY",
          "kind": "property",
          "documentation": "THURSDAY: DayOfWeek",
          "insertText": "THURSDAY"
        },
        {
          "label": "TUESDAY",
          "kind": "property",
          "documentation": "TUESDAY: DayOfWeek",
          "insertText": "TUESDAY"
        },
        {
          "label": "WEDNESDAY",
          "kind": "property",
          "documentation": "WEDNESDAY: DayOfWeek",
          "insertText": "WEDNESDAY"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): DayOfWeek",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): DayOfWeek",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): DayOfWeek",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): DayOfWeek[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a): DayOfWeek",
          "insertText": "minus"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a): DayOfWeek",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Duration",
      "kind": "class",
      "documentation": "Class: Duration",
      "insertText": "Duration",
      "properties": [
        {
          "label": "ZERO",
          "kind": "property",
          "documentation": "ZERO: Duration",
          "insertText": "ZERO"
        },
        {
          "label": "between",
          "kind": "method",
          "documentation": "between(Temporal a, Temporal b): Duration",
          "insertText": "between"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAmount a): Duration",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(long a, TemporalUnit b): Duration",
          "insertText": "of"
        },
        {
          "label": "ofDays",
          "kind": "method",
          "documentation": "ofDays(long a): Duration",
          "insertText": "ofDays"
        },
        {
          "label": "ofHours",
          "kind": "method",
          "documentation": "ofHours(long a): Duration",
          "insertText": "ofHours"
        },
        {
          "label": "ofMillis",
          "kind": "method",
          "documentation": "ofMillis(long a): Duration",
          "insertText": "ofMillis"
        },
        {
          "label": "ofMinutes",
          "kind": "method",
          "documentation": "ofMinutes(long a): Duration",
          "insertText": "ofMinutes"
        },
        {
          "label": "ofNanos",
          "kind": "method",
          "documentation": "ofNanos(long a): Duration",
          "insertText": "ofNanos"
        },
        {
          "label": "ofSeconds",
          "kind": "method",
          "documentation": "ofSeconds(long a, long b | long a): Duration",
          "insertText": "ofSeconds"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a): Duration",
          "insertText": "parse"
        },
        {
          "label": "abs",
          "kind": "method",
          "documentation": "abs(): Duration",
          "insertText": "abs"
        },
        {
          "label": "addTo",
          "kind": "method",
          "documentation": "addTo(Temporal a): Temporal",
          "insertText": "addTo"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Duration a): int",
          "insertText": "compareTo"
        },
        {
          "label": "dividedBy",
          "kind": "method",
          "documentation": "dividedBy(long a): Duration",
          "insertText": "dividedBy"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalUnit a): long",
          "insertText": "get"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getSeconds",
          "kind": "method",
          "documentation": "getSeconds(): long",
          "insertText": "getSeconds"
        },
        {
          "label": "getUnits",
          "kind": "method",
          "documentation": "getUnits(): List",
          "insertText": "getUnits"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isNegative",
          "kind": "method",
          "documentation": "isNegative(): boolean",
          "insertText": "isNegative"
        },
        {
          "label": "isZero",
          "kind": "method",
          "documentation": "isZero(): boolean",
          "insertText": "isZero"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | Duration a): Duration",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): Duration",
          "insertText": "minusDays"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): Duration",
          "insertText": "minusHours"
        },
        {
          "label": "minusMillis",
          "kind": "method",
          "documentation": "minusMillis(long a): Duration",
          "insertText": "minusMillis"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): Duration",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): Duration",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): Duration",
          "insertText": "minusSeconds"
        },
        {
          "label": "multipliedBy",
          "kind": "method",
          "documentation": "multipliedBy(long a): Duration",
          "insertText": "multipliedBy"
        },
        {
          "label": "negated",
          "kind": "method",
          "documentation": "negated(): Duration",
          "insertText": "negated"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | Duration a): Duration",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): Duration",
          "insertText": "plusDays"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): Duration",
          "insertText": "plusHours"
        },
        {
          "label": "plusMillis",
          "kind": "method",
          "documentation": "plusMillis(long a): Duration",
          "insertText": "plusMillis"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): Duration",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): Duration",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): Duration",
          "insertText": "plusSeconds"
        },
        {
          "label": "subtractFrom",
          "kind": "method",
          "documentation": "subtractFrom(Temporal a): Temporal",
          "insertText": "subtractFrom"
        },
        {
          "label": "toDays",
          "kind": "method",
          "documentation": "toDays(): long",
          "insertText": "toDays"
        },
        {
          "label": "toHours",
          "kind": "method",
          "documentation": "toHours(): long",
          "insertText": "toHours"
        },
        {
          "label": "toMillis",
          "kind": "method",
          "documentation": "toMillis(): long",
          "insertText": "toMillis"
        },
        {
          "label": "toMinutes",
          "kind": "method",
          "documentation": "toMinutes(): long",
          "insertText": "toMinutes"
        },
        {
          "label": "toNanos",
          "kind": "method",
          "documentation": "toNanos(): long",
          "insertText": "toNanos"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "withNanos",
          "kind": "method",
          "documentation": "withNanos(int a): Duration",
          "insertText": "withNanos"
        },
        {
          "label": "withSeconds",
          "kind": "method",
          "documentation": "withSeconds(long a): Duration",
          "insertText": "withSeconds"
        }
      ]
    },
    {
      "label": "Instant",
      "kind": "class",
      "documentation": "Class: Instant",
      "insertText": "Instant",
      "properties": [
        {
          "label": "EPOCH",
          "kind": "property",
          "documentation": "EPOCH: Instant",
          "insertText": "EPOCH"
        },
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: Instant",
          "insertText": "MAX"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: Instant",
          "insertText": "MIN"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): Instant",
          "insertText": "from"
        },
        {
          "label": "ofEpochMilli",
          "kind": "method",
          "documentation": "ofEpochMilli(long a): Instant",
          "insertText": "ofEpochMilli"
        },
        {
          "label": "ofEpochSecond",
          "kind": "method",
          "documentation": "ofEpochSecond(long a, long b | long a): Instant",
          "insertText": "ofEpochSecond"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a): Instant",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atOffset",
          "kind": "method",
          "documentation": "atOffset(ZoneOffset a): OffsetDateTime",
          "insertText": "atOffset"
        },
        {
          "label": "atZone",
          "kind": "method",
          "documentation": "atZone(ZoneId a): ZonedDateTime",
          "insertText": "atZone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Instant a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getEpochSecond",
          "kind": "method",
          "documentation": "getEpochSecond(): long",
          "insertText": "getEpochSecond"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(Instant a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(Instant a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): Instant",
          "insertText": "minus"
        },
        {
          "label": "minusMillis",
          "kind": "method",
          "documentation": "minusMillis(long a): Instant",
          "insertText": "minusMillis"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): Instant",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): Instant",
          "insertText": "minusSeconds"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): Instant",
          "insertText": "plus"
        },
        {
          "label": "plusMillis",
          "kind": "method",
          "documentation": "plusMillis(long a): Instant",
          "insertText": "plusMillis"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): Instant",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): Instant",
          "insertText": "plusSeconds"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): Instant",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): Instant",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "LocalDate",
      "kind": "class",
      "documentation": "Class: LocalDate",
      "insertText": "LocalDate",
      "properties": [
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: LocalDate",
          "insertText": "MAX"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: LocalDate",
          "insertText": "MIN"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): LocalDate",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c): LocalDate",
          "insertText": "of"
        },
        {
          "label": "ofEpochDay",
          "kind": "method",
          "documentation": "ofEpochDay(long a): LocalDate",
          "insertText": "ofEpochDay"
        },
        {
          "label": "ofYearDay",
          "kind": "method",
          "documentation": "ofYearDay(int a, int b): LocalDate",
          "insertText": "ofYearDay"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDate",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atStartOfDay",
          "kind": "method",
          "documentation": "atStartOfDay(ZoneId a): ZonedDateTime | LocalDateTime",
          "insertText": "atStartOfDay"
        },
        {
          "label": "atTime",
          "kind": "method",
          "documentation": "atTime(int a, int b, int c, int d | int a, int b, int c | int a, int b | LocalTime a): LocalDateTime",
          "insertText": "atTime"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDate a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): IsoChronology",
          "insertText": "getChronology"
        },
        {
          "label": "getDayOfMonth",
          "kind": "method",
          "documentation": "getDayOfMonth(): int",
          "insertText": "getDayOfMonth"
        },
        {
          "label": "getDayOfWeek",
          "kind": "method",
          "documentation": "getDayOfWeek(): DayOfWeek",
          "insertText": "getDayOfWeek"
        },
        {
          "label": "getDayOfYear",
          "kind": "method",
          "documentation": "getDayOfYear(): int",
          "insertText": "getDayOfYear"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): Era",
          "insertText": "getEra"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "getYear",
          "kind": "method",
          "documentation": "getYear(): int",
          "insertText": "getYear"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDate a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDate a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDate a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): LocalDate",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): LocalDate",
          "insertText": "minusDays"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): LocalDate",
          "insertText": "minusMonths"
        },
        {
          "label": "minusWeeks",
          "kind": "method",
          "documentation": "minusWeeks(long a): LocalDate",
          "insertText": "minusWeeks"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): LocalDate",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): LocalDate",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): LocalDate",
          "insertText": "plusDays"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): LocalDate",
          "insertText": "plusMonths"
        },
        {
          "label": "plusWeeks",
          "kind": "method",
          "documentation": "plusWeeks(long a): LocalDate",
          "insertText": "plusWeeks"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): LocalDate",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochDay",
          "kind": "method",
          "documentation": "toEpochDay(): long",
          "insertText": "toEpochDay"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | Period",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): LocalDate",
          "insertText": "with"
        },
        {
          "label": "withDayOfMonth",
          "kind": "method",
          "documentation": "withDayOfMonth(int a): LocalDate",
          "insertText": "withDayOfMonth"
        },
        {
          "label": "withDayOfYear",
          "kind": "method",
          "documentation": "withDayOfYear(int a): LocalDate",
          "insertText": "withDayOfYear"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): LocalDate",
          "insertText": "withMonth"
        },
        {
          "label": "withYear",
          "kind": "method",
          "documentation": "withYear(int a): LocalDate",
          "insertText": "withYear"
        }
      ]
    },
    {
      "label": "LocalDateTime",
      "kind": "class",
      "documentation": "Class: LocalDateTime",
      "insertText": "LocalDateTime",
      "properties": [
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: LocalDateTime",
          "insertText": "MAX"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: LocalDateTime",
          "insertText": "MIN"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): LocalDateTime",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c, int d, int e, int f, int undefined | int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | LocalDate a, LocalTime b): LocalDateTime",
          "insertText": "of"
        },
        {
          "label": "ofEpochSecond",
          "kind": "method",
          "documentation": "ofEpochSecond(long a, int b, ZoneOffset c): LocalDateTime",
          "insertText": "ofEpochSecond"
        },
        {
          "label": "ofInstant",
          "kind": "method",
          "documentation": "ofInstant(Instant a, ZoneId b): LocalDateTime",
          "insertText": "ofInstant"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDateTime",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atOffset",
          "kind": "method",
          "documentation": "atOffset(ZoneOffset a): OffsetDateTime",
          "insertText": "atOffset"
        },
        {
          "label": "atZone",
          "kind": "method",
          "documentation": "atZone(ZoneId a): ZonedDateTime",
          "insertText": "atZone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDateTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getDayOfMonth",
          "kind": "method",
          "documentation": "getDayOfMonth(): int",
          "insertText": "getDayOfMonth"
        },
        {
          "label": "getDayOfWeek",
          "kind": "method",
          "documentation": "getDayOfWeek(): DayOfWeek",
          "insertText": "getDayOfWeek"
        },
        {
          "label": "getDayOfYear",
          "kind": "method",
          "documentation": "getDayOfYear(): int",
          "insertText": "getDayOfYear"
        },
        {
          "label": "getHour",
          "kind": "method",
          "documentation": "getHour(): int",
          "insertText": "getHour"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMinute",
          "kind": "method",
          "documentation": "getMinute(): int",
          "insertText": "getMinute"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getSecond",
          "kind": "method",
          "documentation": "getSecond(): int",
          "insertText": "getSecond"
        },
        {
          "label": "getYear",
          "kind": "method",
          "documentation": "getYear(): int",
          "insertText": "getYear"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDateTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDateTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDateTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): LocalDateTime",
          "insertText": "minusDays"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): LocalDateTime",
          "insertText": "minusHours"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): LocalDateTime",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): LocalDateTime",
          "insertText": "minusMonths"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): LocalDateTime",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): LocalDateTime",
          "insertText": "minusSeconds"
        },
        {
          "label": "minusWeeks",
          "kind": "method",
          "documentation": "minusWeeks(long a): LocalDateTime",
          "insertText": "minusWeeks"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): LocalDateTime",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): LocalDateTime",
          "insertText": "plusDays"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): LocalDateTime",
          "insertText": "plusHours"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): LocalDateTime",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): LocalDateTime",
          "insertText": "plusMonths"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): LocalDateTime",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): LocalDateTime",
          "insertText": "plusSeconds"
        },
        {
          "label": "plusWeeks",
          "kind": "method",
          "documentation": "plusWeeks(long a): LocalDateTime",
          "insertText": "plusWeeks"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): LocalDateTime",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(ZoneOffset a): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(ZoneOffset a): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toLocalDate",
          "kind": "method",
          "documentation": "toLocalDate(): LocalDate",
          "insertText": "toLocalDate"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): LocalDateTime",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): LocalDateTime",
          "insertText": "with"
        },
        {
          "label": "withDayOfMonth",
          "kind": "method",
          "documentation": "withDayOfMonth(int a): LocalDateTime",
          "insertText": "withDayOfMonth"
        },
        {
          "label": "withDayOfYear",
          "kind": "method",
          "documentation": "withDayOfYear(int a): LocalDateTime",
          "insertText": "withDayOfYear"
        },
        {
          "label": "withHour",
          "kind": "method",
          "documentation": "withHour(int a): LocalDateTime",
          "insertText": "withHour"
        },
        {
          "label": "withMinute",
          "kind": "method",
          "documentation": "withMinute(int a): LocalDateTime",
          "insertText": "withMinute"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): LocalDateTime",
          "insertText": "withMonth"
        },
        {
          "label": "withSecond",
          "kind": "method",
          "documentation": "withSecond(int a): LocalDateTime",
          "insertText": "withSecond"
        },
        {
          "label": "withYear",
          "kind": "method",
          "documentation": "withYear(int a): LocalDateTime",
          "insertText": "withYear"
        }
      ]
    },
    {
      "label": "LocalTime",
      "kind": "class",
      "documentation": "Class: LocalTime",
      "insertText": "LocalTime",
      "properties": [
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: LocalTime",
          "insertText": "MAX"
        },
        {
          "label": "MIDNIGHT",
          "kind": "property",
          "documentation": "MIDNIGHT: LocalTime",
          "insertText": "MIDNIGHT"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: LocalTime",
          "insertText": "MIN"
        },
        {
          "label": "NOON",
          "kind": "property",
          "documentation": "NOON: LocalTime",
          "insertText": "NOON"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): LocalTime",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c, int d | int a, int b, int c | int a, int b): LocalTime",
          "insertText": "of"
        },
        {
          "label": "ofNanoOfDay",
          "kind": "method",
          "documentation": "ofNanoOfDay(long a): LocalTime",
          "insertText": "ofNanoOfDay"
        },
        {
          "label": "ofSecondOfDay",
          "kind": "method",
          "documentation": "ofSecondOfDay(long a): LocalTime",
          "insertText": "ofSecondOfDay"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalTime",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atDate",
          "kind": "method",
          "documentation": "atDate(LocalDate a): LocalDateTime",
          "insertText": "atDate"
        },
        {
          "label": "atOffset",
          "kind": "method",
          "documentation": "atOffset(ZoneOffset a): OffsetTime",
          "insertText": "atOffset"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(LocalTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getHour",
          "kind": "method",
          "documentation": "getHour(): int",
          "insertText": "getHour"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMinute",
          "kind": "method",
          "documentation": "getMinute(): int",
          "insertText": "getMinute"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getSecond",
          "kind": "method",
          "documentation": "getSecond(): int",
          "insertText": "getSecond"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(LocalTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(LocalTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): LocalTime",
          "insertText": "minus"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): LocalTime",
          "insertText": "minusHours"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): LocalTime",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): LocalTime",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): LocalTime",
          "insertText": "minusSeconds"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): LocalTime",
          "insertText": "plus"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): LocalTime",
          "insertText": "plusHours"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): LocalTime",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): LocalTime",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): LocalTime",
          "insertText": "plusSeconds"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toNanoOfDay",
          "kind": "method",
          "documentation": "toNanoOfDay(): long",
          "insertText": "toNanoOfDay"
        },
        {
          "label": "toSecondOfDay",
          "kind": "method",
          "documentation": "toSecondOfDay(): int",
          "insertText": "toSecondOfDay"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): LocalTime",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): LocalTime",
          "insertText": "with"
        },
        {
          "label": "withHour",
          "kind": "method",
          "documentation": "withHour(int a): LocalTime",
          "insertText": "withHour"
        },
        {
          "label": "withMinute",
          "kind": "method",
          "documentation": "withMinute(int a): LocalTime",
          "insertText": "withMinute"
        },
        {
          "label": "withNano",
          "kind": "method",
          "documentation": "withNano(int a): LocalTime",
          "insertText": "withNano"
        },
        {
          "label": "withSecond",
          "kind": "method",
          "documentation": "withSecond(int a): LocalTime",
          "insertText": "withSecond"
        }
      ]
    },
    {
      "label": "Month",
      "kind": "class",
      "documentation": "Class: Month",
      "insertText": "Month",
      "properties": [
        {
          "label": "APRIL",
          "kind": "property",
          "documentation": "APRIL: Month",
          "insertText": "APRIL"
        },
        {
          "label": "AUGUST",
          "kind": "property",
          "documentation": "AUGUST: Month",
          "insertText": "AUGUST"
        },
        {
          "label": "DECEMBER",
          "kind": "property",
          "documentation": "DECEMBER: Month",
          "insertText": "DECEMBER"
        },
        {
          "label": "FEBRUARY",
          "kind": "property",
          "documentation": "FEBRUARY: Month",
          "insertText": "FEBRUARY"
        },
        {
          "label": "JANUARY",
          "kind": "property",
          "documentation": "JANUARY: Month",
          "insertText": "JANUARY"
        },
        {
          "label": "JULY",
          "kind": "property",
          "documentation": "JULY: Month",
          "insertText": "JULY"
        },
        {
          "label": "JUNE",
          "kind": "property",
          "documentation": "JUNE: Month",
          "insertText": "JUNE"
        },
        {
          "label": "MARCH",
          "kind": "property",
          "documentation": "MARCH: Month",
          "insertText": "MARCH"
        },
        {
          "label": "MAY",
          "kind": "property",
          "documentation": "MAY: Month",
          "insertText": "MAY"
        },
        {
          "label": "NOVEMBER",
          "kind": "property",
          "documentation": "NOVEMBER: Month",
          "insertText": "NOVEMBER"
        },
        {
          "label": "OCTOBER",
          "kind": "property",
          "documentation": "OCTOBER: Month",
          "insertText": "OCTOBER"
        },
        {
          "label": "SEPTEMBER",
          "kind": "property",
          "documentation": "SEPTEMBER: Month",
          "insertText": "SEPTEMBER"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): Month",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): Month",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): Month",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Month[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "firstDayOfYear",
          "kind": "method",
          "documentation": "firstDayOfYear(boolean a): int",
          "insertText": "firstDayOfYear"
        },
        {
          "label": "firstMonthOfQuarter",
          "kind": "method",
          "documentation": "firstMonthOfQuarter(): Month",
          "insertText": "firstMonthOfQuarter"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(boolean a): int",
          "insertText": "length"
        },
        {
          "label": "maxLength",
          "kind": "method",
          "documentation": "maxLength(): int",
          "insertText": "maxLength"
        },
        {
          "label": "minLength",
          "kind": "method",
          "documentation": "minLength(): int",
          "insertText": "minLength"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a): Month",
          "insertText": "minus"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a): Month",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "MonthDay",
      "kind": "class",
      "documentation": "Class: MonthDay",
      "insertText": "MonthDay",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): MonthDay",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b): MonthDay",
          "insertText": "of"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): MonthDay",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atYear",
          "kind": "method",
          "documentation": "atYear(int a): LocalDate",
          "insertText": "atYear"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(MonthDay a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDayOfMonth",
          "kind": "method",
          "documentation": "getDayOfMonth(): int",
          "insertText": "getDayOfMonth"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(MonthDay a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(MonthDay a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "isValidYear",
          "kind": "method",
          "documentation": "isValidYear(int a): boolean",
          "insertText": "isValidYear"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(Month a): MonthDay",
          "insertText": "with"
        },
        {
          "label": "withDayOfMonth",
          "kind": "method",
          "documentation": "withDayOfMonth(int a): MonthDay",
          "insertText": "withDayOfMonth"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): MonthDay",
          "insertText": "withMonth"
        }
      ]
    },
    {
      "label": "OffsetDateTime",
      "kind": "class",
      "documentation": "Class: OffsetDateTime",
      "insertText": "OffsetDateTime",
      "properties": [
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: OffsetDateTime",
          "insertText": "MAX"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: OffsetDateTime",
          "insertText": "MIN"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): OffsetDateTime",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c, int d, int e, int f, int undefined, ZoneOffset undefined | LocalDate a, LocalTime b, ZoneOffset c | LocalDateTime a, ZoneOffset b): OffsetDateTime",
          "insertText": "of"
        },
        {
          "label": "ofInstant",
          "kind": "method",
          "documentation": "ofInstant(Instant a, ZoneId b): OffsetDateTime",
          "insertText": "ofInstant"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetDateTime",
          "insertText": "parse"
        },
        {
          "label": "timeLineOrder",
          "kind": "method",
          "documentation": "timeLineOrder(): Comparator",
          "insertText": "timeLineOrder"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atZoneSameInstant",
          "kind": "method",
          "documentation": "atZoneSameInstant(ZoneId a): ZonedDateTime",
          "insertText": "atZoneSameInstant"
        },
        {
          "label": "atZoneSimilarLocal",
          "kind": "method",
          "documentation": "atZoneSimilarLocal(ZoneId a): ZonedDateTime",
          "insertText": "atZoneSimilarLocal"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(OffsetDateTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDayOfMonth",
          "kind": "method",
          "documentation": "getDayOfMonth(): int",
          "insertText": "getDayOfMonth"
        },
        {
          "label": "getDayOfWeek",
          "kind": "method",
          "documentation": "getDayOfWeek(): DayOfWeek",
          "insertText": "getDayOfWeek"
        },
        {
          "label": "getDayOfYear",
          "kind": "method",
          "documentation": "getDayOfYear(): int",
          "insertText": "getDayOfYear"
        },
        {
          "label": "getHour",
          "kind": "method",
          "documentation": "getHour(): int",
          "insertText": "getHour"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMinute",
          "kind": "method",
          "documentation": "getMinute(): int",
          "insertText": "getMinute"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(): ZoneOffset",
          "insertText": "getOffset"
        },
        {
          "label": "getSecond",
          "kind": "method",
          "documentation": "getSecond(): int",
          "insertText": "getSecond"
        },
        {
          "label": "getYear",
          "kind": "method",
          "documentation": "getYear(): int",
          "insertText": "getYear"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(OffsetDateTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(OffsetDateTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(OffsetDateTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): OffsetDateTime",
          "insertText": "minusDays"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): OffsetDateTime",
          "insertText": "minusHours"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): OffsetDateTime",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): OffsetDateTime",
          "insertText": "minusMonths"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): OffsetDateTime",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): OffsetDateTime",
          "insertText": "minusSeconds"
        },
        {
          "label": "minusWeeks",
          "kind": "method",
          "documentation": "minusWeeks(long a): OffsetDateTime",
          "insertText": "minusWeeks"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): OffsetDateTime",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): OffsetDateTime",
          "insertText": "plusDays"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): OffsetDateTime",
          "insertText": "plusHours"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): OffsetDateTime",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): OffsetDateTime",
          "insertText": "plusMonths"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): OffsetDateTime",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): OffsetDateTime",
          "insertText": "plusSeconds"
        },
        {
          "label": "plusWeeks",
          "kind": "method",
          "documentation": "plusWeeks(long a): OffsetDateTime",
          "insertText": "plusWeeks"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): OffsetDateTime",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toLocalDate",
          "kind": "method",
          "documentation": "toLocalDate(): LocalDate",
          "insertText": "toLocalDate"
        },
        {
          "label": "toLocalDateTime",
          "kind": "method",
          "documentation": "toLocalDateTime(): LocalDateTime",
          "insertText": "toLocalDateTime"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toOffsetTime",
          "kind": "method",
          "documentation": "toOffsetTime(): OffsetTime",
          "insertText": "toOffsetTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "toZonedDateTime",
          "kind": "method",
          "documentation": "toZonedDateTime(): ZonedDateTime",
          "insertText": "toZonedDateTime"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): OffsetDateTime",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): OffsetDateTime",
          "insertText": "with"
        },
        {
          "label": "withDayOfMonth",
          "kind": "method",
          "documentation": "withDayOfMonth(int a): OffsetDateTime",
          "insertText": "withDayOfMonth"
        },
        {
          "label": "withDayOfYear",
          "kind": "method",
          "documentation": "withDayOfYear(int a): OffsetDateTime",
          "insertText": "withDayOfYear"
        },
        {
          "label": "withHour",
          "kind": "method",
          "documentation": "withHour(int a): OffsetDateTime",
          "insertText": "withHour"
        },
        {
          "label": "withMinute",
          "kind": "method",
          "documentation": "withMinute(int a): OffsetDateTime",
          "insertText": "withMinute"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): OffsetDateTime",
          "insertText": "withMonth"
        },
        {
          "label": "withNano",
          "kind": "method",
          "documentation": "withNano(int a): OffsetDateTime",
          "insertText": "withNano"
        },
        {
          "label": "withOffsetSameInstant",
          "kind": "method",
          "documentation": "withOffsetSameInstant(ZoneOffset a): OffsetDateTime",
          "insertText": "withOffsetSameInstant"
        },
        {
          "label": "withOffsetSameLocal",
          "kind": "method",
          "documentation": "withOffsetSameLocal(ZoneOffset a): OffsetDateTime",
          "insertText": "withOffsetSameLocal"
        },
        {
          "label": "withSecond",
          "kind": "method",
          "documentation": "withSecond(int a): OffsetDateTime",
          "insertText": "withSecond"
        },
        {
          "label": "withYear",
          "kind": "method",
          "documentation": "withYear(int a): OffsetDateTime",
          "insertText": "withYear"
        }
      ]
    },
    {
      "label": "OffsetTime",
      "kind": "class",
      "documentation": "Class: OffsetTime",
      "insertText": "OffsetTime",
      "properties": [
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: OffsetTime",
          "insertText": "MAX"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: OffsetTime",
          "insertText": "MIN"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): OffsetTime",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c, int d, ZoneOffset e | LocalTime a, ZoneOffset b): OffsetTime",
          "insertText": "of"
        },
        {
          "label": "ofInstant",
          "kind": "method",
          "documentation": "ofInstant(Instant a, ZoneId b): OffsetTime",
          "insertText": "ofInstant"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetTime",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(OffsetTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getHour",
          "kind": "method",
          "documentation": "getHour(): int",
          "insertText": "getHour"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMinute",
          "kind": "method",
          "documentation": "getMinute(): int",
          "insertText": "getMinute"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(): ZoneOffset",
          "insertText": "getOffset"
        },
        {
          "label": "getSecond",
          "kind": "method",
          "documentation": "getSecond(): int",
          "insertText": "getSecond"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(OffsetTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(OffsetTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(OffsetTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): OffsetTime",
          "insertText": "minus"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): OffsetTime",
          "insertText": "minusHours"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): OffsetTime",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): OffsetTime",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): OffsetTime",
          "insertText": "minusSeconds"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): OffsetTime",
          "insertText": "plus"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): OffsetTime",
          "insertText": "plusHours"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): OffsetTime",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): OffsetTime",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): OffsetTime",
          "insertText": "plusSeconds"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): OffsetTime",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): OffsetTime",
          "insertText": "with"
        },
        {
          "label": "withHour",
          "kind": "method",
          "documentation": "withHour(int a): OffsetTime",
          "insertText": "withHour"
        },
        {
          "label": "withMinute",
          "kind": "method",
          "documentation": "withMinute(int a): OffsetTime",
          "insertText": "withMinute"
        },
        {
          "label": "withNano",
          "kind": "method",
          "documentation": "withNano(int a): OffsetTime",
          "insertText": "withNano"
        },
        {
          "label": "withOffsetSameInstant",
          "kind": "method",
          "documentation": "withOffsetSameInstant(ZoneOffset a): OffsetTime",
          "insertText": "withOffsetSameInstant"
        },
        {
          "label": "withOffsetSameLocal",
          "kind": "method",
          "documentation": "withOffsetSameLocal(ZoneOffset a): OffsetTime",
          "insertText": "withOffsetSameLocal"
        },
        {
          "label": "withSecond",
          "kind": "method",
          "documentation": "withSecond(int a): OffsetTime",
          "insertText": "withSecond"
        }
      ]
    },
    {
      "label": "Period",
      "kind": "class",
      "documentation": "Class: Period",
      "insertText": "Period",
      "properties": [
        {
          "label": "ZERO",
          "kind": "property",
          "documentation": "ZERO: Period",
          "insertText": "ZERO"
        },
        {
          "label": "between",
          "kind": "method",
          "documentation": "between(LocalDate a, LocalDate b): Period",
          "insertText": "between"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAmount a): Period",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c): Period",
          "insertText": "of"
        },
        {
          "label": "ofDays",
          "kind": "method",
          "documentation": "ofDays(int a): Period",
          "insertText": "ofDays"
        },
        {
          "label": "ofMonths",
          "kind": "method",
          "documentation": "ofMonths(int a): Period",
          "insertText": "ofMonths"
        },
        {
          "label": "ofWeeks",
          "kind": "method",
          "documentation": "ofWeeks(int a): Period",
          "insertText": "ofWeeks"
        },
        {
          "label": "ofYears",
          "kind": "method",
          "documentation": "ofYears(int a): Period",
          "insertText": "ofYears"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a): Period",
          "insertText": "parse"
        },
        {
          "label": "addTo",
          "kind": "method",
          "documentation": "addTo(Temporal a): Temporal",
          "insertText": "addTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalUnit a): long",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): IsoChronology",
          "insertText": "getChronology"
        },
        {
          "label": "getDays",
          "kind": "method",
          "documentation": "getDays(): int",
          "insertText": "getDays"
        },
        {
          "label": "getMonths",
          "kind": "method",
          "documentation": "getMonths(): int",
          "insertText": "getMonths"
        },
        {
          "label": "getUnits",
          "kind": "method",
          "documentation": "getUnits(): List",
          "insertText": "getUnits"
        },
        {
          "label": "getYears",
          "kind": "method",
          "documentation": "getYears(): int",
          "insertText": "getYears"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isNegative",
          "kind": "method",
          "documentation": "isNegative(): boolean",
          "insertText": "isNegative"
        },
        {
          "label": "isZero",
          "kind": "method",
          "documentation": "isZero(): boolean",
          "insertText": "isZero"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(TemporalAmount a): Period",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): Period",
          "insertText": "minusDays"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): Period",
          "insertText": "minusMonths"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): Period",
          "insertText": "minusYears"
        },
        {
          "label": "multipliedBy",
          "kind": "method",
          "documentation": "multipliedBy(int a): Period",
          "insertText": "multipliedBy"
        },
        {
          "label": "negated",
          "kind": "method",
          "documentation": "negated(): Period",
          "insertText": "negated"
        },
        {
          "label": "normalized",
          "kind": "method",
          "documentation": "normalized(): Period",
          "insertText": "normalized"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(TemporalAmount a): Period",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): Period",
          "insertText": "plusDays"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): Period",
          "insertText": "plusMonths"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): Period",
          "insertText": "plusYears"
        },
        {
          "label": "subtractFrom",
          "kind": "method",
          "documentation": "subtractFrom(Temporal a): Temporal",
          "insertText": "subtractFrom"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "toTotalMonths",
          "kind": "method",
          "documentation": "toTotalMonths(): long",
          "insertText": "toTotalMonths"
        },
        {
          "label": "withDays",
          "kind": "method",
          "documentation": "withDays(int a): Period",
          "insertText": "withDays"
        },
        {
          "label": "withMonths",
          "kind": "method",
          "documentation": "withMonths(int a): Period",
          "insertText": "withMonths"
        },
        {
          "label": "withYears",
          "kind": "method",
          "documentation": "withYears(int a): Period",
          "insertText": "withYears"
        }
      ]
    },
    {
      "label": "Year",
      "kind": "class",
      "documentation": "Class: Year",
      "insertText": "Year",
      "properties": [
        {
          "label": "MAX_VALUE",
          "kind": "property",
          "documentation": "MAX_VALUE: int",
          "insertText": "MAX_VALUE"
        },
        {
          "label": "MIN_VALUE",
          "kind": "property",
          "documentation": "MIN_VALUE: int",
          "insertText": "MIN_VALUE"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): Year",
          "insertText": "from"
        },
        {
          "label": "isLeap",
          "kind": "method",
          "documentation": "isLeap(long a): boolean",
          "insertText": "isLeap"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): Year",
          "insertText": "of"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): Year",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atDay",
          "kind": "method",
          "documentation": "atDay(int a): LocalDate",
          "insertText": "atDay"
        },
        {
          "label": "atMonth",
          "kind": "method",
          "documentation": "atMonth(int a): YearMonth",
          "insertText": "atMonth"
        },
        {
          "label": "atMonthDay",
          "kind": "method",
          "documentation": "atMonthDay(MonthDay a): LocalDate",
          "insertText": "atMonthDay"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Year a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(Year a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isLeap",
          "kind": "method",
          "documentation": "isLeap(): boolean",
          "insertText": "isLeap"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "isValidMonthDay",
          "kind": "method",
          "documentation": "isValidMonthDay(MonthDay a): boolean",
          "insertText": "isValidMonthDay"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): Year",
          "insertText": "minus"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): Year",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): Year",
          "insertText": "plus"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): Year",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): Year",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "YearMonth",
      "kind": "class",
      "documentation": "Class: YearMonth",
      "insertText": "YearMonth",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): YearMonth",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b): YearMonth",
          "insertText": "of"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): YearMonth",
          "insertText": "parse"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atDay",
          "kind": "method",
          "documentation": "atDay(int a): LocalDate",
          "insertText": "atDay"
        },
        {
          "label": "atEndOfMonth",
          "kind": "method",
          "documentation": "atEndOfMonth(): LocalDate",
          "insertText": "atEndOfMonth"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(YearMonth a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "getYear",
          "kind": "method",
          "documentation": "getYear(): int",
          "insertText": "getYear"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(YearMonth a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(YearMonth a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "isValidDay",
          "kind": "method",
          "documentation": "isValidDay(int a): boolean",
          "insertText": "isValidDay"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): YearMonth",
          "insertText": "minus"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): YearMonth",
          "insertText": "minusMonths"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): YearMonth",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): YearMonth",
          "insertText": "plus"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): YearMonth",
          "insertText": "plusMonths"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): YearMonth",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): YearMonth",
          "insertText": "with"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): YearMonth",
          "insertText": "withMonth"
        },
        {
          "label": "withYear",
          "kind": "method",
          "documentation": "withYear(int a): YearMonth",
          "insertText": "withYear"
        }
      ]
    },
    {
      "label": "ZoneId",
      "kind": "class",
      "documentation": "Class: ZoneId",
      "insertText": "ZoneId",
      "properties": [
        {
          "label": "SHORT_IDS",
          "kind": "property",
          "documentation": "SHORT_IDS: Map",
          "insertText": "SHORT_IDS"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ZoneId",
          "insertText": "from"
        },
        {
          "label": "getAvailableZoneIds",
          "kind": "method",
          "documentation": "getAvailableZoneIds(): Set",
          "insertText": "getAvailableZoneIds"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(String a, Map b | String a): ZoneId",
          "insertText": "of"
        },
        {
          "label": "ofOffset",
          "kind": "method",
          "documentation": "ofOffset(String a, ZoneOffset b): ZoneId",
          "insertText": "ofOffset"
        },
        {
          "label": "systemDefault",
          "kind": "method",
          "documentation": "systemDefault(): ZoneId",
          "insertText": "systemDefault"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "getRules",
          "kind": "method",
          "documentation": "getRules(): ZoneRules",
          "insertText": "getRules"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "normalized",
          "kind": "method",
          "documentation": "normalized(): ZoneId",
          "insertText": "normalized"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ZoneOffset",
      "kind": "class",
      "documentation": "Class: ZoneOffset",
      "insertText": "ZoneOffset",
      "properties": [
        {
          "label": "MAX",
          "kind": "property",
          "documentation": "MAX: ZoneOffset",
          "insertText": "MAX"
        },
        {
          "label": "MIN",
          "kind": "property",
          "documentation": "MIN: ZoneOffset",
          "insertText": "MIN"
        },
        {
          "label": "UTC",
          "kind": "property",
          "documentation": "UTC: ZoneOffset",
          "insertText": "UTC"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ZoneOffset",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(String a): ZoneOffset",
          "insertText": "of"
        },
        {
          "label": "ofHours",
          "kind": "method",
          "documentation": "ofHours(int a): ZoneOffset",
          "insertText": "ofHours"
        },
        {
          "label": "ofHoursMinutes",
          "kind": "method",
          "documentation": "ofHoursMinutes(int a, int b): ZoneOffset",
          "insertText": "ofHoursMinutes"
        },
        {
          "label": "ofHoursMinutesSeconds",
          "kind": "method",
          "documentation": "ofHoursMinutesSeconds(int a, int b, int c): ZoneOffset",
          "insertText": "ofHoursMinutesSeconds"
        },
        {
          "label": "ofTotalSeconds",
          "kind": "method",
          "documentation": "ofTotalSeconds(int a): ZoneOffset",
          "insertText": "ofTotalSeconds"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(def a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getRules",
          "kind": "method",
          "documentation": "getRules(): ZoneRules",
          "insertText": "getRules"
        },
        {
          "label": "getTotalSeconds",
          "kind": "method",
          "documentation": "getTotalSeconds(): int",
          "insertText": "getTotalSeconds"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "normalized",
          "kind": "method",
          "documentation": "normalized(): ZoneId",
          "insertText": "normalized"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ZonedDateTime",
      "kind": "class",
      "documentation": "Class: ZonedDateTime",
      "insertText": "ZonedDateTime",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ZonedDateTime",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c, int d, int e, int f, int undefined, ZoneId undefined | LocalDate a, LocalTime b, ZoneId c | LocalDateTime a, ZoneId b): ZonedDateTime",
          "insertText": "of"
        },
        {
          "label": "ofInstant",
          "kind": "method",
          "documentation": "ofInstant(LocalDateTime a, ZoneOffset b, ZoneId c | Instant a, ZoneId b): ZonedDateTime",
          "insertText": "ofInstant"
        },
        {
          "label": "ofLocal",
          "kind": "method",
          "documentation": "ofLocal(LocalDateTime a, ZoneId b, ZoneOffset c): ZonedDateTime",
          "insertText": "ofLocal"
        },
        {
          "label": "ofStrict",
          "kind": "method",
          "documentation": "ofStrict(LocalDateTime a, ZoneOffset b, ZoneId c): ZonedDateTime",
          "insertText": "ofStrict"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, DateTimeFormatter b | CharSequence a): ZonedDateTime",
          "insertText": "parse"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoZonedDateTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getDayOfMonth",
          "kind": "method",
          "documentation": "getDayOfMonth(): int",
          "insertText": "getDayOfMonth"
        },
        {
          "label": "getDayOfWeek",
          "kind": "method",
          "documentation": "getDayOfWeek(): DayOfWeek",
          "insertText": "getDayOfWeek"
        },
        {
          "label": "getDayOfYear",
          "kind": "method",
          "documentation": "getDayOfYear(): int",
          "insertText": "getDayOfYear"
        },
        {
          "label": "getHour",
          "kind": "method",
          "documentation": "getHour(): int",
          "insertText": "getHour"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMinute",
          "kind": "method",
          "documentation": "getMinute(): int",
          "insertText": "getMinute"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(): ZoneOffset",
          "insertText": "getOffset"
        },
        {
          "label": "getSecond",
          "kind": "method",
          "documentation": "getSecond(): int",
          "insertText": "getSecond"
        },
        {
          "label": "getYear",
          "kind": "method",
          "documentation": "getYear(): int",
          "insertText": "getYear"
        },
        {
          "label": "getZone",
          "kind": "method",
          "documentation": "getZone(): ZoneId",
          "insertText": "getZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoZonedDateTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoZonedDateTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoZonedDateTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): ZonedDateTime",
          "insertText": "minusDays"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): ZonedDateTime",
          "insertText": "minusHours"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): ZonedDateTime",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): ZonedDateTime",
          "insertText": "minusMonths"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): ZonedDateTime",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): ZonedDateTime",
          "insertText": "minusSeconds"
        },
        {
          "label": "minusWeeks",
          "kind": "method",
          "documentation": "minusWeeks(long a): ZonedDateTime",
          "insertText": "minusWeeks"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): ZonedDateTime",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): ZonedDateTime",
          "insertText": "plusDays"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): ZonedDateTime",
          "insertText": "plusHours"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): ZonedDateTime",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): ZonedDateTime",
          "insertText": "plusMonths"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): ZonedDateTime",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): ZonedDateTime",
          "insertText": "plusSeconds"
        },
        {
          "label": "plusWeeks",
          "kind": "method",
          "documentation": "plusWeeks(long a): ZonedDateTime",
          "insertText": "plusWeeks"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): ZonedDateTime",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toLocalDate",
          "kind": "method",
          "documentation": "toLocalDate(): LocalDate",
          "insertText": "toLocalDate"
        },
        {
          "label": "toLocalDateTime",
          "kind": "method",
          "documentation": "toLocalDateTime(): LocalDateTime",
          "insertText": "toLocalDateTime"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toOffsetDateTime",
          "kind": "method",
          "documentation": "toOffsetDateTime(): OffsetDateTime",
          "insertText": "toOffsetDateTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): ZonedDateTime",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime",
          "insertText": "with"
        },
        {
          "label": "withDayOfMonth",
          "kind": "method",
          "documentation": "withDayOfMonth(int a): ZonedDateTime",
          "insertText": "withDayOfMonth"
        },
        {
          "label": "withDayOfYear",
          "kind": "method",
          "documentation": "withDayOfYear(int a): ZonedDateTime",
          "insertText": "withDayOfYear"
        },
        {
          "label": "withEarlierOffsetAtOverlap",
          "kind": "method",
          "documentation": "withEarlierOffsetAtOverlap(): ZonedDateTime",
          "insertText": "withEarlierOffsetAtOverlap"
        },
        {
          "label": "withFixedOffsetZone",
          "kind": "method",
          "documentation": "withFixedOffsetZone(): ZonedDateTime",
          "insertText": "withFixedOffsetZone"
        },
        {
          "label": "withHour",
          "kind": "method",
          "documentation": "withHour(int a): ZonedDateTime",
          "insertText": "withHour"
        },
        {
          "label": "withLaterOffsetAtOverlap",
          "kind": "method",
          "documentation": "withLaterOffsetAtOverlap(): ZonedDateTime",
          "insertText": "withLaterOffsetAtOverlap"
        },
        {
          "label": "withMinute",
          "kind": "method",
          "documentation": "withMinute(int a): ZonedDateTime",
          "insertText": "withMinute"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): ZonedDateTime",
          "insertText": "withMonth"
        },
        {
          "label": "withNano",
          "kind": "method",
          "documentation": "withNano(int a): ZonedDateTime",
          "insertText": "withNano"
        },
        {
          "label": "withSecond",
          "kind": "method",
          "documentation": "withSecond(int a): ZonedDateTime",
          "insertText": "withSecond"
        },
        {
          "label": "withYear",
          "kind": "method",
          "documentation": "withYear(int a): ZonedDateTime",
          "insertText": "withYear"
        },
        {
          "label": "withZoneSameInstant",
          "kind": "method",
          "documentation": "withZoneSameInstant(ZoneId a): ZonedDateTime",
          "insertText": "withZoneSameInstant"
        },
        {
          "label": "withZoneSameLocal",
          "kind": "method",
          "documentation": "withZoneSameLocal(ZoneId a): ZonedDateTime",
          "insertText": "withZoneSameLocal"
        }
      ]
    },
    {
      "label": "AbstractChronology",
      "kind": "class",
      "documentation": "Class: AbstractChronology",
      "insertText": "AbstractChronology",
      "properties": [
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): ChronoLocalDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): Era",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): ChronoPeriod",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): ChronoLocalDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "ChronoLocalDate",
      "kind": "class",
      "documentation": "Class: ChronoLocalDate",
      "insertText": "ChronoLocalDate",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ChronoLocalDate",
          "insertText": "from"
        },
        {
          "label": "timeLineOrder",
          "kind": "method",
          "documentation": "timeLineOrder(): Comparator",
          "insertText": "timeLineOrder"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atTime",
          "kind": "method",
          "documentation": "atTime(LocalTime a): ChronoLocalDateTime",
          "insertText": "atTime"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDate a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): Era",
          "insertText": "getEra"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDate a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDate a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDate a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochDay",
          "kind": "method",
          "documentation": "toEpochDay(): long",
          "insertText": "toEpochDay"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDate",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "ChronoLocalDateTime",
      "kind": "class",
      "documentation": "Class: ChronoLocalDateTime",
      "insertText": "ChronoLocalDateTime",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "from"
        },
        {
          "label": "timeLineOrder",
          "kind": "method",
          "documentation": "timeLineOrder(): Comparator",
          "insertText": "timeLineOrder"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atZone",
          "kind": "method",
          "documentation": "atZone(ZoneId a): ChronoZonedDateTime",
          "insertText": "atZone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDateTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDateTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDateTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDateTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(ZoneOffset a): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(ZoneOffset a): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toLocalDate",
          "kind": "method",
          "documentation": "toLocalDate(): ChronoLocalDate",
          "insertText": "toLocalDate"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDateTime",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "ChronoPeriod",
      "kind": "class",
      "documentation": "Class: ChronoPeriod",
      "insertText": "ChronoPeriod",
      "properties": [
        {
          "label": "between",
          "kind": "method",
          "documentation": "between(ChronoLocalDate a, ChronoLocalDate b): ChronoPeriod",
          "insertText": "between"
        },
        {
          "label": "addTo",
          "kind": "method",
          "documentation": "addTo(Temporal a): Temporal",
          "insertText": "addTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalUnit a): long",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getUnits",
          "kind": "method",
          "documentation": "getUnits(): List",
          "insertText": "getUnits"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isNegative",
          "kind": "method",
          "documentation": "isNegative(): boolean",
          "insertText": "isNegative"
        },
        {
          "label": "isZero",
          "kind": "method",
          "documentation": "isZero(): boolean",
          "insertText": "isZero"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(TemporalAmount a): ChronoPeriod",
          "insertText": "minus"
        },
        {
          "label": "multipliedBy",
          "kind": "method",
          "documentation": "multipliedBy(int a): ChronoPeriod",
          "insertText": "multipliedBy"
        },
        {
          "label": "negated",
          "kind": "method",
          "documentation": "negated(): ChronoPeriod",
          "insertText": "negated"
        },
        {
          "label": "normalized",
          "kind": "method",
          "documentation": "normalized(): ChronoPeriod",
          "insertText": "normalized"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(TemporalAmount a): ChronoPeriod",
          "insertText": "plus"
        },
        {
          "label": "subtractFrom",
          "kind": "method",
          "documentation": "subtractFrom(Temporal a): Temporal",
          "insertText": "subtractFrom"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ChronoZonedDateTime",
      "kind": "class",
      "documentation": "Class: ChronoZonedDateTime",
      "insertText": "ChronoZonedDateTime",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "from"
        },
        {
          "label": "timeLineOrder",
          "kind": "method",
          "documentation": "timeLineOrder(): Comparator",
          "insertText": "timeLineOrder"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoZonedDateTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(): ZoneOffset",
          "insertText": "getOffset"
        },
        {
          "label": "getZone",
          "kind": "method",
          "documentation": "getZone(): ZoneId",
          "insertText": "getZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoZonedDateTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoZonedDateTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoZonedDateTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toLocalDate",
          "kind": "method",
          "documentation": "toLocalDate(): ChronoLocalDate",
          "insertText": "toLocalDate"
        },
        {
          "label": "toLocalDateTime",
          "kind": "method",
          "documentation": "toLocalDateTime(): ChronoLocalDateTime",
          "insertText": "toLocalDateTime"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): ChronoZonedDateTime",
          "insertText": "with"
        },
        {
          "label": "withEarlierOffsetAtOverlap",
          "kind": "method",
          "documentation": "withEarlierOffsetAtOverlap(): ChronoZonedDateTime",
          "insertText": "withEarlierOffsetAtOverlap"
        },
        {
          "label": "withLaterOffsetAtOverlap",
          "kind": "method",
          "documentation": "withLaterOffsetAtOverlap(): ChronoZonedDateTime",
          "insertText": "withLaterOffsetAtOverlap"
        },
        {
          "label": "withZoneSameInstant",
          "kind": "method",
          "documentation": "withZoneSameInstant(ZoneId a): ChronoZonedDateTime",
          "insertText": "withZoneSameInstant"
        },
        {
          "label": "withZoneSameLocal",
          "kind": "method",
          "documentation": "withZoneSameLocal(ZoneId a): ChronoZonedDateTime",
          "insertText": "withZoneSameLocal"
        }
      ]
    },
    {
      "label": "Chronology",
      "kind": "class",
      "documentation": "Class: Chronology",
      "insertText": "Chronology",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): Chronology",
          "insertText": "from"
        },
        {
          "label": "getAvailableChronologies",
          "kind": "method",
          "documentation": "getAvailableChronologies(): Set",
          "insertText": "getAvailableChronologies"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(String a): Chronology",
          "insertText": "of"
        },
        {
          "label": "ofLocale",
          "kind": "method",
          "documentation": "ofLocale(Locale a): Chronology",
          "insertText": "ofLocale"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): ChronoLocalDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): Era",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): ChronoPeriod",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): ChronoLocalDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "Era",
      "kind": "class",
      "documentation": "Class: Era",
      "insertText": "Era",
      "properties": [
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "HijrahChronology",
      "kind": "class",
      "documentation": "Class: HijrahChronology",
      "insertText": "HijrahChronology",
      "properties": [
        {
          "label": "INSTANCE",
          "kind": "property",
          "documentation": "INSTANCE: HijrahChronology",
          "insertText": "INSTANCE"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): HijrahDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): HijrahDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): HijrahDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): HijrahEra",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): ChronoPeriod",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): HijrahDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "HijrahDate",
      "kind": "class",
      "documentation": "Class: HijrahDate",
      "insertText": "HijrahDate",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): HijrahDate",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c): HijrahDate",
          "insertText": "of"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atTime",
          "kind": "method",
          "documentation": "atTime(LocalTime a): ChronoLocalDateTime",
          "insertText": "atTime"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDate a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): HijrahChronology",
          "insertText": "getChronology"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): HijrahEra",
          "insertText": "getEra"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDate a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDate a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDate a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): HijrahDate",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): HijrahDate",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochDay",
          "kind": "method",
          "documentation": "toEpochDay(): long",
          "insertText": "toEpochDay"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): HijrahDate",
          "insertText": "with"
        },
        {
          "label": "withVariant",
          "kind": "method",
          "documentation": "withVariant(HijrahChronology a): HijrahDate",
          "insertText": "withVariant"
        }
      ]
    },
    {
      "label": "HijrahEra",
      "kind": "class",
      "documentation": "Class: HijrahEra",
      "insertText": "HijrahEra",
      "properties": [
        {
          "label": "AH",
          "kind": "property",
          "documentation": "AH: HijrahEra",
          "insertText": "AH"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): HijrahEra",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): HijrahEra",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): HijrahEra[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IsoChronology",
      "kind": "class",
      "documentation": "Class: IsoChronology",
      "insertText": "IsoChronology",
      "properties": [
        {
          "label": "INSTANCE",
          "kind": "property",
          "documentation": "INSTANCE: IsoChronology",
          "insertText": "INSTANCE"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): LocalDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): LocalDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): LocalDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): IsoEra",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): LocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): Period",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): LocalDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "IsoEra",
      "kind": "class",
      "documentation": "Class: IsoEra",
      "insertText": "IsoEra",
      "properties": [
        {
          "label": "BCE",
          "kind": "property",
          "documentation": "BCE: IsoEra",
          "insertText": "BCE"
        },
        {
          "label": "CE",
          "kind": "property",
          "documentation": "CE: IsoEra",
          "insertText": "CE"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): IsoEra",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): IsoEra",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): IsoEra[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "JapaneseChronology",
      "kind": "class",
      "documentation": "Class: JapaneseChronology",
      "insertText": "JapaneseChronology",
      "properties": [
        {
          "label": "INSTANCE",
          "kind": "property",
          "documentation": "INSTANCE: JapaneseChronology",
          "insertText": "INSTANCE"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): JapaneseDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): JapaneseDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): JapaneseDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): JapaneseEra",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): ChronoPeriod",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): JapaneseDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "JapaneseDate",
      "kind": "class",
      "documentation": "Class: JapaneseDate",
      "insertText": "JapaneseDate",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): JapaneseDate",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c): JapaneseDate",
          "insertText": "of"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atTime",
          "kind": "method",
          "documentation": "atTime(LocalTime a): ChronoLocalDateTime",
          "insertText": "atTime"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDate a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): JapaneseChronology",
          "insertText": "getChronology"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): JapaneseEra",
          "insertText": "getEra"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDate a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDate a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDate a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochDay",
          "kind": "method",
          "documentation": "toEpochDay(): long",
          "insertText": "toEpochDay"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): JapaneseDate",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "JapaneseEra",
      "kind": "class",
      "documentation": "Class: JapaneseEra",
      "insertText": "JapaneseEra",
      "properties": [
        {
          "label": "HEISEI",
          "kind": "property",
          "documentation": "HEISEI: JapaneseEra",
          "insertText": "HEISEI"
        },
        {
          "label": "MEIJI",
          "kind": "property",
          "documentation": "MEIJI: JapaneseEra",
          "insertText": "MEIJI"
        },
        {
          "label": "SHOWA",
          "kind": "property",
          "documentation": "SHOWA: JapaneseEra",
          "insertText": "SHOWA"
        },
        {
          "label": "TAISHO",
          "kind": "property",
          "documentation": "TAISHO: JapaneseEra",
          "insertText": "TAISHO"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): JapaneseEra",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): JapaneseEra",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): JapaneseEra[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "MinguoChronology",
      "kind": "class",
      "documentation": "Class: MinguoChronology",
      "insertText": "MinguoChronology",
      "properties": [
        {
          "label": "INSTANCE",
          "kind": "property",
          "documentation": "INSTANCE: MinguoChronology",
          "insertText": "INSTANCE"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): MinguoDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): MinguoDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): MinguoDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): MinguoEra",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): ChronoPeriod",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): MinguoDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "MinguoDate",
      "kind": "class",
      "documentation": "Class: MinguoDate",
      "insertText": "MinguoDate",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): MinguoDate",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c): MinguoDate",
          "insertText": "of"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atTime",
          "kind": "method",
          "documentation": "atTime(LocalTime a): ChronoLocalDateTime",
          "insertText": "atTime"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDate a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): MinguoChronology",
          "insertText": "getChronology"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): MinguoEra",
          "insertText": "getEra"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDate a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDate a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDate a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): MinguoDate",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): MinguoDate",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochDay",
          "kind": "method",
          "documentation": "toEpochDay(): long",
          "insertText": "toEpochDay"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): MinguoDate",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "MinguoEra",
      "kind": "class",
      "documentation": "Class: MinguoEra",
      "insertText": "MinguoEra",
      "properties": [
        {
          "label": "BEFORE_ROC",
          "kind": "property",
          "documentation": "BEFORE_ROC: MinguoEra",
          "insertText": "BEFORE_ROC"
        },
        {
          "label": "ROC",
          "kind": "property",
          "documentation": "ROC: MinguoEra",
          "insertText": "ROC"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): MinguoEra",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): MinguoEra",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): MinguoEra[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ThaiBuddhistChronology",
      "kind": "class",
      "documentation": "Class: ThaiBuddhistChronology",
      "insertText": "ThaiBuddhistChronology",
      "properties": [
        {
          "label": "INSTANCE",
          "kind": "property",
          "documentation": "INSTANCE: ThaiBuddhistChronology",
          "insertText": "INSTANCE"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Chronology a): int",
          "insertText": "compareTo"
        },
        {
          "label": "date",
          "kind": "method",
          "documentation": "date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ThaiBuddhistDate",
          "insertText": "date"
        },
        {
          "label": "dateEpochDay",
          "kind": "method",
          "documentation": "dateEpochDay(long a): ThaiBuddhistDate",
          "insertText": "dateEpochDay"
        },
        {
          "label": "dateYearDay",
          "kind": "method",
          "documentation": "dateYearDay(Era a, int b, int c | int a, int b): ThaiBuddhistDate",
          "insertText": "dateYearDay"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "eraOf",
          "kind": "method",
          "documentation": "eraOf(int a): ThaiBuddhistEra",
          "insertText": "eraOf"
        },
        {
          "label": "eras",
          "kind": "method",
          "documentation": "eras(): List",
          "insertText": "eras"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getId",
          "kind": "method",
          "documentation": "getId(): String",
          "insertText": "getId"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(long a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "localDateTime",
          "kind": "method",
          "documentation": "localDateTime(TemporalAccessor a): ChronoLocalDateTime",
          "insertText": "localDateTime"
        },
        {
          "label": "period",
          "kind": "method",
          "documentation": "period(int a, int b, int c): ChronoPeriod",
          "insertText": "period"
        },
        {
          "label": "prolepticYear",
          "kind": "method",
          "documentation": "prolepticYear(Era a, int b): int",
          "insertText": "prolepticYear"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(ChronoField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "resolveDate",
          "kind": "method",
          "documentation": "resolveDate(Map a, ResolverStyle b): ThaiBuddhistDate",
          "insertText": "resolveDate"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "zonedDateTime",
          "kind": "method",
          "documentation": "zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime",
          "insertText": "zonedDateTime"
        }
      ]
    },
    {
      "label": "ThaiBuddhistDate",
      "kind": "class",
      "documentation": "Class: ThaiBuddhistDate",
      "insertText": "ThaiBuddhistDate",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(TemporalAccessor a): ThaiBuddhistDate",
          "insertText": "from"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a, int b, int c): ThaiBuddhistDate",
          "insertText": "of"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "atTime",
          "kind": "method",
          "documentation": "atTime(LocalTime a): ChronoLocalDateTime",
          "insertText": "atTime"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoLocalDate a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): ThaiBuddhistChronology",
          "insertText": "getChronology"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): ThaiBuddhistEra",
          "insertText": "getEra"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoLocalDate a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoLocalDate a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoLocalDate a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "lengthOfMonth",
          "kind": "method",
          "documentation": "lengthOfMonth(): int",
          "insertText": "lengthOfMonth"
        },
        {
          "label": "lengthOfYear",
          "kind": "method",
          "documentation": "lengthOfYear(): int",
          "insertText": "lengthOfYear"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochDay",
          "kind": "method",
          "documentation": "toEpochDay(): long",
          "insertText": "toEpochDay"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): ThaiBuddhistDate",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "ThaiBuddhistEra",
      "kind": "class",
      "documentation": "Class: ThaiBuddhistEra",
      "insertText": "ThaiBuddhistEra",
      "properties": [
        {
          "label": "BE",
          "kind": "property",
          "documentation": "BE: ThaiBuddhistEra",
          "insertText": "BE"
        },
        {
          "label": "BEFORE_BE",
          "kind": "property",
          "documentation": "BEFORE_BE: ThaiBuddhistEra",
          "insertText": "BEFORE_BE"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): ThaiBuddhistEra",
          "insertText": "of"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): ThaiBuddhistEra",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): ThaiBuddhistEra[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(TextStyle a, Locale b): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): int",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DateTimeFormatter",
      "kind": "class",
      "documentation": "Class: DateTimeFormatter",
      "insertText": "DateTimeFormatter",
      "properties": [
        {
          "label": "BASIC_ISO_DATE",
          "kind": "property",
          "documentation": "BASIC_ISO_DATE: DateTimeFormatter",
          "insertText": "BASIC_ISO_DATE"
        },
        {
          "label": "ISO_DATE",
          "kind": "property",
          "documentation": "ISO_DATE: DateTimeFormatter",
          "insertText": "ISO_DATE"
        },
        {
          "label": "ISO_DATE_TIME",
          "kind": "property",
          "documentation": "ISO_DATE_TIME: DateTimeFormatter",
          "insertText": "ISO_DATE_TIME"
        },
        {
          "label": "ISO_INSTANT",
          "kind": "property",
          "documentation": "ISO_INSTANT: DateTimeFormatter",
          "insertText": "ISO_INSTANT"
        },
        {
          "label": "ISO_LOCAL_DATE",
          "kind": "property",
          "documentation": "ISO_LOCAL_DATE: DateTimeFormatter",
          "insertText": "ISO_LOCAL_DATE"
        },
        {
          "label": "ISO_LOCAL_DATE_TIME",
          "kind": "property",
          "documentation": "ISO_LOCAL_DATE_TIME: DateTimeFormatter",
          "insertText": "ISO_LOCAL_DATE_TIME"
        },
        {
          "label": "ISO_LOCAL_TIME",
          "kind": "property",
          "documentation": "ISO_LOCAL_TIME: DateTimeFormatter",
          "insertText": "ISO_LOCAL_TIME"
        },
        {
          "label": "ISO_OFFSET_DATE",
          "kind": "property",
          "documentation": "ISO_OFFSET_DATE: DateTimeFormatter",
          "insertText": "ISO_OFFSET_DATE"
        },
        {
          "label": "ISO_OFFSET_DATE_TIME",
          "kind": "property",
          "documentation": "ISO_OFFSET_DATE_TIME: DateTimeFormatter",
          "insertText": "ISO_OFFSET_DATE_TIME"
        },
        {
          "label": "ISO_OFFSET_TIME",
          "kind": "property",
          "documentation": "ISO_OFFSET_TIME: DateTimeFormatter",
          "insertText": "ISO_OFFSET_TIME"
        },
        {
          "label": "ISO_ORDINAL_DATE",
          "kind": "property",
          "documentation": "ISO_ORDINAL_DATE: DateTimeFormatter",
          "insertText": "ISO_ORDINAL_DATE"
        },
        {
          "label": "ISO_TIME",
          "kind": "property",
          "documentation": "ISO_TIME: DateTimeFormatter",
          "insertText": "ISO_TIME"
        },
        {
          "label": "ISO_WEEK_DATE",
          "kind": "property",
          "documentation": "ISO_WEEK_DATE: DateTimeFormatter",
          "insertText": "ISO_WEEK_DATE"
        },
        {
          "label": "ISO_ZONED_DATE_TIME",
          "kind": "property",
          "documentation": "ISO_ZONED_DATE_TIME: DateTimeFormatter",
          "insertText": "ISO_ZONED_DATE_TIME"
        },
        {
          "label": "RFC_1123_DATE_TIME",
          "kind": "property",
          "documentation": "RFC_1123_DATE_TIME: DateTimeFormatter",
          "insertText": "RFC_1123_DATE_TIME"
        },
        {
          "label": "ofLocalizedDate",
          "kind": "method",
          "documentation": "ofLocalizedDate(FormatStyle a): DateTimeFormatter",
          "insertText": "ofLocalizedDate"
        },
        {
          "label": "ofLocalizedDateTime",
          "kind": "method",
          "documentation": "ofLocalizedDateTime(FormatStyle a, FormatStyle b | FormatStyle a): DateTimeFormatter",
          "insertText": "ofLocalizedDateTime"
        },
        {
          "label": "ofLocalizedTime",
          "kind": "method",
          "documentation": "ofLocalizedTime(FormatStyle a): DateTimeFormatter",
          "insertText": "ofLocalizedTime"
        },
        {
          "label": "ofPattern",
          "kind": "method",
          "documentation": "ofPattern(String a, Locale b | String a): DateTimeFormatter",
          "insertText": "ofPattern"
        },
        {
          "label": "parsedExcessDays",
          "kind": "method",
          "documentation": "parsedExcessDays(): TemporalQuery",
          "insertText": "parsedExcessDays"
        },
        {
          "label": "parsedLeapSecond",
          "kind": "method",
          "documentation": "parsedLeapSecond(): TemporalQuery",
          "insertText": "parsedLeapSecond"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(TemporalAccessor a): String",
          "insertText": "format"
        },
        {
          "label": "formatTo",
          "kind": "method",
          "documentation": "formatTo(TemporalAccessor a, Appendable b): void",
          "insertText": "formatTo"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getDecimalStyle",
          "kind": "method",
          "documentation": "getDecimalStyle(): DecimalStyle",
          "insertText": "getDecimalStyle"
        },
        {
          "label": "getLocale",
          "kind": "method",
          "documentation": "getLocale(): Locale",
          "insertText": "getLocale"
        },
        {
          "label": "getResolverFields",
          "kind": "method",
          "documentation": "getResolverFields(): Set",
          "insertText": "getResolverFields"
        },
        {
          "label": "getResolverStyle",
          "kind": "method",
          "documentation": "getResolverStyle(): ResolverStyle",
          "insertText": "getResolverStyle"
        },
        {
          "label": "getZone",
          "kind": "method",
          "documentation": "getZone(): ZoneId",
          "insertText": "getZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(CharSequence a, TemporalQuery b | CharSequence a): def | TemporalAccessor",
          "insertText": "parse"
        },
        {
          "label": "parseBest",
          "kind": "method",
          "documentation": "parseBest(CharSequence a, TemporalQuery[] b): TemporalAccessor",
          "insertText": "parseBest"
        },
        {
          "label": "parseUnresolved",
          "kind": "method",
          "documentation": "parseUnresolved(CharSequence a, ParsePosition b): TemporalAccessor",
          "insertText": "parseUnresolved"
        },
        {
          "label": "toFormat",
          "kind": "method",
          "documentation": "toFormat(TemporalQuery a): Format",
          "insertText": "toFormat"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "withChronology",
          "kind": "method",
          "documentation": "withChronology(Chronology a): DateTimeFormatter",
          "insertText": "withChronology"
        },
        {
          "label": "withDecimalStyle",
          "kind": "method",
          "documentation": "withDecimalStyle(DecimalStyle a): DateTimeFormatter",
          "insertText": "withDecimalStyle"
        },
        {
          "label": "withLocale",
          "kind": "method",
          "documentation": "withLocale(Locale a): DateTimeFormatter",
          "insertText": "withLocale"
        },
        {
          "label": "withResolverFields",
          "kind": "method",
          "documentation": "withResolverFields(Set a): DateTimeFormatter",
          "insertText": "withResolverFields"
        },
        {
          "label": "withResolverStyle",
          "kind": "method",
          "documentation": "withResolverStyle(ResolverStyle a): DateTimeFormatter",
          "insertText": "withResolverStyle"
        },
        {
          "label": "withZone",
          "kind": "method",
          "documentation": "withZone(ZoneId a): DateTimeFormatter",
          "insertText": "withZone"
        }
      ]
    },
    {
      "label": "DateTimeFormatterBuilder",
      "kind": "class",
      "documentation": "Class: DateTimeFormatterBuilder",
      "insertText": "DateTimeFormatterBuilder",
      "properties": [
        {
          "label": "getLocalizedDateTimePattern",
          "kind": "method",
          "documentation": "getLocalizedDateTimePattern(FormatStyle a, FormatStyle b, Chronology c, Locale d): String",
          "insertText": "getLocalizedDateTimePattern"
        },
        {
          "label": "append",
          "kind": "method",
          "documentation": "append(DateTimeFormatter a): DateTimeFormatterBuilder",
          "insertText": "append"
        },
        {
          "label": "appendChronologyId",
          "kind": "method",
          "documentation": "appendChronologyId(): DateTimeFormatterBuilder",
          "insertText": "appendChronologyId"
        },
        {
          "label": "appendChronologyText",
          "kind": "method",
          "documentation": "appendChronologyText(TextStyle a): DateTimeFormatterBuilder",
          "insertText": "appendChronologyText"
        },
        {
          "label": "appendFraction",
          "kind": "method",
          "documentation": "appendFraction(TemporalField a, int b, int c, boolean d): DateTimeFormatterBuilder",
          "insertText": "appendFraction"
        },
        {
          "label": "appendInstant",
          "kind": "method",
          "documentation": "appendInstant(int a): DateTimeFormatterBuilder",
          "insertText": "appendInstant"
        },
        {
          "label": "appendLiteral",
          "kind": "method",
          "documentation": "appendLiteral(String a): DateTimeFormatterBuilder",
          "insertText": "appendLiteral"
        },
        {
          "label": "appendLocalized",
          "kind": "method",
          "documentation": "appendLocalized(FormatStyle a, FormatStyle b): DateTimeFormatterBuilder",
          "insertText": "appendLocalized"
        },
        {
          "label": "appendLocalizedOffset",
          "kind": "method",
          "documentation": "appendLocalizedOffset(TextStyle a): DateTimeFormatterBuilder",
          "insertText": "appendLocalizedOffset"
        },
        {
          "label": "appendOffset",
          "kind": "method",
          "documentation": "appendOffset(String a, String b): DateTimeFormatterBuilder",
          "insertText": "appendOffset"
        },
        {
          "label": "appendOffsetId",
          "kind": "method",
          "documentation": "appendOffsetId(): DateTimeFormatterBuilder",
          "insertText": "appendOffsetId"
        },
        {
          "label": "appendOptional",
          "kind": "method",
          "documentation": "appendOptional(DateTimeFormatter a): DateTimeFormatterBuilder",
          "insertText": "appendOptional"
        },
        {
          "label": "appendPattern",
          "kind": "method",
          "documentation": "appendPattern(String a): DateTimeFormatterBuilder",
          "insertText": "appendPattern"
        },
        {
          "label": "appendText",
          "kind": "method",
          "documentation": "appendText(TemporalField a, TextStyle b | TemporalField a): DateTimeFormatterBuilder",
          "insertText": "appendText"
        },
        {
          "label": "appendValue",
          "kind": "method",
          "documentation": "appendValue(TemporalField a, int b, int c, SignStyle d | TemporalField a, int b | TemporalField a): DateTimeFormatterBuilder",
          "insertText": "appendValue"
        },
        {
          "label": "appendValueReduced",
          "kind": "method",
          "documentation": "appendValueReduced(TemporalField a, int b, int c, int d): DateTimeFormatterBuilder",
          "insertText": "appendValueReduced"
        },
        {
          "label": "appendZoneId",
          "kind": "method",
          "documentation": "appendZoneId(): DateTimeFormatterBuilder",
          "insertText": "appendZoneId"
        },
        {
          "label": "appendZoneOrOffsetId",
          "kind": "method",
          "documentation": "appendZoneOrOffsetId(): DateTimeFormatterBuilder",
          "insertText": "appendZoneOrOffsetId"
        },
        {
          "label": "appendZoneRegionId",
          "kind": "method",
          "documentation": "appendZoneRegionId(): DateTimeFormatterBuilder",
          "insertText": "appendZoneRegionId"
        },
        {
          "label": "appendZoneText",
          "kind": "method",
          "documentation": "appendZoneText(TextStyle a, Set b | TextStyle a): DateTimeFormatterBuilder",
          "insertText": "appendZoneText"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "optionalEnd",
          "kind": "method",
          "documentation": "optionalEnd(): DateTimeFormatterBuilder",
          "insertText": "optionalEnd"
        },
        {
          "label": "optionalStart",
          "kind": "method",
          "documentation": "optionalStart(): DateTimeFormatterBuilder",
          "insertText": "optionalStart"
        },
        {
          "label": "padNext",
          "kind": "method",
          "documentation": "padNext(int a, char b | int a): DateTimeFormatterBuilder",
          "insertText": "padNext"
        },
        {
          "label": "parseCaseInsensitive",
          "kind": "method",
          "documentation": "parseCaseInsensitive(): DateTimeFormatterBuilder",
          "insertText": "parseCaseInsensitive"
        },
        {
          "label": "parseCaseSensitive",
          "kind": "method",
          "documentation": "parseCaseSensitive(): DateTimeFormatterBuilder",
          "insertText": "parseCaseSensitive"
        },
        {
          "label": "parseDefaulting",
          "kind": "method",
          "documentation": "parseDefaulting(TemporalField a, long b): DateTimeFormatterBuilder",
          "insertText": "parseDefaulting"
        },
        {
          "label": "parseLenient",
          "kind": "method",
          "documentation": "parseLenient(): DateTimeFormatterBuilder",
          "insertText": "parseLenient"
        },
        {
          "label": "parseStrict",
          "kind": "method",
          "documentation": "parseStrict(): DateTimeFormatterBuilder",
          "insertText": "parseStrict"
        },
        {
          "label": "toFormatter",
          "kind": "method",
          "documentation": "toFormatter(Locale a): DateTimeFormatter",
          "insertText": "toFormatter"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DateTimeFormatterBuilder",
        "kind": "constructor",
        "documentation": "Constructor: DateTimeFormatterBuilder",
        "insertText": "DateTimeFormatterBuilder"
      }
    },
    {
      "label": "DateTimeParseException",
      "kind": "class",
      "documentation": "Class: DateTimeParseException",
      "insertText": "DateTimeParseException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getErrorIndex",
          "kind": "method",
          "documentation": "getErrorIndex(): int",
          "insertText": "getErrorIndex"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getParsedString",
          "kind": "method",
          "documentation": "getParsedString(): String",
          "insertText": "getParsedString"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DateTimeParseException",
        "kind": "constructor",
        "documentation": "Constructor: DateTimeParseException",
        "insertText": "DateTimeParseException"
      }
    },
    {
      "label": "DecimalStyle",
      "kind": "class",
      "documentation": "Class: DecimalStyle",
      "insertText": "DecimalStyle",
      "properties": [
        {
          "label": "STANDARD",
          "kind": "property",
          "documentation": "STANDARD: DecimalStyle",
          "insertText": "STANDARD"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Set",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(Locale a): DecimalStyle",
          "insertText": "of"
        },
        {
          "label": "ofDefaultLocale",
          "kind": "method",
          "documentation": "ofDefaultLocale(): DecimalStyle",
          "insertText": "ofDefaultLocale"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDecimalSeparator",
          "kind": "method",
          "documentation": "getDecimalSeparator(): char",
          "insertText": "getDecimalSeparator"
        },
        {
          "label": "getNegativeSign",
          "kind": "method",
          "documentation": "getNegativeSign(): char",
          "insertText": "getNegativeSign"
        },
        {
          "label": "getPositiveSign",
          "kind": "method",
          "documentation": "getPositiveSign(): char",
          "insertText": "getPositiveSign"
        },
        {
          "label": "getZeroDigit",
          "kind": "method",
          "documentation": "getZeroDigit(): char",
          "insertText": "getZeroDigit"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "withDecimalSeparator",
          "kind": "method",
          "documentation": "withDecimalSeparator(char a): DecimalStyle",
          "insertText": "withDecimalSeparator"
        },
        {
          "label": "withNegativeSign",
          "kind": "method",
          "documentation": "withNegativeSign(char a): DecimalStyle",
          "insertText": "withNegativeSign"
        },
        {
          "label": "withPositiveSign",
          "kind": "method",
          "documentation": "withPositiveSign(char a): DecimalStyle",
          "insertText": "withPositiveSign"
        },
        {
          "label": "withZeroDigit",
          "kind": "method",
          "documentation": "withZeroDigit(char a): DecimalStyle",
          "insertText": "withZeroDigit"
        }
      ]
    },
    {
      "label": "FormatStyle",
      "kind": "class",
      "documentation": "Class: FormatStyle",
      "insertText": "FormatStyle",
      "properties": [
        {
          "label": "FULL",
          "kind": "property",
          "documentation": "FULL: FormatStyle",
          "insertText": "FULL"
        },
        {
          "label": "LONG",
          "kind": "property",
          "documentation": "LONG: FormatStyle",
          "insertText": "LONG"
        },
        {
          "label": "MEDIUM",
          "kind": "property",
          "documentation": "MEDIUM: FormatStyle",
          "insertText": "MEDIUM"
        },
        {
          "label": "SHORT",
          "kind": "property",
          "documentation": "SHORT: FormatStyle",
          "insertText": "SHORT"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): FormatStyle",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): FormatStyle[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ResolverStyle",
      "kind": "class",
      "documentation": "Class: ResolverStyle",
      "insertText": "ResolverStyle",
      "properties": [
        {
          "label": "LENIENT",
          "kind": "property",
          "documentation": "LENIENT: ResolverStyle",
          "insertText": "LENIENT"
        },
        {
          "label": "SMART",
          "kind": "property",
          "documentation": "SMART: ResolverStyle",
          "insertText": "SMART"
        },
        {
          "label": "STRICT",
          "kind": "property",
          "documentation": "STRICT: ResolverStyle",
          "insertText": "STRICT"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): ResolverStyle",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): ResolverStyle[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "SignStyle",
      "kind": "class",
      "documentation": "Class: SignStyle",
      "insertText": "SignStyle",
      "properties": [
        {
          "label": "ALWAYS",
          "kind": "property",
          "documentation": "ALWAYS: SignStyle",
          "insertText": "ALWAYS"
        },
        {
          "label": "EXCEEDS_PAD",
          "kind": "property",
          "documentation": "EXCEEDS_PAD: SignStyle",
          "insertText": "EXCEEDS_PAD"
        },
        {
          "label": "NEVER",
          "kind": "property",
          "documentation": "NEVER: SignStyle",
          "insertText": "NEVER"
        },
        {
          "label": "NORMAL",
          "kind": "property",
          "documentation": "NORMAL: SignStyle",
          "insertText": "NORMAL"
        },
        {
          "label": "NOT_NEGATIVE",
          "kind": "property",
          "documentation": "NOT_NEGATIVE: SignStyle",
          "insertText": "NOT_NEGATIVE"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): SignStyle",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): SignStyle[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TextStyle",
      "kind": "class",
      "documentation": "Class: TextStyle",
      "insertText": "TextStyle",
      "properties": [
        {
          "label": "FULL",
          "kind": "property",
          "documentation": "FULL: TextStyle",
          "insertText": "FULL"
        },
        {
          "label": "FULL_STANDALONE",
          "kind": "property",
          "documentation": "FULL_STANDALONE: TextStyle",
          "insertText": "FULL_STANDALONE"
        },
        {
          "label": "NARROW",
          "kind": "property",
          "documentation": "NARROW: TextStyle",
          "insertText": "NARROW"
        },
        {
          "label": "NARROW_STANDALONE",
          "kind": "property",
          "documentation": "NARROW_STANDALONE: TextStyle",
          "insertText": "NARROW_STANDALONE"
        },
        {
          "label": "SHORT",
          "kind": "property",
          "documentation": "SHORT: TextStyle",
          "insertText": "SHORT"
        },
        {
          "label": "SHORT_STANDALONE",
          "kind": "property",
          "documentation": "SHORT_STANDALONE: TextStyle",
          "insertText": "SHORT_STANDALONE"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): TextStyle",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): TextStyle[]",
          "insertText": "values"
        },
        {
          "label": "asNormal",
          "kind": "method",
          "documentation": "asNormal(): TextStyle",
          "insertText": "asNormal"
        },
        {
          "label": "asStandalone",
          "kind": "method",
          "documentation": "asStandalone(): TextStyle",
          "insertText": "asStandalone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isStandalone",
          "kind": "method",
          "documentation": "isStandalone(): boolean",
          "insertText": "isStandalone"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ChronoField",
      "kind": "class",
      "documentation": "Class: ChronoField",
      "insertText": "ChronoField",
      "properties": [
        {
          "label": "ALIGNED_DAY_OF_WEEK_IN_MONTH",
          "kind": "property",
          "documentation": "ALIGNED_DAY_OF_WEEK_IN_MONTH: ChronoField",
          "insertText": "ALIGNED_DAY_OF_WEEK_IN_MONTH"
        },
        {
          "label": "ALIGNED_DAY_OF_WEEK_IN_YEAR",
          "kind": "property",
          "documentation": "ALIGNED_DAY_OF_WEEK_IN_YEAR: ChronoField",
          "insertText": "ALIGNED_DAY_OF_WEEK_IN_YEAR"
        },
        {
          "label": "ALIGNED_WEEK_OF_MONTH",
          "kind": "property",
          "documentation": "ALIGNED_WEEK_OF_MONTH: ChronoField",
          "insertText": "ALIGNED_WEEK_OF_MONTH"
        },
        {
          "label": "ALIGNED_WEEK_OF_YEAR",
          "kind": "property",
          "documentation": "ALIGNED_WEEK_OF_YEAR: ChronoField",
          "insertText": "ALIGNED_WEEK_OF_YEAR"
        },
        {
          "label": "AMPM_OF_DAY",
          "kind": "property",
          "documentation": "AMPM_OF_DAY: ChronoField",
          "insertText": "AMPM_OF_DAY"
        },
        {
          "label": "CLOCK_HOUR_OF_AMPM",
          "kind": "property",
          "documentation": "CLOCK_HOUR_OF_AMPM: ChronoField",
          "insertText": "CLOCK_HOUR_OF_AMPM"
        },
        {
          "label": "CLOCK_HOUR_OF_DAY",
          "kind": "property",
          "documentation": "CLOCK_HOUR_OF_DAY: ChronoField",
          "insertText": "CLOCK_HOUR_OF_DAY"
        },
        {
          "label": "DAY_OF_MONTH",
          "kind": "property",
          "documentation": "DAY_OF_MONTH: ChronoField",
          "insertText": "DAY_OF_MONTH"
        },
        {
          "label": "DAY_OF_WEEK",
          "kind": "property",
          "documentation": "DAY_OF_WEEK: ChronoField",
          "insertText": "DAY_OF_WEEK"
        },
        {
          "label": "DAY_OF_YEAR",
          "kind": "property",
          "documentation": "DAY_OF_YEAR: ChronoField",
          "insertText": "DAY_OF_YEAR"
        },
        {
          "label": "EPOCH_DAY",
          "kind": "property",
          "documentation": "EPOCH_DAY: ChronoField",
          "insertText": "EPOCH_DAY"
        },
        {
          "label": "ERA",
          "kind": "property",
          "documentation": "ERA: ChronoField",
          "insertText": "ERA"
        },
        {
          "label": "HOUR_OF_AMPM",
          "kind": "property",
          "documentation": "HOUR_OF_AMPM: ChronoField",
          "insertText": "HOUR_OF_AMPM"
        },
        {
          "label": "HOUR_OF_DAY",
          "kind": "property",
          "documentation": "HOUR_OF_DAY: ChronoField",
          "insertText": "HOUR_OF_DAY"
        },
        {
          "label": "INSTANT_SECONDS",
          "kind": "property",
          "documentation": "INSTANT_SECONDS: ChronoField",
          "insertText": "INSTANT_SECONDS"
        },
        {
          "label": "MICRO_OF_DAY",
          "kind": "property",
          "documentation": "MICRO_OF_DAY: ChronoField",
          "insertText": "MICRO_OF_DAY"
        },
        {
          "label": "MICRO_OF_SECOND",
          "kind": "property",
          "documentation": "MICRO_OF_SECOND: ChronoField",
          "insertText": "MICRO_OF_SECOND"
        },
        {
          "label": "MILLI_OF_DAY",
          "kind": "property",
          "documentation": "MILLI_OF_DAY: ChronoField",
          "insertText": "MILLI_OF_DAY"
        },
        {
          "label": "MILLI_OF_SECOND",
          "kind": "property",
          "documentation": "MILLI_OF_SECOND: ChronoField",
          "insertText": "MILLI_OF_SECOND"
        },
        {
          "label": "MINUTE_OF_DAY",
          "kind": "property",
          "documentation": "MINUTE_OF_DAY: ChronoField",
          "insertText": "MINUTE_OF_DAY"
        },
        {
          "label": "MINUTE_OF_HOUR",
          "kind": "property",
          "documentation": "MINUTE_OF_HOUR: ChronoField",
          "insertText": "MINUTE_OF_HOUR"
        },
        {
          "label": "MONTH_OF_YEAR",
          "kind": "property",
          "documentation": "MONTH_OF_YEAR: ChronoField",
          "insertText": "MONTH_OF_YEAR"
        },
        {
          "label": "NANO_OF_DAY",
          "kind": "property",
          "documentation": "NANO_OF_DAY: ChronoField",
          "insertText": "NANO_OF_DAY"
        },
        {
          "label": "NANO_OF_SECOND",
          "kind": "property",
          "documentation": "NANO_OF_SECOND: ChronoField",
          "insertText": "NANO_OF_SECOND"
        },
        {
          "label": "OFFSET_SECONDS",
          "kind": "property",
          "documentation": "OFFSET_SECONDS: ChronoField",
          "insertText": "OFFSET_SECONDS"
        },
        {
          "label": "PROLEPTIC_MONTH",
          "kind": "property",
          "documentation": "PROLEPTIC_MONTH: ChronoField",
          "insertText": "PROLEPTIC_MONTH"
        },
        {
          "label": "SECOND_OF_DAY",
          "kind": "property",
          "documentation": "SECOND_OF_DAY: ChronoField",
          "insertText": "SECOND_OF_DAY"
        },
        {
          "label": "SECOND_OF_MINUTE",
          "kind": "property",
          "documentation": "SECOND_OF_MINUTE: ChronoField",
          "insertText": "SECOND_OF_MINUTE"
        },
        {
          "label": "YEAR",
          "kind": "property",
          "documentation": "YEAR: ChronoField",
          "insertText": "YEAR"
        },
        {
          "label": "YEAR_OF_ERA",
          "kind": "property",
          "documentation": "YEAR_OF_ERA: ChronoField",
          "insertText": "YEAR_OF_ERA"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): ChronoField",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): ChronoField[]",
          "insertText": "values"
        },
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a, long b): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "checkValidIntValue",
          "kind": "method",
          "documentation": "checkValidIntValue(long a): int",
          "insertText": "checkValidIntValue"
        },
        {
          "label": "checkValidValue",
          "kind": "method",
          "documentation": "checkValidValue(long a): long",
          "insertText": "checkValidValue"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getBaseUnit",
          "kind": "method",
          "documentation": "getBaseUnit(): TemporalUnit",
          "insertText": "getBaseUnit"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(Locale a): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getFrom",
          "kind": "method",
          "documentation": "getFrom(TemporalAccessor a): long",
          "insertText": "getFrom"
        },
        {
          "label": "getRangeUnit",
          "kind": "method",
          "documentation": "getRangeUnit(): TemporalUnit",
          "insertText": "getRangeUnit"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isDateBased",
          "kind": "method",
          "documentation": "isDateBased(): boolean",
          "insertText": "isDateBased"
        },
        {
          "label": "isSupportedBy",
          "kind": "method",
          "documentation": "isSupportedBy(TemporalAccessor a): boolean",
          "insertText": "isSupportedBy"
        },
        {
          "label": "isTimeBased",
          "kind": "method",
          "documentation": "isTimeBased(): boolean",
          "insertText": "isTimeBased"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(): ValueRange",
          "insertText": "range"
        },
        {
          "label": "rangeRefinedBy",
          "kind": "method",
          "documentation": "rangeRefinedBy(TemporalAccessor a): ValueRange",
          "insertText": "rangeRefinedBy"
        },
        {
          "label": "resolve",
          "kind": "method",
          "documentation": "resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor",
          "insertText": "resolve"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ChronoUnit",
      "kind": "class",
      "documentation": "Class: ChronoUnit",
      "insertText": "ChronoUnit",
      "properties": [
        {
          "label": "CENTURIES",
          "kind": "property",
          "documentation": "CENTURIES: ChronoUnit",
          "insertText": "CENTURIES"
        },
        {
          "label": "DAYS",
          "kind": "property",
          "documentation": "DAYS: ChronoUnit",
          "insertText": "DAYS"
        },
        {
          "label": "DECADES",
          "kind": "property",
          "documentation": "DECADES: ChronoUnit",
          "insertText": "DECADES"
        },
        {
          "label": "ERAS",
          "kind": "property",
          "documentation": "ERAS: ChronoUnit",
          "insertText": "ERAS"
        },
        {
          "label": "FOREVER",
          "kind": "property",
          "documentation": "FOREVER: ChronoUnit",
          "insertText": "FOREVER"
        },
        {
          "label": "HALF_DAYS",
          "kind": "property",
          "documentation": "HALF_DAYS: ChronoUnit",
          "insertText": "HALF_DAYS"
        },
        {
          "label": "HOURS",
          "kind": "property",
          "documentation": "HOURS: ChronoUnit",
          "insertText": "HOURS"
        },
        {
          "label": "MICROS",
          "kind": "property",
          "documentation": "MICROS: ChronoUnit",
          "insertText": "MICROS"
        },
        {
          "label": "MILLENNIA",
          "kind": "property",
          "documentation": "MILLENNIA: ChronoUnit",
          "insertText": "MILLENNIA"
        },
        {
          "label": "MILLIS",
          "kind": "property",
          "documentation": "MILLIS: ChronoUnit",
          "insertText": "MILLIS"
        },
        {
          "label": "MINUTES",
          "kind": "property",
          "documentation": "MINUTES: ChronoUnit",
          "insertText": "MINUTES"
        },
        {
          "label": "MONTHS",
          "kind": "property",
          "documentation": "MONTHS: ChronoUnit",
          "insertText": "MONTHS"
        },
        {
          "label": "NANOS",
          "kind": "property",
          "documentation": "NANOS: ChronoUnit",
          "insertText": "NANOS"
        },
        {
          "label": "SECONDS",
          "kind": "property",
          "documentation": "SECONDS: ChronoUnit",
          "insertText": "SECONDS"
        },
        {
          "label": "WEEKS",
          "kind": "property",
          "documentation": "WEEKS: ChronoUnit",
          "insertText": "WEEKS"
        },
        {
          "label": "YEARS",
          "kind": "property",
          "documentation": "YEARS: ChronoUnit",
          "insertText": "YEARS"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): ChronoUnit",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): ChronoUnit[]",
          "insertText": "values"
        },
        {
          "label": "addTo",
          "kind": "method",
          "documentation": "addTo(Temporal a, long b): Temporal",
          "insertText": "addTo"
        },
        {
          "label": "between",
          "kind": "method",
          "documentation": "between(Temporal a, Temporal b): long",
          "insertText": "between"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDuration",
          "kind": "method",
          "documentation": "getDuration(): Duration",
          "insertText": "getDuration"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isDateBased",
          "kind": "method",
          "documentation": "isDateBased(): boolean",
          "insertText": "isDateBased"
        },
        {
          "label": "isDurationEstimated",
          "kind": "method",
          "documentation": "isDurationEstimated(): boolean",
          "insertText": "isDurationEstimated"
        },
        {
          "label": "isSupportedBy",
          "kind": "method",
          "documentation": "isSupportedBy(Temporal a): boolean",
          "insertText": "isSupportedBy"
        },
        {
          "label": "isTimeBased",
          "kind": "method",
          "documentation": "isTimeBased(): boolean",
          "insertText": "isTimeBased"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IsoFields",
      "kind": "class",
      "documentation": "Class: IsoFields",
      "insertText": "IsoFields",
      "properties": [
        {
          "label": "DAY_OF_QUARTER",
          "kind": "property",
          "documentation": "DAY_OF_QUARTER: TemporalField",
          "insertText": "DAY_OF_QUARTER"
        },
        {
          "label": "QUARTER_OF_YEAR",
          "kind": "property",
          "documentation": "QUARTER_OF_YEAR: TemporalField",
          "insertText": "QUARTER_OF_YEAR"
        },
        {
          "label": "QUARTER_YEARS",
          "kind": "property",
          "documentation": "QUARTER_YEARS: TemporalUnit",
          "insertText": "QUARTER_YEARS"
        },
        {
          "label": "WEEK_BASED_YEAR",
          "kind": "property",
          "documentation": "WEEK_BASED_YEAR: TemporalField",
          "insertText": "WEEK_BASED_YEAR"
        },
        {
          "label": "WEEK_BASED_YEARS",
          "kind": "property",
          "documentation": "WEEK_BASED_YEARS: TemporalUnit",
          "insertText": "WEEK_BASED_YEARS"
        },
        {
          "label": "WEEK_OF_WEEK_BASED_YEAR",
          "kind": "property",
          "documentation": "WEEK_OF_WEEK_BASED_YEAR: TemporalField",
          "insertText": "WEEK_OF_WEEK_BASED_YEAR"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "JulianFields",
      "kind": "class",
      "documentation": "Class: JulianFields",
      "insertText": "JulianFields",
      "properties": [
        {
          "label": "JULIAN_DAY",
          "kind": "property",
          "documentation": "JULIAN_DAY: TemporalField",
          "insertText": "JULIAN_DAY"
        },
        {
          "label": "MODIFIED_JULIAN_DAY",
          "kind": "property",
          "documentation": "MODIFIED_JULIAN_DAY: TemporalField",
          "insertText": "MODIFIED_JULIAN_DAY"
        },
        {
          "label": "RATA_DIE",
          "kind": "property",
          "documentation": "RATA_DIE: TemporalField",
          "insertText": "RATA_DIE"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Temporal",
      "kind": "class",
      "documentation": "Class: Temporal",
      "insertText": "Temporal",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): Temporal",
          "insertText": "minus"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): Temporal",
          "insertText": "plus"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): Temporal",
          "insertText": "with"
        }
      ]
    },
    {
      "label": "TemporalAccessor",
      "kind": "class",
      "documentation": "Class: TemporalAccessor",
      "insertText": "TemporalAccessor",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalAdjuster",
      "kind": "class",
      "documentation": "Class: TemporalAdjuster",
      "insertText": "TemporalAdjuster",
      "properties": [
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalAdjusters",
      "kind": "class",
      "documentation": "Class: TemporalAdjusters",
      "insertText": "TemporalAdjusters",
      "properties": [
        {
          "label": "dayOfWeekInMonth",
          "kind": "method",
          "documentation": "dayOfWeekInMonth(int a, DayOfWeek b): TemporalAdjuster",
          "insertText": "dayOfWeekInMonth"
        },
        {
          "label": "firstDayOfMonth",
          "kind": "method",
          "documentation": "firstDayOfMonth(): TemporalAdjuster",
          "insertText": "firstDayOfMonth"
        },
        {
          "label": "firstDayOfNextMonth",
          "kind": "method",
          "documentation": "firstDayOfNextMonth(): TemporalAdjuster",
          "insertText": "firstDayOfNextMonth"
        },
        {
          "label": "firstDayOfNextYear",
          "kind": "method",
          "documentation": "firstDayOfNextYear(): TemporalAdjuster",
          "insertText": "firstDayOfNextYear"
        },
        {
          "label": "firstDayOfYear",
          "kind": "method",
          "documentation": "firstDayOfYear(): TemporalAdjuster",
          "insertText": "firstDayOfYear"
        },
        {
          "label": "firstInMonth",
          "kind": "method",
          "documentation": "firstInMonth(DayOfWeek a): TemporalAdjuster",
          "insertText": "firstInMonth"
        },
        {
          "label": "lastDayOfMonth",
          "kind": "method",
          "documentation": "lastDayOfMonth(): TemporalAdjuster",
          "insertText": "lastDayOfMonth"
        },
        {
          "label": "lastDayOfYear",
          "kind": "method",
          "documentation": "lastDayOfYear(): TemporalAdjuster",
          "insertText": "lastDayOfYear"
        },
        {
          "label": "lastInMonth",
          "kind": "method",
          "documentation": "lastInMonth(DayOfWeek a): TemporalAdjuster",
          "insertText": "lastInMonth"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(DayOfWeek a): TemporalAdjuster",
          "insertText": "next"
        },
        {
          "label": "nextOrSame",
          "kind": "method",
          "documentation": "nextOrSame(DayOfWeek a): TemporalAdjuster",
          "insertText": "nextOrSame"
        },
        {
          "label": "ofDateAdjuster",
          "kind": "method",
          "documentation": "ofDateAdjuster(UnaryOperator a): TemporalAdjuster",
          "insertText": "ofDateAdjuster"
        },
        {
          "label": "previous",
          "kind": "method",
          "documentation": "previous(DayOfWeek a): TemporalAdjuster",
          "insertText": "previous"
        },
        {
          "label": "previousOrSame",
          "kind": "method",
          "documentation": "previousOrSame(DayOfWeek a): TemporalAdjuster",
          "insertText": "previousOrSame"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalAmount",
      "kind": "class",
      "documentation": "Class: TemporalAmount",
      "insertText": "TemporalAmount",
      "properties": [
        {
          "label": "addTo",
          "kind": "method",
          "documentation": "addTo(Temporal a): Temporal",
          "insertText": "addTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalUnit a): long",
          "insertText": "get"
        },
        {
          "label": "getUnits",
          "kind": "method",
          "documentation": "getUnits(): List",
          "insertText": "getUnits"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "subtractFrom",
          "kind": "method",
          "documentation": "subtractFrom(Temporal a): Temporal",
          "insertText": "subtractFrom"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalField",
      "kind": "class",
      "documentation": "Class: TemporalField",
      "insertText": "TemporalField",
      "properties": [
        {
          "label": "adjustInto",
          "kind": "method",
          "documentation": "adjustInto(Temporal a, long b): Temporal",
          "insertText": "adjustInto"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getBaseUnit",
          "kind": "method",
          "documentation": "getBaseUnit(): TemporalUnit",
          "insertText": "getBaseUnit"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(Locale a): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getFrom",
          "kind": "method",
          "documentation": "getFrom(TemporalAccessor a): long",
          "insertText": "getFrom"
        },
        {
          "label": "getRangeUnit",
          "kind": "method",
          "documentation": "getRangeUnit(): TemporalUnit",
          "insertText": "getRangeUnit"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isDateBased",
          "kind": "method",
          "documentation": "isDateBased(): boolean",
          "insertText": "isDateBased"
        },
        {
          "label": "isSupportedBy",
          "kind": "method",
          "documentation": "isSupportedBy(TemporalAccessor a): boolean",
          "insertText": "isSupportedBy"
        },
        {
          "label": "isTimeBased",
          "kind": "method",
          "documentation": "isTimeBased(): boolean",
          "insertText": "isTimeBased"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(): ValueRange",
          "insertText": "range"
        },
        {
          "label": "rangeRefinedBy",
          "kind": "method",
          "documentation": "rangeRefinedBy(TemporalAccessor a): ValueRange",
          "insertText": "rangeRefinedBy"
        },
        {
          "label": "resolve",
          "kind": "method",
          "documentation": "resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor",
          "insertText": "resolve"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalQueries",
      "kind": "class",
      "documentation": "Class: TemporalQueries",
      "insertText": "TemporalQueries",
      "properties": [
        {
          "label": "chronology",
          "kind": "method",
          "documentation": "chronology(): TemporalQuery",
          "insertText": "chronology"
        },
        {
          "label": "localDate",
          "kind": "method",
          "documentation": "localDate(): TemporalQuery",
          "insertText": "localDate"
        },
        {
          "label": "localTime",
          "kind": "method",
          "documentation": "localTime(): TemporalQuery",
          "insertText": "localTime"
        },
        {
          "label": "offset",
          "kind": "method",
          "documentation": "offset(): TemporalQuery",
          "insertText": "offset"
        },
        {
          "label": "precision",
          "kind": "method",
          "documentation": "precision(): TemporalQuery",
          "insertText": "precision"
        },
        {
          "label": "zone",
          "kind": "method",
          "documentation": "zone(): TemporalQuery",
          "insertText": "zone"
        },
        {
          "label": "zoneId",
          "kind": "method",
          "documentation": "zoneId(): TemporalQuery",
          "insertText": "zoneId"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalQuery",
      "kind": "class",
      "documentation": "Class: TemporalQuery",
      "insertText": "TemporalQuery",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "queryFrom",
          "kind": "method",
          "documentation": "queryFrom(TemporalAccessor a): def",
          "insertText": "queryFrom"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TemporalUnit",
      "kind": "class",
      "documentation": "Class: TemporalUnit",
      "insertText": "TemporalUnit",
      "properties": [
        {
          "label": "addTo",
          "kind": "method",
          "documentation": "addTo(Temporal a, long b): Temporal",
          "insertText": "addTo"
        },
        {
          "label": "between",
          "kind": "method",
          "documentation": "between(Temporal a, Temporal b): long",
          "insertText": "between"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDuration",
          "kind": "method",
          "documentation": "getDuration(): Duration",
          "insertText": "getDuration"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isDateBased",
          "kind": "method",
          "documentation": "isDateBased(): boolean",
          "insertText": "isDateBased"
        },
        {
          "label": "isDurationEstimated",
          "kind": "method",
          "documentation": "isDurationEstimated(): boolean",
          "insertText": "isDurationEstimated"
        },
        {
          "label": "isSupportedBy",
          "kind": "method",
          "documentation": "isSupportedBy(Temporal a): boolean",
          "insertText": "isSupportedBy"
        },
        {
          "label": "isTimeBased",
          "kind": "method",
          "documentation": "isTimeBased(): boolean",
          "insertText": "isTimeBased"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "UnsupportedTemporalTypeException",
      "kind": "class",
      "documentation": "Class: UnsupportedTemporalTypeException",
      "insertText": "UnsupportedTemporalTypeException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "UnsupportedTemporalTypeException",
        "kind": "constructor",
        "documentation": "Constructor: UnsupportedTemporalTypeException",
        "insertText": "UnsupportedTemporalTypeException"
      }
    },
    {
      "label": "ValueRange",
      "kind": "class",
      "documentation": "Class: ValueRange",
      "insertText": "ValueRange",
      "properties": [
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(long a, long b, long c, long d | long a, long b, long c | long a, long b): ValueRange",
          "insertText": "of"
        },
        {
          "label": "checkValidIntValue",
          "kind": "method",
          "documentation": "checkValidIntValue(long a, TemporalField b): int",
          "insertText": "checkValidIntValue"
        },
        {
          "label": "checkValidValue",
          "kind": "method",
          "documentation": "checkValidValue(long a, TemporalField b): long",
          "insertText": "checkValidValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLargestMinimum",
          "kind": "method",
          "documentation": "getLargestMinimum(): long",
          "insertText": "getLargestMinimum"
        },
        {
          "label": "getMaximum",
          "kind": "method",
          "documentation": "getMaximum(): long",
          "insertText": "getMaximum"
        },
        {
          "label": "getMinimum",
          "kind": "method",
          "documentation": "getMinimum(): long",
          "insertText": "getMinimum"
        },
        {
          "label": "getSmallestMaximum",
          "kind": "method",
          "documentation": "getSmallestMaximum(): long",
          "insertText": "getSmallestMaximum"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isFixed",
          "kind": "method",
          "documentation": "isFixed(): boolean",
          "insertText": "isFixed"
        },
        {
          "label": "isIntValue",
          "kind": "method",
          "documentation": "isIntValue(): boolean",
          "insertText": "isIntValue"
        },
        {
          "label": "isValidIntValue",
          "kind": "method",
          "documentation": "isValidIntValue(long a): boolean",
          "insertText": "isValidIntValue"
        },
        {
          "label": "isValidValue",
          "kind": "method",
          "documentation": "isValidValue(long a): boolean",
          "insertText": "isValidValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "WeekFields",
      "kind": "class",
      "documentation": "Class: WeekFields",
      "insertText": "WeekFields",
      "properties": [
        {
          "label": "ISO",
          "kind": "property",
          "documentation": "ISO: WeekFields",
          "insertText": "ISO"
        },
        {
          "label": "SUNDAY_START",
          "kind": "property",
          "documentation": "SUNDAY_START: WeekFields",
          "insertText": "SUNDAY_START"
        },
        {
          "label": "WEEK_BASED_YEARS",
          "kind": "property",
          "documentation": "WEEK_BASED_YEARS: TemporalUnit",
          "insertText": "WEEK_BASED_YEARS"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(DayOfWeek a, int b | Locale a): WeekFields",
          "insertText": "of"
        },
        {
          "label": "dayOfWeek",
          "kind": "method",
          "documentation": "dayOfWeek(): TemporalField",
          "insertText": "dayOfWeek"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFirstDayOfWeek",
          "kind": "method",
          "documentation": "getFirstDayOfWeek(): DayOfWeek",
          "insertText": "getFirstDayOfWeek"
        },
        {
          "label": "getMinimalDaysInFirstWeek",
          "kind": "method",
          "documentation": "getMinimalDaysInFirstWeek(): int",
          "insertText": "getMinimalDaysInFirstWeek"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "weekBasedYear",
          "kind": "method",
          "documentation": "weekBasedYear(): TemporalField",
          "insertText": "weekBasedYear"
        },
        {
          "label": "weekOfMonth",
          "kind": "method",
          "documentation": "weekOfMonth(): TemporalField",
          "insertText": "weekOfMonth"
        },
        {
          "label": "weekOfWeekBasedYear",
          "kind": "method",
          "documentation": "weekOfWeekBasedYear(): TemporalField",
          "insertText": "weekOfWeekBasedYear"
        },
        {
          "label": "weekOfYear",
          "kind": "method",
          "documentation": "weekOfYear(): TemporalField",
          "insertText": "weekOfYear"
        }
      ]
    },
    {
      "label": "ZoneOffsetTransition",
      "kind": "class",
      "documentation": "Class: ZoneOffsetTransition",
      "insertText": "ZoneOffsetTransition",
      "properties": [
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(LocalDateTime a, ZoneOffset b, ZoneOffset c): ZoneOffsetTransition",
          "insertText": "of"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ZoneOffsetTransition a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDateTimeAfter",
          "kind": "method",
          "documentation": "getDateTimeAfter(): LocalDateTime",
          "insertText": "getDateTimeAfter"
        },
        {
          "label": "getDateTimeBefore",
          "kind": "method",
          "documentation": "getDateTimeBefore(): LocalDateTime",
          "insertText": "getDateTimeBefore"
        },
        {
          "label": "getDuration",
          "kind": "method",
          "documentation": "getDuration(): Duration",
          "insertText": "getDuration"
        },
        {
          "label": "getInstant",
          "kind": "method",
          "documentation": "getInstant(): Instant",
          "insertText": "getInstant"
        },
        {
          "label": "getOffsetAfter",
          "kind": "method",
          "documentation": "getOffsetAfter(): ZoneOffset",
          "insertText": "getOffsetAfter"
        },
        {
          "label": "getOffsetBefore",
          "kind": "method",
          "documentation": "getOffsetBefore(): ZoneOffset",
          "insertText": "getOffsetBefore"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isGap",
          "kind": "method",
          "documentation": "isGap(): boolean",
          "insertText": "isGap"
        },
        {
          "label": "isOverlap",
          "kind": "method",
          "documentation": "isOverlap(): boolean",
          "insertText": "isOverlap"
        },
        {
          "label": "isValidOffset",
          "kind": "method",
          "documentation": "isValidOffset(ZoneOffset a): boolean",
          "insertText": "isValidOffset"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ZoneOffsetTransitionRule",
      "kind": "class",
      "documentation": "Class: ZoneOffsetTransitionRule",
      "insertText": "ZoneOffsetTransitionRule",
      "properties": [
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(Month a, int b, DayOfWeek c, LocalTime d, boolean e, ZoneOffsetTransitionRule.TimeDefinition f, ZoneOffset undefined, ZoneOffset undefined, ZoneOffset undefined): ZoneOffsetTransitionRule",
          "insertText": "of"
        },
        {
          "label": "createTransition",
          "kind": "method",
          "documentation": "createTransition(int a): ZoneOffsetTransition",
          "insertText": "createTransition"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDayOfMonthIndicator",
          "kind": "method",
          "documentation": "getDayOfMonthIndicator(): int",
          "insertText": "getDayOfMonthIndicator"
        },
        {
          "label": "getDayOfWeek",
          "kind": "method",
          "documentation": "getDayOfWeek(): DayOfWeek",
          "insertText": "getDayOfWeek"
        },
        {
          "label": "getLocalTime",
          "kind": "method",
          "documentation": "getLocalTime(): LocalTime",
          "insertText": "getLocalTime"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getOffsetAfter",
          "kind": "method",
          "documentation": "getOffsetAfter(): ZoneOffset",
          "insertText": "getOffsetAfter"
        },
        {
          "label": "getOffsetBefore",
          "kind": "method",
          "documentation": "getOffsetBefore(): ZoneOffset",
          "insertText": "getOffsetBefore"
        },
        {
          "label": "getStandardOffset",
          "kind": "method",
          "documentation": "getStandardOffset(): ZoneOffset",
          "insertText": "getStandardOffset"
        },
        {
          "label": "getTimeDefinition",
          "kind": "method",
          "documentation": "getTimeDefinition(): ZoneOffsetTransitionRule.TimeDefinition",
          "insertText": "getTimeDefinition"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isMidnightEndOfDay",
          "kind": "method",
          "documentation": "isMidnightEndOfDay(): boolean",
          "insertText": "isMidnightEndOfDay"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "TimeDefinition",
      "kind": "class",
      "documentation": "Class: TimeDefinition",
      "insertText": "TimeDefinition",
      "properties": [
        {
          "label": "STANDARD",
          "kind": "property",
          "documentation": "STANDARD: ZoneOffsetTransitionRule.TimeDefinition",
          "insertText": "STANDARD"
        },
        {
          "label": "UTC",
          "kind": "property",
          "documentation": "UTC: ZoneOffsetTransitionRule.TimeDefinition",
          "insertText": "UTC"
        },
        {
          "label": "WALL",
          "kind": "property",
          "documentation": "WALL: ZoneOffsetTransitionRule.TimeDefinition",
          "insertText": "WALL"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): ZoneOffsetTransitionRule.TimeDefinition",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): ZoneOffsetTransitionRule.TimeDefinition[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "createDateTime",
          "kind": "method",
          "documentation": "createDateTime(LocalDateTime a, ZoneOffset b, ZoneOffset c): LocalDateTime",
          "insertText": "createDateTime"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ZoneRules",
      "kind": "class",
      "documentation": "Class: ZoneRules",
      "insertText": "ZoneRules",
      "properties": [
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(ZoneOffset a, ZoneOffset b, List c, List d, List e | ZoneOffset a): ZoneRules",
          "insertText": "of"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDaylightSavings",
          "kind": "method",
          "documentation": "getDaylightSavings(Instant a): Duration",
          "insertText": "getDaylightSavings"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(Instant a): ZoneOffset",
          "insertText": "getOffset"
        },
        {
          "label": "getStandardOffset",
          "kind": "method",
          "documentation": "getStandardOffset(Instant a): ZoneOffset",
          "insertText": "getStandardOffset"
        },
        {
          "label": "getTransition",
          "kind": "method",
          "documentation": "getTransition(LocalDateTime a): ZoneOffsetTransition",
          "insertText": "getTransition"
        },
        {
          "label": "getTransitionRules",
          "kind": "method",
          "documentation": "getTransitionRules(): List",
          "insertText": "getTransitionRules"
        },
        {
          "label": "getTransitions",
          "kind": "method",
          "documentation": "getTransitions(): List",
          "insertText": "getTransitions"
        },
        {
          "label": "getValidOffsets",
          "kind": "method",
          "documentation": "getValidOffsets(LocalDateTime a): List",
          "insertText": "getValidOffsets"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isDaylightSavings",
          "kind": "method",
          "documentation": "isDaylightSavings(Instant a): boolean",
          "insertText": "isDaylightSavings"
        },
        {
          "label": "isFixedOffset",
          "kind": "method",
          "documentation": "isFixedOffset(): boolean",
          "insertText": "isFixedOffset"
        },
        {
          "label": "isValidOffset",
          "kind": "method",
          "documentation": "isValidOffset(LocalDateTime a, ZoneOffset b): boolean",
          "insertText": "isValidOffset"
        },
        {
          "label": "nextTransition",
          "kind": "method",
          "documentation": "nextTransition(Instant a): ZoneOffsetTransition",
          "insertText": "nextTransition"
        },
        {
          "label": "previousTransition",
          "kind": "method",
          "documentation": "previousTransition(Instant a): ZoneOffsetTransition",
          "insertText": "previousTransition"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ZoneRulesException",
      "kind": "class",
      "documentation": "Class: ZoneRulesException",
      "insertText": "ZoneRulesException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ZoneRulesException",
        "kind": "constructor",
        "documentation": "Constructor: ZoneRulesException",
        "insertText": "ZoneRulesException"
      }
    },
    {
      "label": "ZoneRulesProvider",
      "kind": "class",
      "documentation": "Class: ZoneRulesProvider",
      "insertText": "ZoneRulesProvider",
      "properties": [
        {
          "label": "getAvailableZoneIds",
          "kind": "method",
          "documentation": "getAvailableZoneIds(): Set",
          "insertText": "getAvailableZoneIds"
        },
        {
          "label": "getRules",
          "kind": "method",
          "documentation": "getRules(String a, boolean b): ZoneRules",
          "insertText": "getRules"
        },
        {
          "label": "getVersions",
          "kind": "method",
          "documentation": "getVersions(String a): NavigableMap",
          "insertText": "getVersions"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "AbstractCollection",
      "kind": "class",
      "documentation": "Class: AbstractCollection",
      "insertText": "AbstractCollection",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "AbstractList",
      "kind": "class",
      "documentation": "Class: AbstractList",
      "insertText": "AbstractList",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "AbstractMap",
      "kind": "class",
      "documentation": "Class: AbstractMap",
      "insertText": "AbstractMap",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ]
    },
    {
      "label": "SimpleEntry",
      "kind": "class",
      "documentation": "Class: SimpleEntry",
      "insertText": "SimpleEntry",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getKey",
          "kind": "method",
          "documentation": "getKey(): def",
          "insertText": "getKey"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): def",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setValue",
          "kind": "method",
          "documentation": "setValue(def a): def",
          "insertText": "setValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "SimpleEntry",
        "kind": "constructor",
        "documentation": "Constructor: SimpleEntry",
        "insertText": "SimpleEntry"
      }
    },
    {
      "label": "SimpleImmutableEntry",
      "kind": "class",
      "documentation": "Class: SimpleImmutableEntry",
      "insertText": "SimpleImmutableEntry",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getKey",
          "kind": "method",
          "documentation": "getKey(): def",
          "insertText": "getKey"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): def",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setValue",
          "kind": "method",
          "documentation": "setValue(def a): def",
          "insertText": "setValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "SimpleImmutableEntry",
        "kind": "constructor",
        "documentation": "Constructor: SimpleImmutableEntry",
        "insertText": "SimpleImmutableEntry"
      }
    },
    {
      "label": "AbstractQueue",
      "kind": "class",
      "documentation": "Class: AbstractQueue",
      "insertText": "AbstractQueue",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "element",
          "kind": "method",
          "documentation": "element(): def",
          "insertText": "element"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "offer",
          "kind": "method",
          "documentation": "offer(def a): boolean",
          "insertText": "offer"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "poll",
          "kind": "method",
          "documentation": "poll(): def",
          "insertText": "poll"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "AbstractSequentialList",
      "kind": "class",
      "documentation": "Class: AbstractSequentialList",
      "insertText": "AbstractSequentialList",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "AbstractSet",
      "kind": "class",
      "documentation": "Class: AbstractSet",
      "insertText": "AbstractSet",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ArrayDeque",
      "kind": "class",
      "documentation": "Class: ArrayDeque",
      "insertText": "ArrayDeque",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "addFirst",
          "kind": "method",
          "documentation": "addFirst(def a): void",
          "insertText": "addFirst"
        },
        {
          "label": "addLast",
          "kind": "method",
          "documentation": "addLast(def a): void",
          "insertText": "addLast"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): ArrayDeque",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "descendingIterator",
          "kind": "method",
          "documentation": "descendingIterator(): Iterator",
          "insertText": "descendingIterator"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "element",
          "kind": "method",
          "documentation": "element(): def",
          "insertText": "element"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "getFirst",
          "kind": "method",
          "documentation": "getFirst(): def",
          "insertText": "getFirst"
        },
        {
          "label": "getLast",
          "kind": "method",
          "documentation": "getLast(): def",
          "insertText": "getLast"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "offer",
          "kind": "method",
          "documentation": "offer(def a): boolean",
          "insertText": "offer"
        },
        {
          "label": "offerFirst",
          "kind": "method",
          "documentation": "offerFirst(def a): boolean",
          "insertText": "offerFirst"
        },
        {
          "label": "offerLast",
          "kind": "method",
          "documentation": "offerLast(def a): boolean",
          "insertText": "offerLast"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "peekFirst",
          "kind": "method",
          "documentation": "peekFirst(): def",
          "insertText": "peekFirst"
        },
        {
          "label": "peekLast",
          "kind": "method",
          "documentation": "peekLast(): def",
          "insertText": "peekLast"
        },
        {
          "label": "poll",
          "kind": "method",
          "documentation": "poll(): def",
          "insertText": "poll"
        },
        {
          "label": "pollFirst",
          "kind": "method",
          "documentation": "pollFirst(): def",
          "insertText": "pollFirst"
        },
        {
          "label": "pollLast",
          "kind": "method",
          "documentation": "pollLast(): def",
          "insertText": "pollLast"
        },
        {
          "label": "pop",
          "kind": "method",
          "documentation": "pop(): def",
          "insertText": "pop"
        },
        {
          "label": "push",
          "kind": "method",
          "documentation": "push(def a): void",
          "insertText": "push"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeFirst",
          "kind": "method",
          "documentation": "removeFirst(): def",
          "insertText": "removeFirst"
        },
        {
          "label": "removeFirstOccurrence",
          "kind": "method",
          "documentation": "removeFirstOccurrence(def a): boolean",
          "insertText": "removeFirstOccurrence"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "removeLast",
          "kind": "method",
          "documentation": "removeLast(): def",
          "insertText": "removeLast"
        },
        {
          "label": "removeLastOccurrence",
          "kind": "method",
          "documentation": "removeLastOccurrence(def a): boolean",
          "insertText": "removeLastOccurrence"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ArrayDeque",
        "kind": "constructor",
        "documentation": "Constructor: ArrayDeque",
        "insertText": "ArrayDeque"
      }
    },
    {
      "label": "ArrayList",
      "kind": "class",
      "documentation": "Class: ArrayList",
      "insertText": "ArrayList",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "trimToSize",
          "kind": "method",
          "documentation": "trimToSize(): void",
          "insertText": "trimToSize"
        }
      ],
      "constructorDefinition": {
        "label": "ArrayList",
        "kind": "constructor",
        "documentation": "Constructor: ArrayList",
        "insertText": "ArrayList"
      }
    },
    {
      "label": "Arrays",
      "kind": "class",
      "documentation": "Class: Arrays",
      "insertText": "Arrays",
      "properties": [
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(Object[] a): List",
          "insertText": "asList"
        },
        {
          "label": "deepEquals",
          "kind": "method",
          "documentation": "deepEquals(Object[] a, Object[] b): boolean",
          "insertText": "deepEquals"
        },
        {
          "label": "deepHashCode",
          "kind": "method",
          "documentation": "deepHashCode(Object[] a): int",
          "insertText": "deepHashCode"
        },
        {
          "label": "deepToString",
          "kind": "method",
          "documentation": "deepToString(Object[] a): String",
          "insertText": "deepToString"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Base64",
      "kind": "class",
      "documentation": "Class: Base64",
      "insertText": "Base64",
      "properties": [
        {
          "label": "getDecoder",
          "kind": "method",
          "documentation": "getDecoder(): Base64.Decoder",
          "insertText": "getDecoder"
        },
        {
          "label": "getEncoder",
          "kind": "method",
          "documentation": "getEncoder(): Base64.Encoder",
          "insertText": "getEncoder"
        },
        {
          "label": "getMimeDecoder",
          "kind": "method",
          "documentation": "getMimeDecoder(): Base64.Decoder",
          "insertText": "getMimeDecoder"
        },
        {
          "label": "getMimeEncoder",
          "kind": "method",
          "documentation": "getMimeEncoder(int a, byte[] b): Base64.Encoder",
          "insertText": "getMimeEncoder"
        },
        {
          "label": "getUrlDecoder",
          "kind": "method",
          "documentation": "getUrlDecoder(): Base64.Decoder",
          "insertText": "getUrlDecoder"
        },
        {
          "label": "getUrlEncoder",
          "kind": "method",
          "documentation": "getUrlEncoder(): Base64.Encoder",
          "insertText": "getUrlEncoder"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Decoder",
      "kind": "class",
      "documentation": "Class: Decoder",
      "insertText": "Decoder",
      "properties": [
        {
          "label": "decode",
          "kind": "method",
          "documentation": "decode(byte[] a, byte[] b | String a): int | byte[]",
          "insertText": "decode"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Encoder",
      "kind": "class",
      "documentation": "Class: Encoder",
      "insertText": "Encoder",
      "properties": [
        {
          "label": "encode",
          "kind": "method",
          "documentation": "encode(byte[] a, byte[] b): int",
          "insertText": "encode"
        },
        {
          "label": "encodeToString",
          "kind": "method",
          "documentation": "encodeToString(byte[] a): String",
          "insertText": "encodeToString"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "withoutPadding",
          "kind": "method",
          "documentation": "withoutPadding(): Base64.Encoder",
          "insertText": "withoutPadding"
        }
      ]
    },
    {
      "label": "BitSet",
      "kind": "class",
      "documentation": "Class: BitSet",
      "insertText": "BitSet",
      "properties": [
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(long[] a): BitSet",
          "insertText": "valueOf"
        },
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(BitSet a): void",
          "insertText": "and"
        },
        {
          "label": "andNot",
          "kind": "method",
          "documentation": "andNot(BitSet a): void",
          "insertText": "andNot"
        },
        {
          "label": "cardinality",
          "kind": "method",
          "documentation": "cardinality(): int",
          "insertText": "cardinality"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(int a, int b | int a): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "flip",
          "kind": "method",
          "documentation": "flip(int a, int b | int a): void",
          "insertText": "flip"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "intersects",
          "kind": "method",
          "documentation": "intersects(BitSet a): boolean",
          "insertText": "intersects"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "nextClearBit",
          "kind": "method",
          "documentation": "nextClearBit(int a): int",
          "insertText": "nextClearBit"
        },
        {
          "label": "nextSetBit",
          "kind": "method",
          "documentation": "nextSetBit(int a): int",
          "insertText": "nextSetBit"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(BitSet a): void",
          "insertText": "or"
        },
        {
          "label": "previousClearBit",
          "kind": "method",
          "documentation": "previousClearBit(int a): int",
          "insertText": "previousClearBit"
        },
        {
          "label": "previousSetBit",
          "kind": "method",
          "documentation": "previousSetBit(int a): int",
          "insertText": "previousSetBit"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, int b, boolean c | int a, int b | int a): void",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toByteArray",
          "kind": "method",
          "documentation": "toByteArray(): byte[]",
          "insertText": "toByteArray"
        },
        {
          "label": "toLongArray",
          "kind": "method",
          "documentation": "toLongArray(): long[]",
          "insertText": "toLongArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "xor",
          "kind": "method",
          "documentation": "xor(BitSet a): void",
          "insertText": "xor"
        }
      ],
      "constructorDefinition": {
        "label": "BitSet",
        "kind": "constructor",
        "documentation": "Constructor: BitSet",
        "insertText": "BitSet"
      }
    },
    {
      "label": "Calendar",
      "kind": "class",
      "documentation": "Class: Calendar",
      "insertText": "Calendar",
      "properties": [
        {
          "label": "ALL_STYLES",
          "kind": "property",
          "documentation": "ALL_STYLES: int",
          "insertText": "ALL_STYLES"
        },
        {
          "label": "AM",
          "kind": "property",
          "documentation": "AM: int",
          "insertText": "AM"
        },
        {
          "label": "AM_PM",
          "kind": "property",
          "documentation": "AM_PM: int",
          "insertText": "AM_PM"
        },
        {
          "label": "APRIL",
          "kind": "property",
          "documentation": "APRIL: int",
          "insertText": "APRIL"
        },
        {
          "label": "AUGUST",
          "kind": "property",
          "documentation": "AUGUST: int",
          "insertText": "AUGUST"
        },
        {
          "label": "DATE",
          "kind": "property",
          "documentation": "DATE: int",
          "insertText": "DATE"
        },
        {
          "label": "DAY_OF_MONTH",
          "kind": "property",
          "documentation": "DAY_OF_MONTH: int",
          "insertText": "DAY_OF_MONTH"
        },
        {
          "label": "DAY_OF_WEEK",
          "kind": "property",
          "documentation": "DAY_OF_WEEK: int",
          "insertText": "DAY_OF_WEEK"
        },
        {
          "label": "DAY_OF_WEEK_IN_MONTH",
          "kind": "property",
          "documentation": "DAY_OF_WEEK_IN_MONTH: int",
          "insertText": "DAY_OF_WEEK_IN_MONTH"
        },
        {
          "label": "DAY_OF_YEAR",
          "kind": "property",
          "documentation": "DAY_OF_YEAR: int",
          "insertText": "DAY_OF_YEAR"
        },
        {
          "label": "DECEMBER",
          "kind": "property",
          "documentation": "DECEMBER: int",
          "insertText": "DECEMBER"
        },
        {
          "label": "DST_OFFSET",
          "kind": "property",
          "documentation": "DST_OFFSET: int",
          "insertText": "DST_OFFSET"
        },
        {
          "label": "ERA",
          "kind": "property",
          "documentation": "ERA: int",
          "insertText": "ERA"
        },
        {
          "label": "FEBRUARY",
          "kind": "property",
          "documentation": "FEBRUARY: int",
          "insertText": "FEBRUARY"
        },
        {
          "label": "FIELD_COUNT",
          "kind": "property",
          "documentation": "FIELD_COUNT: int",
          "insertText": "FIELD_COUNT"
        },
        {
          "label": "FRIDAY",
          "kind": "property",
          "documentation": "FRIDAY: int",
          "insertText": "FRIDAY"
        },
        {
          "label": "HOUR",
          "kind": "property",
          "documentation": "HOUR: int",
          "insertText": "HOUR"
        },
        {
          "label": "HOUR_OF_DAY",
          "kind": "property",
          "documentation": "HOUR_OF_DAY: int",
          "insertText": "HOUR_OF_DAY"
        },
        {
          "label": "JANUARY",
          "kind": "property",
          "documentation": "JANUARY: int",
          "insertText": "JANUARY"
        },
        {
          "label": "JULY",
          "kind": "property",
          "documentation": "JULY: int",
          "insertText": "JULY"
        },
        {
          "label": "JUNE",
          "kind": "property",
          "documentation": "JUNE: int",
          "insertText": "JUNE"
        },
        {
          "label": "LONG",
          "kind": "property",
          "documentation": "LONG: int",
          "insertText": "LONG"
        },
        {
          "label": "LONG_FORMAT",
          "kind": "property",
          "documentation": "LONG_FORMAT: int",
          "insertText": "LONG_FORMAT"
        },
        {
          "label": "LONG_STANDALONE",
          "kind": "property",
          "documentation": "LONG_STANDALONE: int",
          "insertText": "LONG_STANDALONE"
        },
        {
          "label": "MARCH",
          "kind": "property",
          "documentation": "MARCH: int",
          "insertText": "MARCH"
        },
        {
          "label": "MAY",
          "kind": "property",
          "documentation": "MAY: int",
          "insertText": "MAY"
        },
        {
          "label": "MILLISECOND",
          "kind": "property",
          "documentation": "MILLISECOND: int",
          "insertText": "MILLISECOND"
        },
        {
          "label": "MINUTE",
          "kind": "property",
          "documentation": "MINUTE: int",
          "insertText": "MINUTE"
        },
        {
          "label": "MONDAY",
          "kind": "property",
          "documentation": "MONDAY: int",
          "insertText": "MONDAY"
        },
        {
          "label": "MONTH",
          "kind": "property",
          "documentation": "MONTH: int",
          "insertText": "MONTH"
        },
        {
          "label": "NARROW_FORMAT",
          "kind": "property",
          "documentation": "NARROW_FORMAT: int",
          "insertText": "NARROW_FORMAT"
        },
        {
          "label": "NARROW_STANDALONE",
          "kind": "property",
          "documentation": "NARROW_STANDALONE: int",
          "insertText": "NARROW_STANDALONE"
        },
        {
          "label": "NOVEMBER",
          "kind": "property",
          "documentation": "NOVEMBER: int",
          "insertText": "NOVEMBER"
        },
        {
          "label": "OCTOBER",
          "kind": "property",
          "documentation": "OCTOBER: int",
          "insertText": "OCTOBER"
        },
        {
          "label": "PM",
          "kind": "property",
          "documentation": "PM: int",
          "insertText": "PM"
        },
        {
          "label": "SATURDAY",
          "kind": "property",
          "documentation": "SATURDAY: int",
          "insertText": "SATURDAY"
        },
        {
          "label": "SECOND",
          "kind": "property",
          "documentation": "SECOND: int",
          "insertText": "SECOND"
        },
        {
          "label": "SEPTEMBER",
          "kind": "property",
          "documentation": "SEPTEMBER: int",
          "insertText": "SEPTEMBER"
        },
        {
          "label": "SHORT",
          "kind": "property",
          "documentation": "SHORT: int",
          "insertText": "SHORT"
        },
        {
          "label": "SHORT_FORMAT",
          "kind": "property",
          "documentation": "SHORT_FORMAT: int",
          "insertText": "SHORT_FORMAT"
        },
        {
          "label": "SHORT_STANDALONE",
          "kind": "property",
          "documentation": "SHORT_STANDALONE: int",
          "insertText": "SHORT_STANDALONE"
        },
        {
          "label": "SUNDAY",
          "kind": "property",
          "documentation": "SUNDAY: int",
          "insertText": "SUNDAY"
        },
        {
          "label": "THURSDAY",
          "kind": "property",
          "documentation": "THURSDAY: int",
          "insertText": "THURSDAY"
        },
        {
          "label": "TUESDAY",
          "kind": "property",
          "documentation": "TUESDAY: int",
          "insertText": "TUESDAY"
        },
        {
          "label": "UNDECIMBER",
          "kind": "property",
          "documentation": "UNDECIMBER: int",
          "insertText": "UNDECIMBER"
        },
        {
          "label": "WEDNESDAY",
          "kind": "property",
          "documentation": "WEDNESDAY: int",
          "insertText": "WEDNESDAY"
        },
        {
          "label": "WEEK_OF_MONTH",
          "kind": "property",
          "documentation": "WEEK_OF_MONTH: int",
          "insertText": "WEEK_OF_MONTH"
        },
        {
          "label": "WEEK_OF_YEAR",
          "kind": "property",
          "documentation": "WEEK_OF_YEAR: int",
          "insertText": "WEEK_OF_YEAR"
        },
        {
          "label": "YEAR",
          "kind": "property",
          "documentation": "YEAR: int",
          "insertText": "YEAR"
        },
        {
          "label": "ZONE_OFFSET",
          "kind": "property",
          "documentation": "ZONE_OFFSET: int",
          "insertText": "ZONE_OFFSET"
        },
        {
          "label": "getAvailableCalendarTypes",
          "kind": "method",
          "documentation": "getAvailableCalendarTypes(): Set",
          "insertText": "getAvailableCalendarTypes"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(TimeZone a, Locale b | TimeZone a): Calendar",
          "insertText": "getInstance"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, int b): void",
          "insertText": "add"
        },
        {
          "label": "after",
          "kind": "method",
          "documentation": "after(Object a): boolean",
          "insertText": "after"
        },
        {
          "label": "before",
          "kind": "method",
          "documentation": "before(Object a): boolean",
          "insertText": "before"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(int a): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Calendar a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): int",
          "insertText": "get"
        },
        {
          "label": "getActualMaximum",
          "kind": "method",
          "documentation": "getActualMaximum(int a): int",
          "insertText": "getActualMaximum"
        },
        {
          "label": "getActualMinimum",
          "kind": "method",
          "documentation": "getActualMinimum(int a): int",
          "insertText": "getActualMinimum"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(int a, int b, Locale c): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getDisplayNames",
          "kind": "method",
          "documentation": "getDisplayNames(int a, int b, Locale c): Map",
          "insertText": "getDisplayNames"
        },
        {
          "label": "getFirstDayOfWeek",
          "kind": "method",
          "documentation": "getFirstDayOfWeek(): int",
          "insertText": "getFirstDayOfWeek"
        },
        {
          "label": "getGreatestMinimum",
          "kind": "method",
          "documentation": "getGreatestMinimum(int a): int",
          "insertText": "getGreatestMinimum"
        },
        {
          "label": "getLeastMaximum",
          "kind": "method",
          "documentation": "getLeastMaximum(int a): int",
          "insertText": "getLeastMaximum"
        },
        {
          "label": "getMaximum",
          "kind": "method",
          "documentation": "getMaximum(int a): int",
          "insertText": "getMaximum"
        },
        {
          "label": "getMinimalDaysInFirstWeek",
          "kind": "method",
          "documentation": "getMinimalDaysInFirstWeek(): int",
          "insertText": "getMinimalDaysInFirstWeek"
        },
        {
          "label": "getMinimum",
          "kind": "method",
          "documentation": "getMinimum(int a): int",
          "insertText": "getMinimum"
        },
        {
          "label": "getTime",
          "kind": "method",
          "documentation": "getTime(): Date",
          "insertText": "getTime"
        },
        {
          "label": "getTimeInMillis",
          "kind": "method",
          "documentation": "getTimeInMillis(): long",
          "insertText": "getTimeInMillis"
        },
        {
          "label": "getTimeZone",
          "kind": "method",
          "documentation": "getTimeZone(): TimeZone",
          "insertText": "getTimeZone"
        },
        {
          "label": "getWeekYear",
          "kind": "method",
          "documentation": "getWeekYear(): int",
          "insertText": "getWeekYear"
        },
        {
          "label": "getWeeksInWeekYear",
          "kind": "method",
          "documentation": "getWeeksInWeekYear(): int",
          "insertText": "getWeeksInWeekYear"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLenient",
          "kind": "method",
          "documentation": "isLenient(): boolean",
          "insertText": "isLenient"
        },
        {
          "label": "isSet",
          "kind": "method",
          "documentation": "isSet(int a): boolean",
          "insertText": "isSet"
        },
        {
          "label": "isWeekDateSupported",
          "kind": "method",
          "documentation": "isWeekDateSupported(): boolean",
          "insertText": "isWeekDateSupported"
        },
        {
          "label": "roll",
          "kind": "method",
          "documentation": "roll(int a, int b): void",
          "insertText": "roll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void",
          "insertText": "set"
        },
        {
          "label": "setFirstDayOfWeek",
          "kind": "method",
          "documentation": "setFirstDayOfWeek(int a): void",
          "insertText": "setFirstDayOfWeek"
        },
        {
          "label": "setLenient",
          "kind": "method",
          "documentation": "setLenient(boolean a): void",
          "insertText": "setLenient"
        },
        {
          "label": "setMinimalDaysInFirstWeek",
          "kind": "method",
          "documentation": "setMinimalDaysInFirstWeek(int a): void",
          "insertText": "setMinimalDaysInFirstWeek"
        },
        {
          "label": "setTime",
          "kind": "method",
          "documentation": "setTime(Date a): void",
          "insertText": "setTime"
        },
        {
          "label": "setTimeInMillis",
          "kind": "method",
          "documentation": "setTimeInMillis(long a): void",
          "insertText": "setTimeInMillis"
        },
        {
          "label": "setTimeZone",
          "kind": "method",
          "documentation": "setTimeZone(TimeZone a): void",
          "insertText": "setTimeZone"
        },
        {
          "label": "setWeekDate",
          "kind": "method",
          "documentation": "setWeekDate(int a, int b, int c): void",
          "insertText": "setWeekDate"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Builder",
      "kind": "class",
      "documentation": "Class: Builder",
      "insertText": "Builder",
      "properties": [
        {
          "label": "build",
          "kind": "method",
          "documentation": "build(): Calendar",
          "insertText": "build"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, int b): Calendar.Builder",
          "insertText": "set"
        },
        {
          "label": "setCalendarType",
          "kind": "method",
          "documentation": "setCalendarType(String a): Calendar.Builder",
          "insertText": "setCalendarType"
        },
        {
          "label": "setDate",
          "kind": "method",
          "documentation": "setDate(int a, int b, int c): Calendar.Builder",
          "insertText": "setDate"
        },
        {
          "label": "setFields",
          "kind": "method",
          "documentation": "setFields(int[] a): Calendar.Builder",
          "insertText": "setFields"
        },
        {
          "label": "setInstant",
          "kind": "method",
          "documentation": "setInstant(long a): Calendar.Builder",
          "insertText": "setInstant"
        },
        {
          "label": "setLenient",
          "kind": "method",
          "documentation": "setLenient(boolean a): Calendar.Builder",
          "insertText": "setLenient"
        },
        {
          "label": "setLocale",
          "kind": "method",
          "documentation": "setLocale(Locale a): Calendar.Builder",
          "insertText": "setLocale"
        },
        {
          "label": "setTimeOfDay",
          "kind": "method",
          "documentation": "setTimeOfDay(int a, int b, int c, int d | int a, int b, int c): Calendar.Builder",
          "insertText": "setTimeOfDay"
        },
        {
          "label": "setTimeZone",
          "kind": "method",
          "documentation": "setTimeZone(TimeZone a): Calendar.Builder",
          "insertText": "setTimeZone"
        },
        {
          "label": "setWeekDate",
          "kind": "method",
          "documentation": "setWeekDate(int a, int b, int c): Calendar.Builder",
          "insertText": "setWeekDate"
        },
        {
          "label": "setWeekDefinition",
          "kind": "method",
          "documentation": "setWeekDefinition(int a, int b): Calendar.Builder",
          "insertText": "setWeekDefinition"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Builder",
        "kind": "constructor",
        "documentation": "Constructor: Builder",
        "insertText": "Builder"
      }
    },
    {
      "label": "Collection",
      "kind": "class",
      "documentation": "Class: Collection",
      "insertText": "Collection",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Collections",
      "kind": "class",
      "documentation": "Class: Collections",
      "insertText": "Collections",
      "properties": [
        {
          "label": "EMPTY_LIST",
          "kind": "property",
          "documentation": "EMPTY_LIST: List",
          "insertText": "EMPTY_LIST"
        },
        {
          "label": "EMPTY_MAP",
          "kind": "property",
          "documentation": "EMPTY_MAP: Map",
          "insertText": "EMPTY_MAP"
        },
        {
          "label": "EMPTY_SET",
          "kind": "property",
          "documentation": "EMPTY_SET: Set",
          "insertText": "EMPTY_SET"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a, def[] b): boolean",
          "insertText": "addAll"
        },
        {
          "label": "asLifoQueue",
          "kind": "method",
          "documentation": "asLifoQueue(Deque a): Queue",
          "insertText": "asLifoQueue"
        },
        {
          "label": "binarySearch",
          "kind": "method",
          "documentation": "binarySearch(List a, def b, Comparator c | List a, def b): int",
          "insertText": "binarySearch"
        },
        {
          "label": "copy",
          "kind": "method",
          "documentation": "copy(List a, List b): void",
          "insertText": "copy"
        },
        {
          "label": "disjoint",
          "kind": "method",
          "documentation": "disjoint(Collection a, Collection b): boolean",
          "insertText": "disjoint"
        },
        {
          "label": "emptyEnumeration",
          "kind": "method",
          "documentation": "emptyEnumeration(): Enumeration",
          "insertText": "emptyEnumeration"
        },
        {
          "label": "emptyIterator",
          "kind": "method",
          "documentation": "emptyIterator(): Iterator",
          "insertText": "emptyIterator"
        },
        {
          "label": "emptyList",
          "kind": "method",
          "documentation": "emptyList(): List",
          "insertText": "emptyList"
        },
        {
          "label": "emptyListIterator",
          "kind": "method",
          "documentation": "emptyListIterator(): ListIterator",
          "insertText": "emptyListIterator"
        },
        {
          "label": "emptyMap",
          "kind": "method",
          "documentation": "emptyMap(): Map",
          "insertText": "emptyMap"
        },
        {
          "label": "emptyNavigableMap",
          "kind": "method",
          "documentation": "emptyNavigableMap(): NavigableMap",
          "insertText": "emptyNavigableMap"
        },
        {
          "label": "emptyNavigableSet",
          "kind": "method",
          "documentation": "emptyNavigableSet(): NavigableSet",
          "insertText": "emptyNavigableSet"
        },
        {
          "label": "emptySet",
          "kind": "method",
          "documentation": "emptySet(): Set",
          "insertText": "emptySet"
        },
        {
          "label": "emptySortedMap",
          "kind": "method",
          "documentation": "emptySortedMap(): SortedMap",
          "insertText": "emptySortedMap"
        },
        {
          "label": "emptySortedSet",
          "kind": "method",
          "documentation": "emptySortedSet(): SortedSet",
          "insertText": "emptySortedSet"
        },
        {
          "label": "enumeration",
          "kind": "method",
          "documentation": "enumeration(Collection a): Enumeration",
          "insertText": "enumeration"
        },
        {
          "label": "fill",
          "kind": "method",
          "documentation": "fill(List a, def b): void",
          "insertText": "fill"
        },
        {
          "label": "frequency",
          "kind": "method",
          "documentation": "frequency(Collection a, def b): int",
          "insertText": "frequency"
        },
        {
          "label": "indexOfSubList",
          "kind": "method",
          "documentation": "indexOfSubList(List a, List b): int",
          "insertText": "indexOfSubList"
        },
        {
          "label": "lastIndexOfSubList",
          "kind": "method",
          "documentation": "lastIndexOfSubList(List a, List b): int",
          "insertText": "lastIndexOfSubList"
        },
        {
          "label": "list",
          "kind": "method",
          "documentation": "list(Enumeration a): ArrayList",
          "insertText": "list"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(Collection a, Comparator b | Collection a): def",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(Collection a, Comparator b | Collection a): def",
          "insertText": "min"
        },
        {
          "label": "nCopies",
          "kind": "method",
          "documentation": "nCopies(int a, def b): List",
          "insertText": "nCopies"
        },
        {
          "label": "newSetFromMap",
          "kind": "method",
          "documentation": "newSetFromMap(Map a): Set",
          "insertText": "newSetFromMap"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(List a, def b, def c): boolean",
          "insertText": "replaceAll"
        },
        {
          "label": "reverse",
          "kind": "method",
          "documentation": "reverse(List a): void",
          "insertText": "reverse"
        },
        {
          "label": "reverseOrder",
          "kind": "method",
          "documentation": "reverseOrder(Comparator a): Comparator",
          "insertText": "reverseOrder"
        },
        {
          "label": "rotate",
          "kind": "method",
          "documentation": "rotate(List a, int b): void",
          "insertText": "rotate"
        },
        {
          "label": "shuffle",
          "kind": "method",
          "documentation": "shuffle(List a, Random b | List a): void",
          "insertText": "shuffle"
        },
        {
          "label": "singleton",
          "kind": "method",
          "documentation": "singleton(def a): Set",
          "insertText": "singleton"
        },
        {
          "label": "singletonList",
          "kind": "method",
          "documentation": "singletonList(def a): List",
          "insertText": "singletonList"
        },
        {
          "label": "singletonMap",
          "kind": "method",
          "documentation": "singletonMap(def a, def b): Map",
          "insertText": "singletonMap"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(List a, Comparator b | List a): void",
          "insertText": "sort"
        },
        {
          "label": "swap",
          "kind": "method",
          "documentation": "swap(List a, int b, int c): void",
          "insertText": "swap"
        },
        {
          "label": "unmodifiableCollection",
          "kind": "method",
          "documentation": "unmodifiableCollection(Collection a): Collection",
          "insertText": "unmodifiableCollection"
        },
        {
          "label": "unmodifiableList",
          "kind": "method",
          "documentation": "unmodifiableList(List a): List",
          "insertText": "unmodifiableList"
        },
        {
          "label": "unmodifiableMap",
          "kind": "method",
          "documentation": "unmodifiableMap(Map a): Map",
          "insertText": "unmodifiableMap"
        },
        {
          "label": "unmodifiableNavigableMap",
          "kind": "method",
          "documentation": "unmodifiableNavigableMap(NavigableMap a): NavigableMap",
          "insertText": "unmodifiableNavigableMap"
        },
        {
          "label": "unmodifiableNavigableSet",
          "kind": "method",
          "documentation": "unmodifiableNavigableSet(NavigableSet a): NavigableSet",
          "insertText": "unmodifiableNavigableSet"
        },
        {
          "label": "unmodifiableSet",
          "kind": "method",
          "documentation": "unmodifiableSet(Set a): Set",
          "insertText": "unmodifiableSet"
        },
        {
          "label": "unmodifiableSortedMap",
          "kind": "method",
          "documentation": "unmodifiableSortedMap(SortedMap a): SortedMap",
          "insertText": "unmodifiableSortedMap"
        },
        {
          "label": "unmodifiableSortedSet",
          "kind": "method",
          "documentation": "unmodifiableSortedSet(SortedSet a): SortedSet",
          "insertText": "unmodifiableSortedSet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Comparator",
      "kind": "class",
      "documentation": "Class: Comparator",
      "insertText": "Comparator",
      "properties": [
        {
          "label": "comparing",
          "kind": "method",
          "documentation": "comparing(Function a, Comparator b | Function a): Comparator",
          "insertText": "comparing"
        },
        {
          "label": "comparingDouble",
          "kind": "method",
          "documentation": "comparingDouble(ToDoubleFunction a): Comparator",
          "insertText": "comparingDouble"
        },
        {
          "label": "comparingInt",
          "kind": "method",
          "documentation": "comparingInt(ToIntFunction a): Comparator",
          "insertText": "comparingInt"
        },
        {
          "label": "comparingLong",
          "kind": "method",
          "documentation": "comparingLong(ToLongFunction a): Comparator",
          "insertText": "comparingLong"
        },
        {
          "label": "naturalOrder",
          "kind": "method",
          "documentation": "naturalOrder(): Comparator",
          "insertText": "naturalOrder"
        },
        {
          "label": "nullsFirst",
          "kind": "method",
          "documentation": "nullsFirst(Comparator a): Comparator",
          "insertText": "nullsFirst"
        },
        {
          "label": "nullsLast",
          "kind": "method",
          "documentation": "nullsLast(Comparator a): Comparator",
          "insertText": "nullsLast"
        },
        {
          "label": "reverseOrder",
          "kind": "method",
          "documentation": "reverseOrder(): Comparator",
          "insertText": "reverseOrder"
        },
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(def a, def b): int",
          "insertText": "compare"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "reversed",
          "kind": "method",
          "documentation": "reversed(): Comparator",
          "insertText": "reversed"
        },
        {
          "label": "thenComparing",
          "kind": "method",
          "documentation": "thenComparing(Function a, Comparator b | Comparator a): Comparator",
          "insertText": "thenComparing"
        },
        {
          "label": "thenComparingDouble",
          "kind": "method",
          "documentation": "thenComparingDouble(ToDoubleFunction a): Comparator",
          "insertText": "thenComparingDouble"
        },
        {
          "label": "thenComparingInt",
          "kind": "method",
          "documentation": "thenComparingInt(ToIntFunction a): Comparator",
          "insertText": "thenComparingInt"
        },
        {
          "label": "thenComparingLong",
          "kind": "method",
          "documentation": "thenComparingLong(ToLongFunction a): Comparator",
          "insertText": "thenComparingLong"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ConcurrentModificationException",
      "kind": "class",
      "documentation": "Class: ConcurrentModificationException",
      "insertText": "ConcurrentModificationException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "ConcurrentModificationException",
        "kind": "constructor",
        "documentation": "Constructor: ConcurrentModificationException",
        "insertText": "ConcurrentModificationException"
      }
    },
    {
      "label": "Currency",
      "kind": "class",
      "documentation": "Class: Currency",
      "insertText": "Currency",
      "properties": [
        {
          "label": "getAvailableCurrencies",
          "kind": "method",
          "documentation": "getAvailableCurrencies(): Set",
          "insertText": "getAvailableCurrencies"
        },
        {
          "label": "getInstance",
          "kind": "method",
          "documentation": "getInstance(String a): Currency",
          "insertText": "getInstance"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCurrencyCode",
          "kind": "method",
          "documentation": "getCurrencyCode(): String",
          "insertText": "getCurrencyCode"
        },
        {
          "label": "getDefaultFractionDigits",
          "kind": "method",
          "documentation": "getDefaultFractionDigits(): int",
          "insertText": "getDefaultFractionDigits"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(Locale a): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getNumericCode",
          "kind": "method",
          "documentation": "getNumericCode(): int",
          "insertText": "getNumericCode"
        },
        {
          "label": "getSymbol",
          "kind": "method",
          "documentation": "getSymbol(Locale a): String",
          "insertText": "getSymbol"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Date",
      "kind": "class",
      "documentation": "Class: Date",
      "insertText": "Date",
      "properties": [
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(Instant a): Date",
          "insertText": "from"
        },
        {
          "label": "after",
          "kind": "method",
          "documentation": "after(Date a): boolean",
          "insertText": "after"
        },
        {
          "label": "before",
          "kind": "method",
          "documentation": "before(Date a): boolean",
          "insertText": "before"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Date a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getTime",
          "kind": "method",
          "documentation": "getTime(): long",
          "insertText": "getTime"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setTime",
          "kind": "method",
          "documentation": "setTime(long a): void",
          "insertText": "setTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Date",
        "kind": "constructor",
        "documentation": "Constructor: Date",
        "insertText": "Date"
      }
    },
    {
      "label": "Deque",
      "kind": "class",
      "documentation": "Class: Deque",
      "insertText": "Deque",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "addFirst",
          "kind": "method",
          "documentation": "addFirst(def a): void",
          "insertText": "addFirst"
        },
        {
          "label": "addLast",
          "kind": "method",
          "documentation": "addLast(def a): void",
          "insertText": "addLast"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "descendingIterator",
          "kind": "method",
          "documentation": "descendingIterator(): Iterator",
          "insertText": "descendingIterator"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "element",
          "kind": "method",
          "documentation": "element(): def",
          "insertText": "element"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "getFirst",
          "kind": "method",
          "documentation": "getFirst(): def",
          "insertText": "getFirst"
        },
        {
          "label": "getLast",
          "kind": "method",
          "documentation": "getLast(): def",
          "insertText": "getLast"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "offer",
          "kind": "method",
          "documentation": "offer(def a): boolean",
          "insertText": "offer"
        },
        {
          "label": "offerFirst",
          "kind": "method",
          "documentation": "offerFirst(def a): boolean",
          "insertText": "offerFirst"
        },
        {
          "label": "offerLast",
          "kind": "method",
          "documentation": "offerLast(def a): boolean",
          "insertText": "offerLast"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "peekFirst",
          "kind": "method",
          "documentation": "peekFirst(): def",
          "insertText": "peekFirst"
        },
        {
          "label": "peekLast",
          "kind": "method",
          "documentation": "peekLast(): def",
          "insertText": "peekLast"
        },
        {
          "label": "poll",
          "kind": "method",
          "documentation": "poll(): def",
          "insertText": "poll"
        },
        {
          "label": "pollFirst",
          "kind": "method",
          "documentation": "pollFirst(): def",
          "insertText": "pollFirst"
        },
        {
          "label": "pollLast",
          "kind": "method",
          "documentation": "pollLast(): def",
          "insertText": "pollLast"
        },
        {
          "label": "pop",
          "kind": "method",
          "documentation": "pop(): def",
          "insertText": "pop"
        },
        {
          "label": "push",
          "kind": "method",
          "documentation": "push(def a): void",
          "insertText": "push"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeFirst",
          "kind": "method",
          "documentation": "removeFirst(): def",
          "insertText": "removeFirst"
        },
        {
          "label": "removeFirstOccurrence",
          "kind": "method",
          "documentation": "removeFirstOccurrence(def a): boolean",
          "insertText": "removeFirstOccurrence"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "removeLast",
          "kind": "method",
          "documentation": "removeLast(): def",
          "insertText": "removeLast"
        },
        {
          "label": "removeLastOccurrence",
          "kind": "method",
          "documentation": "removeLastOccurrence(def a): boolean",
          "insertText": "removeLastOccurrence"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Dictionary",
      "kind": "class",
      "documentation": "Class: Dictionary",
      "insertText": "Dictionary",
      "properties": [
        {
          "label": "elements",
          "kind": "method",
          "documentation": "elements(): Enumeration",
          "insertText": "elements"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keys",
          "kind": "method",
          "documentation": "keys(): Enumeration",
          "insertText": "keys"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): def",
          "insertText": "remove"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleSummaryStatistics",
      "kind": "class",
      "documentation": "Class: DoubleSummaryStatistics",
      "insertText": "DoubleSummaryStatistics",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(double a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(DoubleConsumer a): DoubleConsumer",
          "insertText": "andThen"
        },
        {
          "label": "combine",
          "kind": "method",
          "documentation": "combine(DoubleSummaryStatistics a): void",
          "insertText": "combine"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAverage",
          "kind": "method",
          "documentation": "getAverage(): double",
          "insertText": "getAverage"
        },
        {
          "label": "getCount",
          "kind": "method",
          "documentation": "getCount(): long",
          "insertText": "getCount"
        },
        {
          "label": "getMax",
          "kind": "method",
          "documentation": "getMax(): double",
          "insertText": "getMax"
        },
        {
          "label": "getMin",
          "kind": "method",
          "documentation": "getMin(): double",
          "insertText": "getMin"
        },
        {
          "label": "getSum",
          "kind": "method",
          "documentation": "getSum(): double",
          "insertText": "getSum"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DoubleSummaryStatistics",
        "kind": "constructor",
        "documentation": "Constructor: DoubleSummaryStatistics",
        "insertText": "DoubleSummaryStatistics"
      }
    },
    {
      "label": "DuplicateFormatFlagsException",
      "kind": "class",
      "documentation": "Class: DuplicateFormatFlagsException",
      "insertText": "DuplicateFormatFlagsException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFlags",
          "kind": "method",
          "documentation": "getFlags(): String",
          "insertText": "getFlags"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "DuplicateFormatFlagsException",
        "kind": "constructor",
        "documentation": "Constructor: DuplicateFormatFlagsException",
        "insertText": "DuplicateFormatFlagsException"
      }
    },
    {
      "label": "EmptyStackException",
      "kind": "class",
      "documentation": "Class: EmptyStackException",
      "insertText": "EmptyStackException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "EmptyStackException",
        "kind": "constructor",
        "documentation": "Constructor: EmptyStackException",
        "insertText": "EmptyStackException"
      }
    },
    {
      "label": "Enumeration",
      "kind": "class",
      "documentation": "Class: Enumeration",
      "insertText": "Enumeration",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hasMoreElements",
          "kind": "method",
          "documentation": "hasMoreElements(): boolean",
          "insertText": "hasMoreElements"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "nextElement",
          "kind": "method",
          "documentation": "nextElement(): def",
          "insertText": "nextElement"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "EventListener",
      "kind": "class",
      "documentation": "Class: EventListener",
      "insertText": "EventListener",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "EventListenerProxy",
      "kind": "class",
      "documentation": "Class: EventListenerProxy",
      "insertText": "EventListenerProxy",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getListener",
          "kind": "method",
          "documentation": "getListener(): EventListener",
          "insertText": "getListener"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "EventObject",
      "kind": "class",
      "documentation": "Class: EventObject",
      "insertText": "EventObject",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getSource",
          "kind": "method",
          "documentation": "getSource(): Object",
          "insertText": "getSource"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "EventObject",
        "kind": "constructor",
        "documentation": "Constructor: EventObject",
        "insertText": "EventObject"
      }
    },
    {
      "label": "FormatFlagsConversionMismatchException",
      "kind": "class",
      "documentation": "Class: FormatFlagsConversionMismatchException",
      "insertText": "FormatFlagsConversionMismatchException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getConversion",
          "kind": "method",
          "documentation": "getConversion(): char",
          "insertText": "getConversion"
        },
        {
          "label": "getFlags",
          "kind": "method",
          "documentation": "getFlags(): String",
          "insertText": "getFlags"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "FormatFlagsConversionMismatchException",
        "kind": "constructor",
        "documentation": "Constructor: FormatFlagsConversionMismatchException",
        "insertText": "FormatFlagsConversionMismatchException"
      }
    },
    {
      "label": "Formattable",
      "kind": "class",
      "documentation": "Class: Formattable",
      "insertText": "Formattable",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "formatTo",
          "kind": "method",
          "documentation": "formatTo(Formatter a, int b, int c, int d): void",
          "insertText": "formatTo"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "FormattableFlags",
      "kind": "class",
      "documentation": "Class: FormattableFlags",
      "insertText": "FormattableFlags",
      "properties": [
        {
          "label": "ALTERNATE",
          "kind": "property",
          "documentation": "ALTERNATE: int",
          "insertText": "ALTERNATE"
        },
        {
          "label": "LEFT_JUSTIFY",
          "kind": "property",
          "documentation": "LEFT_JUSTIFY: int",
          "insertText": "LEFT_JUSTIFY"
        },
        {
          "label": "UPPERCASE",
          "kind": "property",
          "documentation": "UPPERCASE: int",
          "insertText": "UPPERCASE"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Formatter",
      "kind": "class",
      "documentation": "Class: Formatter",
      "insertText": "Formatter",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Locale a, String b, def[] c | String a, def[] b): Formatter",
          "insertText": "format"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "locale",
          "kind": "method",
          "documentation": "locale(): Locale",
          "insertText": "locale"
        },
        {
          "label": "out",
          "kind": "method",
          "documentation": "out(): Appendable",
          "insertText": "out"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Formatter",
        "kind": "constructor",
        "documentation": "Constructor: Formatter",
        "insertText": "Formatter"
      }
    },
    {
      "label": "BigDecimalLayoutForm",
      "kind": "class",
      "documentation": "Class: BigDecimalLayoutForm",
      "insertText": "BigDecimalLayoutForm",
      "properties": [
        {
          "label": "DECIMAL_FLOAT",
          "kind": "property",
          "documentation": "DECIMAL_FLOAT: Formatter.BigDecimalLayoutForm",
          "insertText": "DECIMAL_FLOAT"
        },
        {
          "label": "SCIENTIFIC",
          "kind": "property",
          "documentation": "SCIENTIFIC: Formatter.BigDecimalLayoutForm",
          "insertText": "SCIENTIFIC"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "FormatterClosedException",
      "kind": "class",
      "documentation": "Class: FormatterClosedException",
      "insertText": "FormatterClosedException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "FormatterClosedException",
        "kind": "constructor",
        "documentation": "Constructor: FormatterClosedException",
        "insertText": "FormatterClosedException"
      }
    },
    {
      "label": "GregorianCalendar",
      "kind": "class",
      "documentation": "Class: GregorianCalendar",
      "insertText": "GregorianCalendar",
      "properties": [
        {
          "label": "AD",
          "kind": "property",
          "documentation": "AD: int",
          "insertText": "AD"
        },
        {
          "label": "BC",
          "kind": "property",
          "documentation": "BC: int",
          "insertText": "BC"
        },
        {
          "label": "from",
          "kind": "method",
          "documentation": "from(ZonedDateTime a): GregorianCalendar",
          "insertText": "from"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, int b): void",
          "insertText": "add"
        },
        {
          "label": "after",
          "kind": "method",
          "documentation": "after(Object a): boolean",
          "insertText": "after"
        },
        {
          "label": "before",
          "kind": "method",
          "documentation": "before(Object a): boolean",
          "insertText": "before"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(int a): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Calendar a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): int",
          "insertText": "get"
        },
        {
          "label": "getActualMaximum",
          "kind": "method",
          "documentation": "getActualMaximum(int a): int",
          "insertText": "getActualMaximum"
        },
        {
          "label": "getActualMinimum",
          "kind": "method",
          "documentation": "getActualMinimum(int a): int",
          "insertText": "getActualMinimum"
        },
        {
          "label": "getCalendarType",
          "kind": "method",
          "documentation": "getCalendarType(): String",
          "insertText": "getCalendarType"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(int a, int b, Locale c): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getDisplayNames",
          "kind": "method",
          "documentation": "getDisplayNames(int a, int b, Locale c): Map",
          "insertText": "getDisplayNames"
        },
        {
          "label": "getFirstDayOfWeek",
          "kind": "method",
          "documentation": "getFirstDayOfWeek(): int",
          "insertText": "getFirstDayOfWeek"
        },
        {
          "label": "getGreatestMinimum",
          "kind": "method",
          "documentation": "getGreatestMinimum(int a): int",
          "insertText": "getGreatestMinimum"
        },
        {
          "label": "getGregorianChange",
          "kind": "method",
          "documentation": "getGregorianChange(): Date",
          "insertText": "getGregorianChange"
        },
        {
          "label": "getLeastMaximum",
          "kind": "method",
          "documentation": "getLeastMaximum(int a): int",
          "insertText": "getLeastMaximum"
        },
        {
          "label": "getMaximum",
          "kind": "method",
          "documentation": "getMaximum(int a): int",
          "insertText": "getMaximum"
        },
        {
          "label": "getMinimalDaysInFirstWeek",
          "kind": "method",
          "documentation": "getMinimalDaysInFirstWeek(): int",
          "insertText": "getMinimalDaysInFirstWeek"
        },
        {
          "label": "getMinimum",
          "kind": "method",
          "documentation": "getMinimum(int a): int",
          "insertText": "getMinimum"
        },
        {
          "label": "getTime",
          "kind": "method",
          "documentation": "getTime(): Date",
          "insertText": "getTime"
        },
        {
          "label": "getTimeInMillis",
          "kind": "method",
          "documentation": "getTimeInMillis(): long",
          "insertText": "getTimeInMillis"
        },
        {
          "label": "getTimeZone",
          "kind": "method",
          "documentation": "getTimeZone(): TimeZone",
          "insertText": "getTimeZone"
        },
        {
          "label": "getWeekYear",
          "kind": "method",
          "documentation": "getWeekYear(): int",
          "insertText": "getWeekYear"
        },
        {
          "label": "getWeeksInWeekYear",
          "kind": "method",
          "documentation": "getWeeksInWeekYear(): int",
          "insertText": "getWeeksInWeekYear"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isLeapYear",
          "kind": "method",
          "documentation": "isLeapYear(int a): boolean",
          "insertText": "isLeapYear"
        },
        {
          "label": "isLenient",
          "kind": "method",
          "documentation": "isLenient(): boolean",
          "insertText": "isLenient"
        },
        {
          "label": "isSet",
          "kind": "method",
          "documentation": "isSet(int a): boolean",
          "insertText": "isSet"
        },
        {
          "label": "isWeekDateSupported",
          "kind": "method",
          "documentation": "isWeekDateSupported(): boolean",
          "insertText": "isWeekDateSupported"
        },
        {
          "label": "roll",
          "kind": "method",
          "documentation": "roll(int a, int b): void",
          "insertText": "roll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void",
          "insertText": "set"
        },
        {
          "label": "setFirstDayOfWeek",
          "kind": "method",
          "documentation": "setFirstDayOfWeek(int a): void",
          "insertText": "setFirstDayOfWeek"
        },
        {
          "label": "setGregorianChange",
          "kind": "method",
          "documentation": "setGregorianChange(Date a): void",
          "insertText": "setGregorianChange"
        },
        {
          "label": "setLenient",
          "kind": "method",
          "documentation": "setLenient(boolean a): void",
          "insertText": "setLenient"
        },
        {
          "label": "setMinimalDaysInFirstWeek",
          "kind": "method",
          "documentation": "setMinimalDaysInFirstWeek(int a): void",
          "insertText": "setMinimalDaysInFirstWeek"
        },
        {
          "label": "setTime",
          "kind": "method",
          "documentation": "setTime(Date a): void",
          "insertText": "setTime"
        },
        {
          "label": "setTimeInMillis",
          "kind": "method",
          "documentation": "setTimeInMillis(long a): void",
          "insertText": "setTimeInMillis"
        },
        {
          "label": "setTimeZone",
          "kind": "method",
          "documentation": "setTimeZone(TimeZone a): void",
          "insertText": "setTimeZone"
        },
        {
          "label": "setWeekDate",
          "kind": "method",
          "documentation": "setWeekDate(int a, int b, int c): void",
          "insertText": "setWeekDate"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "toZonedDateTime",
          "kind": "method",
          "documentation": "toZonedDateTime(): ZonedDateTime",
          "insertText": "toZonedDateTime"
        }
      ],
      "constructorDefinition": {
        "label": "GregorianCalendar",
        "kind": "constructor",
        "documentation": "Constructor: GregorianCalendar",
        "insertText": "GregorianCalendar"
      }
    },
    {
      "label": "HashMap",
      "kind": "class",
      "documentation": "Class: HashMap",
      "insertText": "HashMap",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ],
      "constructorDefinition": {
        "label": "HashMap",
        "kind": "constructor",
        "documentation": "Constructor: HashMap",
        "insertText": "HashMap"
      }
    },
    {
      "label": "HashSet",
      "kind": "class",
      "documentation": "Class: HashSet",
      "insertText": "HashSet",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "HashSet",
        "kind": "constructor",
        "documentation": "Constructor: HashSet",
        "insertText": "HashSet"
      }
    },
    {
      "label": "Hashtable",
      "kind": "class",
      "documentation": "Class: Hashtable",
      "insertText": "Hashtable",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "elements",
          "kind": "method",
          "documentation": "elements(): Enumeration",
          "insertText": "elements"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "keys",
          "kind": "method",
          "documentation": "keys(): Enumeration",
          "insertText": "keys"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ],
      "constructorDefinition": {
        "label": "Hashtable",
        "kind": "constructor",
        "documentation": "Constructor: Hashtable",
        "insertText": "Hashtable"
      }
    },
    {
      "label": "IdentityHashMap",
      "kind": "class",
      "documentation": "Class: IdentityHashMap",
      "insertText": "IdentityHashMap",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ],
      "constructorDefinition": {
        "label": "IdentityHashMap",
        "kind": "constructor",
        "documentation": "Constructor: IdentityHashMap",
        "insertText": "IdentityHashMap"
      }
    },
    {
      "label": "IllegalFormatCodePointException",
      "kind": "class",
      "documentation": "Class: IllegalFormatCodePointException",
      "insertText": "IllegalFormatCodePointException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCodePoint",
          "kind": "method",
          "documentation": "getCodePoint(): int",
          "insertText": "getCodePoint"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalFormatCodePointException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalFormatCodePointException",
        "insertText": "IllegalFormatCodePointException"
      }
    },
    {
      "label": "IllegalFormatConversionException",
      "kind": "class",
      "documentation": "Class: IllegalFormatConversionException",
      "insertText": "IllegalFormatConversionException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getConversion",
          "kind": "method",
          "documentation": "getConversion(): char",
          "insertText": "getConversion"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IllegalFormatException",
      "kind": "class",
      "documentation": "Class: IllegalFormatException",
      "insertText": "IllegalFormatException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IllegalFormatFlagsException",
      "kind": "class",
      "documentation": "Class: IllegalFormatFlagsException",
      "insertText": "IllegalFormatFlagsException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFlags",
          "kind": "method",
          "documentation": "getFlags(): String",
          "insertText": "getFlags"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalFormatFlagsException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalFormatFlagsException",
        "insertText": "IllegalFormatFlagsException"
      }
    },
    {
      "label": "IllegalFormatPrecisionException",
      "kind": "class",
      "documentation": "Class: IllegalFormatPrecisionException",
      "insertText": "IllegalFormatPrecisionException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getPrecision",
          "kind": "method",
          "documentation": "getPrecision(): int",
          "insertText": "getPrecision"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalFormatPrecisionException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalFormatPrecisionException",
        "insertText": "IllegalFormatPrecisionException"
      }
    },
    {
      "label": "IllegalFormatWidthException",
      "kind": "class",
      "documentation": "Class: IllegalFormatWidthException",
      "insertText": "IllegalFormatWidthException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "getWidth",
          "kind": "method",
          "documentation": "getWidth(): int",
          "insertText": "getWidth"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllegalFormatWidthException",
        "kind": "constructor",
        "documentation": "Constructor: IllegalFormatWidthException",
        "insertText": "IllegalFormatWidthException"
      }
    },
    {
      "label": "IllformedLocaleException",
      "kind": "class",
      "documentation": "Class: IllformedLocaleException",
      "insertText": "IllformedLocaleException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getErrorIndex",
          "kind": "method",
          "documentation": "getErrorIndex(): int",
          "insertText": "getErrorIndex"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IllformedLocaleException",
        "kind": "constructor",
        "documentation": "Constructor: IllformedLocaleException",
        "insertText": "IllformedLocaleException"
      }
    },
    {
      "label": "InputMismatchException",
      "kind": "class",
      "documentation": "Class: InputMismatchException",
      "insertText": "InputMismatchException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "InputMismatchException",
        "kind": "constructor",
        "documentation": "Constructor: InputMismatchException",
        "insertText": "InputMismatchException"
      }
    },
    {
      "label": "IntSummaryStatistics",
      "kind": "class",
      "documentation": "Class: IntSummaryStatistics",
      "insertText": "IntSummaryStatistics",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(int a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(IntConsumer a): IntConsumer",
          "insertText": "andThen"
        },
        {
          "label": "combine",
          "kind": "method",
          "documentation": "combine(IntSummaryStatistics a): void",
          "insertText": "combine"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAverage",
          "kind": "method",
          "documentation": "getAverage(): double",
          "insertText": "getAverage"
        },
        {
          "label": "getCount",
          "kind": "method",
          "documentation": "getCount(): long",
          "insertText": "getCount"
        },
        {
          "label": "getMax",
          "kind": "method",
          "documentation": "getMax(): int",
          "insertText": "getMax"
        },
        {
          "label": "getMin",
          "kind": "method",
          "documentation": "getMin(): int",
          "insertText": "getMin"
        },
        {
          "label": "getSum",
          "kind": "method",
          "documentation": "getSum(): long",
          "insertText": "getSum"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "IntSummaryStatistics",
        "kind": "constructor",
        "documentation": "Constructor: IntSummaryStatistics",
        "insertText": "IntSummaryStatistics"
      }
    },
    {
      "label": "Iterator",
      "kind": "class",
      "documentation": "Class: Iterator",
      "insertText": "Iterator",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(Consumer a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "hasNext",
          "kind": "method",
          "documentation": "hasNext(): boolean",
          "insertText": "hasNext"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): def",
          "insertText": "next"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): void",
          "insertText": "remove"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LinkedHashMap",
      "kind": "class",
      "documentation": "Class: LinkedHashMap",
      "insertText": "LinkedHashMap",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ],
      "constructorDefinition": {
        "label": "LinkedHashMap",
        "kind": "constructor",
        "documentation": "Constructor: LinkedHashMap",
        "insertText": "LinkedHashMap"
      }
    },
    {
      "label": "LinkedHashSet",
      "kind": "class",
      "documentation": "Class: LinkedHashSet",
      "insertText": "LinkedHashSet",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "LinkedHashSet",
        "kind": "constructor",
        "documentation": "Constructor: LinkedHashSet",
        "insertText": "LinkedHashSet"
      }
    },
    {
      "label": "LinkedList",
      "kind": "class",
      "documentation": "Class: LinkedList",
      "insertText": "LinkedList",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "addFirst",
          "kind": "method",
          "documentation": "addFirst(def a): void",
          "insertText": "addFirst"
        },
        {
          "label": "addLast",
          "kind": "method",
          "documentation": "addLast(def a): void",
          "insertText": "addLast"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "descendingIterator",
          "kind": "method",
          "documentation": "descendingIterator(): Iterator",
          "insertText": "descendingIterator"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "element",
          "kind": "method",
          "documentation": "element(): def",
          "insertText": "element"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getFirst",
          "kind": "method",
          "documentation": "getFirst(): def",
          "insertText": "getFirst"
        },
        {
          "label": "getLast",
          "kind": "method",
          "documentation": "getLast(): def",
          "insertText": "getLast"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "offer",
          "kind": "method",
          "documentation": "offer(def a): boolean",
          "insertText": "offer"
        },
        {
          "label": "offerFirst",
          "kind": "method",
          "documentation": "offerFirst(def a): boolean",
          "insertText": "offerFirst"
        },
        {
          "label": "offerLast",
          "kind": "method",
          "documentation": "offerLast(def a): boolean",
          "insertText": "offerLast"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "peekFirst",
          "kind": "method",
          "documentation": "peekFirst(): def",
          "insertText": "peekFirst"
        },
        {
          "label": "peekLast",
          "kind": "method",
          "documentation": "peekLast(): def",
          "insertText": "peekLast"
        },
        {
          "label": "poll",
          "kind": "method",
          "documentation": "poll(): def",
          "insertText": "poll"
        },
        {
          "label": "pollFirst",
          "kind": "method",
          "documentation": "pollFirst(): def",
          "insertText": "pollFirst"
        },
        {
          "label": "pollLast",
          "kind": "method",
          "documentation": "pollLast(): def",
          "insertText": "pollLast"
        },
        {
          "label": "pop",
          "kind": "method",
          "documentation": "pop(): def",
          "insertText": "pop"
        },
        {
          "label": "push",
          "kind": "method",
          "documentation": "push(def a): void",
          "insertText": "push"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeFirst",
          "kind": "method",
          "documentation": "removeFirst(): def",
          "insertText": "removeFirst"
        },
        {
          "label": "removeFirstOccurrence",
          "kind": "method",
          "documentation": "removeFirstOccurrence(def a): boolean",
          "insertText": "removeFirstOccurrence"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "removeLast",
          "kind": "method",
          "documentation": "removeLast(): def",
          "insertText": "removeLast"
        },
        {
          "label": "removeLastOccurrence",
          "kind": "method",
          "documentation": "removeLastOccurrence(def a): boolean",
          "insertText": "removeLastOccurrence"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "LinkedList",
        "kind": "constructor",
        "documentation": "Constructor: LinkedList",
        "insertText": "LinkedList"
      }
    },
    {
      "label": "List",
      "kind": "class",
      "documentation": "Class: List",
      "insertText": "List",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ListIterator",
      "kind": "class",
      "documentation": "Class: ListIterator",
      "insertText": "ListIterator",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): void",
          "insertText": "add"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(Consumer a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "hasNext",
          "kind": "method",
          "documentation": "hasNext(): boolean",
          "insertText": "hasNext"
        },
        {
          "label": "hasPrevious",
          "kind": "method",
          "documentation": "hasPrevious(): boolean",
          "insertText": "hasPrevious"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): def",
          "insertText": "next"
        },
        {
          "label": "nextIndex",
          "kind": "method",
          "documentation": "nextIndex(): int",
          "insertText": "nextIndex"
        },
        {
          "label": "previousIndex",
          "kind": "method",
          "documentation": "previousIndex(): int",
          "insertText": "previousIndex"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): void",
          "insertText": "remove"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(def a): void",
          "insertText": "set"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Locale",
      "kind": "class",
      "documentation": "Class: Locale",
      "insertText": "Locale",
      "properties": [
        {
          "label": "CANADA",
          "kind": "property",
          "documentation": "CANADA: Locale",
          "insertText": "CANADA"
        },
        {
          "label": "CANADA_FRENCH",
          "kind": "property",
          "documentation": "CANADA_FRENCH: Locale",
          "insertText": "CANADA_FRENCH"
        },
        {
          "label": "CHINA",
          "kind": "property",
          "documentation": "CHINA: Locale",
          "insertText": "CHINA"
        },
        {
          "label": "CHINESE",
          "kind": "property",
          "documentation": "CHINESE: Locale",
          "insertText": "CHINESE"
        },
        {
          "label": "ENGLISH",
          "kind": "property",
          "documentation": "ENGLISH: Locale",
          "insertText": "ENGLISH"
        },
        {
          "label": "FRANCE",
          "kind": "property",
          "documentation": "FRANCE: Locale",
          "insertText": "FRANCE"
        },
        {
          "label": "FRENCH",
          "kind": "property",
          "documentation": "FRENCH: Locale",
          "insertText": "FRENCH"
        },
        {
          "label": "GERMAN",
          "kind": "property",
          "documentation": "GERMAN: Locale",
          "insertText": "GERMAN"
        },
        {
          "label": "GERMANY",
          "kind": "property",
          "documentation": "GERMANY: Locale",
          "insertText": "GERMANY"
        },
        {
          "label": "ITALIAN",
          "kind": "property",
          "documentation": "ITALIAN: Locale",
          "insertText": "ITALIAN"
        },
        {
          "label": "ITALY",
          "kind": "property",
          "documentation": "ITALY: Locale",
          "insertText": "ITALY"
        },
        {
          "label": "JAPAN",
          "kind": "property",
          "documentation": "JAPAN: Locale",
          "insertText": "JAPAN"
        },
        {
          "label": "JAPANESE",
          "kind": "property",
          "documentation": "JAPANESE: Locale",
          "insertText": "JAPANESE"
        },
        {
          "label": "KOREA",
          "kind": "property",
          "documentation": "KOREA: Locale",
          "insertText": "KOREA"
        },
        {
          "label": "KOREAN",
          "kind": "property",
          "documentation": "KOREAN: Locale",
          "insertText": "KOREAN"
        },
        {
          "label": "PRC",
          "kind": "property",
          "documentation": "PRC: Locale",
          "insertText": "PRC"
        },
        {
          "label": "PRIVATE_USE_EXTENSION",
          "kind": "property",
          "documentation": "PRIVATE_USE_EXTENSION: char",
          "insertText": "PRIVATE_USE_EXTENSION"
        },
        {
          "label": "ROOT",
          "kind": "property",
          "documentation": "ROOT: Locale",
          "insertText": "ROOT"
        },
        {
          "label": "SIMPLIFIED_CHINESE",
          "kind": "property",
          "documentation": "SIMPLIFIED_CHINESE: Locale",
          "insertText": "SIMPLIFIED_CHINESE"
        },
        {
          "label": "TAIWAN",
          "kind": "property",
          "documentation": "TAIWAN: Locale",
          "insertText": "TAIWAN"
        },
        {
          "label": "TRADITIONAL_CHINESE",
          "kind": "property",
          "documentation": "TRADITIONAL_CHINESE: Locale",
          "insertText": "TRADITIONAL_CHINESE"
        },
        {
          "label": "UK",
          "kind": "property",
          "documentation": "UK: Locale",
          "insertText": "UK"
        },
        {
          "label": "UNICODE_LOCALE_EXTENSION",
          "kind": "property",
          "documentation": "UNICODE_LOCALE_EXTENSION: char",
          "insertText": "UNICODE_LOCALE_EXTENSION"
        },
        {
          "label": "US",
          "kind": "property",
          "documentation": "US: Locale",
          "insertText": "US"
        },
        {
          "label": "filter",
          "kind": "method",
          "documentation": "filter(List a, Collection b): List",
          "insertText": "filter"
        },
        {
          "label": "filterTags",
          "kind": "method",
          "documentation": "filterTags(List a, Collection b): List",
          "insertText": "filterTags"
        },
        {
          "label": "forLanguageTag",
          "kind": "method",
          "documentation": "forLanguageTag(String a): Locale",
          "insertText": "forLanguageTag"
        },
        {
          "label": "getAvailableLocales",
          "kind": "method",
          "documentation": "getAvailableLocales(): Locale[]",
          "insertText": "getAvailableLocales"
        },
        {
          "label": "getDefault",
          "kind": "method",
          "documentation": "getDefault(Locale.Category a): Locale",
          "insertText": "getDefault"
        },
        {
          "label": "getISOCountries",
          "kind": "method",
          "documentation": "getISOCountries(): String[]",
          "insertText": "getISOCountries"
        },
        {
          "label": "getISOLanguages",
          "kind": "method",
          "documentation": "getISOLanguages(): String[]",
          "insertText": "getISOLanguages"
        },
        {
          "label": "lookup",
          "kind": "method",
          "documentation": "lookup(List a, Collection b): Locale",
          "insertText": "lookup"
        },
        {
          "label": "lookupTag",
          "kind": "method",
          "documentation": "lookupTag(List a, Collection b): String",
          "insertText": "lookupTag"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getCountry",
          "kind": "method",
          "documentation": "getCountry(): String",
          "insertText": "getCountry"
        },
        {
          "label": "getDisplayCountry",
          "kind": "method",
          "documentation": "getDisplayCountry(Locale a): String",
          "insertText": "getDisplayCountry"
        },
        {
          "label": "getDisplayLanguage",
          "kind": "method",
          "documentation": "getDisplayLanguage(Locale a): String",
          "insertText": "getDisplayLanguage"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(Locale a): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getDisplayScript",
          "kind": "method",
          "documentation": "getDisplayScript(Locale a): String",
          "insertText": "getDisplayScript"
        },
        {
          "label": "getDisplayVariant",
          "kind": "method",
          "documentation": "getDisplayVariant(Locale a): String",
          "insertText": "getDisplayVariant"
        },
        {
          "label": "getExtension",
          "kind": "method",
          "documentation": "getExtension(char a): String",
          "insertText": "getExtension"
        },
        {
          "label": "getExtensionKeys",
          "kind": "method",
          "documentation": "getExtensionKeys(): Set",
          "insertText": "getExtensionKeys"
        },
        {
          "label": "getISO3Country",
          "kind": "method",
          "documentation": "getISO3Country(): String",
          "insertText": "getISO3Country"
        },
        {
          "label": "getISO3Language",
          "kind": "method",
          "documentation": "getISO3Language(): String",
          "insertText": "getISO3Language"
        },
        {
          "label": "getLanguage",
          "kind": "method",
          "documentation": "getLanguage(): String",
          "insertText": "getLanguage"
        },
        {
          "label": "getScript",
          "kind": "method",
          "documentation": "getScript(): String",
          "insertText": "getScript"
        },
        {
          "label": "getUnicodeLocaleAttributes",
          "kind": "method",
          "documentation": "getUnicodeLocaleAttributes(): Set",
          "insertText": "getUnicodeLocaleAttributes"
        },
        {
          "label": "getUnicodeLocaleKeys",
          "kind": "method",
          "documentation": "getUnicodeLocaleKeys(): Set",
          "insertText": "getUnicodeLocaleKeys"
        },
        {
          "label": "getUnicodeLocaleType",
          "kind": "method",
          "documentation": "getUnicodeLocaleType(String a): String",
          "insertText": "getUnicodeLocaleType"
        },
        {
          "label": "getVariant",
          "kind": "method",
          "documentation": "getVariant(): String",
          "insertText": "getVariant"
        },
        {
          "label": "hasExtensions",
          "kind": "method",
          "documentation": "hasExtensions(): boolean",
          "insertText": "hasExtensions"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "stripExtensions",
          "kind": "method",
          "documentation": "stripExtensions(): Locale",
          "insertText": "stripExtensions"
        },
        {
          "label": "toLanguageTag",
          "kind": "method",
          "documentation": "toLanguageTag(): String",
          "insertText": "toLanguageTag"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Locale",
        "kind": "constructor",
        "documentation": "Constructor: Locale",
        "insertText": "Locale"
      }
    },
    {
      "label": "Builder",
      "kind": "class",
      "documentation": "Class: Builder",
      "insertText": "Builder",
      "properties": [
        {
          "label": "addUnicodeLocaleAttribute",
          "kind": "method",
          "documentation": "addUnicodeLocaleAttribute(String a): Locale.Builder",
          "insertText": "addUnicodeLocaleAttribute"
        },
        {
          "label": "build",
          "kind": "method",
          "documentation": "build(): Locale",
          "insertText": "build"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): Locale.Builder",
          "insertText": "clear"
        },
        {
          "label": "clearExtensions",
          "kind": "method",
          "documentation": "clearExtensions(): Locale.Builder",
          "insertText": "clearExtensions"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "removeUnicodeLocaleAttribute",
          "kind": "method",
          "documentation": "removeUnicodeLocaleAttribute(String a): Locale.Builder",
          "insertText": "removeUnicodeLocaleAttribute"
        },
        {
          "label": "setExtension",
          "kind": "method",
          "documentation": "setExtension(char a, String b): Locale.Builder",
          "insertText": "setExtension"
        },
        {
          "label": "setLanguage",
          "kind": "method",
          "documentation": "setLanguage(String a): Locale.Builder",
          "insertText": "setLanguage"
        },
        {
          "label": "setLanguageTag",
          "kind": "method",
          "documentation": "setLanguageTag(String a): Locale.Builder",
          "insertText": "setLanguageTag"
        },
        {
          "label": "setLocale",
          "kind": "method",
          "documentation": "setLocale(Locale a): Locale.Builder",
          "insertText": "setLocale"
        },
        {
          "label": "setRegion",
          "kind": "method",
          "documentation": "setRegion(String a): Locale.Builder",
          "insertText": "setRegion"
        },
        {
          "label": "setScript",
          "kind": "method",
          "documentation": "setScript(String a): Locale.Builder",
          "insertText": "setScript"
        },
        {
          "label": "setUnicodeLocaleKeyword",
          "kind": "method",
          "documentation": "setUnicodeLocaleKeyword(String a, String b): Locale.Builder",
          "insertText": "setUnicodeLocaleKeyword"
        },
        {
          "label": "setVariant",
          "kind": "method",
          "documentation": "setVariant(String a): Locale.Builder",
          "insertText": "setVariant"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Builder",
        "kind": "constructor",
        "documentation": "Constructor: Builder",
        "insertText": "Builder"
      }
    },
    {
      "label": "Category",
      "kind": "class",
      "documentation": "Class: Category",
      "insertText": "Category",
      "properties": [
        {
          "label": "DISPLAY",
          "kind": "property",
          "documentation": "DISPLAY: Locale.Category",
          "insertText": "DISPLAY"
        },
        {
          "label": "FORMAT",
          "kind": "property",
          "documentation": "FORMAT: Locale.Category",
          "insertText": "FORMAT"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): Locale.Category",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Locale.Category[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "FilteringMode",
      "kind": "class",
      "documentation": "Class: FilteringMode",
      "insertText": "FilteringMode",
      "properties": [
        {
          "label": "AUTOSELECT_FILTERING",
          "kind": "property",
          "documentation": "AUTOSELECT_FILTERING: Locale.FilteringMode",
          "insertText": "AUTOSELECT_FILTERING"
        },
        {
          "label": "EXTENDED_FILTERING",
          "kind": "property",
          "documentation": "EXTENDED_FILTERING: Locale.FilteringMode",
          "insertText": "EXTENDED_FILTERING"
        },
        {
          "label": "IGNORE_EXTENDED_RANGES",
          "kind": "property",
          "documentation": "IGNORE_EXTENDED_RANGES: Locale.FilteringMode",
          "insertText": "IGNORE_EXTENDED_RANGES"
        },
        {
          "label": "MAP_EXTENDED_RANGES",
          "kind": "property",
          "documentation": "MAP_EXTENDED_RANGES: Locale.FilteringMode",
          "insertText": "MAP_EXTENDED_RANGES"
        },
        {
          "label": "REJECT_EXTENDED_RANGES",
          "kind": "property",
          "documentation": "REJECT_EXTENDED_RANGES: Locale.FilteringMode",
          "insertText": "REJECT_EXTENDED_RANGES"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): Locale.FilteringMode",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Locale.FilteringMode[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LanguageRange",
      "kind": "class",
      "documentation": "Class: LanguageRange",
      "insertText": "LanguageRange",
      "properties": [
        {
          "label": "MAX_WEIGHT",
          "kind": "property",
          "documentation": "MAX_WEIGHT: double",
          "insertText": "MAX_WEIGHT"
        },
        {
          "label": "MIN_WEIGHT",
          "kind": "property",
          "documentation": "MIN_WEIGHT: double",
          "insertText": "MIN_WEIGHT"
        },
        {
          "label": "mapEquivalents",
          "kind": "method",
          "documentation": "mapEquivalents(List a, Map b): List",
          "insertText": "mapEquivalents"
        },
        {
          "label": "parse",
          "kind": "method",
          "documentation": "parse(String a, Map b | String a): List",
          "insertText": "parse"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getRange",
          "kind": "method",
          "documentation": "getRange(): String",
          "insertText": "getRange"
        },
        {
          "label": "getWeight",
          "kind": "method",
          "documentation": "getWeight(): double",
          "insertText": "getWeight"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "LanguageRange",
        "kind": "constructor",
        "documentation": "Constructor: LanguageRange",
        "insertText": "LanguageRange"
      }
    },
    {
      "label": "LongSummaryStatistics",
      "kind": "class",
      "documentation": "Class: LongSummaryStatistics",
      "insertText": "LongSummaryStatistics",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(long a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(LongConsumer a): LongConsumer",
          "insertText": "andThen"
        },
        {
          "label": "combine",
          "kind": "method",
          "documentation": "combine(LongSummaryStatistics a): void",
          "insertText": "combine"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAverage",
          "kind": "method",
          "documentation": "getAverage(): double",
          "insertText": "getAverage"
        },
        {
          "label": "getCount",
          "kind": "method",
          "documentation": "getCount(): long",
          "insertText": "getCount"
        },
        {
          "label": "getMax",
          "kind": "method",
          "documentation": "getMax(): long",
          "insertText": "getMax"
        },
        {
          "label": "getMin",
          "kind": "method",
          "documentation": "getMin(): long",
          "insertText": "getMin"
        },
        {
          "label": "getSum",
          "kind": "method",
          "documentation": "getSum(): long",
          "insertText": "getSum"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "LongSummaryStatistics",
        "kind": "constructor",
        "documentation": "Constructor: LongSummaryStatistics",
        "insertText": "LongSummaryStatistics"
      }
    },
    {
      "label": "Map",
      "kind": "class",
      "documentation": "Class: Map",
      "insertText": "Map",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ]
    },
    {
      "label": "Entry",
      "kind": "class",
      "documentation": "Class: Entry",
      "insertText": "Entry",
      "properties": [
        {
          "label": "comparingByKey",
          "kind": "method",
          "documentation": "comparingByKey(Comparator a): Comparator",
          "insertText": "comparingByKey"
        },
        {
          "label": "comparingByValue",
          "kind": "method",
          "documentation": "comparingByValue(Comparator a): Comparator",
          "insertText": "comparingByValue"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getKey",
          "kind": "method",
          "documentation": "getKey(): def",
          "insertText": "getKey"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): def",
          "insertText": "getValue"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "setValue",
          "kind": "method",
          "documentation": "setValue(def a): def",
          "insertText": "setValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "MissingFormatArgumentException",
      "kind": "class",
      "documentation": "Class: MissingFormatArgumentException",
      "insertText": "MissingFormatArgumentException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFormatSpecifier",
          "kind": "method",
          "documentation": "getFormatSpecifier(): String",
          "insertText": "getFormatSpecifier"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "MissingFormatArgumentException",
        "kind": "constructor",
        "documentation": "Constructor: MissingFormatArgumentException",
        "insertText": "MissingFormatArgumentException"
      }
    },
    {
      "label": "MissingFormatWidthException",
      "kind": "class",
      "documentation": "Class: MissingFormatWidthException",
      "insertText": "MissingFormatWidthException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFormatSpecifier",
          "kind": "method",
          "documentation": "getFormatSpecifier(): String",
          "insertText": "getFormatSpecifier"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "MissingFormatWidthException",
        "kind": "constructor",
        "documentation": "Constructor: MissingFormatWidthException",
        "insertText": "MissingFormatWidthException"
      }
    },
    {
      "label": "MissingResourceException",
      "kind": "class",
      "documentation": "Class: MissingResourceException",
      "insertText": "MissingResourceException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getClassName",
          "kind": "method",
          "documentation": "getClassName(): String",
          "insertText": "getClassName"
        },
        {
          "label": "getKey",
          "kind": "method",
          "documentation": "getKey(): String",
          "insertText": "getKey"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "MissingResourceException",
        "kind": "constructor",
        "documentation": "Constructor: MissingResourceException",
        "insertText": "MissingResourceException"
      }
    },
    {
      "label": "NavigableMap",
      "kind": "class",
      "documentation": "Class: NavigableMap",
      "insertText": "NavigableMap",
      "properties": [
        {
          "label": "ceilingEntry",
          "kind": "method",
          "documentation": "ceilingEntry(def a): Map.Entry",
          "insertText": "ceilingEntry"
        },
        {
          "label": "ceilingKey",
          "kind": "method",
          "documentation": "ceilingKey(def a): def",
          "insertText": "ceilingKey"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "comparator",
          "kind": "method",
          "documentation": "comparator(): Comparator",
          "insertText": "comparator"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "descendingKeySet",
          "kind": "method",
          "documentation": "descendingKeySet(): NavigableSet",
          "insertText": "descendingKeySet"
        },
        {
          "label": "descendingMap",
          "kind": "method",
          "documentation": "descendingMap(): NavigableMap",
          "insertText": "descendingMap"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "firstEntry",
          "kind": "method",
          "documentation": "firstEntry(): Map.Entry",
          "insertText": "firstEntry"
        },
        {
          "label": "firstKey",
          "kind": "method",
          "documentation": "firstKey(): def",
          "insertText": "firstKey"
        },
        {
          "label": "floorEntry",
          "kind": "method",
          "documentation": "floorEntry(def a): Map.Entry",
          "insertText": "floorEntry"
        },
        {
          "label": "floorKey",
          "kind": "method",
          "documentation": "floorKey(def a): def",
          "insertText": "floorKey"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "headMap",
          "kind": "method",
          "documentation": "headMap(def a, boolean b | def a): NavigableMap | SortedMap",
          "insertText": "headMap"
        },
        {
          "label": "higherEntry",
          "kind": "method",
          "documentation": "higherEntry(def a): Map.Entry",
          "insertText": "higherEntry"
        },
        {
          "label": "higherKey",
          "kind": "method",
          "documentation": "higherKey(def a): def",
          "insertText": "higherKey"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "lastEntry",
          "kind": "method",
          "documentation": "lastEntry(): Map.Entry",
          "insertText": "lastEntry"
        },
        {
          "label": "lastKey",
          "kind": "method",
          "documentation": "lastKey(): def",
          "insertText": "lastKey"
        },
        {
          "label": "lowerEntry",
          "kind": "method",
          "documentation": "lowerEntry(def a): Map.Entry",
          "insertText": "lowerEntry"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "navigableKeySet",
          "kind": "method",
          "documentation": "navigableKeySet(): NavigableSet",
          "insertText": "navigableKeySet"
        },
        {
          "label": "pollFirstEntry",
          "kind": "method",
          "documentation": "pollFirstEntry(): Map.Entry",
          "insertText": "pollFirstEntry"
        },
        {
          "label": "pollLastEntry",
          "kind": "method",
          "documentation": "pollLastEntry(): Map.Entry",
          "insertText": "pollLastEntry"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "subMap",
          "kind": "method",
          "documentation": "subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap",
          "insertText": "subMap"
        },
        {
          "label": "tailMap",
          "kind": "method",
          "documentation": "tailMap(def a, boolean b | def a): NavigableMap | SortedMap",
          "insertText": "tailMap"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ]
    },
    {
      "label": "NavigableSet",
      "kind": "class",
      "documentation": "Class: NavigableSet",
      "insertText": "NavigableSet",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "ceiling",
          "kind": "method",
          "documentation": "ceiling(def a): def",
          "insertText": "ceiling"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "comparator",
          "kind": "method",
          "documentation": "comparator(): Comparator",
          "insertText": "comparator"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "descendingIterator",
          "kind": "method",
          "documentation": "descendingIterator(): Iterator",
          "insertText": "descendingIterator"
        },
        {
          "label": "descendingSet",
          "kind": "method",
          "documentation": "descendingSet(): NavigableSet",
          "insertText": "descendingSet"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): def",
          "insertText": "first"
        },
        {
          "label": "floor",
          "kind": "method",
          "documentation": "floor(def a): def",
          "insertText": "floor"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "headSet",
          "kind": "method",
          "documentation": "headSet(def a, boolean b | def a): NavigableSet | SortedSet",
          "insertText": "headSet"
        },
        {
          "label": "higher",
          "kind": "method",
          "documentation": "higher(def a): def",
          "insertText": "higher"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): def",
          "insertText": "last"
        },
        {
          "label": "lower",
          "kind": "method",
          "documentation": "lower(def a): def",
          "insertText": "lower"
        },
        {
          "label": "pollFirst",
          "kind": "method",
          "documentation": "pollFirst(): def",
          "insertText": "pollFirst"
        },
        {
          "label": "pollLast",
          "kind": "method",
          "documentation": "pollLast(): def",
          "insertText": "pollLast"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subSet",
          "kind": "method",
          "documentation": "subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet",
          "insertText": "subSet"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "tailSet",
          "kind": "method",
          "documentation": "tailSet(def a, boolean b | def a): NavigableSet | SortedSet",
          "insertText": "tailSet"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "NoSuchElementException",
      "kind": "class",
      "documentation": "Class: NoSuchElementException",
      "insertText": "NoSuchElementException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "NoSuchElementException",
        "kind": "constructor",
        "documentation": "Constructor: NoSuchElementException",
        "insertText": "NoSuchElementException"
      }
    },
    {
      "label": "Objects",
      "kind": "class",
      "documentation": "Class: Objects",
      "insertText": "Objects",
      "properties": [
        {
          "label": "compare",
          "kind": "method",
          "documentation": "compare(def a, def b, Comparator c): int",
          "insertText": "compare"
        },
        {
          "label": "deepEquals",
          "kind": "method",
          "documentation": "deepEquals(Object a, Object b): boolean",
          "insertText": "deepEquals"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a, Object b): boolean",
          "insertText": "equals"
        },
        {
          "label": "hash",
          "kind": "method",
          "documentation": "hash(Object[] a): int",
          "insertText": "hash"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(Object a): int",
          "insertText": "hashCode"
        },
        {
          "label": "isNull",
          "kind": "method",
          "documentation": "isNull(Object a): boolean",
          "insertText": "isNull"
        },
        {
          "label": "nonNull",
          "kind": "method",
          "documentation": "nonNull(Object a): boolean",
          "insertText": "nonNull"
        },
        {
          "label": "requireNonNull",
          "kind": "method",
          "documentation": "requireNonNull(def a, String b | def a): def",
          "insertText": "requireNonNull"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(Object a, String b | Object a): String",
          "insertText": "toString"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Observable",
      "kind": "class",
      "documentation": "Class: Observable",
      "insertText": "Observable",
      "properties": [
        {
          "label": "addObserver",
          "kind": "method",
          "documentation": "addObserver(Observer a): void",
          "insertText": "addObserver"
        },
        {
          "label": "countObservers",
          "kind": "method",
          "documentation": "countObservers(): int",
          "insertText": "countObservers"
        },
        {
          "label": "deleteObserver",
          "kind": "method",
          "documentation": "deleteObserver(Observer a): void",
          "insertText": "deleteObserver"
        },
        {
          "label": "deleteObservers",
          "kind": "method",
          "documentation": "deleteObservers(): void",
          "insertText": "deleteObservers"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hasChanged",
          "kind": "method",
          "documentation": "hasChanged(): boolean",
          "insertText": "hasChanged"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "notifyObservers",
          "kind": "method",
          "documentation": "notifyObservers(Object a): void",
          "insertText": "notifyObservers"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Observable",
        "kind": "constructor",
        "documentation": "Constructor: Observable",
        "insertText": "Observable"
      }
    },
    {
      "label": "Observer",
      "kind": "class",
      "documentation": "Class: Observer",
      "insertText": "Observer",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "update",
          "kind": "method",
          "documentation": "update(Observable a, Object b): void",
          "insertText": "update"
        }
      ]
    },
    {
      "label": "Optional",
      "kind": "class",
      "documentation": "Class: Optional",
      "insertText": "Optional",
      "properties": [
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): Optional",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(def a): Optional",
          "insertText": "of"
        },
        {
          "label": "ofNullable",
          "kind": "method",
          "documentation": "ofNullable(def a): Optional",
          "insertText": "ofNullable"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "filter",
          "kind": "method",
          "documentation": "filter(Predicate a): Optional",
          "insertText": "filter"
        },
        {
          "label": "flatMap",
          "kind": "method",
          "documentation": "flatMap(Function a): Optional",
          "insertText": "flatMap"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(): def",
          "insertText": "get"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "ifPresent",
          "kind": "method",
          "documentation": "ifPresent(Consumer a): void",
          "insertText": "ifPresent"
        },
        {
          "label": "isPresent",
          "kind": "method",
          "documentation": "isPresent(): boolean",
          "insertText": "isPresent"
        },
        {
          "label": "map",
          "kind": "method",
          "documentation": "map(Function a): Optional",
          "insertText": "map"
        },
        {
          "label": "orElse",
          "kind": "method",
          "documentation": "orElse(def a): def",
          "insertText": "orElse"
        },
        {
          "label": "orElseGet",
          "kind": "method",
          "documentation": "orElseGet(Supplier a): def",
          "insertText": "orElseGet"
        },
        {
          "label": "orElseThrow",
          "kind": "method",
          "documentation": "orElseThrow(Supplier a): def",
          "insertText": "orElseThrow"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "OptionalDouble",
      "kind": "class",
      "documentation": "Class: OptionalDouble",
      "insertText": "OptionalDouble",
      "properties": [
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): OptionalDouble",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(double a): OptionalDouble",
          "insertText": "of"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsDouble",
          "kind": "method",
          "documentation": "getAsDouble(): double",
          "insertText": "getAsDouble"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "ifPresent",
          "kind": "method",
          "documentation": "ifPresent(DoubleConsumer a): void",
          "insertText": "ifPresent"
        },
        {
          "label": "isPresent",
          "kind": "method",
          "documentation": "isPresent(): boolean",
          "insertText": "isPresent"
        },
        {
          "label": "orElse",
          "kind": "method",
          "documentation": "orElse(double a): double",
          "insertText": "orElse"
        },
        {
          "label": "orElseGet",
          "kind": "method",
          "documentation": "orElseGet(DoubleSupplier a): double",
          "insertText": "orElseGet"
        },
        {
          "label": "orElseThrow",
          "kind": "method",
          "documentation": "orElseThrow(Supplier a): double",
          "insertText": "orElseThrow"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "OptionalInt",
      "kind": "class",
      "documentation": "Class: OptionalInt",
      "insertText": "OptionalInt",
      "properties": [
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): OptionalInt",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int a): OptionalInt",
          "insertText": "of"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsInt",
          "kind": "method",
          "documentation": "getAsInt(): int",
          "insertText": "getAsInt"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "ifPresent",
          "kind": "method",
          "documentation": "ifPresent(IntConsumer a): void",
          "insertText": "ifPresent"
        },
        {
          "label": "isPresent",
          "kind": "method",
          "documentation": "isPresent(): boolean",
          "insertText": "isPresent"
        },
        {
          "label": "orElse",
          "kind": "method",
          "documentation": "orElse(int a): int",
          "insertText": "orElse"
        },
        {
          "label": "orElseGet",
          "kind": "method",
          "documentation": "orElseGet(IntSupplier a): int",
          "insertText": "orElseGet"
        },
        {
          "label": "orElseThrow",
          "kind": "method",
          "documentation": "orElseThrow(Supplier a): int",
          "insertText": "orElseThrow"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "OptionalLong",
      "kind": "class",
      "documentation": "Class: OptionalLong",
      "insertText": "OptionalLong",
      "properties": [
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): OptionalLong",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(long a): OptionalLong",
          "insertText": "of"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsLong",
          "kind": "method",
          "documentation": "getAsLong(): long",
          "insertText": "getAsLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "ifPresent",
          "kind": "method",
          "documentation": "ifPresent(LongConsumer a): void",
          "insertText": "ifPresent"
        },
        {
          "label": "isPresent",
          "kind": "method",
          "documentation": "isPresent(): boolean",
          "insertText": "isPresent"
        },
        {
          "label": "orElse",
          "kind": "method",
          "documentation": "orElse(long a): long",
          "insertText": "orElse"
        },
        {
          "label": "orElseGet",
          "kind": "method",
          "documentation": "orElseGet(LongSupplier a): long",
          "insertText": "orElseGet"
        },
        {
          "label": "orElseThrow",
          "kind": "method",
          "documentation": "orElseThrow(Supplier a): long",
          "insertText": "orElseThrow"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "PrimitiveIterator",
      "kind": "class",
      "documentation": "Class: PrimitiveIterator",
      "insertText": "PrimitiveIterator",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "hasNext",
          "kind": "method",
          "documentation": "hasNext(): boolean",
          "insertText": "hasNext"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): def",
          "insertText": "next"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): void",
          "insertText": "remove"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "OfDouble",
      "kind": "class",
      "documentation": "Class: OfDouble",
      "insertText": "OfDouble",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "hasNext",
          "kind": "method",
          "documentation": "hasNext(): boolean",
          "insertText": "hasNext"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): Double",
          "insertText": "next"
        },
        {
          "label": "nextDouble",
          "kind": "method",
          "documentation": "nextDouble(): double",
          "insertText": "nextDouble"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): void",
          "insertText": "remove"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "OfInt",
      "kind": "class",
      "documentation": "Class: OfInt",
      "insertText": "OfInt",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "hasNext",
          "kind": "method",
          "documentation": "hasNext(): boolean",
          "insertText": "hasNext"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): Integer",
          "insertText": "next"
        },
        {
          "label": "nextInt",
          "kind": "method",
          "documentation": "nextInt(): int",
          "insertText": "nextInt"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): void",
          "insertText": "remove"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "OfLong",
      "kind": "class",
      "documentation": "Class: OfLong",
      "insertText": "OfLong",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "hasNext",
          "kind": "method",
          "documentation": "hasNext(): boolean",
          "insertText": "hasNext"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "next",
          "kind": "method",
          "documentation": "next(): Long",
          "insertText": "next"
        },
        {
          "label": "nextLong",
          "kind": "method",
          "documentation": "nextLong(): long",
          "insertText": "nextLong"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): void",
          "insertText": "remove"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "PriorityQueue",
      "kind": "class",
      "documentation": "Class: PriorityQueue",
      "insertText": "PriorityQueue",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "element",
          "kind": "method",
          "documentation": "element(): def",
          "insertText": "element"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "offer",
          "kind": "method",
          "documentation": "offer(def a): boolean",
          "insertText": "offer"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "poll",
          "kind": "method",
          "documentation": "poll(): def",
          "insertText": "poll"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "PriorityQueue",
        "kind": "constructor",
        "documentation": "Constructor: PriorityQueue",
        "insertText": "PriorityQueue"
      }
    },
    {
      "label": "Queue",
      "kind": "class",
      "documentation": "Class: Queue",
      "insertText": "Queue",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "element",
          "kind": "method",
          "documentation": "element(): def",
          "insertText": "element"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "offer",
          "kind": "method",
          "documentation": "offer(def a): boolean",
          "insertText": "offer"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "poll",
          "kind": "method",
          "documentation": "poll(): def",
          "insertText": "poll"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Random",
      "kind": "class",
      "documentation": "Class: Random",
      "insertText": "Random",
      "properties": [
        {
          "label": "doubles",
          "kind": "method",
          "documentation": "doubles(long a, double b, double c | long a): DoubleStream",
          "insertText": "doubles"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "ints",
          "kind": "method",
          "documentation": "ints(long a, int b, int c | long a): IntStream",
          "insertText": "ints"
        },
        {
          "label": "longs",
          "kind": "method",
          "documentation": "longs(long a, long b, long c | long a): LongStream",
          "insertText": "longs"
        },
        {
          "label": "nextBoolean",
          "kind": "method",
          "documentation": "nextBoolean(): boolean",
          "insertText": "nextBoolean"
        },
        {
          "label": "nextBytes",
          "kind": "method",
          "documentation": "nextBytes(byte[] a): void",
          "insertText": "nextBytes"
        },
        {
          "label": "nextDouble",
          "kind": "method",
          "documentation": "nextDouble(): double",
          "insertText": "nextDouble"
        },
        {
          "label": "nextFloat",
          "kind": "method",
          "documentation": "nextFloat(): float",
          "insertText": "nextFloat"
        },
        {
          "label": "nextGaussian",
          "kind": "method",
          "documentation": "nextGaussian(): double",
          "insertText": "nextGaussian"
        },
        {
          "label": "nextInt",
          "kind": "method",
          "documentation": "nextInt(int a): int",
          "insertText": "nextInt"
        },
        {
          "label": "nextLong",
          "kind": "method",
          "documentation": "nextLong(): long",
          "insertText": "nextLong"
        },
        {
          "label": "setSeed",
          "kind": "method",
          "documentation": "setSeed(long a): void",
          "insertText": "setSeed"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Random",
        "kind": "constructor",
        "documentation": "Constructor: Random",
        "insertText": "Random"
      }
    },
    {
      "label": "RandomAccess",
      "kind": "class",
      "documentation": "Class: RandomAccess",
      "insertText": "RandomAccess",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Set",
      "kind": "class",
      "documentation": "Class: Set",
      "insertText": "Set",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "SimpleTimeZone",
      "kind": "class",
      "documentation": "Class: SimpleTimeZone",
      "insertText": "SimpleTimeZone",
      "properties": [
        {
          "label": "STANDARD_TIME",
          "kind": "property",
          "documentation": "STANDARD_TIME: int",
          "insertText": "STANDARD_TIME"
        },
        {
          "label": "UTC_TIME",
          "kind": "property",
          "documentation": "UTC_TIME: int",
          "insertText": "UTC_TIME"
        },
        {
          "label": "WALL_TIME",
          "kind": "property",
          "documentation": "WALL_TIME: int",
          "insertText": "WALL_TIME"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDSTSavings",
          "kind": "method",
          "documentation": "getDSTSavings(): int",
          "insertText": "getDSTSavings"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getID",
          "kind": "method",
          "documentation": "getID(): String",
          "insertText": "getID"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(int a, int b, int c, int d, int e, int f | long a): int",
          "insertText": "getOffset"
        },
        {
          "label": "getRawOffset",
          "kind": "method",
          "documentation": "getRawOffset(): int",
          "insertText": "getRawOffset"
        },
        {
          "label": "hasSameRules",
          "kind": "method",
          "documentation": "hasSameRules(TimeZone a): boolean",
          "insertText": "hasSameRules"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "inDaylightTime",
          "kind": "method",
          "documentation": "inDaylightTime(Date a): boolean",
          "insertText": "inDaylightTime"
        },
        {
          "label": "observesDaylightTime",
          "kind": "method",
          "documentation": "observesDaylightTime(): boolean",
          "insertText": "observesDaylightTime"
        },
        {
          "label": "setDSTSavings",
          "kind": "method",
          "documentation": "setDSTSavings(int a): void",
          "insertText": "setDSTSavings"
        },
        {
          "label": "setEndRule",
          "kind": "method",
          "documentation": "setEndRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void",
          "insertText": "setEndRule"
        },
        {
          "label": "setRawOffset",
          "kind": "method",
          "documentation": "setRawOffset(int a): void",
          "insertText": "setRawOffset"
        },
        {
          "label": "setStartRule",
          "kind": "method",
          "documentation": "setStartRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void",
          "insertText": "setStartRule"
        },
        {
          "label": "setStartYear",
          "kind": "method",
          "documentation": "setStartYear(int a): void",
          "insertText": "setStartYear"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "toZoneId",
          "kind": "method",
          "documentation": "toZoneId(): ZoneId",
          "insertText": "toZoneId"
        },
        {
          "label": "useDaylightTime",
          "kind": "method",
          "documentation": "useDaylightTime(): boolean",
          "insertText": "useDaylightTime"
        }
      ],
      "constructorDefinition": {
        "label": "SimpleTimeZone",
        "kind": "constructor",
        "documentation": "Constructor: SimpleTimeZone",
        "insertText": "SimpleTimeZone"
      }
    },
    {
      "label": "SortedMap",
      "kind": "class",
      "documentation": "Class: SortedMap",
      "insertText": "SortedMap",
      "properties": [
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "comparator",
          "kind": "method",
          "documentation": "comparator(): Comparator",
          "insertText": "comparator"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "firstKey",
          "kind": "method",
          "documentation": "firstKey(): def",
          "insertText": "firstKey"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "headMap",
          "kind": "method",
          "documentation": "headMap(def a): SortedMap",
          "insertText": "headMap"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "lastKey",
          "kind": "method",
          "documentation": "lastKey(): def",
          "insertText": "lastKey"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "subMap",
          "kind": "method",
          "documentation": "subMap(def a, def b): SortedMap",
          "insertText": "subMap"
        },
        {
          "label": "tailMap",
          "kind": "method",
          "documentation": "tailMap(def a): SortedMap",
          "insertText": "tailMap"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ]
    },
    {
      "label": "SortedSet",
      "kind": "class",
      "documentation": "Class: SortedSet",
      "insertText": "SortedSet",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "comparator",
          "kind": "method",
          "documentation": "comparator(): Comparator",
          "insertText": "comparator"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): def",
          "insertText": "first"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "headSet",
          "kind": "method",
          "documentation": "headSet(def a): SortedSet",
          "insertText": "headSet"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): def",
          "insertText": "last"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subSet",
          "kind": "method",
          "documentation": "subSet(def a, def b): SortedSet",
          "insertText": "subSet"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "tailSet",
          "kind": "method",
          "documentation": "tailSet(def a): SortedSet",
          "insertText": "tailSet"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Spliterator",
      "kind": "class",
      "documentation": "Class: Spliterator",
      "insertText": "Spliterator",
      "properties": [
        {
          "label": "CONCURRENT",
          "kind": "property",
          "documentation": "CONCURRENT: int",
          "insertText": "CONCURRENT"
        },
        {
          "label": "DISTINCT",
          "kind": "property",
          "documentation": "DISTINCT: int",
          "insertText": "DISTINCT"
        },
        {
          "label": "IMMUTABLE",
          "kind": "property",
          "documentation": "IMMUTABLE: int",
          "insertText": "IMMUTABLE"
        },
        {
          "label": "NONNULL",
          "kind": "property",
          "documentation": "NONNULL: int",
          "insertText": "NONNULL"
        },
        {
          "label": "ORDERED",
          "kind": "property",
          "documentation": "ORDERED: int",
          "insertText": "ORDERED"
        },
        {
          "label": "SIZED",
          "kind": "property",
          "documentation": "SIZED: int",
          "insertText": "SIZED"
        },
        {
          "label": "SORTED",
          "kind": "property",
          "documentation": "SORTED: int",
          "insertText": "SORTED"
        },
        {
          "label": "SUBSIZED",
          "kind": "property",
          "documentation": "SUBSIZED: int",
          "insertText": "SUBSIZED"
        },
        {
          "label": "characteristics",
          "kind": "method",
          "documentation": "characteristics(): int",
          "insertText": "characteristics"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "estimateSize",
          "kind": "method",
          "documentation": "estimateSize(): long",
          "insertText": "estimateSize"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(Consumer a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "getComparator",
          "kind": "method",
          "documentation": "getComparator(): Comparator",
          "insertText": "getComparator"
        },
        {
          "label": "getExactSizeIfKnown",
          "kind": "method",
          "documentation": "getExactSizeIfKnown(): long",
          "insertText": "getExactSizeIfKnown"
        },
        {
          "label": "hasCharacteristics",
          "kind": "method",
          "documentation": "hasCharacteristics(int a): boolean",
          "insertText": "hasCharacteristics"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "tryAdvance",
          "kind": "method",
          "documentation": "tryAdvance(Consumer a): boolean",
          "insertText": "tryAdvance"
        },
        {
          "label": "trySplit",
          "kind": "method",
          "documentation": "trySplit(): Spliterator",
          "insertText": "trySplit"
        }
      ]
    },
    {
      "label": "OfDouble",
      "kind": "class",
      "documentation": "Class: OfDouble",
      "insertText": "OfDouble",
      "properties": [
        {
          "label": "characteristics",
          "kind": "method",
          "documentation": "characteristics(): int",
          "insertText": "characteristics"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "estimateSize",
          "kind": "method",
          "documentation": "estimateSize(): long",
          "insertText": "estimateSize"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "getComparator",
          "kind": "method",
          "documentation": "getComparator(): Comparator",
          "insertText": "getComparator"
        },
        {
          "label": "getExactSizeIfKnown",
          "kind": "method",
          "documentation": "getExactSizeIfKnown(): long",
          "insertText": "getExactSizeIfKnown"
        },
        {
          "label": "hasCharacteristics",
          "kind": "method",
          "documentation": "hasCharacteristics(int a): boolean",
          "insertText": "hasCharacteristics"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "tryAdvance",
          "kind": "method",
          "documentation": "tryAdvance(def a): boolean",
          "insertText": "tryAdvance"
        },
        {
          "label": "trySplit",
          "kind": "method",
          "documentation": "trySplit(): Spliterator.OfDouble",
          "insertText": "trySplit"
        }
      ]
    },
    {
      "label": "OfInt",
      "kind": "class",
      "documentation": "Class: OfInt",
      "insertText": "OfInt",
      "properties": [
        {
          "label": "characteristics",
          "kind": "method",
          "documentation": "characteristics(): int",
          "insertText": "characteristics"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "estimateSize",
          "kind": "method",
          "documentation": "estimateSize(): long",
          "insertText": "estimateSize"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "getComparator",
          "kind": "method",
          "documentation": "getComparator(): Comparator",
          "insertText": "getComparator"
        },
        {
          "label": "getExactSizeIfKnown",
          "kind": "method",
          "documentation": "getExactSizeIfKnown(): long",
          "insertText": "getExactSizeIfKnown"
        },
        {
          "label": "hasCharacteristics",
          "kind": "method",
          "documentation": "hasCharacteristics(int a): boolean",
          "insertText": "hasCharacteristics"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "tryAdvance",
          "kind": "method",
          "documentation": "tryAdvance(def a): boolean",
          "insertText": "tryAdvance"
        },
        {
          "label": "trySplit",
          "kind": "method",
          "documentation": "trySplit(): Spliterator.OfInt",
          "insertText": "trySplit"
        }
      ]
    },
    {
      "label": "OfLong",
      "kind": "class",
      "documentation": "Class: OfLong",
      "insertText": "OfLong",
      "properties": [
        {
          "label": "characteristics",
          "kind": "method",
          "documentation": "characteristics(): int",
          "insertText": "characteristics"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "estimateSize",
          "kind": "method",
          "documentation": "estimateSize(): long",
          "insertText": "estimateSize"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "getComparator",
          "kind": "method",
          "documentation": "getComparator(): Comparator",
          "insertText": "getComparator"
        },
        {
          "label": "getExactSizeIfKnown",
          "kind": "method",
          "documentation": "getExactSizeIfKnown(): long",
          "insertText": "getExactSizeIfKnown"
        },
        {
          "label": "hasCharacteristics",
          "kind": "method",
          "documentation": "hasCharacteristics(int a): boolean",
          "insertText": "hasCharacteristics"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "tryAdvance",
          "kind": "method",
          "documentation": "tryAdvance(def a): boolean",
          "insertText": "tryAdvance"
        },
        {
          "label": "trySplit",
          "kind": "method",
          "documentation": "trySplit(): Spliterator.OfLong",
          "insertText": "trySplit"
        }
      ]
    },
    {
      "label": "OfPrimitive",
      "kind": "class",
      "documentation": "Class: OfPrimitive",
      "insertText": "OfPrimitive",
      "properties": [
        {
          "label": "characteristics",
          "kind": "method",
          "documentation": "characteristics(): int",
          "insertText": "characteristics"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "estimateSize",
          "kind": "method",
          "documentation": "estimateSize(): long",
          "insertText": "estimateSize"
        },
        {
          "label": "forEachRemaining",
          "kind": "method",
          "documentation": "forEachRemaining(def a): void",
          "insertText": "forEachRemaining"
        },
        {
          "label": "getComparator",
          "kind": "method",
          "documentation": "getComparator(): Comparator",
          "insertText": "getComparator"
        },
        {
          "label": "getExactSizeIfKnown",
          "kind": "method",
          "documentation": "getExactSizeIfKnown(): long",
          "insertText": "getExactSizeIfKnown"
        },
        {
          "label": "hasCharacteristics",
          "kind": "method",
          "documentation": "hasCharacteristics(int a): boolean",
          "insertText": "hasCharacteristics"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "tryAdvance",
          "kind": "method",
          "documentation": "tryAdvance(def a): boolean",
          "insertText": "tryAdvance"
        },
        {
          "label": "trySplit",
          "kind": "method",
          "documentation": "trySplit(): Spliterator.OfPrimitive",
          "insertText": "trySplit"
        }
      ]
    },
    {
      "label": "Spliterators",
      "kind": "class",
      "documentation": "Class: Spliterators",
      "insertText": "Spliterators",
      "properties": [
        {
          "label": "emptyDoubleSpliterator",
          "kind": "method",
          "documentation": "emptyDoubleSpliterator(): Spliterator.OfDouble",
          "insertText": "emptyDoubleSpliterator"
        },
        {
          "label": "emptyIntSpliterator",
          "kind": "method",
          "documentation": "emptyIntSpliterator(): Spliterator.OfInt",
          "insertText": "emptyIntSpliterator"
        },
        {
          "label": "emptyLongSpliterator",
          "kind": "method",
          "documentation": "emptyLongSpliterator(): Spliterator.OfLong",
          "insertText": "emptyLongSpliterator"
        },
        {
          "label": "emptySpliterator",
          "kind": "method",
          "documentation": "emptySpliterator(): Spliterator",
          "insertText": "emptySpliterator"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(Spliterator a): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(Iterator a, long b, int c | Collection a, int b): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "spliteratorUnknownSize",
          "kind": "method",
          "documentation": "spliteratorUnknownSize(Iterator a, int b): Spliterator",
          "insertText": "spliteratorUnknownSize"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Stack",
      "kind": "class",
      "documentation": "Class: Stack",
      "insertText": "Stack",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "addElement",
          "kind": "method",
          "documentation": "addElement(def a): void",
          "insertText": "addElement"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "copyInto",
          "kind": "method",
          "documentation": "copyInto(Object[] a): void",
          "insertText": "copyInto"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "elementAt",
          "kind": "method",
          "documentation": "elementAt(int a): def",
          "insertText": "elementAt"
        },
        {
          "label": "elements",
          "kind": "method",
          "documentation": "elements(): Enumeration",
          "insertText": "elements"
        },
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): boolean",
          "insertText": "empty"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "firstElement",
          "kind": "method",
          "documentation": "firstElement(): def",
          "insertText": "firstElement"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "insertElementAt",
          "kind": "method",
          "documentation": "insertElementAt(def a, int b): void",
          "insertText": "insertElementAt"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastElement",
          "kind": "method",
          "documentation": "lastElement(): def",
          "insertText": "lastElement"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a, int b | def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(): def",
          "insertText": "peek"
        },
        {
          "label": "pop",
          "kind": "method",
          "documentation": "pop(): def",
          "insertText": "pop"
        },
        {
          "label": "push",
          "kind": "method",
          "documentation": "push(def a): def",
          "insertText": "push"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeAllElements",
          "kind": "method",
          "documentation": "removeAllElements(): void",
          "insertText": "removeAllElements"
        },
        {
          "label": "removeElement",
          "kind": "method",
          "documentation": "removeElement(def a): boolean",
          "insertText": "removeElement"
        },
        {
          "label": "removeElementAt",
          "kind": "method",
          "documentation": "removeElementAt(int a): void",
          "insertText": "removeElementAt"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "search",
          "kind": "method",
          "documentation": "search(def a): int",
          "insertText": "search"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "setElementAt",
          "kind": "method",
          "documentation": "setElementAt(def a, int b): void",
          "insertText": "setElementAt"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Stack",
        "kind": "constructor",
        "documentation": "Constructor: Stack",
        "insertText": "Stack"
      }
    },
    {
      "label": "StringJoiner",
      "kind": "class",
      "documentation": "Class: StringJoiner",
      "insertText": "StringJoiner",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(CharSequence a): StringJoiner",
          "insertText": "add"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(StringJoiner a): StringJoiner",
          "insertText": "merge"
        },
        {
          "label": "setEmptyValue",
          "kind": "method",
          "documentation": "setEmptyValue(CharSequence a): StringJoiner",
          "insertText": "setEmptyValue"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StringJoiner",
        "kind": "constructor",
        "documentation": "Constructor: StringJoiner",
        "insertText": "StringJoiner"
      }
    },
    {
      "label": "StringTokenizer",
      "kind": "class",
      "documentation": "Class: StringTokenizer",
      "insertText": "StringTokenizer",
      "properties": [
        {
          "label": "countTokens",
          "kind": "method",
          "documentation": "countTokens(): int",
          "insertText": "countTokens"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hasMoreElements",
          "kind": "method",
          "documentation": "hasMoreElements(): boolean",
          "insertText": "hasMoreElements"
        },
        {
          "label": "hasMoreTokens",
          "kind": "method",
          "documentation": "hasMoreTokens(): boolean",
          "insertText": "hasMoreTokens"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "nextElement",
          "kind": "method",
          "documentation": "nextElement(): def",
          "insertText": "nextElement"
        },
        {
          "label": "nextToken",
          "kind": "method",
          "documentation": "nextToken(String a): String",
          "insertText": "nextToken"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "StringTokenizer",
        "kind": "constructor",
        "documentation": "Constructor: StringTokenizer",
        "insertText": "StringTokenizer"
      }
    },
    {
      "label": "TimeZone",
      "kind": "class",
      "documentation": "Class: TimeZone",
      "insertText": "TimeZone",
      "properties": [
        {
          "label": "LONG",
          "kind": "property",
          "documentation": "LONG: int",
          "insertText": "LONG"
        },
        {
          "label": "SHORT",
          "kind": "property",
          "documentation": "SHORT: int",
          "insertText": "SHORT"
        },
        {
          "label": "getAvailableIDs",
          "kind": "method",
          "documentation": "getAvailableIDs(int a): String[]",
          "insertText": "getAvailableIDs"
        },
        {
          "label": "getDefault",
          "kind": "method",
          "documentation": "getDefault(): TimeZone",
          "insertText": "getDefault"
        },
        {
          "label": "getTimeZone",
          "kind": "method",
          "documentation": "getTimeZone(String a): TimeZone",
          "insertText": "getTimeZone"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDSTSavings",
          "kind": "method",
          "documentation": "getDSTSavings(): int",
          "insertText": "getDSTSavings"
        },
        {
          "label": "getDisplayName",
          "kind": "method",
          "documentation": "getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String",
          "insertText": "getDisplayName"
        },
        {
          "label": "getID",
          "kind": "method",
          "documentation": "getID(): String",
          "insertText": "getID"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(int a, int b, int c, int d, int e, int f | long a): int",
          "insertText": "getOffset"
        },
        {
          "label": "getRawOffset",
          "kind": "method",
          "documentation": "getRawOffset(): int",
          "insertText": "getRawOffset"
        },
        {
          "label": "hasSameRules",
          "kind": "method",
          "documentation": "hasSameRules(TimeZone a): boolean",
          "insertText": "hasSameRules"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "inDaylightTime",
          "kind": "method",
          "documentation": "inDaylightTime(Date a): boolean",
          "insertText": "inDaylightTime"
        },
        {
          "label": "observesDaylightTime",
          "kind": "method",
          "documentation": "observesDaylightTime(): boolean",
          "insertText": "observesDaylightTime"
        },
        {
          "label": "setRawOffset",
          "kind": "method",
          "documentation": "setRawOffset(int a): void",
          "insertText": "setRawOffset"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "toZoneId",
          "kind": "method",
          "documentation": "toZoneId(): ZoneId",
          "insertText": "toZoneId"
        },
        {
          "label": "useDaylightTime",
          "kind": "method",
          "documentation": "useDaylightTime(): boolean",
          "insertText": "useDaylightTime"
        }
      ]
    },
    {
      "label": "TooManyListenersException",
      "kind": "class",
      "documentation": "Class: TooManyListenersException",
      "insertText": "TooManyListenersException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "TooManyListenersException",
        "kind": "constructor",
        "documentation": "Constructor: TooManyListenersException",
        "insertText": "TooManyListenersException"
      }
    },
    {
      "label": "TreeMap",
      "kind": "class",
      "documentation": "Class: TreeMap",
      "insertText": "TreeMap",
      "properties": [
        {
          "label": "ceilingEntry",
          "kind": "method",
          "documentation": "ceilingEntry(def a): Map.Entry",
          "insertText": "ceilingEntry"
        },
        {
          "label": "ceilingKey",
          "kind": "method",
          "documentation": "ceilingKey(def a): def",
          "insertText": "ceilingKey"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, BiFunction b | BiFunction a): def | List",
          "insertText": "collect"
        },
        {
          "label": "comparator",
          "kind": "method",
          "documentation": "comparator(): Comparator",
          "insertText": "comparator"
        },
        {
          "label": "compute",
          "kind": "method",
          "documentation": "compute(def a, BiFunction b): def",
          "insertText": "compute"
        },
        {
          "label": "computeIfAbsent",
          "kind": "method",
          "documentation": "computeIfAbsent(def a, Function b): def",
          "insertText": "computeIfAbsent"
        },
        {
          "label": "computeIfPresent",
          "kind": "method",
          "documentation": "computeIfPresent(def a, BiFunction b): def",
          "insertText": "computeIfPresent"
        },
        {
          "label": "containsKey",
          "kind": "method",
          "documentation": "containsKey(def a): boolean",
          "insertText": "containsKey"
        },
        {
          "label": "containsValue",
          "kind": "method",
          "documentation": "containsValue(def a): boolean",
          "insertText": "containsValue"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(BiPredicate a): int",
          "insertText": "count"
        },
        {
          "label": "descendingKeySet",
          "kind": "method",
          "documentation": "descendingKeySet(): NavigableSet",
          "insertText": "descendingKeySet"
        },
        {
          "label": "descendingMap",
          "kind": "method",
          "documentation": "descendingMap(): NavigableMap",
          "insertText": "descendingMap"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(BiConsumer a): def",
          "insertText": "each"
        },
        {
          "label": "entrySet",
          "kind": "method",
          "documentation": "entrySet(): Set",
          "insertText": "entrySet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(BiPredicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(BiPredicate a): Map.Entry",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(BiPredicate a): Map",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, BiFunction b | BiFunction a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(BiFunction a): List",
          "insertText": "findResults"
        },
        {
          "label": "firstEntry",
          "kind": "method",
          "documentation": "firstEntry(): Map.Entry",
          "insertText": "firstEntry"
        },
        {
          "label": "firstKey",
          "kind": "method",
          "documentation": "firstKey(): def",
          "insertText": "firstKey"
        },
        {
          "label": "floorEntry",
          "kind": "method",
          "documentation": "floorEntry(def a): Map.Entry",
          "insertText": "floorEntry"
        },
        {
          "label": "floorKey",
          "kind": "method",
          "documentation": "floorKey(def a): def",
          "insertText": "floorKey"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(BiConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(def a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getOrDefault",
          "kind": "method",
          "documentation": "getOrDefault(def a, def b): def",
          "insertText": "getOrDefault"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(BiFunction a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "headMap",
          "kind": "method",
          "documentation": "headMap(def a, boolean b | def a): NavigableMap | SortedMap",
          "insertText": "headMap"
        },
        {
          "label": "higherEntry",
          "kind": "method",
          "documentation": "higherEntry(def a): Map.Entry",
          "insertText": "higherEntry"
        },
        {
          "label": "higherKey",
          "kind": "method",
          "documentation": "higherKey(def a): def",
          "insertText": "higherKey"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "keySet",
          "kind": "method",
          "documentation": "keySet(): Set",
          "insertText": "keySet"
        },
        {
          "label": "lastEntry",
          "kind": "method",
          "documentation": "lastEntry(): Map.Entry",
          "insertText": "lastEntry"
        },
        {
          "label": "lastKey",
          "kind": "method",
          "documentation": "lastKey(): def",
          "insertText": "lastKey"
        },
        {
          "label": "lowerEntry",
          "kind": "method",
          "documentation": "lowerEntry(def a): Map.Entry",
          "insertText": "lowerEntry"
        },
        {
          "label": "merge",
          "kind": "method",
          "documentation": "merge(def a, def b, BiFunction c): def",
          "insertText": "merge"
        },
        {
          "label": "navigableKeySet",
          "kind": "method",
          "documentation": "navigableKeySet(): NavigableSet",
          "insertText": "navigableKeySet"
        },
        {
          "label": "pollFirstEntry",
          "kind": "method",
          "documentation": "pollFirstEntry(): Map.Entry",
          "insertText": "pollFirstEntry"
        },
        {
          "label": "pollLastEntry",
          "kind": "method",
          "documentation": "pollLastEntry(): Map.Entry",
          "insertText": "pollLastEntry"
        },
        {
          "label": "put",
          "kind": "method",
          "documentation": "put(def a, def b): def",
          "insertText": "put"
        },
        {
          "label": "putAll",
          "kind": "method",
          "documentation": "putAll(Map a): void",
          "insertText": "putAll"
        },
        {
          "label": "putIfAbsent",
          "kind": "method",
          "documentation": "putIfAbsent(def a, def b): def",
          "insertText": "putIfAbsent"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a, def b | def a): boolean | def",
          "insertText": "remove"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(def a, def b, def c | def a, def b): boolean | def",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(BiFunction a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "subMap",
          "kind": "method",
          "documentation": "subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap",
          "insertText": "subMap"
        },
        {
          "label": "tailMap",
          "kind": "method",
          "documentation": "tailMap(def a, boolean b | def a): NavigableMap | SortedMap",
          "insertText": "tailMap"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collection",
          "insertText": "values"
        }
      ],
      "constructorDefinition": {
        "label": "TreeMap",
        "kind": "constructor",
        "documentation": "Constructor: TreeMap",
        "insertText": "TreeMap"
      }
    },
    {
      "label": "TreeSet",
      "kind": "class",
      "documentation": "Class: TreeSet",
      "insertText": "TreeSet",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "ceiling",
          "kind": "method",
          "documentation": "ceiling(def a): def",
          "insertText": "ceiling"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "comparator",
          "kind": "method",
          "documentation": "comparator(): Comparator",
          "insertText": "comparator"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "descendingIterator",
          "kind": "method",
          "documentation": "descendingIterator(): Iterator",
          "insertText": "descendingIterator"
        },
        {
          "label": "descendingSet",
          "kind": "method",
          "documentation": "descendingSet(): NavigableSet",
          "insertText": "descendingSet"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "first",
          "kind": "method",
          "documentation": "first(): def",
          "insertText": "first"
        },
        {
          "label": "floor",
          "kind": "method",
          "documentation": "floor(def a): def",
          "insertText": "floor"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "headSet",
          "kind": "method",
          "documentation": "headSet(def a, boolean b | def a): NavigableSet | SortedSet",
          "insertText": "headSet"
        },
        {
          "label": "higher",
          "kind": "method",
          "documentation": "higher(def a): def",
          "insertText": "higher"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "last",
          "kind": "method",
          "documentation": "last(): def",
          "insertText": "last"
        },
        {
          "label": "lower",
          "kind": "method",
          "documentation": "lower(def a): def",
          "insertText": "lower"
        },
        {
          "label": "pollFirst",
          "kind": "method",
          "documentation": "pollFirst(): def",
          "insertText": "pollFirst"
        },
        {
          "label": "pollLast",
          "kind": "method",
          "documentation": "pollLast(): def",
          "insertText": "pollLast"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(def a): boolean",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subSet",
          "kind": "method",
          "documentation": "subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet",
          "insertText": "subSet"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "tailSet",
          "kind": "method",
          "documentation": "tailSet(def a, boolean b | def a): NavigableSet | SortedSet",
          "insertText": "tailSet"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "TreeSet",
        "kind": "constructor",
        "documentation": "Constructor: TreeSet",
        "insertText": "TreeSet"
      }
    },
    {
      "label": "UUID",
      "kind": "class",
      "documentation": "Class: UUID",
      "insertText": "UUID",
      "properties": [
        {
          "label": "fromString",
          "kind": "method",
          "documentation": "fromString(String a): UUID",
          "insertText": "fromString"
        },
        {
          "label": "nameUUIDFromBytes",
          "kind": "method",
          "documentation": "nameUUIDFromBytes(byte[] a): UUID",
          "insertText": "nameUUIDFromBytes"
        },
        {
          "label": "randomUUID",
          "kind": "method",
          "documentation": "randomUUID(): UUID",
          "insertText": "randomUUID"
        },
        {
          "label": "clockSequence",
          "kind": "method",
          "documentation": "clockSequence(): int",
          "insertText": "clockSequence"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(UUID a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLeastSignificantBits",
          "kind": "method",
          "documentation": "getLeastSignificantBits(): long",
          "insertText": "getLeastSignificantBits"
        },
        {
          "label": "getMostSignificantBits",
          "kind": "method",
          "documentation": "getMostSignificantBits(): long",
          "insertText": "getMostSignificantBits"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "node",
          "kind": "method",
          "documentation": "node(): long",
          "insertText": "node"
        },
        {
          "label": "timestamp",
          "kind": "method",
          "documentation": "timestamp(): long",
          "insertText": "timestamp"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "variant",
          "kind": "method",
          "documentation": "variant(): int",
          "insertText": "variant"
        },
        {
          "label": "version",
          "kind": "method",
          "documentation": "version(): int",
          "insertText": "version"
        }
      ],
      "constructorDefinition": {
        "label": "UUID",
        "kind": "constructor",
        "documentation": "Constructor: UUID",
        "insertText": "UUID"
      }
    },
    {
      "label": "UnknownFormatConversionException",
      "kind": "class",
      "documentation": "Class: UnknownFormatConversionException",
      "insertText": "UnknownFormatConversionException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getConversion",
          "kind": "method",
          "documentation": "getConversion(): String",
          "insertText": "getConversion"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "UnknownFormatConversionException",
        "kind": "constructor",
        "documentation": "Constructor: UnknownFormatConversionException",
        "insertText": "UnknownFormatConversionException"
      }
    },
    {
      "label": "UnknownFormatFlagsException",
      "kind": "class",
      "documentation": "Class: UnknownFormatFlagsException",
      "insertText": "UnknownFormatFlagsException",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFlags",
          "kind": "method",
          "documentation": "getFlags(): String",
          "insertText": "getFlags"
        },
        {
          "label": "getLocalizedMessage",
          "kind": "method",
          "documentation": "getLocalizedMessage(): String",
          "insertText": "getLocalizedMessage"
        },
        {
          "label": "getMessage",
          "kind": "method",
          "documentation": "getMessage(): String",
          "insertText": "getMessage"
        },
        {
          "label": "getStackTrace",
          "kind": "method",
          "documentation": "getStackTrace(): StackTraceElement[]",
          "insertText": "getStackTrace"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "UnknownFormatFlagsException",
        "kind": "constructor",
        "documentation": "Constructor: UnknownFormatFlagsException",
        "insertText": "UnknownFormatFlagsException"
      }
    },
    {
      "label": "Vector",
      "kind": "class",
      "documentation": "Class: Vector",
      "insertText": "Vector",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "addElement",
          "kind": "method",
          "documentation": "addElement(def a): void",
          "insertText": "addElement"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "clone",
          "kind": "method",
          "documentation": "clone(): def",
          "insertText": "clone"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "copyInto",
          "kind": "method",
          "documentation": "copyInto(Object[] a): void",
          "insertText": "copyInto"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "elementAt",
          "kind": "method",
          "documentation": "elementAt(int a): def",
          "insertText": "elementAt"
        },
        {
          "label": "elements",
          "kind": "method",
          "documentation": "elements(): Enumeration",
          "insertText": "elements"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "firstElement",
          "kind": "method",
          "documentation": "firstElement(): def",
          "insertText": "firstElement"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "insertElementAt",
          "kind": "method",
          "documentation": "insertElementAt(def a, int b): void",
          "insertText": "insertElementAt"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastElement",
          "kind": "method",
          "documentation": "lastElement(): def",
          "insertText": "lastElement"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a, int b | def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeAllElements",
          "kind": "method",
          "documentation": "removeAllElements(): void",
          "insertText": "removeAllElements"
        },
        {
          "label": "removeElement",
          "kind": "method",
          "documentation": "removeElement(def a): boolean",
          "insertText": "removeElement"
        },
        {
          "label": "removeElementAt",
          "kind": "method",
          "documentation": "removeElementAt(int a): void",
          "insertText": "removeElementAt"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "setElementAt",
          "kind": "method",
          "documentation": "setElementAt(def a, int b): void",
          "insertText": "setElementAt"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ],
      "constructorDefinition": {
        "label": "Vector",
        "kind": "constructor",
        "documentation": "Constructor: Vector",
        "insertText": "Vector"
      }
    },
    {
      "label": "BiConsumer",
      "kind": "class",
      "documentation": "Class: BiConsumer",
      "insertText": "BiConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(def a, def b): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(BiConsumer a): BiConsumer",
          "insertText": "andThen"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BiFunction",
      "kind": "class",
      "documentation": "Class: BiFunction",
      "insertText": "BiFunction",
      "properties": [
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(Function a): BiFunction",
          "insertText": "andThen"
        },
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(def a, def b): def",
          "insertText": "apply"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BiPredicate",
      "kind": "class",
      "documentation": "Class: BiPredicate",
      "insertText": "BiPredicate",
      "properties": [
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(BiPredicate a): BiPredicate",
          "insertText": "and"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(): BiPredicate",
          "insertText": "negate"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(BiPredicate a): BiPredicate",
          "insertText": "or"
        },
        {
          "label": "test",
          "kind": "method",
          "documentation": "test(def a, def b): boolean",
          "insertText": "test"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BinaryOperator",
      "kind": "class",
      "documentation": "Class: BinaryOperator",
      "insertText": "BinaryOperator",
      "properties": [
        {
          "label": "maxBy",
          "kind": "method",
          "documentation": "maxBy(Comparator a): BinaryOperator",
          "insertText": "maxBy"
        },
        {
          "label": "minBy",
          "kind": "method",
          "documentation": "minBy(Comparator a): BinaryOperator",
          "insertText": "minBy"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(Function a): BiFunction",
          "insertText": "andThen"
        },
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(def a, def b): def",
          "insertText": "apply"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BooleanSupplier",
      "kind": "class",
      "documentation": "Class: BooleanSupplier",
      "insertText": "BooleanSupplier",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsBoolean",
          "kind": "method",
          "documentation": "getAsBoolean(): boolean",
          "insertText": "getAsBoolean"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Consumer",
      "kind": "class",
      "documentation": "Class: Consumer",
      "insertText": "Consumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(def a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(Consumer a): Consumer",
          "insertText": "andThen"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleBinaryOperator",
      "kind": "class",
      "documentation": "Class: DoubleBinaryOperator",
      "insertText": "DoubleBinaryOperator",
      "properties": [
        {
          "label": "applyAsDouble",
          "kind": "method",
          "documentation": "applyAsDouble(double a, double b): double",
          "insertText": "applyAsDouble"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleConsumer",
      "kind": "class",
      "documentation": "Class: DoubleConsumer",
      "insertText": "DoubleConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(double a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(DoubleConsumer a): DoubleConsumer",
          "insertText": "andThen"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleFunction",
      "kind": "class",
      "documentation": "Class: DoubleFunction",
      "insertText": "DoubleFunction",
      "properties": [
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(double a): def",
          "insertText": "apply"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoublePredicate",
      "kind": "class",
      "documentation": "Class: DoublePredicate",
      "insertText": "DoublePredicate",
      "properties": [
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(DoublePredicate a): DoublePredicate",
          "insertText": "and"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(): DoublePredicate",
          "insertText": "negate"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(DoublePredicate a): DoublePredicate",
          "insertText": "or"
        },
        {
          "label": "test",
          "kind": "method",
          "documentation": "test(double a): boolean",
          "insertText": "test"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleSupplier",
      "kind": "class",
      "documentation": "Class: DoubleSupplier",
      "insertText": "DoubleSupplier",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsDouble",
          "kind": "method",
          "documentation": "getAsDouble(): double",
          "insertText": "getAsDouble"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleToIntFunction",
      "kind": "class",
      "documentation": "Class: DoubleToIntFunction",
      "insertText": "DoubleToIntFunction",
      "properties": [
        {
          "label": "applyAsInt",
          "kind": "method",
          "documentation": "applyAsInt(double a): int",
          "insertText": "applyAsInt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleToLongFunction",
      "kind": "class",
      "documentation": "Class: DoubleToLongFunction",
      "insertText": "DoubleToLongFunction",
      "properties": [
        {
          "label": "applyAsLong",
          "kind": "method",
          "documentation": "applyAsLong(double a): long",
          "insertText": "applyAsLong"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleUnaryOperator",
      "kind": "class",
      "documentation": "Class: DoubleUnaryOperator",
      "insertText": "DoubleUnaryOperator",
      "properties": [
        {
          "label": "identity",
          "kind": "method",
          "documentation": "identity(): DoubleUnaryOperator",
          "insertText": "identity"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(DoubleUnaryOperator a): DoubleUnaryOperator",
          "insertText": "andThen"
        },
        {
          "label": "applyAsDouble",
          "kind": "method",
          "documentation": "applyAsDouble(double a): double",
          "insertText": "applyAsDouble"
        },
        {
          "label": "compose",
          "kind": "method",
          "documentation": "compose(DoubleUnaryOperator a): DoubleUnaryOperator",
          "insertText": "compose"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Function",
      "kind": "class",
      "documentation": "Class: Function",
      "insertText": "Function",
      "properties": [
        {
          "label": "identity",
          "kind": "method",
          "documentation": "identity(): Function",
          "insertText": "identity"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(Function a): Function",
          "insertText": "andThen"
        },
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(def a): def",
          "insertText": "apply"
        },
        {
          "label": "compose",
          "kind": "method",
          "documentation": "compose(Function a): Function",
          "insertText": "compose"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntBinaryOperator",
      "kind": "class",
      "documentation": "Class: IntBinaryOperator",
      "insertText": "IntBinaryOperator",
      "properties": [
        {
          "label": "applyAsInt",
          "kind": "method",
          "documentation": "applyAsInt(int a, int b): int",
          "insertText": "applyAsInt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntConsumer",
      "kind": "class",
      "documentation": "Class: IntConsumer",
      "insertText": "IntConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(int a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(IntConsumer a): IntConsumer",
          "insertText": "andThen"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntFunction",
      "kind": "class",
      "documentation": "Class: IntFunction",
      "insertText": "IntFunction",
      "properties": [
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(int a): def",
          "insertText": "apply"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntPredicate",
      "kind": "class",
      "documentation": "Class: IntPredicate",
      "insertText": "IntPredicate",
      "properties": [
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(IntPredicate a): IntPredicate",
          "insertText": "and"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(): IntPredicate",
          "insertText": "negate"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(IntPredicate a): IntPredicate",
          "insertText": "or"
        },
        {
          "label": "test",
          "kind": "method",
          "documentation": "test(int a): boolean",
          "insertText": "test"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntSupplier",
      "kind": "class",
      "documentation": "Class: IntSupplier",
      "insertText": "IntSupplier",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsInt",
          "kind": "method",
          "documentation": "getAsInt(): int",
          "insertText": "getAsInt"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntToDoubleFunction",
      "kind": "class",
      "documentation": "Class: IntToDoubleFunction",
      "insertText": "IntToDoubleFunction",
      "properties": [
        {
          "label": "applyAsDouble",
          "kind": "method",
          "documentation": "applyAsDouble(int a): double",
          "insertText": "applyAsDouble"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntToLongFunction",
      "kind": "class",
      "documentation": "Class: IntToLongFunction",
      "insertText": "IntToLongFunction",
      "properties": [
        {
          "label": "applyAsLong",
          "kind": "method",
          "documentation": "applyAsLong(int a): long",
          "insertText": "applyAsLong"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntUnaryOperator",
      "kind": "class",
      "documentation": "Class: IntUnaryOperator",
      "insertText": "IntUnaryOperator",
      "properties": [
        {
          "label": "identity",
          "kind": "method",
          "documentation": "identity(): IntUnaryOperator",
          "insertText": "identity"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(IntUnaryOperator a): IntUnaryOperator",
          "insertText": "andThen"
        },
        {
          "label": "applyAsInt",
          "kind": "method",
          "documentation": "applyAsInt(int a): int",
          "insertText": "applyAsInt"
        },
        {
          "label": "compose",
          "kind": "method",
          "documentation": "compose(IntUnaryOperator a): IntUnaryOperator",
          "insertText": "compose"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongBinaryOperator",
      "kind": "class",
      "documentation": "Class: LongBinaryOperator",
      "insertText": "LongBinaryOperator",
      "properties": [
        {
          "label": "applyAsLong",
          "kind": "method",
          "documentation": "applyAsLong(long a, long b): long",
          "insertText": "applyAsLong"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongConsumer",
      "kind": "class",
      "documentation": "Class: LongConsumer",
      "insertText": "LongConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(long a): void",
          "insertText": "accept"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(LongConsumer a): LongConsumer",
          "insertText": "andThen"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongFunction",
      "kind": "class",
      "documentation": "Class: LongFunction",
      "insertText": "LongFunction",
      "properties": [
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(long a): def",
          "insertText": "apply"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongPredicate",
      "kind": "class",
      "documentation": "Class: LongPredicate",
      "insertText": "LongPredicate",
      "properties": [
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(LongPredicate a): LongPredicate",
          "insertText": "and"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(): LongPredicate",
          "insertText": "negate"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(LongPredicate a): LongPredicate",
          "insertText": "or"
        },
        {
          "label": "test",
          "kind": "method",
          "documentation": "test(long a): boolean",
          "insertText": "test"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongSupplier",
      "kind": "class",
      "documentation": "Class: LongSupplier",
      "insertText": "LongSupplier",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getAsLong",
          "kind": "method",
          "documentation": "getAsLong(): long",
          "insertText": "getAsLong"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongToDoubleFunction",
      "kind": "class",
      "documentation": "Class: LongToDoubleFunction",
      "insertText": "LongToDoubleFunction",
      "properties": [
        {
          "label": "applyAsDouble",
          "kind": "method",
          "documentation": "applyAsDouble(long a): double",
          "insertText": "applyAsDouble"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongToIntFunction",
      "kind": "class",
      "documentation": "Class: LongToIntFunction",
      "insertText": "LongToIntFunction",
      "properties": [
        {
          "label": "applyAsInt",
          "kind": "method",
          "documentation": "applyAsInt(long a): int",
          "insertText": "applyAsInt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongUnaryOperator",
      "kind": "class",
      "documentation": "Class: LongUnaryOperator",
      "insertText": "LongUnaryOperator",
      "properties": [
        {
          "label": "identity",
          "kind": "method",
          "documentation": "identity(): LongUnaryOperator",
          "insertText": "identity"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(LongUnaryOperator a): LongUnaryOperator",
          "insertText": "andThen"
        },
        {
          "label": "applyAsLong",
          "kind": "method",
          "documentation": "applyAsLong(long a): long",
          "insertText": "applyAsLong"
        },
        {
          "label": "compose",
          "kind": "method",
          "documentation": "compose(LongUnaryOperator a): LongUnaryOperator",
          "insertText": "compose"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ObjDoubleConsumer",
      "kind": "class",
      "documentation": "Class: ObjDoubleConsumer",
      "insertText": "ObjDoubleConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(def a, double b): void",
          "insertText": "accept"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ObjIntConsumer",
      "kind": "class",
      "documentation": "Class: ObjIntConsumer",
      "insertText": "ObjIntConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(def a, int b): void",
          "insertText": "accept"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ObjLongConsumer",
      "kind": "class",
      "documentation": "Class: ObjLongConsumer",
      "insertText": "ObjLongConsumer",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(def a, long b): void",
          "insertText": "accept"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Predicate",
      "kind": "class",
      "documentation": "Class: Predicate",
      "insertText": "Predicate",
      "properties": [
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(def a): Predicate",
          "insertText": "isEqual"
        },
        {
          "label": "and",
          "kind": "method",
          "documentation": "and(Predicate a): Predicate",
          "insertText": "and"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "negate",
          "kind": "method",
          "documentation": "negate(): Predicate",
          "insertText": "negate"
        },
        {
          "label": "or",
          "kind": "method",
          "documentation": "or(Predicate a): Predicate",
          "insertText": "or"
        },
        {
          "label": "test",
          "kind": "method",
          "documentation": "test(def a): boolean",
          "insertText": "test"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Supplier",
      "kind": "class",
      "documentation": "Class: Supplier",
      "insertText": "Supplier",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(): def",
          "insertText": "get"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ToDoubleBiFunction",
      "kind": "class",
      "documentation": "Class: ToDoubleBiFunction",
      "insertText": "ToDoubleBiFunction",
      "properties": [
        {
          "label": "applyAsDouble",
          "kind": "method",
          "documentation": "applyAsDouble(def a, def b): double",
          "insertText": "applyAsDouble"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ToDoubleFunction",
      "kind": "class",
      "documentation": "Class: ToDoubleFunction",
      "insertText": "ToDoubleFunction",
      "properties": [
        {
          "label": "applyAsDouble",
          "kind": "method",
          "documentation": "applyAsDouble(def a): double",
          "insertText": "applyAsDouble"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ToIntBiFunction",
      "kind": "class",
      "documentation": "Class: ToIntBiFunction",
      "insertText": "ToIntBiFunction",
      "properties": [
        {
          "label": "applyAsInt",
          "kind": "method",
          "documentation": "applyAsInt(def a, def b): int",
          "insertText": "applyAsInt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ToIntFunction",
      "kind": "class",
      "documentation": "Class: ToIntFunction",
      "insertText": "ToIntFunction",
      "properties": [
        {
          "label": "applyAsInt",
          "kind": "method",
          "documentation": "applyAsInt(def a): int",
          "insertText": "applyAsInt"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ToLongBiFunction",
      "kind": "class",
      "documentation": "Class: ToLongBiFunction",
      "insertText": "ToLongBiFunction",
      "properties": [
        {
          "label": "applyAsLong",
          "kind": "method",
          "documentation": "applyAsLong(def a, def b): long",
          "insertText": "applyAsLong"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "ToLongFunction",
      "kind": "class",
      "documentation": "Class: ToLongFunction",
      "insertText": "ToLongFunction",
      "properties": [
        {
          "label": "applyAsLong",
          "kind": "method",
          "documentation": "applyAsLong(def a): long",
          "insertText": "applyAsLong"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "UnaryOperator",
      "kind": "class",
      "documentation": "Class: UnaryOperator",
      "insertText": "UnaryOperator",
      "properties": [
        {
          "label": "identity",
          "kind": "method",
          "documentation": "identity(): UnaryOperator",
          "insertText": "identity"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(Function a): Function",
          "insertText": "andThen"
        },
        {
          "label": "apply",
          "kind": "method",
          "documentation": "apply(def a): def",
          "insertText": "apply"
        },
        {
          "label": "compose",
          "kind": "method",
          "documentation": "compose(Function a): Function",
          "insertText": "compose"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Matcher",
      "kind": "class",
      "documentation": "Class: Matcher",
      "insertText": "Matcher",
      "properties": [
        {
          "label": "quoteReplacement",
          "kind": "method",
          "documentation": "quoteReplacement(String a): String",
          "insertText": "quoteReplacement"
        },
        {
          "label": "end",
          "kind": "method",
          "documentation": "end(int a): int",
          "insertText": "end"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(int a): boolean",
          "insertText": "find"
        },
        {
          "label": "group",
          "kind": "method",
          "documentation": "group(int a): String",
          "insertText": "group"
        },
        {
          "label": "groupCount",
          "kind": "method",
          "documentation": "groupCount(): int",
          "insertText": "groupCount"
        },
        {
          "label": "hasAnchoringBounds",
          "kind": "method",
          "documentation": "hasAnchoringBounds(): boolean",
          "insertText": "hasAnchoringBounds"
        },
        {
          "label": "hasTransparentBounds",
          "kind": "method",
          "documentation": "hasTransparentBounds(): boolean",
          "insertText": "hasTransparentBounds"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "hitEnd",
          "kind": "method",
          "documentation": "hitEnd(): boolean",
          "insertText": "hitEnd"
        },
        {
          "label": "lookingAt",
          "kind": "method",
          "documentation": "lookingAt(): boolean",
          "insertText": "lookingAt"
        },
        {
          "label": "matches",
          "kind": "method",
          "documentation": "matches(): boolean",
          "insertText": "matches"
        },
        {
          "label": "namedGroup",
          "kind": "method",
          "documentation": "namedGroup(String a): String",
          "insertText": "namedGroup"
        },
        {
          "label": "pattern",
          "kind": "method",
          "documentation": "pattern(): Pattern",
          "insertText": "pattern"
        },
        {
          "label": "region",
          "kind": "method",
          "documentation": "region(int a, int b): Matcher",
          "insertText": "region"
        },
        {
          "label": "regionEnd",
          "kind": "method",
          "documentation": "regionEnd(): int",
          "insertText": "regionEnd"
        },
        {
          "label": "regionStart",
          "kind": "method",
          "documentation": "regionStart(): int",
          "insertText": "regionStart"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(String a): String",
          "insertText": "replaceAll"
        },
        {
          "label": "replaceFirst",
          "kind": "method",
          "documentation": "replaceFirst(String a): String",
          "insertText": "replaceFirst"
        },
        {
          "label": "requireEnd",
          "kind": "method",
          "documentation": "requireEnd(): boolean",
          "insertText": "requireEnd"
        },
        {
          "label": "reset",
          "kind": "method",
          "documentation": "reset(): Matcher",
          "insertText": "reset"
        },
        {
          "label": "start",
          "kind": "method",
          "documentation": "start(int a): int",
          "insertText": "start"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "useAnchoringBounds",
          "kind": "method",
          "documentation": "useAnchoringBounds(boolean a): Matcher",
          "insertText": "useAnchoringBounds"
        },
        {
          "label": "usePattern",
          "kind": "method",
          "documentation": "usePattern(Pattern a): Matcher",
          "insertText": "usePattern"
        },
        {
          "label": "useTransparentBounds",
          "kind": "method",
          "documentation": "useTransparentBounds(boolean a): Matcher",
          "insertText": "useTransparentBounds"
        }
      ]
    },
    {
      "label": "Pattern",
      "kind": "class",
      "documentation": "Class: Pattern",
      "insertText": "Pattern",
      "properties": [
        {
          "label": "quote",
          "kind": "method",
          "documentation": "quote(String a): String",
          "insertText": "quote"
        },
        {
          "label": "asPredicate",
          "kind": "method",
          "documentation": "asPredicate(): Predicate",
          "insertText": "asPredicate"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "flags",
          "kind": "method",
          "documentation": "flags(): int",
          "insertText": "flags"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "matcher",
          "kind": "method",
          "documentation": "matcher(CharSequence a): Matcher",
          "insertText": "matcher"
        },
        {
          "label": "pattern",
          "kind": "method",
          "documentation": "pattern(): String",
          "insertText": "pattern"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(CharSequence a, int b | CharSequence a): String[]",
          "insertText": "split"
        },
        {
          "label": "splitAsStream",
          "kind": "method",
          "documentation": "splitAsStream(CharSequence a): Stream",
          "insertText": "splitAsStream"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BaseStream",
      "kind": "class",
      "documentation": "Class: BaseStream",
      "insertText": "BaseStream",
      "properties": [
        {
          "label": "close",
          "kind": "method",
          "documentation": "close(): void",
          "insertText": "close"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isParallel",
          "kind": "method",
          "documentation": "isParallel(): boolean",
          "insertText": "isParallel"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "sequential",
          "kind": "method",
          "documentation": "sequential(): BaseStream",
          "insertText": "sequential"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "unordered",
          "kind": "method",
          "documentation": "unordered(): BaseStream",
          "insertText": "unordered"
        }
      ]
    },
    {
      "label": "Collector",
      "kind": "class",
      "documentation": "Class: Collector",
      "insertText": "Collector",
      "properties": [
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(Supplier a, BiConsumer b, BinaryOperator c, Function d, Collector.Characteristics[] e | Supplier a, BiConsumer b, BinaryOperator c, Collector.Characteristics[] d): Collector",
          "insertText": "of"
        },
        {
          "label": "accumulator",
          "kind": "method",
          "documentation": "accumulator(): BiConsumer",
          "insertText": "accumulator"
        },
        {
          "label": "characteristics",
          "kind": "method",
          "documentation": "characteristics(): Set",
          "insertText": "characteristics"
        },
        {
          "label": "combiner",
          "kind": "method",
          "documentation": "combiner(): BinaryOperator",
          "insertText": "combiner"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "finisher",
          "kind": "method",
          "documentation": "finisher(): Function",
          "insertText": "finisher"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "supplier",
          "kind": "method",
          "documentation": "supplier(): Supplier",
          "insertText": "supplier"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Characteristics",
      "kind": "class",
      "documentation": "Class: Characteristics",
      "insertText": "Characteristics",
      "properties": [
        {
          "label": "CONCURRENT",
          "kind": "property",
          "documentation": "CONCURRENT: Collector.Characteristics",
          "insertText": "CONCURRENT"
        },
        {
          "label": "IDENTITY_FINISH",
          "kind": "property",
          "documentation": "IDENTITY_FINISH: Collector.Characteristics",
          "insertText": "IDENTITY_FINISH"
        },
        {
          "label": "UNORDERED",
          "kind": "property",
          "documentation": "UNORDERED: Collector.Characteristics",
          "insertText": "UNORDERED"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(String a): Collector.Characteristics",
          "insertText": "valueOf"
        },
        {
          "label": "values",
          "kind": "method",
          "documentation": "values(): Collector.Characteristics[]",
          "insertText": "values"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(Enum a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "name",
          "kind": "method",
          "documentation": "name(): String",
          "insertText": "name"
        },
        {
          "label": "ordinal",
          "kind": "method",
          "documentation": "ordinal(): int",
          "insertText": "ordinal"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Collectors",
      "kind": "class",
      "documentation": "Class: Collectors",
      "insertText": "Collectors",
      "properties": [
        {
          "label": "averagingDouble",
          "kind": "method",
          "documentation": "averagingDouble(ToDoubleFunction a): Collector",
          "insertText": "averagingDouble"
        },
        {
          "label": "averagingInt",
          "kind": "method",
          "documentation": "averagingInt(ToIntFunction a): Collector",
          "insertText": "averagingInt"
        },
        {
          "label": "averagingLong",
          "kind": "method",
          "documentation": "averagingLong(ToLongFunction a): Collector",
          "insertText": "averagingLong"
        },
        {
          "label": "collectingAndThen",
          "kind": "method",
          "documentation": "collectingAndThen(Collector a, Function b): Collector",
          "insertText": "collectingAndThen"
        },
        {
          "label": "counting",
          "kind": "method",
          "documentation": "counting(): Collector",
          "insertText": "counting"
        },
        {
          "label": "groupingBy",
          "kind": "method",
          "documentation": "groupingBy(Function a, Supplier b, Collector c | Function a, Collector b | Function a): Collector",
          "insertText": "groupingBy"
        },
        {
          "label": "joining",
          "kind": "method",
          "documentation": "joining(CharSequence a, CharSequence b, CharSequence c | CharSequence a): Collector",
          "insertText": "joining"
        },
        {
          "label": "mapping",
          "kind": "method",
          "documentation": "mapping(Function a, Collector b): Collector",
          "insertText": "mapping"
        },
        {
          "label": "maxBy",
          "kind": "method",
          "documentation": "maxBy(Comparator a): Collector",
          "insertText": "maxBy"
        },
        {
          "label": "minBy",
          "kind": "method",
          "documentation": "minBy(Comparator a): Collector",
          "insertText": "minBy"
        },
        {
          "label": "partitioningBy",
          "kind": "method",
          "documentation": "partitioningBy(Predicate a, Collector b | Predicate a): Collector",
          "insertText": "partitioningBy"
        },
        {
          "label": "reducing",
          "kind": "method",
          "documentation": "reducing(def a, Function b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): Collector",
          "insertText": "reducing"
        },
        {
          "label": "summarizingDouble",
          "kind": "method",
          "documentation": "summarizingDouble(ToDoubleFunction a): Collector",
          "insertText": "summarizingDouble"
        },
        {
          "label": "summarizingInt",
          "kind": "method",
          "documentation": "summarizingInt(ToIntFunction a): Collector",
          "insertText": "summarizingInt"
        },
        {
          "label": "summarizingLong",
          "kind": "method",
          "documentation": "summarizingLong(ToLongFunction a): Collector",
          "insertText": "summarizingLong"
        },
        {
          "label": "summingDouble",
          "kind": "method",
          "documentation": "summingDouble(ToDoubleFunction a): Collector",
          "insertText": "summingDouble"
        },
        {
          "label": "summingInt",
          "kind": "method",
          "documentation": "summingInt(ToIntFunction a): Collector",
          "insertText": "summingInt"
        },
        {
          "label": "summingLong",
          "kind": "method",
          "documentation": "summingLong(ToLongFunction a): Collector",
          "insertText": "summingLong"
        },
        {
          "label": "toCollection",
          "kind": "method",
          "documentation": "toCollection(Supplier a): Collector",
          "insertText": "toCollection"
        },
        {
          "label": "toList",
          "kind": "method",
          "documentation": "toList(): Collector",
          "insertText": "toList"
        },
        {
          "label": "toMap",
          "kind": "method",
          "documentation": "toMap(Function a, Function b, BinaryOperator c, Supplier d | Function a, Function b, BinaryOperator c | Function a, Function b): Collector",
          "insertText": "toMap"
        },
        {
          "label": "toSet",
          "kind": "method",
          "documentation": "toSet(): Collector",
          "insertText": "toSet"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "DoubleStream",
      "kind": "class",
      "documentation": "Class: DoubleStream",
      "insertText": "DoubleStream",
      "properties": [
        {
          "label": "builder",
          "kind": "method",
          "documentation": "builder(): DoubleStream.Builder",
          "insertText": "builder"
        },
        {
          "label": "concat",
          "kind": "method",
          "documentation": "concat(DoubleStream a, DoubleStream b): DoubleStream",
          "insertText": "concat"
        },
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): DoubleStream",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(double[] a): DoubleStream",
          "insertText": "of"
        },
        {
          "label": "allMatch",
          "kind": "method",
          "documentation": "allMatch(DoublePredicate a): boolean",
          "insertText": "allMatch"
        },
        {
          "label": "anyMatch",
          "kind": "method",
          "documentation": "anyMatch(DoublePredicate a): boolean",
          "insertText": "anyMatch"
        },
        {
          "label": "average",
          "kind": "method",
          "documentation": "average(): OptionalDouble",
          "insertText": "average"
        },
        {
          "label": "boxed",
          "kind": "method",
          "documentation": "boxed(): Stream",
          "insertText": "boxed"
        },
        {
          "label": "close",
          "kind": "method",
          "documentation": "close(): void",
          "insertText": "close"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Supplier a, ObjDoubleConsumer b, BiConsumer c): def",
          "insertText": "collect"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(): long",
          "insertText": "count"
        },
        {
          "label": "distinct",
          "kind": "method",
          "documentation": "distinct(): DoubleStream",
          "insertText": "distinct"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "filter",
          "kind": "method",
          "documentation": "filter(DoublePredicate a): DoubleStream",
          "insertText": "filter"
        },
        {
          "label": "findAny",
          "kind": "method",
          "documentation": "findAny(): OptionalDouble",
          "insertText": "findAny"
        },
        {
          "label": "findFirst",
          "kind": "method",
          "documentation": "findFirst(): OptionalDouble",
          "insertText": "findFirst"
        },
        {
          "label": "flatMap",
          "kind": "method",
          "documentation": "flatMap(DoubleFunction a): DoubleStream",
          "insertText": "flatMap"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(DoubleConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "forEachOrdered",
          "kind": "method",
          "documentation": "forEachOrdered(DoubleConsumer a): void",
          "insertText": "forEachOrdered"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isParallel",
          "kind": "method",
          "documentation": "isParallel(): boolean",
          "insertText": "isParallel"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): PrimitiveIterator.OfDouble",
          "insertText": "iterator"
        },
        {
          "label": "limit",
          "kind": "method",
          "documentation": "limit(long a): DoubleStream",
          "insertText": "limit"
        },
        {
          "label": "map",
          "kind": "method",
          "documentation": "map(DoubleUnaryOperator a): DoubleStream",
          "insertText": "map"
        },
        {
          "label": "mapToInt",
          "kind": "method",
          "documentation": "mapToInt(DoubleToIntFunction a): IntStream",
          "insertText": "mapToInt"
        },
        {
          "label": "mapToLong",
          "kind": "method",
          "documentation": "mapToLong(DoubleToLongFunction a): LongStream",
          "insertText": "mapToLong"
        },
        {
          "label": "mapToObj",
          "kind": "method",
          "documentation": "mapToObj(DoubleFunction a): Stream",
          "insertText": "mapToObj"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(): OptionalDouble",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(): OptionalDouble",
          "insertText": "min"
        },
        {
          "label": "noneMatch",
          "kind": "method",
          "documentation": "noneMatch(DoublePredicate a): boolean",
          "insertText": "noneMatch"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(DoubleConsumer a): DoubleStream",
          "insertText": "peek"
        },
        {
          "label": "reduce",
          "kind": "method",
          "documentation": "reduce(double a, DoubleBinaryOperator b | DoubleBinaryOperator a): double | OptionalDouble",
          "insertText": "reduce"
        },
        {
          "label": "sequential",
          "kind": "method",
          "documentation": "sequential(): DoubleStream",
          "insertText": "sequential"
        },
        {
          "label": "skip",
          "kind": "method",
          "documentation": "skip(long a): DoubleStream",
          "insertText": "skip"
        },
        {
          "label": "sorted",
          "kind": "method",
          "documentation": "sorted(): DoubleStream",
          "insertText": "sorted"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator.OfDouble",
          "insertText": "spliterator"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(): double",
          "insertText": "sum"
        },
        {
          "label": "summaryStatistics",
          "kind": "method",
          "documentation": "summaryStatistics(): DoubleSummaryStatistics",
          "insertText": "summaryStatistics"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(): double[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "unordered",
          "kind": "method",
          "documentation": "unordered(): BaseStream",
          "insertText": "unordered"
        }
      ]
    },
    {
      "label": "Builder",
      "kind": "class",
      "documentation": "Class: Builder",
      "insertText": "Builder",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(double a): void",
          "insertText": "accept"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(double a): DoubleStream.Builder",
          "insertText": "add"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(DoubleConsumer a): DoubleConsumer",
          "insertText": "andThen"
        },
        {
          "label": "build",
          "kind": "method",
          "documentation": "build(): DoubleStream",
          "insertText": "build"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IntStream",
      "kind": "class",
      "documentation": "Class: IntStream",
      "insertText": "IntStream",
      "properties": [
        {
          "label": "builder",
          "kind": "method",
          "documentation": "builder(): IntStream.Builder",
          "insertText": "builder"
        },
        {
          "label": "concat",
          "kind": "method",
          "documentation": "concat(IntStream a, IntStream b): IntStream",
          "insertText": "concat"
        },
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): IntStream",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(int[] a): IntStream",
          "insertText": "of"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(int a, int b): IntStream",
          "insertText": "range"
        },
        {
          "label": "rangeClosed",
          "kind": "method",
          "documentation": "rangeClosed(int a, int b): IntStream",
          "insertText": "rangeClosed"
        },
        {
          "label": "allMatch",
          "kind": "method",
          "documentation": "allMatch(IntPredicate a): boolean",
          "insertText": "allMatch"
        },
        {
          "label": "anyMatch",
          "kind": "method",
          "documentation": "anyMatch(IntPredicate a): boolean",
          "insertText": "anyMatch"
        },
        {
          "label": "asDoubleStream",
          "kind": "method",
          "documentation": "asDoubleStream(): DoubleStream",
          "insertText": "asDoubleStream"
        },
        {
          "label": "asLongStream",
          "kind": "method",
          "documentation": "asLongStream(): LongStream",
          "insertText": "asLongStream"
        },
        {
          "label": "average",
          "kind": "method",
          "documentation": "average(): OptionalDouble",
          "insertText": "average"
        },
        {
          "label": "boxed",
          "kind": "method",
          "documentation": "boxed(): Stream",
          "insertText": "boxed"
        },
        {
          "label": "close",
          "kind": "method",
          "documentation": "close(): void",
          "insertText": "close"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Supplier a, ObjIntConsumer b, BiConsumer c): def",
          "insertText": "collect"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(): long",
          "insertText": "count"
        },
        {
          "label": "distinct",
          "kind": "method",
          "documentation": "distinct(): IntStream",
          "insertText": "distinct"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "filter",
          "kind": "method",
          "documentation": "filter(IntPredicate a): IntStream",
          "insertText": "filter"
        },
        {
          "label": "findAny",
          "kind": "method",
          "documentation": "findAny(): OptionalInt",
          "insertText": "findAny"
        },
        {
          "label": "findFirst",
          "kind": "method",
          "documentation": "findFirst(): OptionalInt",
          "insertText": "findFirst"
        },
        {
          "label": "flatMap",
          "kind": "method",
          "documentation": "flatMap(IntFunction a): IntStream",
          "insertText": "flatMap"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(IntConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "forEachOrdered",
          "kind": "method",
          "documentation": "forEachOrdered(IntConsumer a): void",
          "insertText": "forEachOrdered"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isParallel",
          "kind": "method",
          "documentation": "isParallel(): boolean",
          "insertText": "isParallel"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): PrimitiveIterator.OfInt",
          "insertText": "iterator"
        },
        {
          "label": "limit",
          "kind": "method",
          "documentation": "limit(long a): IntStream",
          "insertText": "limit"
        },
        {
          "label": "map",
          "kind": "method",
          "documentation": "map(IntUnaryOperator a): IntStream",
          "insertText": "map"
        },
        {
          "label": "mapToDouble",
          "kind": "method",
          "documentation": "mapToDouble(IntToDoubleFunction a): DoubleStream",
          "insertText": "mapToDouble"
        },
        {
          "label": "mapToLong",
          "kind": "method",
          "documentation": "mapToLong(IntToLongFunction a): LongStream",
          "insertText": "mapToLong"
        },
        {
          "label": "mapToObj",
          "kind": "method",
          "documentation": "mapToObj(IntFunction a): Stream",
          "insertText": "mapToObj"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(): OptionalInt",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(): OptionalInt",
          "insertText": "min"
        },
        {
          "label": "noneMatch",
          "kind": "method",
          "documentation": "noneMatch(IntPredicate a): boolean",
          "insertText": "noneMatch"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(IntConsumer a): IntStream",
          "insertText": "peek"
        },
        {
          "label": "reduce",
          "kind": "method",
          "documentation": "reduce(int a, IntBinaryOperator b | IntBinaryOperator a): int | OptionalInt",
          "insertText": "reduce"
        },
        {
          "label": "sequential",
          "kind": "method",
          "documentation": "sequential(): IntStream",
          "insertText": "sequential"
        },
        {
          "label": "skip",
          "kind": "method",
          "documentation": "skip(long a): IntStream",
          "insertText": "skip"
        },
        {
          "label": "sorted",
          "kind": "method",
          "documentation": "sorted(): IntStream",
          "insertText": "sorted"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator.OfInt",
          "insertText": "spliterator"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(): int",
          "insertText": "sum"
        },
        {
          "label": "summaryStatistics",
          "kind": "method",
          "documentation": "summaryStatistics(): IntSummaryStatistics",
          "insertText": "summaryStatistics"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(): int[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "unordered",
          "kind": "method",
          "documentation": "unordered(): BaseStream",
          "insertText": "unordered"
        }
      ]
    },
    {
      "label": "Builder",
      "kind": "class",
      "documentation": "Class: Builder",
      "insertText": "Builder",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(int a): void",
          "insertText": "accept"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a): IntStream.Builder",
          "insertText": "add"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(IntConsumer a): IntConsumer",
          "insertText": "andThen"
        },
        {
          "label": "build",
          "kind": "method",
          "documentation": "build(): IntStream",
          "insertText": "build"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "LongStream",
      "kind": "class",
      "documentation": "Class: LongStream",
      "insertText": "LongStream",
      "properties": [
        {
          "label": "builder",
          "kind": "method",
          "documentation": "builder(): LongStream.Builder",
          "insertText": "builder"
        },
        {
          "label": "concat",
          "kind": "method",
          "documentation": "concat(LongStream a, LongStream b): LongStream",
          "insertText": "concat"
        },
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): LongStream",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(long[] a): LongStream",
          "insertText": "of"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(long a, long b): LongStream",
          "insertText": "range"
        },
        {
          "label": "rangeClosed",
          "kind": "method",
          "documentation": "rangeClosed(long a, long b): LongStream",
          "insertText": "rangeClosed"
        },
        {
          "label": "allMatch",
          "kind": "method",
          "documentation": "allMatch(LongPredicate a): boolean",
          "insertText": "allMatch"
        },
        {
          "label": "anyMatch",
          "kind": "method",
          "documentation": "anyMatch(LongPredicate a): boolean",
          "insertText": "anyMatch"
        },
        {
          "label": "asDoubleStream",
          "kind": "method",
          "documentation": "asDoubleStream(): DoubleStream",
          "insertText": "asDoubleStream"
        },
        {
          "label": "average",
          "kind": "method",
          "documentation": "average(): OptionalDouble",
          "insertText": "average"
        },
        {
          "label": "boxed",
          "kind": "method",
          "documentation": "boxed(): Stream",
          "insertText": "boxed"
        },
        {
          "label": "close",
          "kind": "method",
          "documentation": "close(): void",
          "insertText": "close"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Supplier a, ObjLongConsumer b, BiConsumer c): def",
          "insertText": "collect"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(): long",
          "insertText": "count"
        },
        {
          "label": "distinct",
          "kind": "method",
          "documentation": "distinct(): LongStream",
          "insertText": "distinct"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "filter",
          "kind": "method",
          "documentation": "filter(LongPredicate a): LongStream",
          "insertText": "filter"
        },
        {
          "label": "findAny",
          "kind": "method",
          "documentation": "findAny(): OptionalLong",
          "insertText": "findAny"
        },
        {
          "label": "findFirst",
          "kind": "method",
          "documentation": "findFirst(): OptionalLong",
          "insertText": "findFirst"
        },
        {
          "label": "flatMap",
          "kind": "method",
          "documentation": "flatMap(LongFunction a): LongStream",
          "insertText": "flatMap"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(LongConsumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "forEachOrdered",
          "kind": "method",
          "documentation": "forEachOrdered(LongConsumer a): void",
          "insertText": "forEachOrdered"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isParallel",
          "kind": "method",
          "documentation": "isParallel(): boolean",
          "insertText": "isParallel"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): PrimitiveIterator.OfLong",
          "insertText": "iterator"
        },
        {
          "label": "limit",
          "kind": "method",
          "documentation": "limit(long a): LongStream",
          "insertText": "limit"
        },
        {
          "label": "map",
          "kind": "method",
          "documentation": "map(LongUnaryOperator a): LongStream",
          "insertText": "map"
        },
        {
          "label": "mapToDouble",
          "kind": "method",
          "documentation": "mapToDouble(LongToDoubleFunction a): DoubleStream",
          "insertText": "mapToDouble"
        },
        {
          "label": "mapToInt",
          "kind": "method",
          "documentation": "mapToInt(LongToIntFunction a): IntStream",
          "insertText": "mapToInt"
        },
        {
          "label": "mapToObj",
          "kind": "method",
          "documentation": "mapToObj(LongFunction a): Stream",
          "insertText": "mapToObj"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(): OptionalLong",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(): OptionalLong",
          "insertText": "min"
        },
        {
          "label": "noneMatch",
          "kind": "method",
          "documentation": "noneMatch(LongPredicate a): boolean",
          "insertText": "noneMatch"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(LongConsumer a): LongStream",
          "insertText": "peek"
        },
        {
          "label": "reduce",
          "kind": "method",
          "documentation": "reduce(long a, LongBinaryOperator b | LongBinaryOperator a): long | OptionalLong",
          "insertText": "reduce"
        },
        {
          "label": "sequential",
          "kind": "method",
          "documentation": "sequential(): LongStream",
          "insertText": "sequential"
        },
        {
          "label": "skip",
          "kind": "method",
          "documentation": "skip(long a): LongStream",
          "insertText": "skip"
        },
        {
          "label": "sorted",
          "kind": "method",
          "documentation": "sorted(): LongStream",
          "insertText": "sorted"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator.OfLong",
          "insertText": "spliterator"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(): long",
          "insertText": "sum"
        },
        {
          "label": "summaryStatistics",
          "kind": "method",
          "documentation": "summaryStatistics(): LongSummaryStatistics",
          "insertText": "summaryStatistics"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(): long[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "unordered",
          "kind": "method",
          "documentation": "unordered(): BaseStream",
          "insertText": "unordered"
        }
      ]
    },
    {
      "label": "Builder",
      "kind": "class",
      "documentation": "Class: Builder",
      "insertText": "Builder",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(long a): void",
          "insertText": "accept"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(long a): LongStream.Builder",
          "insertText": "add"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(LongConsumer a): LongConsumer",
          "insertText": "andThen"
        },
        {
          "label": "build",
          "kind": "method",
          "documentation": "build(): LongStream",
          "insertText": "build"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Stream",
      "kind": "class",
      "documentation": "Class: Stream",
      "insertText": "Stream",
      "properties": [
        {
          "label": "builder",
          "kind": "method",
          "documentation": "builder(): Stream.Builder",
          "insertText": "builder"
        },
        {
          "label": "concat",
          "kind": "method",
          "documentation": "concat(Stream a, Stream b): Stream",
          "insertText": "concat"
        },
        {
          "label": "empty",
          "kind": "method",
          "documentation": "empty(): Stream",
          "insertText": "empty"
        },
        {
          "label": "of",
          "kind": "method",
          "documentation": "of(def[] a): Stream",
          "insertText": "of"
        },
        {
          "label": "allMatch",
          "kind": "method",
          "documentation": "allMatch(Predicate a): boolean",
          "insertText": "allMatch"
        },
        {
          "label": "anyMatch",
          "kind": "method",
          "documentation": "anyMatch(Predicate a): boolean",
          "insertText": "anyMatch"
        },
        {
          "label": "close",
          "kind": "method",
          "documentation": "close(): void",
          "insertText": "close"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Supplier a, BiConsumer b, BiConsumer c | Collector a): def",
          "insertText": "collect"
        },
        {
          "label": "count",
          "kind": "method",
          "documentation": "count(): long",
          "insertText": "count"
        },
        {
          "label": "distinct",
          "kind": "method",
          "documentation": "distinct(): Stream",
          "insertText": "distinct"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "filter",
          "kind": "method",
          "documentation": "filter(Predicate a): Stream",
          "insertText": "filter"
        },
        {
          "label": "findAny",
          "kind": "method",
          "documentation": "findAny(): Optional",
          "insertText": "findAny"
        },
        {
          "label": "findFirst",
          "kind": "method",
          "documentation": "findFirst(): Optional",
          "insertText": "findFirst"
        },
        {
          "label": "flatMap",
          "kind": "method",
          "documentation": "flatMap(Function a): Stream",
          "insertText": "flatMap"
        },
        {
          "label": "flatMapToDouble",
          "kind": "method",
          "documentation": "flatMapToDouble(Function a): DoubleStream",
          "insertText": "flatMapToDouble"
        },
        {
          "label": "flatMapToInt",
          "kind": "method",
          "documentation": "flatMapToInt(Function a): IntStream",
          "insertText": "flatMapToInt"
        },
        {
          "label": "flatMapToLong",
          "kind": "method",
          "documentation": "flatMapToLong(Function a): LongStream",
          "insertText": "flatMapToLong"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "forEachOrdered",
          "kind": "method",
          "documentation": "forEachOrdered(Consumer a): void",
          "insertText": "forEachOrdered"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isParallel",
          "kind": "method",
          "documentation": "isParallel(): boolean",
          "insertText": "isParallel"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "limit",
          "kind": "method",
          "documentation": "limit(long a): Stream",
          "insertText": "limit"
        },
        {
          "label": "map",
          "kind": "method",
          "documentation": "map(Function a): Stream",
          "insertText": "map"
        },
        {
          "label": "mapToDouble",
          "kind": "method",
          "documentation": "mapToDouble(ToDoubleFunction a): DoubleStream",
          "insertText": "mapToDouble"
        },
        {
          "label": "mapToInt",
          "kind": "method",
          "documentation": "mapToInt(ToIntFunction a): IntStream",
          "insertText": "mapToInt"
        },
        {
          "label": "mapToLong",
          "kind": "method",
          "documentation": "mapToLong(ToLongFunction a): LongStream",
          "insertText": "mapToLong"
        },
        {
          "label": "max",
          "kind": "method",
          "documentation": "max(Comparator a): Optional",
          "insertText": "max"
        },
        {
          "label": "min",
          "kind": "method",
          "documentation": "min(Comparator a): Optional",
          "insertText": "min"
        },
        {
          "label": "noneMatch",
          "kind": "method",
          "documentation": "noneMatch(Predicate a): boolean",
          "insertText": "noneMatch"
        },
        {
          "label": "peek",
          "kind": "method",
          "documentation": "peek(Consumer a): Stream",
          "insertText": "peek"
        },
        {
          "label": "reduce",
          "kind": "method",
          "documentation": "reduce(def a, BiFunction b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): def | Optional",
          "insertText": "reduce"
        },
        {
          "label": "sequential",
          "kind": "method",
          "documentation": "sequential(): BaseStream",
          "insertText": "sequential"
        },
        {
          "label": "skip",
          "kind": "method",
          "documentation": "skip(long a): Stream",
          "insertText": "skip"
        },
        {
          "label": "sorted",
          "kind": "method",
          "documentation": "sorted(Comparator a): Stream",
          "insertText": "sorted"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(IntFunction a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "unordered",
          "kind": "method",
          "documentation": "unordered(): BaseStream",
          "insertText": "unordered"
        }
      ]
    },
    {
      "label": "Builder",
      "kind": "class",
      "documentation": "Class: Builder",
      "insertText": "Builder",
      "properties": [
        {
          "label": "accept",
          "kind": "method",
          "documentation": "accept(def a): void",
          "insertText": "accept"
        },
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(def a): Stream.Builder",
          "insertText": "add"
        },
        {
          "label": "andThen",
          "kind": "method",
          "documentation": "andThen(Consumer a): Consumer",
          "insertText": "andThen"
        },
        {
          "label": "build",
          "kind": "method",
          "documentation": "build(): Stream",
          "insertText": "build"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BytesRef",
      "kind": "class",
      "documentation": "Class: BytesRef",
      "insertText": "BytesRef",
      "properties": [
        {
          "label": "bytesEquals",
          "kind": "method",
          "documentation": "bytesEquals(BytesRef a): boolean",
          "insertText": "bytesEquals"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(def a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "utf8ToString",
          "kind": "method",
          "documentation": "utf8ToString(): String",
          "insertText": "utf8ToString"
        },
        {
          "label": "bytes",
          "kind": "property",
          "documentation": "bytes: byte[]",
          "insertText": "bytes"
        },
        {
          "label": "length",
          "kind": "property",
          "documentation": "length: int",
          "insertText": "length"
        },
        {
          "label": "offset",
          "kind": "property",
          "documentation": "offset: int",
          "insertText": "offset"
        }
      ]
    },
    {
      "label": "GeoPoint",
      "kind": "class",
      "documentation": "Class: GeoPoint",
      "insertText": "GeoPoint",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getLat",
          "kind": "method",
          "documentation": "getLat(): double",
          "insertText": "getLat"
        },
        {
          "label": "getLon",
          "kind": "method",
          "documentation": "getLon(): double",
          "insertText": "getLon"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Booleans",
      "kind": "class",
      "documentation": "Class: Booleans",
      "insertText": "Booleans",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): Boolean",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): boolean",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "BytesRefs",
      "kind": "class",
      "documentation": "Class: BytesRefs",
      "insertText": "BytesRefs",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): BytesRef",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): BytesRef",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Dates",
      "kind": "class",
      "documentation": "Class: Dates",
      "insertText": "Dates",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): JodaCompatibleZonedDateTime",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): JodaCompatibleZonedDateTime",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Doubles",
      "kind": "class",
      "documentation": "Class: Doubles",
      "insertText": "Doubles",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): Double",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): double",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "GeoPoints",
      "kind": "class",
      "documentation": "Class: GeoPoints",
      "insertText": "GeoPoints",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "arcDistance",
          "kind": "method",
          "documentation": "arcDistance(double a, double b): double",
          "insertText": "arcDistance"
        },
        {
          "label": "arcDistanceWithDefault",
          "kind": "method",
          "documentation": "arcDistanceWithDefault(double a, double b, double c): double",
          "insertText": "arcDistanceWithDefault"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "geohashDistance",
          "kind": "method",
          "documentation": "geohashDistance(String a): double",
          "insertText": "geohashDistance"
        },
        {
          "label": "geohashDistanceWithDefault",
          "kind": "method",
          "documentation": "geohashDistanceWithDefault(String a, double b): double",
          "insertText": "geohashDistanceWithDefault"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): GeoPoint",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLat",
          "kind": "method",
          "documentation": "getLat(): double",
          "insertText": "getLat"
        },
        {
          "label": "getLats",
          "kind": "method",
          "documentation": "getLats(): double[]",
          "insertText": "getLats"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getLon",
          "kind": "method",
          "documentation": "getLon(): double",
          "insertText": "getLon"
        },
        {
          "label": "getLons",
          "kind": "method",
          "documentation": "getLons(): double[]",
          "insertText": "getLons"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): GeoPoint",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "planeDistance",
          "kind": "method",
          "documentation": "planeDistance(double a, double b): double",
          "insertText": "planeDistance"
        },
        {
          "label": "planeDistanceWithDefault",
          "kind": "method",
          "documentation": "planeDistanceWithDefault(double a, double b, double c): double",
          "insertText": "planeDistanceWithDefault"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Longs",
      "kind": "class",
      "documentation": "Class: Longs",
      "insertText": "Longs",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): Long",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): long",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Strings",
      "kind": "class",
      "documentation": "Class: Strings",
      "insertText": "Strings",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): String",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): String",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "IpScriptDocValues",
      "kind": "class",
      "documentation": "Class: IpScriptDocValues",
      "insertText": "IpScriptDocValues",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): String",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): String",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Interval",
      "kind": "class",
      "documentation": "Class: Interval",
      "insertText": "Interval",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getEnd",
          "kind": "method",
          "documentation": "getEnd(): int",
          "insertText": "getEnd"
        },
        {
          "label": "getGaps",
          "kind": "method",
          "documentation": "getGaps(): int",
          "insertText": "getGaps"
        },
        {
          "label": "getStart",
          "kind": "method",
          "documentation": "getStart(): int",
          "insertText": "getStart"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Doc",
      "kind": "class",
      "documentation": "Class: Doc",
      "insertText": "Doc",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getFreq",
          "kind": "method",
          "documentation": "getFreq(): float",
          "insertText": "getFreq"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Field",
      "kind": "class",
      "documentation": "Class: Field",
      "insertText": "Field",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDocCount",
          "kind": "method",
          "documentation": "getDocCount(): long",
          "insertText": "getDocCount"
        },
        {
          "label": "getSumDocFreq",
          "kind": "method",
          "documentation": "getSumDocFreq(): long",
          "insertText": "getSumDocFreq"
        },
        {
          "label": "getSumTotalTermFreq",
          "kind": "method",
          "documentation": "getSumTotalTermFreq(): long",
          "insertText": "getSumTotalTermFreq"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Query",
      "kind": "class",
      "documentation": "Class: Query",
      "insertText": "Query",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getBoost",
          "kind": "method",
          "documentation": "getBoost(): float",
          "insertText": "getBoost"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Term",
      "kind": "class",
      "documentation": "Class: Term",
      "insertText": "Term",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getDocFreq",
          "kind": "method",
          "documentation": "getDocFreq(): long",
          "insertText": "getDocFreq"
        },
        {
          "label": "getTotalTermFreq",
          "kind": "method",
          "documentation": "getTotalTermFreq(): long",
          "insertText": "getTotalTermFreq"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "Debug",
      "kind": "class",
      "documentation": "Class: Debug",
      "insertText": "Debug",
      "properties": [
        {
          "label": "explain",
          "kind": "method",
          "documentation": "explain(Object a): void",
          "insertText": "explain"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "JodaCompatibleZonedDateTime",
      "kind": "class",
      "documentation": "Class: JodaCompatibleZonedDateTime",
      "insertText": "JodaCompatibleZonedDateTime",
      "properties": [
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(ChronoZonedDateTime a): int",
          "insertText": "compareTo"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(DateTimeFormatter a): String",
          "insertText": "format"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(TemporalField a): int",
          "insertText": "get"
        },
        {
          "label": "getCenturyOfEra",
          "kind": "method",
          "documentation": "getCenturyOfEra(): int",
          "insertText": "getCenturyOfEra"
        },
        {
          "label": "getChronology",
          "kind": "method",
          "documentation": "getChronology(): Chronology",
          "insertText": "getChronology"
        },
        {
          "label": "getDayOfMonth",
          "kind": "method",
          "documentation": "getDayOfMonth(): int",
          "insertText": "getDayOfMonth"
        },
        {
          "label": "getDayOfWeek",
          "kind": "method",
          "documentation": "getDayOfWeek(): int",
          "insertText": "getDayOfWeek"
        },
        {
          "label": "getDayOfWeekEnum",
          "kind": "method",
          "documentation": "getDayOfWeekEnum(): DayOfWeek",
          "insertText": "getDayOfWeekEnum"
        },
        {
          "label": "getDayOfYear",
          "kind": "method",
          "documentation": "getDayOfYear(): int",
          "insertText": "getDayOfYear"
        },
        {
          "label": "getEra",
          "kind": "method",
          "documentation": "getEra(): int",
          "insertText": "getEra"
        },
        {
          "label": "getHour",
          "kind": "method",
          "documentation": "getHour(): int",
          "insertText": "getHour"
        },
        {
          "label": "getHourOfDay",
          "kind": "method",
          "documentation": "getHourOfDay(): int",
          "insertText": "getHourOfDay"
        },
        {
          "label": "getLong",
          "kind": "method",
          "documentation": "getLong(TemporalField a): long",
          "insertText": "getLong"
        },
        {
          "label": "getMillis",
          "kind": "method",
          "documentation": "getMillis(): long",
          "insertText": "getMillis"
        },
        {
          "label": "getMillisOfDay",
          "kind": "method",
          "documentation": "getMillisOfDay(): int",
          "insertText": "getMillisOfDay"
        },
        {
          "label": "getMillisOfSecond",
          "kind": "method",
          "documentation": "getMillisOfSecond(): int",
          "insertText": "getMillisOfSecond"
        },
        {
          "label": "getMinute",
          "kind": "method",
          "documentation": "getMinute(): int",
          "insertText": "getMinute"
        },
        {
          "label": "getMinuteOfDay",
          "kind": "method",
          "documentation": "getMinuteOfDay(): int",
          "insertText": "getMinuteOfDay"
        },
        {
          "label": "getMinuteOfHour",
          "kind": "method",
          "documentation": "getMinuteOfHour(): int",
          "insertText": "getMinuteOfHour"
        },
        {
          "label": "getMonth",
          "kind": "method",
          "documentation": "getMonth(): Month",
          "insertText": "getMonth"
        },
        {
          "label": "getMonthOfYear",
          "kind": "method",
          "documentation": "getMonthOfYear(): int",
          "insertText": "getMonthOfYear"
        },
        {
          "label": "getMonthValue",
          "kind": "method",
          "documentation": "getMonthValue(): int",
          "insertText": "getMonthValue"
        },
        {
          "label": "getNano",
          "kind": "method",
          "documentation": "getNano(): int",
          "insertText": "getNano"
        },
        {
          "label": "getOffset",
          "kind": "method",
          "documentation": "getOffset(): ZoneOffset",
          "insertText": "getOffset"
        },
        {
          "label": "getSecond",
          "kind": "method",
          "documentation": "getSecond(): int",
          "insertText": "getSecond"
        },
        {
          "label": "getSecondOfDay",
          "kind": "method",
          "documentation": "getSecondOfDay(): int",
          "insertText": "getSecondOfDay"
        },
        {
          "label": "getSecondOfMinute",
          "kind": "method",
          "documentation": "getSecondOfMinute(): int",
          "insertText": "getSecondOfMinute"
        },
        {
          "label": "getWeekOfWeekyear",
          "kind": "method",
          "documentation": "getWeekOfWeekyear(): int",
          "insertText": "getWeekOfWeekyear"
        },
        {
          "label": "getWeekyear",
          "kind": "method",
          "documentation": "getWeekyear(): int",
          "insertText": "getWeekyear"
        },
        {
          "label": "getYear",
          "kind": "method",
          "documentation": "getYear(): int",
          "insertText": "getYear"
        },
        {
          "label": "getYearOfCentury",
          "kind": "method",
          "documentation": "getYearOfCentury(): int",
          "insertText": "getYearOfCentury"
        },
        {
          "label": "getYearOfEra",
          "kind": "method",
          "documentation": "getYearOfEra(): int",
          "insertText": "getYearOfEra"
        },
        {
          "label": "getZone",
          "kind": "method",
          "documentation": "getZone(): ZoneId",
          "insertText": "getZone"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isAfter",
          "kind": "method",
          "documentation": "isAfter(ChronoZonedDateTime a): boolean",
          "insertText": "isAfter"
        },
        {
          "label": "isBefore",
          "kind": "method",
          "documentation": "isBefore(ChronoZonedDateTime a): boolean",
          "insertText": "isBefore"
        },
        {
          "label": "isEqual",
          "kind": "method",
          "documentation": "isEqual(ChronoZonedDateTime a): boolean",
          "insertText": "isEqual"
        },
        {
          "label": "isSupported",
          "kind": "method",
          "documentation": "isSupported(TemporalField a): boolean",
          "insertText": "isSupported"
        },
        {
          "label": "minus",
          "kind": "method",
          "documentation": "minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime",
          "insertText": "minus"
        },
        {
          "label": "minusDays",
          "kind": "method",
          "documentation": "minusDays(long a): ZonedDateTime",
          "insertText": "minusDays"
        },
        {
          "label": "minusHours",
          "kind": "method",
          "documentation": "minusHours(long a): ZonedDateTime",
          "insertText": "minusHours"
        },
        {
          "label": "minusMinutes",
          "kind": "method",
          "documentation": "minusMinutes(long a): ZonedDateTime",
          "insertText": "minusMinutes"
        },
        {
          "label": "minusMonths",
          "kind": "method",
          "documentation": "minusMonths(long a): ZonedDateTime",
          "insertText": "minusMonths"
        },
        {
          "label": "minusNanos",
          "kind": "method",
          "documentation": "minusNanos(long a): ZonedDateTime",
          "insertText": "minusNanos"
        },
        {
          "label": "minusSeconds",
          "kind": "method",
          "documentation": "minusSeconds(long a): ZonedDateTime",
          "insertText": "minusSeconds"
        },
        {
          "label": "minusWeeks",
          "kind": "method",
          "documentation": "minusWeeks(long a): ZonedDateTime",
          "insertText": "minusWeeks"
        },
        {
          "label": "minusYears",
          "kind": "method",
          "documentation": "minusYears(long a): ZonedDateTime",
          "insertText": "minusYears"
        },
        {
          "label": "plus",
          "kind": "method",
          "documentation": "plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime",
          "insertText": "plus"
        },
        {
          "label": "plusDays",
          "kind": "method",
          "documentation": "plusDays(long a): ZonedDateTime",
          "insertText": "plusDays"
        },
        {
          "label": "plusHours",
          "kind": "method",
          "documentation": "plusHours(long a): ZonedDateTime",
          "insertText": "plusHours"
        },
        {
          "label": "plusMinutes",
          "kind": "method",
          "documentation": "plusMinutes(long a): ZonedDateTime",
          "insertText": "plusMinutes"
        },
        {
          "label": "plusMonths",
          "kind": "method",
          "documentation": "plusMonths(long a): ZonedDateTime",
          "insertText": "plusMonths"
        },
        {
          "label": "plusNanos",
          "kind": "method",
          "documentation": "plusNanos(long a): ZonedDateTime",
          "insertText": "plusNanos"
        },
        {
          "label": "plusSeconds",
          "kind": "method",
          "documentation": "plusSeconds(long a): ZonedDateTime",
          "insertText": "plusSeconds"
        },
        {
          "label": "plusWeeks",
          "kind": "method",
          "documentation": "plusWeeks(long a): ZonedDateTime",
          "insertText": "plusWeeks"
        },
        {
          "label": "plusYears",
          "kind": "method",
          "documentation": "plusYears(long a): ZonedDateTime",
          "insertText": "plusYears"
        },
        {
          "label": "query",
          "kind": "method",
          "documentation": "query(TemporalQuery a): def",
          "insertText": "query"
        },
        {
          "label": "range",
          "kind": "method",
          "documentation": "range(TemporalField a): ValueRange",
          "insertText": "range"
        },
        {
          "label": "toEpochMilli",
          "kind": "method",
          "documentation": "toEpochMilli(): long",
          "insertText": "toEpochMilli"
        },
        {
          "label": "toEpochSecond",
          "kind": "method",
          "documentation": "toEpochSecond(): long",
          "insertText": "toEpochSecond"
        },
        {
          "label": "toInstant",
          "kind": "method",
          "documentation": "toInstant(): Instant",
          "insertText": "toInstant"
        },
        {
          "label": "toLocalDate",
          "kind": "method",
          "documentation": "toLocalDate(): LocalDate",
          "insertText": "toLocalDate"
        },
        {
          "label": "toLocalDateTime",
          "kind": "method",
          "documentation": "toLocalDateTime(): LocalDateTime",
          "insertText": "toLocalDateTime"
        },
        {
          "label": "toLocalTime",
          "kind": "method",
          "documentation": "toLocalTime(): LocalTime",
          "insertText": "toLocalTime"
        },
        {
          "label": "toOffsetDateTime",
          "kind": "method",
          "documentation": "toOffsetDateTime(): OffsetDateTime",
          "insertText": "toOffsetDateTime"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(String a, Locale b | String a): String",
          "insertText": "toString"
        },
        {
          "label": "truncatedTo",
          "kind": "method",
          "documentation": "truncatedTo(TemporalUnit a): ZonedDateTime",
          "insertText": "truncatedTo"
        },
        {
          "label": "until",
          "kind": "method",
          "documentation": "until(Temporal a, TemporalUnit b): long",
          "insertText": "until"
        },
        {
          "label": "with",
          "kind": "method",
          "documentation": "with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime",
          "insertText": "with"
        },
        {
          "label": "withDayOfMonth",
          "kind": "method",
          "documentation": "withDayOfMonth(int a): ZonedDateTime",
          "insertText": "withDayOfMonth"
        },
        {
          "label": "withDayOfYear",
          "kind": "method",
          "documentation": "withDayOfYear(int a): ZonedDateTime",
          "insertText": "withDayOfYear"
        },
        {
          "label": "withEarlierOffsetAtOverlap",
          "kind": "method",
          "documentation": "withEarlierOffsetAtOverlap(): ZonedDateTime",
          "insertText": "withEarlierOffsetAtOverlap"
        },
        {
          "label": "withFixedOffsetZone",
          "kind": "method",
          "documentation": "withFixedOffsetZone(): ZonedDateTime",
          "insertText": "withFixedOffsetZone"
        },
        {
          "label": "withHour",
          "kind": "method",
          "documentation": "withHour(int a): ZonedDateTime",
          "insertText": "withHour"
        },
        {
          "label": "withLaterOffsetAtOverlap",
          "kind": "method",
          "documentation": "withLaterOffsetAtOverlap(): ZonedDateTime",
          "insertText": "withLaterOffsetAtOverlap"
        },
        {
          "label": "withMinute",
          "kind": "method",
          "documentation": "withMinute(int a): ZonedDateTime",
          "insertText": "withMinute"
        },
        {
          "label": "withMonth",
          "kind": "method",
          "documentation": "withMonth(int a): ZonedDateTime",
          "insertText": "withMonth"
        },
        {
          "label": "withNano",
          "kind": "method",
          "documentation": "withNano(int a): ZonedDateTime",
          "insertText": "withNano"
        },
        {
          "label": "withSecond",
          "kind": "method",
          "documentation": "withSecond(int a): ZonedDateTime",
          "insertText": "withSecond"
        },
        {
          "label": "withYear",
          "kind": "method",
          "documentation": "withYear(int a): ZonedDateTime",
          "insertText": "withYear"
        },
        {
          "label": "withZoneSameInstant",
          "kind": "method",
          "documentation": "withZoneSameInstant(ZoneId a): ZonedDateTime",
          "insertText": "withZoneSameInstant"
        },
        {
          "label": "withZoneSameLocal",
          "kind": "method",
          "documentation": "withZoneSameLocal(ZoneId a): ZonedDateTime",
          "insertText": "withZoneSameLocal"
        }
      ]
    },
    {
      "label": "FieldLookup",
      "kind": "class",
      "documentation": "Class: FieldLookup",
      "insertText": "FieldLookup",
      "properties": [
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): def",
          "insertText": "getValue"
        },
        {
          "label": "getValues",
          "kind": "method",
          "documentation": "getValues(): List",
          "insertText": "getValues"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    }
  ]
}