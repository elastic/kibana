/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import type { QueryClientConfig } from '@tanstack/react-query';
import { QueryClient as OriginalQueryClient } from '@tanstack/react-query';

class QueryClient extends OriginalQueryClient {
  constructor(config: QueryClientConfig = {}) {
    super({
      ...config,
      defaultOptions: {
        ...config.defaultOptions,
        queries: {
          networkMode: 'always',
          ...config.defaultOptions?.queries,
        },
        mutations: {
          networkMode: 'always',
          ...config.defaultOptions?.mutations,
        },
      },
    });
  }
}

export {
  QueryClient, // export the extended class, with the `networkMode: 'always'` behavior
};

// Re-export defined types
export type {
  CancelledError,
  CancelOptions,
  ContextOptions,
  DefaultedInfiniteQueryObserverOptions,
  DefaultedQueryObserverOptions,
  DefaultOptions,
  defaultShouldDehydrateMutation,
  defaultShouldDehydrateQuery,
  DefinedQueryObserverResult,
  DefinedUseBaseQueryResult,
  DefinedUseQueryResult,
  dehydrate,
  DehydratedState,
  DehydrateOptions,
  FetchInfiniteQueryOptions,
  FetchNextPageOptions,
  FetchPreviousPageOptions,
  FetchQueryOptions,
  FetchStatus,
  focusManager,
  GetNextPageParamFunction,
  GetPreviousPageParamFunction,
  hashQueryKey,
  hydrate,
  HydrateOptions,
  HydrateProps,
  InfiniteData,
  InfiniteQueryObserver,
  InfiniteQueryObserverBaseResult,
  InfiniteQueryObserverLoadingErrorResult,
  InfiniteQueryObserverLoadingResult,
  InfiniteQueryObserverOptions,
  InfiniteQueryObserverRefetchErrorResult,
  InfiniteQueryObserverResult,
  InfiniteQueryObserverSuccessResult,
  InitialDataFunction,
  InvalidateOptions,
  InvalidateQueryFilters,
  isCancelledError,
  isError,
  IsRestoringProvider,
  isServer,
  Logger,
  matchQuery,
  MutateFunction,
  MutateOptions,
  Mutation,
  MutationCache,
  MutationFilters,
  MutationFunction,
  MutationKey,
  MutationMeta,
  MutationObserver,
  MutationObserverBaseResult,
  MutationObserverErrorResult,
  MutationObserverIdleResult,
  MutationObserverLoadingResult,
  MutationObserverOptions,
  MutationObserverResult,
  MutationObserverSuccessResult,
  MutationOptions,
  MutationStatus,
  NetworkMode,
  NotifyEvent,
  NotifyEventType,
  notifyManager,
  onlineManager,
  parseFilterArgs,
  parseMutationArgs,
  parseMutationFilterArgs,
  parseQueryArgs,
  PlaceholderDataFunction,
  QueriesObserver,
  QueriesOptions,
  QueriesResults,
  Query,
  QueryCache,
  QueryClientConfig,
  QueryClientProviderProps,
  QueryErrorResetBoundary,
  QueryErrorResetBoundaryProps,
  QueryFilters,
  QueryFunction,
  QueryFunctionContext,
  QueryKey,
  QueryKeyHashFunction,
  QueryMeta,
  QueryObserver,
  QueryObserverBaseResult,
  QueryObserverLoadingErrorResult,
  QueryObserverLoadingResult,
  QueryObserverOptions,
  QueryObserverRefetchErrorResult,
  QueryObserverResult,
  QueryObserverSuccessResult,
  QueryOptions,
  QueryState,
  QueryStatus,
  RefetchOptions,
  RefetchPageFilters,
  RefetchQueryFilters,
  replaceEqualDeep,
  ResetOptions,
  ResetQueryFilters,
  ResultOptions,
  SetDataOptions,
  ShouldDehydrateMutationFunction,
  ShouldDehydrateQueryFunction,
  Updater,
  UseBaseMutationResult,
  UseBaseQueryOptions,
  UseBaseQueryResult,
  UseErrorBoundary,
  useInfiniteQuery,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  useIsFetching,
  useIsMutating,
  useIsRestoring,
  UseMutateAsyncFunction,
  UseMutateFunction,
  useMutation,
  UseMutationOptions,
  UseMutationResult,
  useQueryErrorResetBoundary,
  UseQueryOptions,
  UseQueryResult,
  WithRequired,
} from '@tanstack/react-query';

// Re-export consts, functions and classes
export {
  defaultContext,
  Hydrate,
  // QueryClient, // DO NOT EXPORT
  QueryClientProvider,
  useHydrate,
  useQueries,
  useQuery,
  useQueryClient,
} from '@tanstack/react-query';
