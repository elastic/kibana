groups:
- id: registry.otel
  type: attribute_group
  brief: Attributes reserved for OpenTelemetry
  attributes:
  - name: otel.status_code
    type:
      members:
      - id: ok
        value: OK
        brief: The operation has been validated by an Application developer or Operator to have completed successfully.
        stability: stable
      - id: error
        value: ERROR
        brief: The operation contains an error.
        stability: stable
    brief: Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.
    requirement_level: recommended
    stability: stable
  - name: otel.status_description
    type: string
    brief: Description of the Status if it has a value, otherwise not set.
    examples:
    - resource not found
    requirement_level: recommended
    stability: stable
  - name: otel.span.sampling_result
    type:
      members:
      - id: drop
        value: DROP
        brief: The span is not sampled and not recording
        stability: development
      - id: record_only
        value: RECORD_ONLY
        brief: The span is not sampled, but recording
        stability: development
      - id: record_and_sample
        value: RECORD_AND_SAMPLE
        brief: The span is sampled and recording
        stability: development
    brief: The result value of the sampler for this span
    requirement_level: recommended
    stability: development
  - name: otel.span.parent.origin
    type:
      members:
      - id: none
        value: none
        brief: The span does not have a parent, it is a root span
        stability: development
      - id: local
        value: local
        brief: The span has a parent and the parent's span context [isRemote()](https://opentelemetry.io/docs/specs/otel/trace/api/#isremote) is false
        stability: development
      - id: remote
        value: remote
        brief: The span has a parent and the parent's span context [isRemote()](https://opentelemetry.io/docs/specs/otel/trace/api/#isremote) is true
        stability: development
    brief: Determines whether the span has a parent span, and if so, [whether it is a remote parent](https://opentelemetry.io/docs/specs/otel/trace/api/#isremote)
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/registry.yaml
  display_name: OTel Attributes
- id: registry.otel.scope
  type: attribute_group
  brief: Attributes used by non-OTLP exporters to represent OpenTelemetry Scope's concepts.
  attributes:
  - name: otel.scope.name
    type: string
    brief: The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).
    examples:
    - io.opentelemetry.contrib.mongodb
    requirement_level: recommended
    stability: stable
  - name: otel.scope.version
    type: string
    brief: The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).
    examples:
    - 1.0.0
    requirement_level: recommended
    stability: stable
  - name: otel.scope.schema_url
    type: string
    brief: The schema URL of the instrumentation scope.
    examples:
    - https://opentelemetry.io/schemas/1.31.0
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/registry.yaml
  display_name: OTel Scope Attributes
- id: registry.otel.component
  type: attribute_group
  brief: Attributes used for OpenTelemetry component self-monitoring
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/registry.yaml
  display_name: OTel Component Attributes
- id: otel_span
  type: attribute_group
  brief: Span attributes used by non-OTLP exporters or on metrics to represent OpenTelemetry Span's concepts.
  attributes:
  - name: otel.status_code
    type:
      members:
      - id: ok
        value: OK
        brief: The operation has been validated by an Application developer or Operator to have completed successfully.
        stability: stable
      - id: error
        value: ERROR
        brief: The operation contains an error.
        stability: stable
    brief: Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.
    requirement_level: recommended
    stability: stable
  - name: otel.status_description
    type: string
    brief: Description of the Status if it has a value, otherwise not set.
    examples:
    - resource not found
    requirement_level: recommended
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/common.yaml
    attributes:
      otel.status_code:
        source_group: registry.otel
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      otel.status_description:
        source_group: registry.otel
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.otel.library.deprecated
  type: attribute_group
  brief: Describes deprecated otel.library attributes.
  attributes:
  - name: otel.library.name
    type: string
    brief: Deprecated. Use the `otel.scope.name` attribute
    examples:
    - io.opentelemetry.contrib.mongodb
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: otel.scope.name
      note: Replaced by `otel.scope.name`.
  - name: otel.library.version
    type: string
    brief: Deprecated. Use the `otel.scope.version` attribute.
    examples:
    - 1.0.0
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: otel.scope.version
      note: Replaced by `otel.scope.version`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/registry-deprecated.yaml
  display_name: Deprecated OTel Library Attributes
- id: metric.otel.sdk.span.live.count
  type: metric
  brief: Deprecated, use `otel.sdk.span.live` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: otel.sdk.span.live
    note: Replaced by `otel.sdk.span.live`.
  metric_name: otel.sdk.span.live.count
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.span.ended.count
  type: metric
  brief: Use `otel.sdk.span.started` minus `otel.sdk.span.live` to derive this value.
  stability: development
  deprecated:
    reason: obsoleted
    note: Obsoleted.
  metric_name: otel.sdk.span.ended.count
  instrument: counter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.span.processed.count
  type: metric
  brief: Deprecated, use `otel.sdk.processor.span.processed` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: otel.sdk.processor.span.processed
    note: Replaced by `otel.sdk.processor.span.processed`.
  metric_name: otel.sdk.processor.span.processed.count
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.span.inflight.count
  type: metric
  brief: Deprecated, use `otel.sdk.exporter.span.inflight` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: otel.sdk.exporter.span.inflight
    note: Replaced by `otel.sdk.exporter.span.inflight`.
  metric_name: otel.sdk.exporter.span.inflight.count
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.span.exported.count
  type: metric
  brief: Deprecated, use `otel.sdk.exporter.span.exported` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: otel.sdk.exporter.span.exported
    note: Replaced by `otel.sdk.exporter.span.exported`.
  metric_name: otel.sdk.exporter.span.exported.count
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.span.ended
  type: metric
  brief: Use `otel.sdk.span.started` minus `otel.sdk.span.live` to derive this value.
  stability: development
  deprecated:
    reason: obsoleted
    note: Obsoleted.
  metric_name: otel.sdk.span.ended
  instrument: counter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/metrics-deprecated.yaml
- id: metric_attributes.hw.network
  type: attribute_group
  brief: |
    Common attributes for network adapter metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/network-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.logical_addresses:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.physical_address:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.network.bandwidth.limit
  type: metric
  brief: Link speed.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.network.bandwidth.limit
  instrument: updowncounter
  unit: By/s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/network-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.logical_addresses:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.physical_address:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.network.bandwidth.utilization
  type: metric
  brief: Utilization of the network bandwidth as a fraction.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.network.bandwidth.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/network-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.logical_addresses:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.physical_address:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.network.io
  type: metric
  brief: Received and transmitted network traffic in bytes.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - receive
    - transmit
    requirement_level: required
    stability: development
  metric_name: hw.network.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/network-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.logical_addresses:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.physical_address:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.network.packets
  type: metric
  brief: Received and transmitted network traffic in packets (or frames).
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - receive
    - transmit
    requirement_level: required
    stability: development
  metric_name: hw.network.packets
  instrument: counter
  unit: '{packet}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/network-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.logical_addresses:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.physical_address:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.network.up
  type: metric
  brief: 'Link status: `1` (up) or `0` (down).'
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.network.up
  instrument: updowncounter
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/network-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.logical_addresses:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.network.physical_address:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric_attributes.hw.memory
  type: attribute_group
  brief: |
    Common attributes for memory module metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.memory.type
    type: string
    brief: |
      Type of the memory module
    examples:
    - DDR4
    - DDR5
    - LPDDR5
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/memory-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.memory.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.memory.size
  type: metric
  brief: Size of the memory module.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.memory.type
    type: string
    brief: |
      Type of the memory module
    examples:
    - DDR4
    - DDR5
    - LPDDR5
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.memory.size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/memory-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.memory.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric_attributes.hw.physical_disk
  type: attribute_group
  brief: |
    Common attributes for physical disk metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.type
    type: string
    brief: |
      Type of the physical disk
    examples:
    - HDD
    - SSD
    - 10K
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/physical-disk-metrics.yaml
    attributes:
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.physical_disk.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.physical_disk.endurance_utilization
  type: metric
  brief: Endurance remaining for this SSD disk.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.type
    type: string
    brief: |
      Type of the physical disk
    examples:
    - HDD
    - SSD
    - 10K
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.physical_disk.state
    type:
      members:
      - id: remaining
        value: remaining
        brief: Remaining
        stability: development
    brief: |
      State of the physical disk endurance utilization
    examples:
    - remaining
    requirement_level: required
    stability: development
  metric_name: hw.physical_disk.endurance_utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/physical-disk-metrics.yaml
    attributes:
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.physical_disk.state:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.physical_disk.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.physical_disk.size
  type: metric
  brief: Size of the disk.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.type
    type: string
    brief: |
      Type of the physical disk
    examples:
    - HDD
    - SSD
    - 10K
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.physical_disk.size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/physical-disk-metrics.yaml
    attributes:
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.physical_disk.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.physical_disk.smart
  type: metric
  brief: Value of the corresponding [S.M.A.R.T.](https://wikipedia.org/wiki/S.M.A.R.T.) (Self-Monitoring, Analysis, and Reporting Technology) attribute.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.type
    type: string
    brief: |
      Type of the physical disk
    examples:
    - HDD
    - SSD
    - 10K
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.physical_disk.smart_attribute
    type: string
    brief: |
      [S.M.A.R.T.](https://wikipedia.org/wiki/S.M.A.R.T.) (Self-Monitoring, Analysis, and Reporting Technology) attribute of the physical disk
    examples:
    - Spin Retry Count
    - Seek Error Rate
    requirement_level: recommended
    stability: development
  metric_name: hw.physical_disk.smart
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/physical-disk-metrics.yaml
    attributes:
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.physical_disk.smart_attribute:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.physical_disk.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric_attributes.hw.cpu
  type: attribute_group
  brief: |
    Common attributes for CPU metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/cpu-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.cpu.speed
  type: metric
  brief: CPU current frequency.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.cpu.speed
  instrument: gauge
  unit: Hz
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/cpu-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.cpu.speed.limit
  type: metric
  brief: CPU maximum frequency.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Type of limit for hardware components
    examples:
    - throttled
    - max
    - turbo
    requirement_level: recommended
    stability: development
  metric_name: hw.cpu.speed.limit
  instrument: gauge
  unit: Hz
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/cpu-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.limit_type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric_attributes.hw.disk_controller
  type: attribute_group
  brief: |
    Common attributes for disk controller metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.bios_version
    type: string
    brief: |
      BIOS version of the hardware component
    examples:
    - 1.2.3
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/disk-controller-metrics.yaml
    attributes:
      hw.bios_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric_attributes.hw.enclosure
  type: attribute_group
  brief: |
    Common attributes for enclosure metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.bios_version
    type: string
    brief: |
      BIOS version of the hardware component
    examples:
    - 1.2.3
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.enclosure.type
    type: string
    brief: |
      Type of the enclosure (useful for modular systems)
    examples:
    - Computer
    - Storage
    - Switch
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/enclosure-metrics.yaml
    attributes:
      hw.bios_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.enclosure.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: hardware.attributes.common
  type: attribute_group
  brief: Common hardware attributes
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/common.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric_attributes.hw.fan
  type: attribute_group
  brief: |
    Common attributes for fan metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/fan-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.fan.speed
  type: metric
  brief: Fan speed in revolutions per minute.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.fan.speed
  instrument: gauge
  unit: rpm
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/fan-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.fan.speed.limit
  type: metric
  brief: Speed limit in rpm.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Type of limit for hardware components
    examples:
    - low.critical
    - low.degraded
    - max
    requirement_level: recommended
    stability: development
  metric_name: hw.fan.speed.limit
  instrument: gauge
  unit: rpm
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/fan-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.limit_type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.fan.speed_ratio
  type: metric
  brief: Fan speed expressed as a fraction of its maximum speed.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.fan.speed_ratio
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/fan-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric_attributes.hw.temperature.common
  type: attribute_group
  brief: |
    Common attributes for temperature metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/temperature-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.temperature
  type: metric
  brief: Temperature in degrees Celsius.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.temperature
  instrument: gauge
  unit: Cel
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/temperature-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.temperature.limit
  type: metric
  brief: Temperature limit in degrees Celsius.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Type of limit for hardware components
    examples:
    - low.critical
    - low.degraded
    - high.degraded
    - high.critical
    requirement_level: recommended
    stability: development
  metric_name: hw.temperature.limit
  instrument: gauge
  unit: Cel
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/temperature-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.limit_type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.host.ambient_temperature
  type: metric
  brief: Ambient (external) temperature of the physical host.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.host.ambient_temperature
  instrument: gauge
  unit: Cel
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/host-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.host.energy
  type: metric
  brief: Total energy consumed by the entire physical host, in joules.
  note: |
    The overall energy usage of a host MUST be reported using the specific `hw.host.energy` and `hw.host.power` metrics **only**, instead of the generic `hw.energy` and `hw.power` described in the previous section, to prevent summing up overlapping values.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.host.energy
  instrument: counter
  unit: J
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/host-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.host.heating_margin
  type: metric
  brief: |
    By how many degrees Celsius the temperature of the physical host can be increased, before reaching a warning threshold on one of the internal sensors.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.host.heating_margin
  instrument: gauge
  unit: Cel
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/host-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.host.power
  type: metric
  brief: |
    Instantaneous power consumed by the entire physical host in Watts (`hw.host.energy` is preferred).
  note: |
    The overall energy usage of a host MUST be reported using the specific `hw.host.energy` and `hw.host.power` metrics **only**, instead of the generic `hw.energy` and `hw.power` described in the previous section, to prevent summing up overlapping values.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.host.power
  instrument: gauge
  unit: W
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/host-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric_attributes.hw.tape_drive
  type: attribute_group
  brief: |
    Common attributes for tape drive metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/tape-drive-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.tape_drive.operations
  type: metric
  brief: Operations performed by the tape drive.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.tape_drive.operation_type
    type:
      members:
      - id: mount
        value: mount
        brief: Mount
        stability: development
      - id: unmount
        value: unmount
        brief: Unmount
        stability: development
      - id: clean
        value: clean
        brief: Clean
        stability: development
    brief: |
      Type of tape drive operation
    examples:
    - mount
    - unmount
    - clean
    requirement_level: recommended
    stability: development
  metric_name: hw.tape_drive.operations
  instrument: counter
  unit: '{operation}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/tape-drive-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.tape_drive.operation_type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric_attributes.hw.attributes
  type: attribute_group
  brief: Attributes for hardware metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.type
    type:
      members:
      - id: battery
        value: battery
        brief: Battery
        stability: development
      - id: cpu
        value: cpu
        brief: CPU
        stability: development
      - id: disk_controller
        value: disk_controller
        brief: Disk controller
        stability: development
      - id: enclosure
        value: enclosure
        brief: Enclosure
        stability: development
      - id: fan
        value: fan
        brief: Fan
        stability: development
      - id: gpu
        value: gpu
        brief: GPU
        stability: development
      - id: logical_disk
        value: logical_disk
        brief: Logical disk
        stability: development
      - id: memory
        value: memory
        brief: Memory
        stability: development
      - id: network
        value: network
        brief: Network
        stability: development
      - id: physical_disk
        value: physical_disk
        brief: Physical disk
        stability: development
      - id: power_supply
        value: power_supply
        brief: Power supply
        stability: development
      - id: tape_drive
        value: tape_drive
        brief: Tape drive
        stability: development
      - id: temperature
        value: temperature
        brief: Temperature
        stability: development
      - id: voltage
        value: voltage
        brief: Voltage
        stability: development
    brief: |
      Type of the component
    requirement_level: required
    note: |
      Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/common-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.energy
  type: metric
  brief: Energy consumed by the component.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.type
    type:
      members:
      - id: battery
        value: battery
        brief: Battery
        stability: development
      - id: cpu
        value: cpu
        brief: CPU
        stability: development
      - id: disk_controller
        value: disk_controller
        brief: Disk controller
        stability: development
      - id: enclosure
        value: enclosure
        brief: Enclosure
        stability: development
      - id: fan
        value: fan
        brief: Fan
        stability: development
      - id: gpu
        value: gpu
        brief: GPU
        stability: development
      - id: logical_disk
        value: logical_disk
        brief: Logical disk
        stability: development
      - id: memory
        value: memory
        brief: Memory
        stability: development
      - id: network
        value: network
        brief: Network
        stability: development
      - id: physical_disk
        value: physical_disk
        brief: Physical disk
        stability: development
      - id: power_supply
        value: power_supply
        brief: Power supply
        stability: development
      - id: tape_drive
        value: tape_drive
        brief: Tape drive
        stability: development
      - id: temperature
        value: temperature
        brief: Temperature
        stability: development
      - id: voltage
        value: voltage
        brief: Voltage
        stability: development
    brief: |
      Type of the component
    requirement_level: required
    note: |
      Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
    stability: development
  metric_name: hw.energy
  instrument: counter
  unit: J
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/common-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.errors
  type: metric
  brief: Number of errors encountered by the component.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.type
    type:
      members:
      - id: battery
        value: battery
        brief: Battery
        stability: development
      - id: cpu
        value: cpu
        brief: CPU
        stability: development
      - id: disk_controller
        value: disk_controller
        brief: Disk controller
        stability: development
      - id: enclosure
        value: enclosure
        brief: Enclosure
        stability: development
      - id: fan
        value: fan
        brief: Fan
        stability: development
      - id: gpu
        value: gpu
        brief: GPU
        stability: development
      - id: logical_disk
        value: logical_disk
        brief: Logical disk
        stability: development
      - id: memory
        value: memory
        brief: Memory
        stability: development
      - id: network
        value: network
        brief: Network
        stability: development
      - id: physical_disk
        value: physical_disk
        brief: Physical disk
        stability: development
      - id: power_supply
        value: power_supply
        brief: Power supply
        stability: development
      - id: tape_drive
        value: tape_drive
        brief: Tape drive
        stability: development
      - id: temperature
        value: temperature
        brief: Temperature
        stability: development
      - id: voltage
        value: voltage
        brief: Voltage
        stability: development
    brief: |
      Type of the component
    requirement_level: required
    note: |
      Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The type of error encountered by the component.
    examples:
    - uncorrected
    - zero_buffer_credit
    - crc
    - bad_sector
    requirement_level:
      conditionally_required: if and only if an error has occurred
    note: |
      The `error.type` SHOULD match the error code reported by the component, the canonical name of the error, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: Direction of network traffic for network errors.
    examples:
    - receive
    - transmit
    requirement_level: recommended
    note: |
      This attribute SHOULD only be used when `hw.type` is set to `"network"` to indicate the direction of the error.
    stability: development
  metric_name: hw.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/common-metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.power
  type: metric
  brief: Instantaneous power consumed by the component.
  note: |
    It is recommended to report `hw.energy` instead of `hw.power` when possible.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.type
    type:
      members:
      - id: battery
        value: battery
        brief: Battery
        stability: development
      - id: cpu
        value: cpu
        brief: CPU
        stability: development
      - id: disk_controller
        value: disk_controller
        brief: Disk controller
        stability: development
      - id: enclosure
        value: enclosure
        brief: Enclosure
        stability: development
      - id: fan
        value: fan
        brief: Fan
        stability: development
      - id: gpu
        value: gpu
        brief: GPU
        stability: development
      - id: logical_disk
        value: logical_disk
        brief: Logical disk
        stability: development
      - id: memory
        value: memory
        brief: Memory
        stability: development
      - id: network
        value: network
        brief: Network
        stability: development
      - id: physical_disk
        value: physical_disk
        brief: Physical disk
        stability: development
      - id: power_supply
        value: power_supply
        brief: Power supply
        stability: development
      - id: tape_drive
        value: tape_drive
        brief: Tape drive
        stability: development
      - id: temperature
        value: temperature
        brief: Temperature
        stability: development
      - id: voltage
        value: voltage
        brief: Voltage
        stability: development
    brief: |
      Type of the component
    requirement_level: required
    note: |
      Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
    stability: development
  metric_name: hw.power
  instrument: gauge
  unit: W
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/common-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.status
  type: metric
  brief: 'Operational status: `1` (true) or `0` (false) for each of the possible states.'
  note: |
    `hw.status` is currently specified as an *UpDownCounter* but would ideally be represented using a [*StateSet* as defined in OpenMetrics](https://github.com/prometheus/OpenMetrics/blob/v1.0.0/specification/OpenMetrics.md#stateset). This semantic convention will be updated once *StateSet* is specified in OpenTelemetry. This planned change is not expected to have any consequence on the way users query their timeseries backend to retrieve the values of `hw.status` over time.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.type
    type:
      members:
      - id: battery
        value: battery
        brief: Battery
        stability: development
      - id: cpu
        value: cpu
        brief: CPU
        stability: development
      - id: disk_controller
        value: disk_controller
        brief: Disk controller
        stability: development
      - id: enclosure
        value: enclosure
        brief: Enclosure
        stability: development
      - id: fan
        value: fan
        brief: Fan
        stability: development
      - id: gpu
        value: gpu
        brief: GPU
        stability: development
      - id: logical_disk
        value: logical_disk
        brief: Logical disk
        stability: development
      - id: memory
        value: memory
        brief: Memory
        stability: development
      - id: network
        value: network
        brief: Network
        stability: development
      - id: physical_disk
        value: physical_disk
        brief: Physical disk
        stability: development
      - id: power_supply
        value: power_supply
        brief: Power supply
        stability: development
      - id: tape_drive
        value: tape_drive
        brief: Tape drive
        stability: development
      - id: temperature
        value: temperature
        brief: Temperature
        stability: development
      - id: voltage
        value: voltage
        brief: Voltage
        stability: development
    brief: |
      Type of the component
    requirement_level: required
    note: |
      Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
    stability: development
  - name: hw.state
    type:
      members:
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: failed
        value: failed
        brief: Failed
        stability: development
      - id: needs_cleaning
        value: needs_cleaning
        brief: Needs Cleaning
        stability: development
      - id: ok
        value: ok
        brief: OK
        stability: development
      - id: predicted_failure
        value: predicted_failure
        brief: Predicted Failure
        stability: development
    brief: |
      The current state of the component
    requirement_level: required
    stability: development
  metric_name: hw.status
  instrument: updowncounter
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/common-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.state:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric_attributes.hw.power_supply
  type: attribute_group
  brief: |
    Common attributes for power supply metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/power-supply-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.power_supply.limit
  type: metric
  brief: Maximum power output of the power supply.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Type of limit for hardware components
    examples:
    - max
    - critical
    - throttled
    requirement_level: recommended
    stability: development
  metric_name: hw.power_supply.limit
  instrument: updowncounter
  unit: W
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/power-supply-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.limit_type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.power_supply.utilization
  type: metric
  brief: Utilization of the power supply as a fraction of its maximum output.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.power_supply.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/power-supply-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.power_supply.usage
  type: metric
  brief: Current power output of the power supply.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.power_supply.usage
  instrument: updowncounter
  unit: W
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/power-supply-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric_attributes.hw.battery
  type: attribute_group
  brief: |
    Common attributes for battery metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.battery.chemistry
    type: string
    brief: |
      Battery [chemistry](https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html), e.g. Lithium-Ion, Nickel-Cadmium, etc.
    examples:
    - Li-ion
    - NiMH
    requirement_level: recommended
    stability: development
  - name: hw.battery.capacity
    type: string
    brief: |
      Design capacity in Watts-hours or Amper-hours
    examples:
    - 9.3Ah
    - 50Wh
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/battery-metrics.yaml
    attributes:
      hw.battery.capacity:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.battery.chemistry:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.battery.charge
  type: metric
  brief: Remaining fraction of battery charge.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.battery.chemistry
    type: string
    brief: |
      Battery [chemistry](https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html), e.g. Lithium-Ion, Nickel-Cadmium, etc.
    examples:
    - Li-ion
    - NiMH
    requirement_level: recommended
    stability: development
  - name: hw.battery.capacity
    type: string
    brief: |
      Design capacity in Watts-hours or Amper-hours
    examples:
    - 9.3Ah
    - 50Wh
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.battery.charge
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/battery-metrics.yaml
    attributes:
      hw.battery.capacity:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.battery.chemistry:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.battery.charge.limit
  type: metric
  brief: Lower limit of battery charge fraction to ensure proper operation.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.battery.chemistry
    type: string
    brief: |
      Battery [chemistry](https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html), e.g. Lithium-Ion, Nickel-Cadmium, etc.
    examples:
    - Li-ion
    - NiMH
    requirement_level: recommended
    stability: development
  - name: hw.battery.capacity
    type: string
    brief: |
      Design capacity in Watts-hours or Amper-hours
    examples:
    - 9.3Ah
    - 50Wh
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Represents battery charge level thresholds relevant to device operation and health. Each `limit_type` denotes a specific charge limit such as the minimum or maximum optimal charge, the shutdown threshold, or energy-saving thresholds. These values are typically provided by the hardware or firmware to guide safe and efficient battery usage.
    examples:
    - critical
    - throttled
    - degraded
    requirement_level: recommended
    stability: development
  metric_name: hw.battery.charge.limit
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/battery-metrics.yaml
    attributes:
      hw.battery.capacity:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.battery.chemistry:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.limit_type:
        source_group: registry.hardware
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.battery.time_left
  type: metric
  brief: Time left before battery is completely charged or discharged.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.battery.chemistry
    type: string
    brief: |
      Battery [chemistry](https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html), e.g. Lithium-Ion, Nickel-Cadmium, etc.
    examples:
    - Li-ion
    - NiMH
    requirement_level: recommended
    stability: development
  - name: hw.battery.capacity
    type: string
    brief: |
      Design capacity in Watts-hours or Amper-hours
    examples:
    - 9.3Ah
    - 50Wh
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.state
    type:
      members:
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: failed
        value: failed
        brief: Failed
        stability: development
      - id: needs_cleaning
        value: needs_cleaning
        brief: Needs Cleaning
        stability: development
      - id: ok
        value: ok
        brief: OK
        stability: development
      - id: predicted_failure
        value: predicted_failure
        brief: Predicted Failure
        stability: development
    brief: |
      The current state of the component
    requirement_level: required
    stability: development
  - name: hw.battery.state
    type:
      members:
      - id: charging
        value: charging
        brief: Charging
        stability: development
      - id: discharging
        value: discharging
        brief: Discharging
        stability: development
    brief: |
      The current state of the battery
    requirement_level:
      conditionally_required: If the battery is charging or discharging
    note: |
      The `hw.state` attribute should indicate the current state of the battery. It should be one of the predefined states such as "charging" or "discharging".
    stability: development
  metric_name: hw.battery.time_left
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/battery-metrics.yaml
    attributes:
      hw.battery.capacity:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.battery.chemistry:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.battery.state:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.state:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: service.zos.software
  type: attribute_group
  brief: A software service running on a z/OS system.
  stability: development
  attributes:
  - name: service.name
    type: string
    brief: |
      Logical name of the service.
    examples:
    - CICS TS
    - Datacom
    - ADABAS
    requirement_level: required
    note: For z/OS system software, SHOULD be set to an abbreviated name of the z/OS system software.
    stability: stable
  - name: service.version
    type: string
    brief: |
      The version string of the service API or implementation. The format is not defined by these conventions.
    examples: '5.6'
    requirement_level: required
    note: For z/OS system software, SHOULD be set to the version of the z/OS system software.
    stability: stable
  - name: service.instance.id
    type: string
    brief: |
      The string ID of the service instance.
    examples: CICSPROD
    requirement_level: required
    note: For z/OS system software, SHOULD be set to the identifier representing the current instance of the the z/OS system software, e.g., the CICS region APPLID or IMS region IMSID.
    stability: development
  - name: service.namespace
    type: string
    brief: |
      A namespace for `service.name`.
    examples: CICSPLX2
    requirement_level: required
    note: For z/OS system software, SHOULD be set to the identifier representing of a grouping of the z/OS system software instances, e.g., the name of the CICSPLEX.
    stability: development
  name: service.zos.software
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/zos/common.yaml
    attributes:
      service.instance.id:
        source_group: registry.service
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      service.name:
        source_group: registry.service
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      service.namespace:
        source_group: registry.service
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      service.version:
        source_group: registry.service
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
- id: process.zos
  type: attribute_group
  brief: A process running on a z/OS system.
  stability: development
  attributes:
  - name: process.command
    type: string
    brief: The command used to launch the process (i.e. the command name). On z/OS, SHOULD be set to the name of the job used to start the z/OS system software.
    examples: CICSSTRT
    requirement_level: required
    stability: development
  - name: process.pid
    type: int
    brief: |
      Process identifier (PID).
    examples: 008A
    requirement_level: required
    note: On z/OS, SHOULD be set to the Address Space Identifier.
    stability: development
  - name: process.owner
    type: string
    brief: |
      The username of the user that owns the process.
    examples: CICSUSR
    requirement_level: opt_in
    note: On z/OS, SHOULD be set to the user under which the z/OS system software is executed.
    stability: development
  - name: process.runtime.description
    type: string
    brief: |
      An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
    examples: IBM Customer Information Control System (CICS) Transaction Server for z/OS Version 5.6
    requirement_level: opt_in
    stability: development
  - name: process.runtime.name
    type: string
    brief: |
      The name of the runtime of this process.
    examples: CICS Transaction Server z/OS Version 5.6
    requirement_level: opt_in
    stability: development
  - name: process.runtime.version
    type: string
    brief: |
      The version of the runtime of this process, as returned by the runtime without modification.
    examples: '5.6'
    requirement_level: opt_in
    stability: development
  name: process.zos
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/zos/common.yaml
    attributes:
      process.command:
        source_group: registry.process
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      process.owner:
        source_group: registry.process
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      process.pid:
        source_group: registry.process
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      process.runtime.description:
        source_group: registry.process
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      process.runtime.name:
        source_group: registry.process
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      process.runtime.version:
        source_group: registry.process
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
- id: os.zos
  type: attribute_group
  brief: The operating system on a z/OS system.
  stability: development
  attributes:
  - name: os.type
    type:
      members:
      - id: windows
        value: windows
        brief: Microsoft Windows
        stability: development
      - id: linux
        value: linux
        brief: Linux
        stability: development
      - id: darwin
        value: darwin
        brief: Apple Darwin
        stability: development
      - id: freebsd
        value: freebsd
        brief: FreeBSD
        stability: development
      - id: netbsd
        value: netbsd
        brief: NetBSD
        stability: development
      - id: openbsd
        value: openbsd
        brief: OpenBSD
        stability: development
      - id: dragonflybsd
        value: dragonflybsd
        brief: DragonFly BSD
        stability: development
      - id: hpux
        value: hpux
        brief: HP-UX (Hewlett Packard Unix)
        stability: development
      - id: aix
        value: aix
        brief: AIX (Advanced Interactive eXecutive)
        stability: development
      - id: solaris
        value: solaris
        brief: SunOS, Oracle Solaris
        stability: development
      - id: z_os
        value: z_os
        brief: Deprecated. Use `zos` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: zos
          note: Replaced by `zos`.
      - id: zos
        value: zos
        brief: IBM z/OS
        stability: development
    brief: |
      The operating system type.
    examples: zos
    requirement_level: required
    stability: development
  - name: os.description
    type: string
    brief: Human readable OS version information, e.g., as reported by command `d iplinfo`.
    examples: IBM z/OS 3.1
    requirement_level: opt_in
    stability: development
  - name: os.name
    type: string
    brief: Human readable operating system name.
    examples: z/OS
    requirement_level: opt_in
    stability: development
  - name: os.version
    type: string
    brief: The version string of the operating system. On z/OS, SHOULD be the release returned by the command `d iplinfo`.
    examples: 3.1.0
    requirement_level: recommended
    stability: development
  name: os.zos
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/zos/common.yaml
    attributes:
      os.description:
        source_group: registry.os
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      os.name:
        source_group: registry.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      os.type:
        source_group: registry.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      os.version:
        source_group: registry.os
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
- id: host.zos
  type: attribute_group
  brief: The host of a z/OS system.
  stability: development
  attributes:
  - name: host.name
    type: string
    brief: Name of the host. On z/OS, SHOULD be the full qualified hostname used to register the z/OS system in DNS.
    examples: SYS1.DOMAIN.COM
    requirement_level: recommended
    stability: development
  - name: host.arch
    type:
      members:
      - id: amd64
        value: amd64
        brief: AMD64
        stability: development
      - id: arm32
        value: arm32
        brief: ARM32
        stability: development
      - id: arm64
        value: arm64
        brief: ARM64
        stability: development
      - id: ia64
        value: ia64
        brief: Itanium
        stability: development
      - id: ppc32
        value: ppc32
        brief: 32-bit PowerPC
        stability: development
      - id: ppc64
        value: ppc64
        brief: 64-bit PowerPC
        stability: development
      - id: s390x
        value: s390x
        brief: IBM z/Architecture
        stability: development
      - id: x86
        value: x86
        brief: 32-bit x86
        stability: development
    brief: |
      The CPU architecture the host system is running on.
    examples: s390x
    requirement_level: recommended
    stability: development
  - name: host.id
    type: string
    brief: Unique host ID. On z/OS, SHOULD be the concatenation of sysplex name and SMFID, separated by a dash
    examples: SYSPLEX1-SYS1
    requirement_level: opt_in
    stability: development
  name: host.zos
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/zos/common.yaml
    attributes:
      host.arch:
        source_group: registry.host
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      host.id:
        source_group: registry.host
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      host.name:
        source_group: registry.host
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
- id: registry.system
  type: attribute_group
  brief: Describes System attributes
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/registry.yaml
  display_name: General System Attributes
- id: registry.system.memory
  type: attribute_group
  brief: Describes System Memory attributes
  attributes:
  - name: system.memory.state
    type:
      members:
      - id: used
        value: used
        brief: Actual used virtual memory in bytes.
        note: |
          Calculation based on the operating system metrics. On Linux, this corresponds to "MemTotal - MemAvailable" from /proc/meminfo, which more accurately reflects memory in active use by applications compared to older formulas based on free, cached, and buffers. If MemAvailable is not available, a fallback to those older formulas may be used.
        stability: development
      - id: free
        value: free
        stability: development
      - id: shared
        value: shared
        stability: development
        deprecated:
          reason: uncategorized
          note: Removed, report shared memory usage with `metric.system.memory.shared` metric
      - id: buffers
        value: buffers
        stability: development
      - id: cached
        value: cached
        stability: development
    brief: The memory state
    examples:
    - free
    - cached
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/registry.yaml
  display_name: System Memory Attributes
- id: registry.system.paging
  type: attribute_group
  brief: Describes System Memory Paging attributes
  attributes:
  - name: system.paging.state
    type:
      members:
      - id: used
        value: used
        stability: development
      - id: free
        value: free
        stability: development
    brief: The memory paging state
    examples:
    - free
    requirement_level: recommended
    stability: development
  - name: system.paging.type
    type:
      members:
      - id: major
        value: major
        stability: development
      - id: minor
        value: minor
        stability: development
    brief: The memory paging type
    examples:
    - minor
    requirement_level: recommended
    stability: development
  - name: system.paging.direction
    type:
      members:
      - id: in
        value: in
        stability: development
      - id: out
        value: out
        stability: development
    brief: The paging access direction
    examples:
    - in
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/registry.yaml
  display_name: System Paging Attributes
- id: registry.system.filesystem
  type: attribute_group
  brief: Describes Filesystem attributes
  attributes:
  - name: system.filesystem.state
    type:
      members:
      - id: used
        value: used
        stability: development
      - id: free
        value: free
        stability: development
      - id: reserved
        value: reserved
        stability: development
    brief: The filesystem state
    examples:
    - used
    requirement_level: recommended
    stability: development
  - name: system.filesystem.type
    type:
      members:
      - id: fat32
        value: fat32
        stability: development
      - id: exfat
        value: exfat
        stability: development
      - id: ntfs
        value: ntfs
        stability: development
      - id: refs
        value: refs
        stability: development
      - id: hfsplus
        value: hfsplus
        stability: development
      - id: ext4
        value: ext4
        stability: development
    brief: The filesystem type
    examples:
    - ext4
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mode
    type: string
    brief: The filesystem mode
    examples:
    - rw, ro
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mountpoint
    type: string
    brief: The filesystem mount path
    examples:
    - /mnt/data
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/registry.yaml
  display_name: Filesystem Attributes
- id: registry.system.process
  type: attribute_group
  brief: Describes System Process attributes
  attributes:
  - name: system.process.status
    type:
      members:
      - id: running
        value: running
        stability: development
      - id: sleeping
        value: sleeping
        stability: development
      - id: stopped
        value: stopped
        stability: development
      - id: defunct
        value: defunct
        stability: development
    brief: |
      The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)
    examples:
    - running
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/registry.yaml
  display_name: System Process Attributes
- id: registry.system.deprecated
  type: attribute_group
  brief: Deprecated system attributes.
  attributes:
  - name: system.processes.status
    type:
      members:
      - id: running
        value: running
        stability: development
      - id: sleeping
        value: sleeping
        stability: development
      - id: stopped
        value: stopped
        stability: development
      - id: defunct
        value: defunct
        stability: development
    brief: Deprecated, use `system.process.status` instead.
    examples:
    - running
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: system.process.status
      note: Replaced by `system.process.status`.
  - name: system.cpu.state
    type:
      members:
      - id: user
        value: user
        stability: development
      - id: system
        value: system
        stability: development
      - id: nice
        value: nice
        stability: development
      - id: idle
        value: idle
        stability: development
      - id: iowait
        value: iowait
        stability: development
      - id: interrupt
        value: interrupt
        stability: development
      - id: steal
        value: steal
        stability: development
    brief: Deprecated, use `cpu.mode` instead.
    examples:
    - idle
    - interrupt
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cpu.mode
      note: Replaced by `cpu.mode`.
  - name: system.network.state
    type:
      members:
      - id: close
        value: close
        stability: development
      - id: close_wait
        value: close_wait
        stability: development
      - id: closing
        value: closing
        stability: development
      - id: delete
        value: delete
        stability: development
      - id: established
        value: established
        stability: development
      - id: fin_wait_1
        value: fin_wait_1
        stability: development
      - id: fin_wait_2
        value: fin_wait_2
        stability: development
      - id: last_ack
        value: last_ack
        stability: development
      - id: listen
        value: listen
        stability: development
      - id: syn_recv
        value: syn_recv
        stability: development
      - id: syn_sent
        value: syn_sent
        stability: development
      - id: time_wait
        value: time_wait
        stability: development
    brief: Deprecated, use `network.connection.state` instead.
    examples:
    - close_wait
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.connection.state
      note: Replaced by `network.connection.state`.
  - name: system.cpu.logical_number
    type: int
    brief: Deprecated, use `cpu.logical_number` instead.
    examples:
    - 1
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cpu.logical_number
      note: Replaced by `cpu.logical_number`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/deprecated/registry-deprecated.yaml
  display_name: Deprecated System Attributes
- id: metric.system.network.connections
  type: metric
  brief: Deprecated, use `system.network.connection.count` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: system.network.connection.count
    note: Replaced by `system.network.connection.count`.
  attributes:
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  - name: network.connection.state
    type:
      members:
      - id: closed
        value: closed
        stability: development
      - id: close_wait
        value: close_wait
        stability: development
      - id: closing
        value: closing
        stability: development
      - id: established
        value: established
        stability: development
      - id: fin_wait_1
        value: fin_wait_1
        stability: development
      - id: fin_wait_2
        value: fin_wait_2
        stability: development
      - id: last_ack
        value: last_ack
        stability: development
      - id: listen
        value: listen
        stability: development
      - id: syn_received
        value: syn_received
        stability: development
      - id: syn_sent
        value: syn_sent
        stability: development
      - id: time_wait
        value: time_wait
        stability: development
    brief: The state of network connection
    examples:
    - close_wait
    requirement_level: recommended
    note: Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)
    stability: development
  metric_name: system.network.connections
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/deprecated/metrics-deprecated.yaml
    attributes:
      network.connection.state:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
- id: registry.client
  type: attribute_group
  brief: |
    These attributes may be used to describe the client in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the "user-facing" surface of the protocol / API doesn't expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.
  attributes:
  - name: client.address
    type: string
    brief: Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - client.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  - name: client.port
    type: int
    brief: Client port number.
    examples:
    - 65123
    requirement_level: recommended
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/client/registry.yaml
  display_name: Client Attributes
- id: client
  type: attribute_group
  brief: |
    General client attributes.
  attributes:
  - name: client.address
    type: string
    brief: Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - client.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  - name: client.port
    type: int
    brief: Client port number.
    examples:
    - 65123
    requirement_level: recommended
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/client/common.yaml
    attributes:
      client.address:
        source_group: registry.client
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      client.port:
        source_group: registry.client
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.cloudfoundry
  type: attribute_group
  brief: |
    CloudFoundry resource attributes.
  attributes:
  - name: cloudfoundry.system.id
    type: string
    brief: |
      A guid or another name describing the event source.
    examples:
    - cf/gorouter
    requirement_level: recommended
    note: |
      CloudFoundry defines the `source_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
      It is used for logs and metrics emitted by CloudFoundry. It is
      supposed to contain the component name, e.g. "gorouter", for
      CloudFoundry components.

      When system components are instrumented, values from the
      [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
      should be used. The `system.id` should be set to
      `spec.deployment/spec.name`.
    stability: development
  - name: cloudfoundry.system.instance.id
    type: string
    brief: |
      A guid describing the concrete instance of the event source.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
      It is used for logs and metrics emitted by CloudFoundry. It is
      supposed to contain the vm id for CloudFoundry components.

      When system components are instrumented, values from the
      [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
      should be used. The `system.instance.id` should be set to `spec.id`.
    stability: development
  - name: cloudfoundry.app.name
    type: string
    brief: |
      The name of the application.
    examples:
    - my-app-name
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.application_name`. This is the same value
      as reported by `cf apps`.
    stability: development
  - name: cloudfoundry.app.id
    type: string
    brief: |
      The guid of the application.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.application_id`. This is the same value as
      reported by `cf app <app-name> --guid`.
    stability: development
  - name: cloudfoundry.app.instance.id
    type: string
    brief: |
      The index of the application instance. 0 when just one instance is active.
    examples:
    - '0'
    - '1'
    requirement_level: recommended
    note: |
      CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
      It is used for logs and metrics emitted by CloudFoundry. It is
      supposed to contain the application instance index for applications
      deployed on the runtime.

      Application instrumentation should use the value from environment
      variable `CF_INSTANCE_INDEX`.
    stability: development
  - name: cloudfoundry.space.name
    type: string
    brief: |
      The name of the CloudFoundry space the application is running in.
    examples:
    - my-space-name
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.space_name`. This is the same value as
      reported by `cf spaces`.
    stability: development
  - name: cloudfoundry.space.id
    type: string
    brief: |
      The guid of the CloudFoundry space the application is running in.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.space_id`. This is the same value as
      reported by `cf space <space-name> --guid`.
    stability: development
  - name: cloudfoundry.org.name
    type: string
    brief: |
      The name of the CloudFoundry organization the app is running in.
    examples:
    - my-org-name
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.org_name`. This is the same value as
      reported by `cf orgs`.
    stability: development
  - name: cloudfoundry.org.id
    type: string
    brief: |
      The guid of the CloudFoundry org the application is running in.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.org_id`. This is the same value as
      reported by `cf org <org-name> --guid`.
    stability: development
  - name: cloudfoundry.process.id
    type: string
    brief: |
      The UID identifying the process.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.process_id`. It is supposed to be equal to
      `VCAP_APPLICATION.app_id` for applications deployed to the runtime.
      For system components, this could be the actual PID.
    stability: development
  - name: cloudfoundry.process.type
    type: string
    brief: |
      The type of process.
    examples:
    - web
    requirement_level: recommended
    note: |
      CloudFoundry applications can consist of multiple jobs. Usually the
      main process will be of type `web`. There can be additional background
      tasks or side-cars with different process types.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudfoundry/registry.yaml
  display_name: CloudFoundry Attributes
- id: entity.app
  type: entity
  brief: |
    An app used directly by end users — like mobile, web, or desktop.
  stability: development
  attributes:
  - name: app.installation.id
    type: string
    brief: |
      A unique identifier representing the installation of an application on a specific device
    examples:
    - 2ab2916d-a51f-4ac8-80ee-45ac31a28092
    requirement_level: recommended
    note: |
      Its value SHOULD persist across launches of the same application installation, including through application upgrades.
      It SHOULD change if the application is uninstalled or if all applications of the vendor are uninstalled.
      Additionally, users might be able to reset this value (e.g. by clearing application data).
      If an app is installed multiple times on the same device (e.g. in different accounts on Android), each `app.installation.id` SHOULD have a different value.
      If multiple OpenTelemetry SDKs are used within the same application, they SHOULD use the same value for `app.installation.id`.
      Hardware IDs (e.g. serial number, IMEI, MAC address) MUST NOT be used as the `app.installation.id`.

      For iOS, this value SHOULD be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/identifierforvendor).

      For Android, examples of `app.installation.id` implementations include:

      - [Firebase Installation ID](https://firebase.google.com/docs/projects/manage-installations).
      - A globally unique UUID which is persisted across sessions in your application.
      - [App set ID](https://developer.android.com/identity/app-set-id).
      - [`Settings.getString(Settings.Secure.ANDROID_ID)`](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID).

      More information about Android identifier best practices can be found in the [Android user data IDs guide](https://developer.android.com/training/articles/user-data-ids).
    stability: development
  - name: app.build_id
    type: string
    brief: Unique identifier for a particular build or compilation of the application.
    examples:
    - 6cff0a7e-cefc-4668-96f5-1273d8b334d0
    - 9f2b833506aa6973a92fde9733e6271f
    - my-app-1.0.0-code-123
    requirement_level: recommended
    stability: development
    role: identifying
  name: app
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/app/entities.yaml
    attributes:
      app.build_id:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
      app.installation.id:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: event.app.screen.click
  type: event
  brief: |
    This event represents an instantaneous click on the screen of an application.
  note: |
    The `app.screen.click` event can be used to indicate that a user has clicked or tapped on the screen portion of an application. Clicks outside of an application's active area SHOULD NOT generate this event. This event does not differentiate between touch/mouse down and touch/mouse up. Implementations SHOULD give preference to generating this event at the time the click is complete, typically on touch release or mouse up. The location of the click event MUST be provided in absolute screen pixels.
  stability: development
  attributes:
  - name: app.screen.coordinate.x
    type: int
    brief: The x (horizontal) coordinate of a screen coordinate, in screen pixels.
    examples:
    - 0
    - 131
    requirement_level: required
    stability: development
  - name: app.screen.coordinate.y
    type: int
    brief: |
      The y (vertical) component of a screen coordinate, in screen pixels.
    examples:
    - 12
    - 99
    requirement_level: required
    stability: development
  name: app.screen.click
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/app/events.yaml
    attributes:
      app.screen.coordinate.x:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      app.screen.coordinate.y:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: event.app.widget.click
  type: event
  brief: |
    This event indicates that an application widget has been clicked.
  note: |
    Use this event to indicate that visual application component has been clicked, typically through a user's manual interaction.
  stability: development
  attributes:
  - name: app.widget.id
    type: string
    brief: |
      An identifier that uniquely differentiates this widget from other widgets in the same application.
    examples:
    - f9bc787d-ff05-48ad-90e1-fca1d46130b3
    - submit_order_1829
    requirement_level: required
    note: |
      A widget is an application component, typically an on-screen visual GUI element.
    stability: development
  - name: app.widget.name
    type: string
    brief: The name of an application widget.
    examples:
    - submit
    - attack
    - Clear Cart
    requirement_level: opt_in
    note: |
      A widget is an application component, typically an on-screen visual GUI element.
    stability: development
  - name: app.screen.coordinate.x
    type: int
    brief: The x (horizontal) coordinate of a screen coordinate, in screen pixels.
    examples:
    - 0
    - 131
    requirement_level: opt_in
    stability: development
  - name: app.screen.coordinate.y
    type: int
    brief: |
      The y (vertical) component of a screen coordinate, in screen pixels.
    examples:
    - 12
    - 99
    requirement_level: opt_in
    stability: development
  name: app.widget.click
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/app/events.yaml
    attributes:
      app.screen.coordinate.x:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      app.screen.coordinate.y:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      app.widget.id:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      app.widget.name:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: event.app.jank
  type: event
  brief: |
    This event indicates that the application has detected substandard UI rendering performance.
  note: |
    Jank happens when the UI is rendered slowly enough for the user to experience some disruption or sluggishness.
  stability: development
  attributes:
  - name: app.jank.frame_count
    type: int
    brief: A number of frame renders that experienced jank.
    examples:
    - 9
    - 42
    requirement_level: recommended
    note: |
      Depending on platform limitations, the value provided MAY be approximation.
    stability: development
  - name: app.jank.threshold
    type: double
    brief: The minimum rendering threshold for this jank, in seconds.
    examples:
    - 0.016
    - 0.7
    - 1.024
    requirement_level: recommended
    stability: development
  - name: app.jank.period
    type: double
    brief: The time period, in seconds, for which this jank is being reported.
    examples:
    - 1.0
    - 5.0
    - 10.24
    requirement_level: recommended
    stability: development
  name: app.jank
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/app/events.yaml
    attributes:
      app.jank.frame_count:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      app.jank.period:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      app.jank.threshold:
        source_group: registry.app
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.faas
  type: entity
  brief: |
    A serverless instance.
  stability: development
  attributes:
  - name: cloud.resource_id
    type: string
    brief: |
      Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)
    examples:
    - arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
    - //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
    - /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
    requirement_level: recommended
    note: |
      On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      - **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invocable with
        multiple different aliases.
      - **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      - **Azure:** The [Fully Qualified Resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    stability: development
  - name: faas.version
    type: string
    brief: The immutable version of the function being executed.
    examples:
    - '26'
    - pinkfroid-00002
    requirement_level: recommended
    note: |
      Depending on the cloud provider and platform, use:

      - **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
        (an integer represented as a decimal string).
      - **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)
        (i.e., the function name plus the revision suffix).
      - **Google Cloud Functions:** The value of the
        [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
      - **Azure Functions:** Not applicable. Do not set this attribute.
    stability: development
  - name: faas.instance
    type: string
    brief: |
      The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
    examples:
    - 2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de
    requirement_level: recommended
    note: |
      - **AWS Lambda:** Use the (full) log stream name.
    stability: development
  - name: faas.max_memory
    type: int
    brief: |
      The amount of memory available to the serverless function converted to Bytes.
    examples: 134217728
    requirement_level: recommended
    note: |
      It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).
    stability: development
  - name: faas.name
    type: string
    brief: |
      The name of the single function that this runtime instance executes.
    examples:
    - my-function
    - myazurefunctionapp/some-function-name
    requirement_level: required
    note: |
      This is the name of the function as configured/deployed on the FaaS
      platform and is usually different from the name of the callback
      function (which may be stored in the
      [`code.namespace`/`code.function.name`](/docs/general/attributes.md#source-code-attributes)
      span attributes).

      For some cloud providers, the above definition is ambiguous. The following
      definition of function name MUST be used for this attribute
      (and consequently the span name) for the listed cloud providers/products:

      - **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name
        followed by a forward slash followed by the function name (this form
        can also be seen in the resource JSON for the function).
        This means that a span attribute MUST be used, as an Azure function
        app can host multiple functions that would usually share
        a TracerProvider (see also the `cloud.resource_id` attribute).
    stability: development
  name: faas
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/entities.yaml
    attributes:
      cloud.resource_id:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.instance:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.max_memory:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.name:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.version:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.faas.invoke_duration
  type: metric
  brief: Measures the duration of the function's logic execution.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.invoke_duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.faas.init_duration
  type: metric
  brief: Measures the duration of the function's initialization, such as a cold start.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.init_duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.faas.coldstarts
  type: metric
  brief: Number of invocation cold starts.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.coldstarts
  instrument: counter
  unit: '{coldstart}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.faas.errors
  type: metric
  brief: Number of invocation errors.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.faas.invocations
  type: metric
  brief: Number of successful invocations.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.invocations
  instrument: counter
  unit: '{invocation}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.faas.timeouts
  type: metric
  brief: Number of invocation timeouts.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.timeouts
  instrument: counter
  unit: '{timeout}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.faas.mem_usage
  type: metric
  brief: Distribution of max memory usage per invocation.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.mem_usage
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.faas.cpu_usage
  type: metric
  brief: Distribution of CPU usage per invocation.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.cpu_usage
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.faas.net_io
  type: metric
  brief: Distribution of net I/O usage per invocation.
  stability: development
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  metric_name: faas.net_io
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/metrics.yaml
    attributes:
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: attributes.faas.common
  type: attribute_group
  brief: Describes FaaS attributes.
  attributes:
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  - name: faas.invoked_name
    type: string
    brief: |
      The name of the invoked function.
    examples: my-function
    requirement_level: required
    note: |
      SHOULD be equal to the `faas.name` resource attribute of the invoked function.
    stability: development
  - name: faas.invoked_provider
    type:
      members:
      - id: alibaba_cloud
        value: alibaba_cloud
        brief: Alibaba Cloud
        stability: development
      - id: aws
        value: aws
        brief: Amazon Web Services
        stability: development
      - id: azure
        value: azure
        brief: Microsoft Azure
        stability: development
      - id: gcp
        value: gcp
        brief: Google Cloud Platform
        stability: development
      - id: tencent_cloud
        value: tencent_cloud
        brief: Tencent Cloud
        stability: development
    brief: |
      The cloud provider of the invoked function.
    requirement_level: required
    note: |
      SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
    stability: development
  - name: faas.invoked_region
    type: string
    brief: |
      The cloud region of the invoked function.
    examples: eu-central-1
    requirement_level:
      conditionally_required: |
        For some cloud providers, like AWS or GCP, the region in which a function is hosted is essential to uniquely identify the function and also part of its endpoint. Since it's part of the endpoint being called, the region is always known to clients. In these cases, `faas.invoked_region` MUST be set accordingly. If the region is unknown to the client or not required for identifying the invoked function, setting `faas.invoked_region` is optional.
    note: |
      SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/common.yaml
    attributes:
      faas.invoked_name:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.invoked_provider:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.invoked_region:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
- id: faas.attributes
  type: attribute_group
  brief: |
    This span represents a serverless function (FaaS) execution.
  note: |
    Span `name` should be set to the function name being executed.
    Depending on the value of the `faas.trigger` attribute, additional attributes MUST be set.

    For example, an `http` trigger SHOULD follow the [HTTP Server semantic conventions](/docs/http/http-spans.md#http-server-span).
    For more information, refer to the [Function Trigger Type](#function-trigger-type) section.

    If Spans following this convention are produced, a Resource of type `faas` MUST exist following the [Resource semantic convention](/docs/resource/faas.md).
  stability: development
  attributes:
  - name: cloud.resource_id
    type: string
    brief: |
      Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)
    examples:
    - arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
    - //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
    - /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
    requirement_level: recommended
    note: |
      On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      - **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invocable with
        multiple different aliases.
      - **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      - **Azure:** The [Fully Qualified Resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    stability: development
  - name: faas.invocation_id
    type: string
    brief: |
      The invocation ID of the current function invocation.
    examples: af9d5aa4-a685-4c5f-a22b-444f80b3cc28
    requirement_level: recommended
    stability: development
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    note: |
      For the server/consumer span on the incoming side,
      `faas.trigger` MUST be set.

      Clients invoking FaaS instances usually cannot set `faas.trigger`,
      since they would typically need to look in the payload to determine
      the event type. If clients set it, it should be the same as the
      trigger that corresponding incoming would have (i.e., this has
      nothing to do with the underlying transport used to make the API
      call to invoke the lambda, which is often HTTP).
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/spans.yaml
    attributes:
      cloud.resource_id:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.invocation_id:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
- id: span.faas.datasource.server
  type: span
  brief: |
    This span represents server side if the FaaS invocations triggered in response response to some data source operation such as a database or filesystem read/write.
  stability: development
  attributes:
  - name: faas.document.time
    type: string
    brief: |
      A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
    examples: 2020-01-23T13:47:06Z
    requirement_level: recommended
    stability: development
  - name: faas.document.name
    type: string
    brief: |
      The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.
    examples:
    - myFile.txt
    - myTableName
    requirement_level: recommended
    stability: development
  - name: faas.document.collection
    type: string
    brief: |
      The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.
    examples:
    - myBucketName
    - myDbName
    requirement_level: required
    stability: development
  - name: faas.document.operation
    type:
      members:
      - id: insert
        value: insert
        brief: When a new object is created.
        stability: development
      - id: edit
        value: edit
        brief: When an object is modified.
        stability: development
      - id: delete
        value: delete
        brief: When an object is deleted.
        stability: development
    brief: Describes the type of the operation that was performed on the data.
    requirement_level: required
    stability: development
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/spans.yaml
    attributes:
      faas.document.collection:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.document.name:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.document.operation:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.document.time:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: span.faas.timer.server
  type: span
  brief: |
    This span represents server side if the FaaS invocations triggered by a timer.
  stability: development
  attributes:
  - name: faas.time
    type: string
    brief: |
      A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
    examples: 2020-01-23T13:47:06Z
    requirement_level: recommended
    stability: development
  - name: faas.cron
    type: string
    brief: |
      A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).
    examples: 0/5 * * * ? *
    requirement_level: recommended
    stability: development
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/spans.yaml
    attributes:
      faas.cron:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      faas.time:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: span.faas.server
  type: span
  brief: |
    This span represents server (incoming) side of the FaaS invocation.
  stability: development
  attributes:
  - name: faas.coldstart
    type: boolean
    brief: |
      A boolean that is true if the serverless function is executed for the first time (aka cold-start).
    requirement_level: recommended
    stability: development
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: required
    note: |
      For the server/consumer span on the incoming side,
      `faas.trigger` MUST be set.

      Clients invoking FaaS instances usually cannot set `faas.trigger`,
      since they would typically need to look in the payload to determine
      the event type. If clients set it, it should be the same as the
      trigger that corresponding incoming would have (i.e., this has
      nothing to do with the underlying transport used to make the API
      call to invoke the lambda, which is often HTTP).
    stability: development
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/spans.yaml
    attributes:
      faas.coldstart:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      faas.trigger:
        source_group: registry.faas
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
- id: span.faas.client
  type: span
  brief: |
    This span represents an outgoing call to a FaaS service.
  note: |
    The values reported by the client for the attributes listed below SHOULD be equal to
    the corresponding [FaaS resource attributes][] and [Cloud resource attributes][],
    which the invoked FaaS instance reports about itself, if it's instrumented.
  stability: development
  attributes:
  - name: faas.invoked_name
    type: string
    brief: |
      The name of the invoked function.
    examples: my-function
    requirement_level: required
    note: |
      SHOULD be equal to the `faas.name` resource attribute of the invoked function.
    stability: development
  - name: faas.invoked_provider
    type:
      members:
      - id: alibaba_cloud
        value: alibaba_cloud
        brief: Alibaba Cloud
        stability: development
      - id: aws
        value: aws
        brief: Amazon Web Services
        stability: development
      - id: azure
        value: azure
        brief: Microsoft Azure
        stability: development
      - id: gcp
        value: gcp
        brief: Google Cloud Platform
        stability: development
      - id: tencent_cloud
        value: tencent_cloud
        brief: Tencent Cloud
        stability: development
    brief: |
      The cloud provider of the invoked function.
    requirement_level: required
    note: |
      SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
    stability: development
  - name: faas.invoked_region
    type: string
    brief: |
      The cloud region of the invoked function.
    examples: eu-central-1
    requirement_level:
      conditionally_required: |
        For some cloud providers, like AWS or GCP, the region in which a function is hosted is essential to uniquely identify the function and also part of its endpoint. Since it's part of the endpoint being called, the region is always known to clients. In these cases, `faas.invoked_region` MUST be set accordingly. If the region is unknown to the client or not required for identifying the invoked function, setting `faas.invoked_region` is optional.
    note: |
      SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/spans.yaml
    attributes:
      faas.invoked_name:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.invoked_provider:
        source_group: registry.faas
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      faas.invoked_region:
        source_group: registry.faas
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.process
  type: entity
  brief: |
    An operating system process.
  stability: development
  attributes:
  - name: process.pid
    type: int
    brief: |
      Process identifier (PID).
    examples:
    - 1234
    requirement_level: recommended
    stability: development
  - name: process.parent_pid
    type: int
    brief: |
      Parent Process identifier (PPID).
    examples:
    - 111
    requirement_level: recommended
    stability: development
  - name: process.owner
    type: string
    brief: |
      The username of the user that owns the process.
    examples:
    - root
    requirement_level: recommended
    stability: development
  - name: process.linux.cgroup
    type: string
    brief: The control group associated with the process.
    examples:
    - 1:name=systemd:/user.slice/user-1000.slice/session-3.scope
    - 0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope
    requirement_level: recommended
    note: |
      Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the [/proc/\[PID\]/cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) file.
    stability: development
  - name: process.executable.name
    type: string
    brief: |
      The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.
    examples:
    - otelcol
    requirement_level:
      conditionally_required: See [Selecting process attributes](/docs/resource/process.md#selecting-process-attributes) for details.
    stability: development
  - name: process.executable.path
    type: string
    brief: |
      The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
    examples:
    - /usr/bin/cmd/otelcol
    requirement_level:
      conditionally_required: See [Selecting process attributes](/docs/resource/process.md#selecting-process-attributes) for details.
    stability: development
  - name: process.command
    type: string
    brief: |
      The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.
    examples:
    - cmd/otelcol
    requirement_level:
      conditionally_required: See [Selecting process attributes](/docs/resource/process.md#selecting-process-attributes) for details.
    stability: development
  - name: process.command_line
    type: string
    brief: |
      The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - C:\cmd\otecol --config="my directory\config.yaml"
    requirement_level:
      conditionally_required: See [Selecting process attributes](/docs/resource/process.md#selecting-process-attributes) for details.
    stability: development
  - name: process.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - - cmd/otecol
      - --config=config.yaml
    requirement_level:
      conditionally_required: See [Selecting process attributes](/docs/resource/process.md#selecting-process-attributes) for details.
    stability: development
  name: process
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/entities.yaml
    attributes:
      process.command:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.command_args:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.command_line:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.name:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.path:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.linux.cgroup:
        source_group: registry.process.linux
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      process.owner:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      process.parent_pid:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      process.pid:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.process.runtime
  type: entity
  brief: |
    The single (language) runtime instance which is monitored.
  stability: development
  attributes:
  - name: process.runtime.name
    type: string
    brief: |
      The name of the runtime of this process.
    examples:
    - OpenJDK Runtime Environment
    requirement_level: recommended
    stability: development
  - name: process.runtime.version
    type: string
    brief: |
      The version of the runtime of this process, as returned by the runtime without modification.
    examples: 14.0.2
    requirement_level: recommended
    stability: development
  - name: process.runtime.description
    type: string
    brief: |
      An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
    examples: Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0
    requirement_level: recommended
    stability: development
  name: process.runtime
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/entities.yaml
    attributes:
      process.runtime.description:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      process.runtime.name:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      process.runtime.version:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.process.cpu.time
  type: metric
  brief: Total CPU seconds broken down by different states.
  stability: development
  attributes:
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: |
      A process SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.
    examples:
    - user
    - system
    requirement_level: recommended
    note: 'Following states SHOULD be used: `user`, `system`, `wait`'
    stability: development
  metric_name: process.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
    attributes:
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.process.cpu.utilization
  type: metric
  brief: Difference in process.cpu.time since the last measurement, divided by the elapsed time and number of CPUs available to the process.
  stability: development
  attributes:
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: |
      A process SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.
    examples:
    - user
    - system
    requirement_level: recommended
    note: 'Following states SHOULD be used: `user`, `system`, `wait`'
    stability: development
  metric_name: process.cpu.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
    attributes:
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.process.memory.usage
  type: metric
  brief: The amount of physical memory in use.
  stability: development
  metric_name: process.memory.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.memory.virtual
  type: metric
  brief: The amount of committed virtual memory.
  stability: development
  metric_name: process.memory.virtual
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.disk.io
  type: metric
  brief: Disk bytes transferred.
  stability: development
  attributes:
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  metric_name: process.disk.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
    attributes:
      disk.io.direction:
        source_group: registry.disk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.network.io
  type: metric
  brief: Network bytes transferred.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  metric_name: process.network.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
    attributes:
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.thread.count
  type: metric
  brief: Process threads count.
  stability: development
  metric_name: process.thread.count
  instrument: updowncounter
  unit: '{thread}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.open_file_descriptor.count
  type: metric
  brief: Number of file descriptors in use by the process.
  stability: development
  metric_name: process.open_file_descriptor.count
  instrument: updowncounter
  unit: '{file_descriptor}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.context_switches
  type: metric
  brief: Number of times the process has been context switched.
  stability: development
  attributes:
  - name: process.context_switch_type
    type:
      members:
      - id: voluntary
        value: voluntary
        stability: development
      - id: involuntary
        value: involuntary
        stability: development
    brief: Specifies whether the context switches for this data point were voluntary or involuntary.
    requirement_level: recommended
    stability: development
  metric_name: process.context_switches
  instrument: counter
  unit: '{context_switch}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
    attributes:
      process.context_switch_type:
        source_group: registry.process
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.paging.faults
  type: metric
  brief: Number of page faults the process has made.
  stability: development
  attributes:
  - name: process.paging.fault_type
    type:
      members:
      - id: major
        value: major
        stability: development
      - id: minor
        value: minor
        stability: development
    brief: |
      The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.
    requirement_level: recommended
    stability: development
  metric_name: process.paging.faults
  instrument: counter
  unit: '{fault}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
    attributes:
      process.paging.fault_type:
        source_group: registry.process
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.process.uptime
  type: metric
  brief: The time the process has been running.
  note: |
    Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
    The actual accuracy would depend on the instrumentation and operating system.
  stability: development
  metric_name: process.uptime
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/metrics.yaml
  entity_associations:
  - process
  annotations:
    code_generation:
      metric_value_type: double
- id: registry.process.deprecated
  type: attribute_group
  brief: Deprecated process attributes.
  attributes:
  - name: process.cpu.state
    type:
      members:
      - id: system
        value: system
        stability: development
      - id: user
        value: user
        stability: development
      - id: wait
        value: wait
        stability: development
    brief: Deprecated, use `cpu.mode` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cpu.mode
      note: Replaced by `cpu.mode`.
  - name: process.executable.build_id.profiling
    type: string
    brief: |
      "Deprecated, use `process.executable.build_id.htlhash` instead."
    examples:
    - 600DCAFE4A110000F2BF38C493F5FB92
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: process.executable.build_id.htlhash
      note: Replaced by `process.executable.build_id.htlhash`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/deprecated/registry-deprecated.yaml
  display_name: Deprecated Process Attributes
- id: registry.webengine
  type: attribute_group
  brief: |
    This document defines the attributes used to describe the packaged software running the application code.
  stability: development
  attributes:
  - name: webengine.name
    type: string
    brief: |
      The name of the web engine.
    examples:
    - WildFly
    requirement_level: recommended
    stability: development
  - name: webengine.version
    type: string
    brief: |
      The version of the web engine.
    examples:
    - 21.0.0
    requirement_level: recommended
    stability: development
  - name: webengine.description
    type: string
    brief: |
      Additional description of the web engine (e.g. detailed version and edition information).
    examples:
    - WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/webengine/registry.yaml
  display_name: Web Engine Attributes
- id: registry.user
  type: attribute_group
  brief: Describes information about the user.
  attributes:
  - name: user.email
    type: string
    brief: |
      User email address.
    examples:
    - a.einstein@example.com
    requirement_level: recommended
    stability: development
  - name: user.full_name
    type: string
    brief: |
      User's full name
    examples:
    - Albert Einstein
    requirement_level: recommended
    stability: development
  - name: user.hash
    type: string
    brief: |
      Unique user hash to correlate information for a user in anonymized form.
    examples:
    - 364fc68eaf4c8acec74a4e52d7d1feaa
    requirement_level: recommended
    note: |
      Useful if `user.id` or `user.name` contain confidential information and cannot be used.
    stability: development
  - name: user.id
    type: string
    brief: |
      Unique identifier of the user.
    examples:
    - S-1-5-21-202424912787-2692429404-2351956786-1000
    requirement_level: recommended
    stability: development
  - name: user.name
    type: string
    brief: |
      Short name or login/username of the user.
    examples:
    - a.einstein
    requirement_level: recommended
    stability: development
  - name: user.roles
    type: string[]
    brief: |
      Array of user roles at the time of the event.
    examples:
    - - admin
      - reporting_user
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/user/registry.yaml
  display_name: User Attributes
- id: metric.signalr.server.connection.duration
  type: metric
  brief: The duration of connections on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: signalr.connection.status
    type:
      members:
      - id: normal_closure
        value: normal_closure
        brief: The connection was closed normally.
        stability: stable
      - id: timeout
        value: timeout
        brief: The connection was closed due to a timeout.
        stability: stable
      - id: app_shutdown
        value: app_shutdown
        brief: The connection was closed because the app is shutting down.
        stability: stable
    brief: SignalR HTTP connection closure status.
    examples:
    - app_shutdown
    - timeout
    requirement_level: recommended
    stability: stable
  - name: signalr.transport
    type:
      members:
      - id: server_sent_events
        value: server_sent_events
        brief: ServerSentEvents protocol
        stability: stable
      - id: long_polling
        value: long_polling
        brief: LongPolling protocol
        stability: stable
      - id: web_sockets
        value: web_sockets
        brief: WebSockets protocol
        stability: stable
    brief: '[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)'
    examples:
    - web_sockets
    - long_polling
    requirement_level: recommended
    stability: stable
  metric_name: signalr.server.connection.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/signalr/metrics.yaml
    attributes:
      signalr.connection.status:
        source_group: registry.signalr
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      signalr.transport:
        source_group: registry.signalr
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.signalr.server.active_connections
  type: metric
  brief: Number of connections that are currently active on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: signalr.connection.status
    type:
      members:
      - id: normal_closure
        value: normal_closure
        brief: The connection was closed normally.
        stability: stable
      - id: timeout
        value: timeout
        brief: The connection was closed due to a timeout.
        stability: stable
      - id: app_shutdown
        value: app_shutdown
        brief: The connection was closed because the app is shutting down.
        stability: stable
    brief: SignalR HTTP connection closure status.
    examples:
    - app_shutdown
    - timeout
    requirement_level: recommended
    stability: stable
  - name: signalr.transport
    type:
      members:
      - id: server_sent_events
        value: server_sent_events
        brief: ServerSentEvents protocol
        stability: stable
      - id: long_polling
        value: long_polling
        brief: LongPolling protocol
        stability: stable
      - id: web_sockets
        value: web_sockets
        brief: WebSockets protocol
        stability: stable
    brief: '[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)'
    examples:
    - web_sockets
    - long_polling
    requirement_level: recommended
    stability: stable
  metric_name: signalr.server.active_connections
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/signalr/metrics.yaml
    attributes:
      signalr.connection.status:
        source_group: registry.signalr
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      signalr.transport:
        source_group: registry.signalr
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.operation.duration
  type: metric
  brief: Duration of database client operations.
  note: |
    Batch operations SHOULD be recorded as a single operation.
  stability: stable
  attributes:
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the database node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: If applicable for this database system.
    note: |
      Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.
      If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level: opt_in
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.system.name
    type:
      members:
      - id: other_sql
        value: other_sql
        brief: Some other SQL database. Fallback only.
        stability: development
      - id: softwareag.adabas
        value: softwareag.adabas
        brief: '[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)'
        stability: development
      - id: actian.ingres
        value: actian.ingres
        brief: '[Actian Ingres](https://www.actian.com/databases/ingres/)'
        stability: development
      - id: aws.dynamodb
        value: aws.dynamodb
        brief: '[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)'
        stability: development
      - id: aws.redshift
        value: aws.redshift
        brief: '[Amazon Redshift](https://aws.amazon.com/redshift/)'
        stability: development
      - id: azure.cosmosdb
        value: azure.cosmosdb
        brief: '[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)'
        stability: development
      - id: intersystems.cache
        value: intersystems.cache
        brief: '[InterSystems Caché](https://www.intersystems.com/products/cache/)'
        stability: development
      - id: cassandra
        value: cassandra
        brief: '[Apache Cassandra](https://cassandra.apache.org/)'
        stability: development
      - id: clickhouse
        value: clickhouse
        brief: '[ClickHouse](https://clickhouse.com/)'
        stability: development
      - id: cockroachdb
        value: cockroachdb
        brief: '[CockroachDB](https://www.cockroachlabs.com/)'
        stability: development
      - id: couchbase
        value: couchbase
        brief: '[Couchbase](https://www.couchbase.com/)'
        stability: development
      - id: couchdb
        value: couchdb
        brief: '[Apache CouchDB](https://couchdb.apache.org/)'
        stability: development
      - id: derby
        value: derby
        brief: '[Apache Derby](https://db.apache.org/derby/)'
        stability: development
      - id: elasticsearch
        value: elasticsearch
        brief: '[Elasticsearch](https://www.elastic.co/elasticsearch)'
        stability: development
      - id: firebirdsql
        value: firebirdsql
        brief: '[Firebird](https://www.firebirdsql.org/)'
        stability: development
      - id: gcp.spanner
        value: gcp.spanner
        brief: '[Google Cloud Spanner](https://cloud.google.com/spanner)'
        stability: development
      - id: geode
        value: geode
        brief: '[Apache Geode](https://geode.apache.org/)'
        stability: development
      - id: h2database
        value: h2database
        brief: '[H2 Database](https://h2database.com/)'
        stability: development
      - id: hbase
        value: hbase
        brief: '[Apache HBase](https://hbase.apache.org/)'
        stability: development
      - id: hive
        value: hive
        brief: '[Apache Hive](https://hive.apache.org/)'
        stability: development
      - id: hsqldb
        value: hsqldb
        brief: '[HyperSQL Database](https://hsqldb.org/)'
        stability: development
      - id: ibm.db2
        value: ibm.db2
        brief: '[IBM Db2](https://www.ibm.com/db2)'
        stability: development
      - id: ibm.informix
        value: ibm.informix
        brief: '[IBM Informix](https://www.ibm.com/products/informix)'
        stability: development
      - id: ibm.netezza
        value: ibm.netezza
        brief: '[IBM Netezza](https://www.ibm.com/products/netezza)'
        stability: development
      - id: influxdb
        value: influxdb
        brief: '[InfluxDB](https://www.influxdata.com/)'
        stability: development
      - id: instantdb
        value: instantdb
        brief: '[Instant](https://www.instantdb.com/)'
        stability: development
      - id: mariadb
        value: mariadb
        brief: '[MariaDB](https://mariadb.org/)'
        stability: stable
      - id: memcached
        value: memcached
        brief: '[Memcached](https://memcached.org/)'
        stability: development
      - id: mongodb
        value: mongodb
        brief: '[MongoDB](https://www.mongodb.com/)'
        stability: development
      - id: microsoft.sql_server
        value: microsoft.sql_server
        brief: '[Microsoft SQL Server](https://www.microsoft.com/sql-server)'
        stability: stable
      - id: mysql
        value: mysql
        brief: '[MySQL](https://www.mysql.com/)'
        stability: stable
      - id: neo4j
        value: neo4j
        brief: '[Neo4j](https://neo4j.com/)'
        stability: development
      - id: opensearch
        value: opensearch
        brief: '[OpenSearch](https://opensearch.org/)'
        stability: development
      - id: oracle.db
        value: oracle.db
        brief: '[Oracle Database](https://www.oracle.com/database/)'
        stability: development
      - id: postgresql
        value: postgresql
        brief: '[PostgreSQL](https://www.postgresql.org/)'
        stability: stable
      - id: redis
        value: redis
        brief: '[Redis](https://redis.io/)'
        stability: development
      - id: sap.hana
        value: sap.hana
        brief: '[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)'
        stability: development
      - id: sap.maxdb
        value: sap.maxdb
        brief: '[SAP MaxDB](https://maxdb.sap.com/)'
        stability: development
      - id: sqlite
        value: sqlite
        brief: '[SQLite](https://www.sqlite.org/)'
        stability: development
      - id: teradata
        value: teradata
        brief: '[Teradata](https://www.teradata.com/)'
        stability: development
      - id: trino
        value: trino
        brief: '[Trino](https://trino.io/)'
        stability: development
    brief: The database management system (DBMS) product as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If and only if `network.peer.address` is set.
    stability: stable
  metric_name: db.client.operation.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.system.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.connection.count
  type: metric
  brief: The number of connections that are currently in state described by the `state` attribute.
  stability: development
  attributes:
  - name: db.client.connection.state
    type:
      members:
      - id: idle
        value: idle
        stability: development
      - id: used
        value: used
        stability: development
    brief: The state of a connection in the pool
    examples:
    - idle
    requirement_level: required
    stability: development
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.count
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.client.connection.state:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connection.idle.max
  type: metric
  brief: The maximum number of idle open connections allowed.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.idle.max
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connection.idle.min
  type: metric
  brief: The minimum number of idle open connections allowed.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.idle.min
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connection.max
  type: metric
  brief: The maximum number of open connections allowed.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.max
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connection.pending_requests
  type: metric
  brief: The number of current pending requests for an open connection.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.pending_requests
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connection.timeouts
  type: metric
  brief: The number of connection timeouts that have occurred trying to obtain a connection from the pool.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.timeouts
  instrument: counter
  unit: '{timeout}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connection.create_time
  type: metric
  brief: The time it took to create a new connection.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.create_time
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.connection.wait_time
  type: metric
  brief: The time it took to obtain an open connection from the pool.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.wait_time
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.connection.use_time
  type: metric
  brief: The time between borrowing a connection and returning it to the pool.
  stability: development
  attributes:
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
  metric_name: db.client.connection.use_time
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.client.connection.pool.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.response.returned_rows
  type: metric
  brief: The actual number of records returned by the database operation.
  stability: development
  attributes:
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the database node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: If applicable for this database system.
    note: |
      Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.
      If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level: opt_in
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.system.name
    type:
      members:
      - id: other_sql
        value: other_sql
        brief: Some other SQL database. Fallback only.
        stability: development
      - id: softwareag.adabas
        value: softwareag.adabas
        brief: '[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)'
        stability: development
      - id: actian.ingres
        value: actian.ingres
        brief: '[Actian Ingres](https://www.actian.com/databases/ingres/)'
        stability: development
      - id: aws.dynamodb
        value: aws.dynamodb
        brief: '[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)'
        stability: development
      - id: aws.redshift
        value: aws.redshift
        brief: '[Amazon Redshift](https://aws.amazon.com/redshift/)'
        stability: development
      - id: azure.cosmosdb
        value: azure.cosmosdb
        brief: '[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)'
        stability: development
      - id: intersystems.cache
        value: intersystems.cache
        brief: '[InterSystems Caché](https://www.intersystems.com/products/cache/)'
        stability: development
      - id: cassandra
        value: cassandra
        brief: '[Apache Cassandra](https://cassandra.apache.org/)'
        stability: development
      - id: clickhouse
        value: clickhouse
        brief: '[ClickHouse](https://clickhouse.com/)'
        stability: development
      - id: cockroachdb
        value: cockroachdb
        brief: '[CockroachDB](https://www.cockroachlabs.com/)'
        stability: development
      - id: couchbase
        value: couchbase
        brief: '[Couchbase](https://www.couchbase.com/)'
        stability: development
      - id: couchdb
        value: couchdb
        brief: '[Apache CouchDB](https://couchdb.apache.org/)'
        stability: development
      - id: derby
        value: derby
        brief: '[Apache Derby](https://db.apache.org/derby/)'
        stability: development
      - id: elasticsearch
        value: elasticsearch
        brief: '[Elasticsearch](https://www.elastic.co/elasticsearch)'
        stability: development
      - id: firebirdsql
        value: firebirdsql
        brief: '[Firebird](https://www.firebirdsql.org/)'
        stability: development
      - id: gcp.spanner
        value: gcp.spanner
        brief: '[Google Cloud Spanner](https://cloud.google.com/spanner)'
        stability: development
      - id: geode
        value: geode
        brief: '[Apache Geode](https://geode.apache.org/)'
        stability: development
      - id: h2database
        value: h2database
        brief: '[H2 Database](https://h2database.com/)'
        stability: development
      - id: hbase
        value: hbase
        brief: '[Apache HBase](https://hbase.apache.org/)'
        stability: development
      - id: hive
        value: hive
        brief: '[Apache Hive](https://hive.apache.org/)'
        stability: development
      - id: hsqldb
        value: hsqldb
        brief: '[HyperSQL Database](https://hsqldb.org/)'
        stability: development
      - id: ibm.db2
        value: ibm.db2
        brief: '[IBM Db2](https://www.ibm.com/db2)'
        stability: development
      - id: ibm.informix
        value: ibm.informix
        brief: '[IBM Informix](https://www.ibm.com/products/informix)'
        stability: development
      - id: ibm.netezza
        value: ibm.netezza
        brief: '[IBM Netezza](https://www.ibm.com/products/netezza)'
        stability: development
      - id: influxdb
        value: influxdb
        brief: '[InfluxDB](https://www.influxdata.com/)'
        stability: development
      - id: instantdb
        value: instantdb
        brief: '[Instant](https://www.instantdb.com/)'
        stability: development
      - id: mariadb
        value: mariadb
        brief: '[MariaDB](https://mariadb.org/)'
        stability: stable
      - id: memcached
        value: memcached
        brief: '[Memcached](https://memcached.org/)'
        stability: development
      - id: mongodb
        value: mongodb
        brief: '[MongoDB](https://www.mongodb.com/)'
        stability: development
      - id: microsoft.sql_server
        value: microsoft.sql_server
        brief: '[Microsoft SQL Server](https://www.microsoft.com/sql-server)'
        stability: stable
      - id: mysql
        value: mysql
        brief: '[MySQL](https://www.mysql.com/)'
        stability: stable
      - id: neo4j
        value: neo4j
        brief: '[Neo4j](https://neo4j.com/)'
        stability: development
      - id: opensearch
        value: opensearch
        brief: '[OpenSearch](https://opensearch.org/)'
        stability: development
      - id: oracle.db
        value: oracle.db
        brief: '[Oracle Database](https://www.oracle.com/database/)'
        stability: development
      - id: postgresql
        value: postgresql
        brief: '[PostgreSQL](https://www.postgresql.org/)'
        stability: stable
      - id: redis
        value: redis
        brief: '[Redis](https://redis.io/)'
        stability: development
      - id: sap.hana
        value: sap.hana
        brief: '[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)'
        stability: development
      - id: sap.maxdb
        value: sap.maxdb
        brief: '[SAP MaxDB](https://maxdb.sap.com/)'
        stability: development
      - id: sqlite
        value: sqlite
        brief: '[SQLite](https://www.sqlite.org/)'
        stability: development
      - id: teradata
        value: teradata
        brief: '[Teradata](https://www.teradata.com/)'
        stability: development
      - id: trino
        value: trino
        brief: '[Trino](https://trino.io/)'
        stability: development
    brief: The database management system (DBMS) product as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If and only if `network.peer.address` is set.
    stability: stable
  metric_name: db.client.response.returned_rows
  instrument: histogram
  unit: '{row}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/metrics.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.system.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: attributes.db.client.minimal
  type: attribute_group
  brief: Database Client attributes
  attributes:
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/common.yaml
    attributes:
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: attributes.azure.cosmosdb.minimal
  type: attribute_group
  brief: Azure Cosmos DB Client attributes
  stability: development
  attributes:
  - name: db.collection.name
    type: string
    brief: Cosmos DB container name.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: If available.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: azure.cosmosdb.consistency.level
    type:
      members:
      - id: strong
        value: Strong
        brief: Strong
        stability: development
      - id: bounded_staleness
        value: BoundedStaleness
        brief: Bounded Staleness
        stability: development
      - id: session
        value: Session
        brief: Session
        stability: development
      - id: eventual
        value: Eventual
        brief: Eventual
        stability: development
      - id: consistent_prefix
        value: ConsistentPrefix
        brief: Consistent Prefix
        stability: development
    brief: Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).
    examples:
    - Eventual
    - ConsistentPrefix
    - BoundedStaleness
    - Strong
    - Session
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: azure.cosmosdb.response.sub_status_code
    type: int
    brief: Cosmos DB sub status code.
    examples:
    - 1000
    - 1002
    requirement_level:
      conditionally_required: when response was received and contained sub-code.
    stability: development
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level: required
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/common.yaml
    attributes:
      azure.cosmosdb.consistency.level:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.response.sub_status_code:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: attributes.db.client.with_query
  type: attribute_group
  brief: This group defines the attributes describing database operations that may have queries.
  attributes:
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level: recommended
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/common.yaml
    attributes:
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: attributes.db.client.with_query_and_collection
  type: attribute_group
  brief: This group defines the attributes describing database operations that have operation name, collection name and query.
  attributes:
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level: recommended
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/common.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.db.deprecated
  type: attribute_group
  brief: |
    Describes deprecated database attributes.
  stability: development
  attributes:
  - name: db.connection_string
    type: string
    brief: Deprecated, use `server.address`, `server.port` attributes instead.
    examples: Server=(localdb)\v11.0;Integrated Security=true;
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: |
        Replaced by `server.address` and `server.port`.
  - name: db.jdbc.driver_classname
    type: string
    brief: Removed, no replacement at this time.
    examples:
    - org.postgresql.Driver
    - com.microsoft.sqlserver.jdbc.SQLServerDriver
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: |
        Removed, no replacement at this time.
  - name: db.operation
    type: string
    brief: Deprecated, use `db.operation.name` instead.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.operation.name
      note: Replaced by `db.operation.name`.
  - name: db.user
    type: string
    brief: Deprecated, no replacement at this time.
    examples:
    - readonly_user
    - reporting_user
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed, no replacement at this time.
  - name: db.statement
    type: string
    brief: The database statement being executed.
    examples:
    - SELECT * FROM wuser_table
    - SET mykey "WuValue"
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.query.text
      note: Replaced by `db.query.text`.
  - name: db.cassandra.table
    type: string
    brief: Deprecated, use `db.collection.name` instead.
    examples: mytable
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.collection.name
      note: Replaced by `db.collection.name`.
  - name: db.cosmosdb.container
    type: string
    brief: Deprecated, use `db.collection.name` instead.
    examples: mytable
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.collection.name
      note: Replaced by `db.collection.name`.
  - name: db.mongodb.collection
    type: string
    brief: Deprecated, use `db.collection.name` instead.
    examples: mytable
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.collection.name
      note: Replaced by `db.collection.name`.
  - name: db.sql.table
    type: string
    brief: Deprecated, use `db.collection.name` instead.
    examples: mytable
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Replaced by `db.collection.name`, but only if not extracting the value from `db.query.text`.
  - name: db.redis.database_index
    type: int
    brief: Deprecated, use `db.namespace` instead.
    examples:
    - 0
    - 1
    - 15
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Uncategorized.
  - name: db.name
    type: string
    brief: Deprecated, use `db.namespace` instead.
    examples:
    - customers
    - main
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.namespace
      note: Replaced by `db.namespace`.
  - name: db.mssql.instance_name
    type: string
    brief: Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute.
    examples: MSSQLSERVER
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed, no replacement at this time.
  - name: db.instance.id
    type: string
    brief: Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.
    examples: mysql-e26b99z.example.com
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: |
        Removed, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.
  - name: db.elasticsearch.cluster.name
    type: string
    brief: |
      Deprecated, use `db.namespace` instead.
    examples:
    - e9106fc68e3044f0b1475b04bf4ffd5f
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.namespace
      note: Replaced by `db.namespace`.
  - name: db.cosmosdb.status_code
    type: int
    brief: Deprecated, use `db.response.status_code` instead.
    examples:
    - 200
    - 201
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Uncategorized.
  - name: db.cosmosdb.operation_type
    type:
      members:
      - id: batch
        value: batch
        stability: development
      - id: create
        value: create
        stability: development
      - id: delete
        value: delete
        stability: development
      - id: execute
        value: execute
        stability: development
      - id: execute_javascript
        value: execute_javascript
        stability: development
      - id: invalid
        value: invalid
        stability: development
      - id: head
        value: head
        stability: development
      - id: head_feed
        value: head_feed
        stability: development
      - id: patch
        value: patch
        stability: development
      - id: query
        value: query
        stability: development
      - id: query_plan
        value: query_plan
        stability: development
      - id: read
        value: read
        stability: development
      - id: read_feed
        value: read_feed
        stability: development
      - id: replace
        value: replace
        stability: development
      - id: upsert
        value: upsert
        stability: development
    brief: Deprecated, no replacement at this time.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: |
        Removed, no replacement at this time.
  - name: db.cassandra.coordinator.dc
    type: string
    brief: Deprecated, use `cassandra.coordinator.dc` instead.
    examples: us-west-2
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cassandra.coordinator.dc
      note: Replaced by `cassandra.coordinator.dc`.
  - name: db.cassandra.coordinator.id
    type: string
    brief: Deprecated, use `cassandra.coordinator.id` instead.
    examples: be13faa2-8574-4d71-926d-27f16cf8a7af
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cassandra.coordinator.id
      note: Replaced by `cassandra.coordinator.id`.
  - name: db.cassandra.consistency_level
    type:
      members:
      - id: all
        value: all
        stability: development
      - id: each_quorum
        value: each_quorum
        stability: development
      - id: quorum
        value: quorum
        stability: development
      - id: local_quorum
        value: local_quorum
        stability: development
      - id: one
        value: one
        stability: development
      - id: two
        value: two
        stability: development
      - id: three
        value: three
        stability: development
      - id: local_one
        value: local_one
        stability: development
      - id: any
        value: any
        stability: development
      - id: serial
        value: serial
        stability: development
      - id: local_serial
        value: local_serial
        stability: development
    brief: Deprecated, use `cassandra.consistency.level` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cassandra.consistency.level
      note: Replaced by `cassandra.consistency.level`.
  - name: db.cassandra.idempotence
    type: boolean
    brief: Deprecated, use `cassandra.query.idempotent` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cassandra.query.idempotent
      note: Replaced by `cassandra.query.idempotent`.
  - name: db.cassandra.page_size
    type: int
    brief: Deprecated, use `cassandra.page.size` instead.
    examples:
    - 5000
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cassandra.page.size
      note: Replaced by `cassandra.page.size`.
  - name: db.cassandra.speculative_execution_count
    type: int
    brief: Deprecated, use `cassandra.speculative_execution.count` instead.
    examples:
    - 0
    - 2
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cassandra.speculative_execution.count
      note: Replaced by `cassandra.speculative_execution.count`.
  - name: db.cosmosdb.client_id
    type: string
    brief: Deprecated, use `azure.client.id` instead.
    examples: 3ba4827d-4422-483f-b59f-85b74211c11d
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.client.id
      note: Replaced by `azure.client.id`.
  - name: db.cosmosdb.connection_mode
    type:
      members:
      - id: gateway
        value: gateway
        brief: Gateway (HTTP) connection.
        stability: development
      - id: direct
        value: direct
        brief: Direct connection.
        stability: development
    brief: Deprecated, use `azure.cosmosdb.connection.mode` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.connection.mode
      note: Replaced by `azure.cosmosdb.connection.mode`.
  - name: db.cosmosdb.request_charge
    type: double
    brief: Deprecated, use `azure.cosmosdb.operation.request_charge` instead.
    examples:
    - 46.18
    - 1.0
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.operation.request_charge
      note: Replaced by `azure.cosmosdb.operation.request_charge`.
  - name: db.cosmosdb.request_content_length
    type: int
    brief: Deprecated, use `azure.cosmosdb.request.body.size` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.request.body.size
      note: Replaced by `azure.cosmosdb.request.body.size`.
  - name: db.cosmosdb.sub_status_code
    type: int
    brief: Deprecated, use `azure.cosmosdb.response.sub_status_code` instead.
    examples:
    - 1000
    - 1002
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.response.sub_status_code
      note: Replaced by `azure.cosmosdb.response.sub_status_code`.
  - name: db.cosmosdb.consistency_level
    type:
      members:
      - id: strong
        value: Strong
        stability: development
      - id: bounded_staleness
        value: BoundedStaleness
        stability: development
      - id: session
        value: Session
        stability: development
      - id: eventual
        value: Eventual
        stability: development
      - id: consistent_prefix
        value: ConsistentPrefix
        stability: development
    brief: Deprecated, use `cosmosdb.consistency.level` instead.
    examples:
    - Eventual
    - ConsistentPrefix
    - BoundedStaleness
    - Strong
    - Session
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.consistency.level
      note: Replaced by `azure.cosmosdb.consistency.level`.
  - name: db.cosmosdb.regions_contacted
    type: string[]
    brief: Deprecated, use `azure.cosmosdb.operation.contacted_regions` instead.
    examples:
    - - North Central US
      - Australia East
      - Australia Southeast
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.operation.contacted_regions
      note: Replaced by `azure.cosmosdb.operation.contacted_regions`.
  - name: db.elasticsearch.node.name
    type: string
    brief: |
      Deprecated, use `elasticsearch.node.name` instead.
    examples:
    - instance-0000000001
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: elasticsearch.node.name
      note: Replaced by `elasticsearch.node.name`.
  - name: db.elasticsearch.path_parts
    type: template[string]
    brief: |
      Deprecated, use `db.operation.parameter` instead.
    examples:
    - test-index
    - '123'
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.operation.parameter
      note: Replaced by `db.operation.parameter`.
  - name: db.system
    type:
      members:
      - id: other_sql
        value: other_sql
        brief: Some other SQL database. Fallback only. See notes.
        stability: development
      - id: adabas
        value: adabas
        brief: Adabas (Adaptable Database System)
        stability: development
      - id: cache
        value: cache
        brief: Deprecated, use `intersystems_cache` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: intersystems_cache
          note: Replaced by `intersystems_cache`.
      - id: intersystems_cache
        value: intersystems_cache
        brief: InterSystems Caché
        stability: development
      - id: cassandra
        value: cassandra
        brief: Apache Cassandra
        stability: development
      - id: clickhouse
        value: clickhouse
        brief: ClickHouse
        stability: development
      - id: cloudscape
        value: cloudscape
        brief: Deprecated, use `other_sql` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: other_sql
          note: Replaced by `other_sql`.
      - id: cockroachdb
        value: cockroachdb
        brief: CockroachDB
        stability: development
      - id: coldfusion
        value: coldfusion
        brief: Deprecated, no replacement at this time.
        stability: development
        deprecated:
          reason: obsoleted
          note: Obsoleted.
      - id: cosmosdb
        value: cosmosdb
        brief: Microsoft Azure Cosmos DB
        stability: development
      - id: couchbase
        value: couchbase
        brief: Couchbase
        stability: development
      - id: couchdb
        value: couchdb
        brief: CouchDB
        stability: development
      - id: db2
        value: db2
        brief: IBM Db2
        stability: development
      - id: derby
        value: derby
        brief: Apache Derby
        stability: development
      - id: dynamodb
        value: dynamodb
        brief: Amazon DynamoDB
        stability: development
      - id: edb
        value: edb
        brief: EnterpriseDB
        stability: development
      - id: elasticsearch
        value: elasticsearch
        brief: Elasticsearch
        stability: development
      - id: filemaker
        value: filemaker
        brief: FileMaker
        stability: development
      - id: firebird
        value: firebird
        brief: Firebird
        stability: development
      - id: firstsql
        value: firstsql
        brief: Deprecated, use `other_sql` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: other_sql
          note: Replaced by `other_sql`.
      - id: geode
        value: geode
        brief: Apache Geode
        stability: development
      - id: h2
        value: h2
        brief: H2
        stability: development
      - id: hanadb
        value: hanadb
        brief: SAP HANA
        stability: development
      - id: hbase
        value: hbase
        brief: Apache HBase
        stability: development
      - id: hive
        value: hive
        brief: Apache Hive
        stability: development
      - id: hsqldb
        value: hsqldb
        brief: HyperSQL DataBase
        stability: development
      - id: influxdb
        value: influxdb
        brief: InfluxDB
        stability: development
      - id: informix
        value: informix
        brief: Informix
        stability: development
      - id: ingres
        value: ingres
        brief: Ingres
        stability: development
      - id: instantdb
        value: instantdb
        brief: InstantDB
        stability: development
      - id: interbase
        value: interbase
        brief: InterBase
        stability: development
      - id: mariadb
        value: mariadb
        brief: MariaDB
        stability: development
      - id: maxdb
        value: maxdb
        brief: SAP MaxDB
        stability: development
      - id: memcached
        value: memcached
        brief: Memcached
        stability: development
      - id: mongodb
        value: mongodb
        brief: MongoDB
        stability: development
      - id: mssql
        value: mssql
        brief: Microsoft SQL Server
        stability: development
      - id: mssqlcompact
        value: mssqlcompact
        brief: Deprecated, Microsoft SQL Server Compact is discontinued.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: other_sql
          note: Replaced by `other_sql`.
      - id: mysql
        value: mysql
        brief: MySQL
        stability: development
      - id: neo4j
        value: neo4j
        brief: Neo4j
        stability: development
      - id: netezza
        value: netezza
        brief: Netezza
        stability: development
      - id: opensearch
        value: opensearch
        brief: OpenSearch
        stability: development
      - id: oracle
        value: oracle
        brief: Oracle Database
        stability: development
      - id: pervasive
        value: pervasive
        brief: Pervasive PSQL
        stability: development
      - id: pointbase
        value: pointbase
        brief: PointBase
        stability: development
      - id: postgresql
        value: postgresql
        brief: PostgreSQL
        stability: development
      - id: progress
        value: progress
        brief: Progress Database
        stability: development
      - id: redis
        value: redis
        brief: Redis
        stability: development
      - id: redshift
        value: redshift
        brief: Amazon Redshift
        stability: development
      - id: spanner
        value: spanner
        brief: Cloud Spanner
        stability: development
      - id: sqlite
        value: sqlite
        brief: SQLite
        stability: development
      - id: sybase
        value: sybase
        brief: Sybase
        stability: development
      - id: teradata
        value: teradata
        brief: Teradata
        stability: development
      - id: trino
        value: trino
        brief: Trino
        stability: development
      - id: vertica
        value: vertica
        brief: Vertica
        stability: development
    brief: Deprecated, use `db.system.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.system.name
      note: Replaced by `db.system.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/registry-deprecated.yaml
  display_name: Deprecated Database Attributes
- id: registry.db.metrics.deprecated
  type: attribute_group
  brief: |
    "Describes deprecated db metrics attributes."
  stability: development
  attributes:
  - name: state
    type:
      members:
      - id: idle
        value: idle
        stability: development
      - id: used
        value: used
        stability: development
    brief: Deprecated, use `db.client.connection.state` instead.
    examples:
    - idle
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.state
      note: Replaced by `db.client.connection.state`.
  - name: pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  - name: db.client.connections.state
    type:
      members:
      - id: idle
        value: idle
        stability: development
      - id: used
        value: used
        stability: development
    brief: Deprecated, use `db.client.connection.state` instead.
    examples:
    - idle
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.state
      note: Replaced by `db.client.connection.state`.
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/registry-deprecated.yaml
  display_name: Deprecated Database Metrics
- id: registry.session
  type: attribute_group
  brief: |
    Session is defined as the period of time encompassing all activities performed by the application and the actions executed by the end user.
    Consequently, a Session is represented as a collection of Logs, Events, and Spans emitted by the Client Application throughout the Session's duration. Each Session is assigned a unique identifier, which is included as an attribute in the Logs, Events, and Spans generated during the Session's lifecycle.
    When a session reaches end of life, typically due to user inactivity or session timeout, a new session identifier will be assigned. The previous session identifier may be provided by the instrumentation so that telemetry backends can link the two sessions.
  attributes:
  - name: session.id
    type: string
    brief: A unique id to identify a session.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level: recommended
    stability: development
  - name: session.previous_id
    type: string
    brief: The previous `session.id` for this user, when known.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/session/registry.yaml
  display_name: Session Attributes
- id: event.session.start
  type: event
  brief: |
    Indicates that a new session has been started, optionally linking to the prior session.
  note: |
    For instrumentation that tracks user behavior during user sessions, a `session.start` event MUST be emitted every time a session is created. When a new session is created as a continuation of a prior session, the `session.previous_id` SHOULD be included in the event. The values of `session.id` and `session.previous_id` MUST be different.
    When the `session.start` event contains both `session.id` and `session.previous_id` fields, the event indicates that the previous session has ended. If the session ID in `session.previous_id` has not yet ended via explicit `session.end` event, then the consumer SHOULD treat this continuation event as semantically equivalent to `session.end(session.previous_id)` and `session.start(session.id)`.
  stability: development
  attributes:
  - name: session.id
    type: string
    brief: The ID of the new session being started.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level: required
    stability: development
  - name: session.previous_id
    type: string
    brief: The previous `session.id` for this user, when known.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level:
      conditionally_required: |
        If the new session is being created as a continuation of a previous session, the `session.previous_id` SHOULD be included in the event. The `session.id` and `session.previous_id` attributes MUST have different values.
    stability: development
  name: session.start
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/session/events.yaml
    attributes:
      session.id:
        source_group: registry.session
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      session.previous_id:
        source_group: registry.session
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: event.session.end
  type: event
  brief: |
    Indicates that a session has ended.
  note: |
    For instrumentation that tracks user behavior during user sessions, a `session.end` event SHOULD be emitted every time a session ends. When a session ends and continues as a new session, this event SHOULD be emitted prior to the `session.start` event.
  stability: development
  attributes:
  - name: session.id
    type: string
    brief: The ID of the session being ended.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level: required
    stability: development
  name: session.end
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/session/events.yaml
    attributes:
      session.id:
        source_group: registry.session
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: session-id
  type: attribute_group
  brief: |
    Session is defined as the period of time encompassing all activities performed by the application and the actions executed by the end user.
    Consequently, a Session is represented as a collection of Logs, Events, and Spans emitted by the Client Application throughout the Session's duration. Each Session is assigned a unique identifier, which is included as an attribute in the Logs, Events, and Spans generated during the Session's lifecycle.
    When a session reaches end of life, typically due to user inactivity or session timeout, a new session identifier will be assigned. The previous session identifier may be provided by the instrumentation so that telemetry backends can link the two sessions.
  attributes:
  - name: session.id
    type: string
    brief: A unique id to identify a session.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level: opt_in
    stability: development
  - name: session.previous_id
    type: string
    brief: The previous `session.id` for this user, when known.
    examples: 00112233-4455-6677-8899-aabbccddeeff
    requirement_level: opt_in
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/session/common.yaml
    attributes:
      session.id:
        source_group: registry.session
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      session.previous_id:
        source_group: registry.session
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.artifact
  type: attribute_group
  brief: |
    This group describes attributes specific to artifacts. Artifacts are files or other immutable objects that are intended for distribution. This definition aligns directly with the [SLSA](https://slsa.dev/spec/v1.0/terminology#package-model) package model.
  attributes:
  - name: artifact.filename
    type: string
    brief: |
      The human readable file name of the artifact, typically generated during build and release processes. Often includes the package name and version in the file name.
    examples:
    - golang-binary-amd64-v0.1.0
    - docker-image-amd64-v0.1.0
    - release-1.tar.gz
    - file-name-package.tar.gz
    requirement_level: recommended
    note: |
      This file name can also act as the [Package Name](https://slsa.dev/spec/v1.0/terminology#package-model)
      in cases where the package ecosystem maps accordingly.
      Additionally, the artifact [can be published](https://slsa.dev/spec/v1.0/terminology#software-supply-chain)
      for others, but that is not a guarantee.
    stability: development
  - name: artifact.version
    type: string
    brief: |
      The version of the artifact.
    examples:
    - v0.1.0
    - 1.2.1
    - 122691-build
    requirement_level: recommended
    stability: development
  - name: artifact.purl
    type: string
    brief: |
      The [Package URL](https://github.com/package-url/purl-spec) of the [package artifact](https://slsa.dev/spec/v1.0/terminology#package-model) provides a standard way to identify and locate the packaged artifact.
    examples:
    - pkg:github/package-url/purl-spec@1209109710924
    - pkg:npm/foo@12.12.3
    requirement_level: recommended
    stability: development
  - name: artifact.hash
    type: string
    brief: |
      The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), often found in checksum.txt on a release of the artifact and used to verify package integrity.
    examples:
    - 9ff4c52759e2c4ac70b7d517bc7fcdc1cda631ca0045271ddd1b192544f8a3e9
    requirement_level: recommended
    note: |
      The specific algorithm used to create the cryptographic hash value is
      not defined. In situations where an artifact has multiple
      cryptographic hashes, it is up to the implementer to choose which
      hash value to set here; this should be the most secure hash algorithm
      that is suitable for the situation and consistent with the
      corresponding attestation. The implementer can then provide the other
      hash values through an additional set of attribute extensions as they
      deem necessary.
    stability: development
  - name: artifact.attestation.id
    type: string
    brief: |
      The id of the build [software attestation](https://slsa.dev/attestation-model).
    examples:
    - '123'
    requirement_level: recommended
    stability: development
  - name: artifact.attestation.filename
    type: string
    brief: |
      The provenance filename of the built attestation which directly relates to the build artifact filename. This filename SHOULD accompany the artifact at publish time. See the [SLSA Relationship](https://slsa.dev/spec/v1.0/distributing-provenance#relationship-between-artifacts-and-attestations) specification for more information.
    examples:
    - golang-binary-amd64-v0.1.0.attestation
    - docker-image-amd64-v0.1.0.intoto.json1
    - release-1.tar.gz.attestation
    - file-name-package.tar.gz.intoto.json1
    requirement_level: recommended
    stability: development
  - name: artifact.attestation.hash
    type: string
    brief: |
      The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the built attestation. Some envelopes in the [software attestation space](https://github.com/in-toto/attestation/tree/main/spec) also refer to this as the **digest**.
    examples:
    - 1b31dfcd5b7f9267bf2ff47651df1cfb9147b9e4df1f335accf65b4cda498408
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/artifact/registry.yaml
  display_name: Artifact Attributes
- id: registry.destination
  type: attribute_group
  brief: |
    These attributes may be used to describe the receiver of a network exchange/packet. These should be used when there is no client/server relationship between the two sides, or when that relationship is unknown. This covers low-level network interactions (e.g. packet tracing) where you don't know if there was a connection or which side initiated it. This also covers unidirectional UDP flows and peer-to-peer communication where the "user-facing" surface of the protocol / API doesn't expose a clear notion of client and server.
  attributes:
  - name: destination.address
    type: string
    brief: Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - destination.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the source side, and when communicating through an intermediary, `destination.address` SHOULD represent the destination address behind any intermediaries, for example proxies, if it's available.
    stability: development
  - name: destination.port
    type: int
    brief: Destination port number
    examples:
    - 3389
    - 2888
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/destination/registry.yaml
  display_name: Destination Attributes
- id: destination
  type: attribute_group
  brief: |
    General destination attributes.
  attributes:
  - name: destination.address
    type: string
    brief: Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - destination.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the source side, and when communicating through an intermediary, `destination.address` SHOULD represent the destination address behind any intermediaries, for example proxies, if it's available.
    stability: development
  - name: destination.port
    type: int
    brief: Destination port number
    examples:
    - 3389
    - 2888
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/destination/common.yaml
    attributes:
      destination.address:
        source_group: registry.destination
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      destination.port:
        source_group: registry.destination
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.gcp.apphub.application
  type: entity
  brief: |
    Attributes denoting data from an Application in AppHub. See [AppHub overview](https://cloud.google.com/app-hub/docs/overview).
  stability: development
  attributes:
  - name: gcp.apphub.application.container
    type: string
    brief: |
      The container within GCP where the AppHub application is defined.
    examples:
    - projects/my-container-project
    requirement_level: required
    stability: development
  - name: gcp.apphub.application.location
    type: string
    brief: |
      The GCP zone or region where the application is defined.
    examples:
    - us-central1
    requirement_level: required
    stability: development
  - name: gcp.apphub.application.id
    type: string
    brief: |
      The name of the application as configured in AppHub.
    examples:
    - my-application
    requirement_level: required
    stability: development
  name: gcp.apphub.application
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/apphub.yaml
    attributes:
      gcp.apphub.application.container:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.apphub.application.id:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.apphub.application.location:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.gcp.apphub.service
  type: entity
  brief: |
    Attributes denoting data from a Service in AppHub. See [AppHub overview](https://cloud.google.com/app-hub/docs/overview).
  stability: development
  attributes:
  - name: gcp.apphub.service.id
    type: string
    brief: |
      The name of the service as configured in AppHub.
    examples:
    - my-service
    requirement_level: required
    stability: development
  - name: gcp.apphub.service.environment_type
    type:
      members:
      - id: production
        value: PRODUCTION
        brief: Production environment.
        stability: development
      - id: staging
        value: STAGING
        brief: Staging environment.
        stability: development
      - id: test
        value: TEST
        brief: Test environment.
        stability: development
      - id: development
        value: DEVELOPMENT
        brief: Development environment.
        stability: development
    brief: |
      Environment of a service is the stage of a software lifecycle.
    requirement_level: required
    note: |
      [See AppHub environment type](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type_1)
    stability: development
  - name: gcp.apphub.service.criticality_type
    type:
      members:
      - id: mission_critical
        value: MISSION_CRITICAL
        brief: Mission critical service.
        stability: development
      - id: high
        value: HIGH
        brief: High impact.
        stability: development
      - id: medium
        value: MEDIUM
        brief: Medium impact.
        stability: development
      - id: low
        value: LOW
        brief: Low impact.
        stability: development
    brief: |
      Criticality of a service indicates its importance to the business.
    requirement_level: required
    note: |
      [See AppHub type enum](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type)
    stability: development
  name: gcp.apphub.service
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/apphub.yaml
    attributes:
      gcp.apphub.service.criticality_type:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.apphub.service.environment_type:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.apphub.service.id:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.gcp.apphub.workload
  type: entity
  brief: |
    Attributes denoting data from a Workload in AppHub. See [AppHub overview](https://cloud.google.com/app-hub/docs/overview).
  stability: development
  attributes:
  - name: gcp.apphub.workload.id
    type: string
    brief: |
      The name of the workload as configured in AppHub.
    examples:
    - my-workload
    requirement_level: required
    stability: development
  - name: gcp.apphub.workload.environment_type
    type:
      members:
      - id: production
        value: PRODUCTION
        brief: Production environment.
        stability: development
      - id: staging
        value: STAGING
        brief: Staging environment.
        stability: development
      - id: test
        value: TEST
        brief: Test environment.
        stability: development
      - id: development
        value: DEVELOPMENT
        brief: Development environment.
        stability: development
    brief: |
      Environment of a workload is the stage of a software lifecycle.
    requirement_level: required
    note: |
      [See AppHub environment type](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type_1)
    stability: development
  - name: gcp.apphub.workload.criticality_type
    type:
      members:
      - id: mission_critical
        value: MISSION_CRITICAL
        brief: Mission critical service.
        stability: development
      - id: high
        value: HIGH
        brief: High impact.
        stability: development
      - id: medium
        value: MEDIUM
        brief: Medium impact.
        stability: development
      - id: low
        value: LOW
        brief: Low impact.
        stability: development
    brief: |
      Criticality of a workload indicates its importance to the business.
    requirement_level: required
    note: |
      [See AppHub type enum](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type)
    stability: development
  name: gcp.apphub.workload
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/apphub.yaml
    attributes:
      gcp.apphub.workload.criticality_type:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.apphub.workload.environment_type:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.apphub.workload.id:
        source_group: registry.gcp.apphub
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.gcp.client
  type: attribute_group
  brief: |
    Attributes for Google Cloud client libraries.
  attributes:
  - name: gcp.client.service
    type: string
    brief: Identifies the Google Cloud service for which the official client library is intended.
    examples:
    - appengine
    - run
    - firestore
    - alloydb
    - spanner
    requirement_level: recommended
    note: |
      Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/registry.yaml
  display_name: GCP Client Attributes
- id: registry.gcp.cloud_run
  type: attribute_group
  brief: |
    This document defines attributes for Google Cloud Run.
  attributes:
  - name: gcp.cloud_run.job.execution
    type: string
    brief: |
      The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.
    examples:
    - job-name-xxxx
    - sample-job-mdw84
    requirement_level: recommended
    stability: development
  - name: gcp.cloud_run.job.task_index
    type: int
    brief: |
      The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.
    examples:
    - 0
    - 1
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/registry.yaml
  display_name: GCP - Google Cloud Run Attributes
- id: registry.gcp.apphub
  type: attribute_group
  brief: |
    This document defines attributes AppHub will apply to resources in GCP. See [AppHub overview](https://cloud.google.com/app-hub/docs/overview).
  attributes:
  - name: gcp.apphub.application.container
    type: string
    brief: |
      The container within GCP where the AppHub application is defined.
    examples:
    - projects/my-container-project
    requirement_level: recommended
    stability: development
  - name: gcp.apphub.application.location
    type: string
    brief: |
      The GCP zone or region where the application is defined.
    examples:
    - us-central1
    requirement_level: recommended
    stability: development
  - name: gcp.apphub.application.id
    type: string
    brief: |
      The name of the application as configured in AppHub.
    examples:
    - my-application
    requirement_level: recommended
    stability: development
  - name: gcp.apphub.service.id
    type: string
    brief: |
      The name of the service as configured in AppHub.
    examples:
    - my-service
    requirement_level: recommended
    stability: development
  - name: gcp.apphub.service.environment_type
    type:
      members:
      - id: production
        value: PRODUCTION
        brief: Production environment.
        stability: development
      - id: staging
        value: STAGING
        brief: Staging environment.
        stability: development
      - id: test
        value: TEST
        brief: Test environment.
        stability: development
      - id: development
        value: DEVELOPMENT
        brief: Development environment.
        stability: development
    brief: |
      Environment of a service is the stage of a software lifecycle.
    requirement_level: recommended
    note: |
      [See AppHub environment type](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type_1)
    stability: development
  - name: gcp.apphub.service.criticality_type
    type:
      members:
      - id: mission_critical
        value: MISSION_CRITICAL
        brief: Mission critical service.
        stability: development
      - id: high
        value: HIGH
        brief: High impact.
        stability: development
      - id: medium
        value: MEDIUM
        brief: Medium impact.
        stability: development
      - id: low
        value: LOW
        brief: Low impact.
        stability: development
    brief: |
      Criticality of a service indicates its importance to the business.
    requirement_level: recommended
    note: |
      [See AppHub type enum](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type)
    stability: development
  - name: gcp.apphub.workload.id
    type: string
    brief: |
      The name of the workload as configured in AppHub.
    examples:
    - my-workload
    requirement_level: recommended
    stability: development
  - name: gcp.apphub.workload.environment_type
    type:
      members:
      - id: production
        value: PRODUCTION
        brief: Production environment.
        stability: development
      - id: staging
        value: STAGING
        brief: Staging environment.
        stability: development
      - id: test
        value: TEST
        brief: Test environment.
        stability: development
      - id: development
        value: DEVELOPMENT
        brief: Development environment.
        stability: development
    brief: |
      Environment of a workload is the stage of a software lifecycle.
    requirement_level: recommended
    note: |
      [See AppHub environment type](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type_1)
    stability: development
  - name: gcp.apphub.workload.criticality_type
    type:
      members:
      - id: mission_critical
        value: MISSION_CRITICAL
        brief: Mission critical service.
        stability: development
      - id: high
        value: HIGH
        brief: High impact.
        stability: development
      - id: medium
        value: MEDIUM
        brief: Medium impact.
        stability: development
      - id: low
        value: LOW
        brief: Low impact.
        stability: development
    brief: |
      Criticality of a workload indicates its importance to the business.
    requirement_level: recommended
    note: |
      [See AppHub type enum](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type)
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/registry.yaml
  display_name: GCP - AppHub Attributes
- id: registry.gcp.apphub_destination
  type: attribute_group
  brief: |
    This document defines attributes AppHub will apply to destination resources in GCP. See [AppHub overview](https://cloud.google.com/app-hub/docs/overview).
  attributes:
  - name: gcp.apphub_destination.application.container
    type: string
    brief: |
      The container within GCP where the AppHub destination application is defined.
    examples:
    - projects/my-container-project
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.application.location
    type: string
    brief: |
      The GCP zone or region where the destination application is defined.
    examples:
    - us-central1
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.application.id
    type: string
    brief: |
      The name of the destination application as configured in AppHub.
    examples:
    - my-application
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.service.id
    type: string
    brief: |
      The name of the destination service as configured in AppHub.
    examples:
    - my-service
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.service.environment_type
    type:
      members:
      - id: production
        value: PRODUCTION
        brief: Production environment.
        stability: development
      - id: staging
        value: STAGING
        brief: Staging environment.
        stability: development
      - id: test
        value: TEST
        brief: Test environment.
        stability: development
      - id: development
        value: DEVELOPMENT
        brief: Development environment.
        stability: development
    brief: |
      Software lifecycle stage of a destination service as defined [AppHub environment type](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type_1)
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.service.criticality_type
    type:
      members:
      - id: mission_critical
        value: MISSION_CRITICAL
        brief: Mission critical service.
        stability: development
      - id: high
        value: HIGH
        brief: High impact.
        stability: development
      - id: medium
        value: MEDIUM
        brief: Medium impact.
        stability: development
      - id: low
        value: LOW
        brief: Low impact.
        stability: development
    brief: |
      Criticality of a destination workload indicates its importance to the business as specified in [AppHub type enum](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type)
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.workload.id
    type: string
    brief: |
      The name of the destination workload as configured in AppHub.
    examples:
    - my-workload
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.workload.environment_type
    type:
      members:
      - id: production
        value: PRODUCTION
        brief: Production environment.
        stability: development
      - id: staging
        value: STAGING
        brief: Staging environment.
        stability: development
      - id: test
        value: TEST
        brief: Test environment.
        stability: development
      - id: development
        value: DEVELOPMENT
        brief: Development environment.
        stability: development
    brief: |
      Environment of a destination workload is the stage of a software lifecycle as provided in the [AppHub environment type](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type_1)
    requirement_level: recommended
    stability: development
  - name: gcp.apphub_destination.workload.criticality_type
    type:
      members:
      - id: mission_critical
        value: MISSION_CRITICAL
        brief: Mission critical service.
        stability: development
      - id: high
        value: HIGH
        brief: High impact.
        stability: development
      - id: medium
        value: MEDIUM
        brief: Medium impact.
        stability: development
      - id: low
        value: LOW
        brief: Low impact.
        stability: development
    brief: |
      Criticality of a destination workload indicates its importance to the business as specified in [AppHub type enum](https://cloud.google.com/app-hub/docs/reference/rest/v1/Attributes#type)
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/registry.yaml
  display_name: GCP - AppHub Destination Attributes
- id: registry.gcp.gce
  type: attribute_group
  brief: |
    This document defines attributes for Google Compute Engine (GCE).
  attributes:
  - name: gcp.gce.instance.name
    type: string
    brief: |
      The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).
    examples:
    - instance-1
    - my-vm-name
    requirement_level: recommended
    stability: development
  - name: gcp.gce.instance.hostname
    type: string
    brief: |
      The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).
    examples:
    - my-host1234.example.com
    - sample-vm.us-west1-b.c.my-project.internal
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/registry.yaml
  display_name: GCP - Google Compute Engine (GCE) Attributes
- id: event.gen_ai.client.inference.operation.details
  type: event
  brief: |
    Describes the details of a GenAI completion request including chat history and parameters.
  note: |
    This event is opt-in and could be used to store input and output details independently from traces.
  stability: development
  attributes:
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
      This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
      Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  name: gen_ai.client.inference.operation.details
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/events.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: event.gen_ai.evaluation.result
  type: event
  brief: |
    This event captures the result of evaluating GenAI output for quality, accuracy, or other characteristics. This event SHOULD be parented to GenAI operation span being evaluated when possible or set `gen_ai.response.id` when span id is not available.
  stability: development
  attributes:
  - name: gen_ai.evaluation.explanation
    type: string
    brief: A free-form explanation for the assigned score provided by the evaluator.
    examples:
    - The response is factually accurate but lacks sufficient detail to fully address the question.
    requirement_level: recommended
    stability: development
  - name: gen_ai.evaluation.name
    type: string
    brief: The name of the evaluation metric used for the GenAI response.
    examples:
    - Relevance
    - IntentResolution
    requirement_level: required
    stability: development
  - name: gen_ai.evaluation.score.value
    type: double
    brief: The evaluation score returned by the evaluator.
    examples:
    - 4.0
    requirement_level:
      conditionally_required: if applicable
    stability: development
  - name: gen_ai.evaluation.score.label
    type: string
    brief: Human readable label for evaluation.
    examples:
    - relevant
    - not_relevant
    - correct
    - incorrect
    - pass
    - fail
    requirement_level:
      conditionally_required: if applicable
    note: |
      This attribute provides a human-readable interpretation of the evaluation score produced by an evaluator. For example, a score value of 1 could mean "relevant" in one evaluation system and "not relevant" in another, depending on the scoring range and evaluator. The label SHOULD have low cardinality. Possible values depend on the evaluation metric and evaluator used; implementations SHOULD document the possible values.
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level:
      recommended: when available
    note: |
      The unique identifier assigned to the specific
      completion being evaluated. This attribute helps correlate the evaluation
      event with the corresponding operation when span id is not available.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI Evaluation provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  name: gen_ai.evaluation.result
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/events.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.evaluation.explanation:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.evaluation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.evaluation.score.label:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.evaluation.score.value:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
- id: metric_attributes.gen_ai
  type: attribute_group
  brief: This group describes GenAI metrics attributes
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: metric_attributes.gen_ai.server
  type: attribute_group
  brief: This group describes GenAI server metrics attributes
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI service,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: metric_attributes.openai
  type: attribute_group
  brief: This group describes GenAI server metrics attributes
  attributes:
  - name: openai.response.service_tier
    type: string
    brief: The service tier used for the response.
    examples:
    - scale
    - default
    requirement_level: recommended
    stability: development
  - name: openai.response.system_fingerprint
    type: string
    brief: A fingerprint to track any eventual change in the Generative AI environment.
    examples:
    - fp_44709d6fcb
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      openai.response.service_tier:
        source_group: registry.openai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      openai.response.system_fingerprint:
        source_group: registry.openai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.gen_ai.client.token.usage
  type: metric
  brief: Number of input and output tokens used.
  stability: development
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: gen_ai.token.type
    type:
      members:
      - id: input
        value: input
        brief: Input tokens (prompt, input, etc.)
        stability: development
      - id: completion
        value: output
        brief: Output tokens (completion, response, etc.)
        stability: development
        deprecated:
          reason: renamed
          renamed_to: output
          note: Replaced by `output`.
      - id: output
        value: output
        brief: Output tokens (completion, response, etc.)
        stability: development
    brief: The type of token being counted.
    examples:
    - input
    - output
    requirement_level: required
    stability: development
  metric_name: gen_ai.client.token.usage
  instrument: histogram
  unit: '{token}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.token.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.gen_ai.client.operation.duration
  type: metric
  brief: GenAI operation duration.
  stability: development
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  metric_name: gen_ai.client.operation.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.gen_ai.server.request.duration
  type: metric
  brief: Generative AI server request duration such as time-to-last byte or last output token.
  stability: development
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI service,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  metric_name: gen_ai.server.request.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.gen_ai.server.time_per_output_token
  type: metric
  brief: Time per output token generated after the first token for successful responses.
  stability: development
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  metric_name: gen_ai.server.time_per_output_token
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.gen_ai.server.time_to_first_token
  type: metric
  brief: Time to generate first token for successful responses.
  stability: development
  attributes:
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    stability: development
  metric_name: gen_ai.server.time_to_first_token
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/metrics.yaml
    attributes:
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: gen_ai.deprecated.event.attributes
  type: attribute_group
  brief: |
    Describes common Gen AI event attributes.
  stability: development
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/events-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
- id: event.gen_ai.system.message
  type: event
  brief: |
    This event describes the system instructions passed to the GenAI model.
  stability: development
  deprecated:
    reason: uncategorized
    note: |
      Chat history is reported on `gen_ai.system_instructions` attribute on spans or `gen_ai.client.inference.operation.details` event.
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  name: gen_ai.system.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/events-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
  body:
    type: map
    id: gen_ai.system.message
    stability: development
    requirement_level: opt_in
    fields:
    - type: undefined
      id: content
      brief: |
        The contents of the system message.
      stability: development
      examples:
      - You're a helpful bot
      requirement_level: opt_in
    - type: string
      id: role
      brief: |
        The actual role of the message author as passed in the message.
      stability: development
      examples:
      - system
      - instruction
      requirement_level:
        conditionally_required: if available and not equal to `system`.
- id: event.gen_ai.user.message
  type: event
  brief: |
    This event describes the user message passed to the GenAI model.
  stability: development
  deprecated:
    reason: uncategorized
    note: |
      Chat history is reported on `gen_ai.input.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  name: gen_ai.user.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/events-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
  body:
    type: map
    id: gen_ai.user.message
    stability: development
    requirement_level: opt_in
    fields:
    - type: undefined
      id: content
      brief: |
        The contents of the user message.
      stability: development
      examples:
      - What's the weather in Paris?
      requirement_level: opt_in
    - type: string
      id: role
      brief: |
        The actual role of the message author as passed in the message.
      stability: development
      examples:
      - user
      - customer
      requirement_level:
        conditionally_required: if available and not equal to `user`.
- id: event.gen_ai.assistant.message
  type: event
  brief: |
    This event describes the assistant message passed to GenAI system.
  stability: development
  deprecated:
    reason: uncategorized
    note: |
      Chat history is reported on `gen_ai.input.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  name: gen_ai.assistant.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/events-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
  body:
    type: map
    id: gen_ai.assistant.message
    stability: development
    requirement_level: opt_in
    fields:
    - type: undefined
      id: content
      brief: |
        The contents of the tool message.
      stability: development
      examples:
      - The weather in Paris is rainy and overcast, with temperatures around 57°F
      requirement_level: opt_in
    - type: string
      id: role
      brief: |
        The actual role of the message author as passed in the message.
      stability: development
      examples:
      - assistant
      - bot
      requirement_level:
        conditionally_required: if available and not equal to `assistant`.
    - type: map[]
      id: tool_calls
      brief: |
        The tool calls generated by the model, such as function calls.
      stability: development
      requirement_level:
        conditionally_required: if available
      fields:
      - type: string
        id: id
        brief: |
          The id of the tool call.
        stability: development
        examples:
        - call_mszuSIzqtI65i1wAUOE8w5H4
        requirement_level: required
      - type: enum
        id: type
        brief: |
          The type of the tool.
        stability: development
        examples:
        - function
        requirement_level: required
        members:
        - id: function
          value: function
          brief: Function
          stability: development
      - type: map
        id: function
        brief: |
          The function call.
        stability: development
        requirement_level: required
        fields:
        - type: string
          id: name
          brief: |
            The name of the function.
          stability: development
          examples:
          - get_weather
          requirement_level: required
        - type: undefined
          id: arguments
          brief: |
            The arguments of the function as provided in the LLM response.
          note: |
            Models usually return arguments as a JSON string. In this case, it's RECOMMENDED to provide arguments as is without attempting to deserialize them.
            Semantic conventions for individual systems MAY specify a different type for arguments field.
          stability: development
          examples:
          - '{\"location\": \"Paris\"}'
          requirement_level: opt_in
- id: event.gen_ai.tool.message
  type: event
  brief: |
    This event describes the response from a tool or function call passed to the GenAI model.
  stability: development
  deprecated:
    reason: uncategorized
    note: |
      Chat history is reported on `gen_ai.input.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  name: gen_ai.tool.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/events-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
  body:
    type: map
    id: gen_ai.tool.message
    stability: development
    requirement_level: opt_in
    fields:
    - type: undefined
      id: content
      brief: |
        The contents of the tool message.
      stability: development
      examples:
      - rainy, 57°F
      requirement_level: opt_in
    - type: string
      id: role
      brief: |
        The actual role of the message author as passed in the message.
      stability: development
      examples:
      - tool
      - function
      requirement_level:
        conditionally_required: if available and not equal to `tool`.
    - type: string
      id: id
      brief: |
        Tool call id that this message is responding to.
      stability: development
      examples:
      - call_mszuSIzqtI65i1wAUOE8w5H4
      requirement_level: required
- id: event.gen_ai.choice
  type: event
  brief: |
    This event describes the Gen AI response message.
  stability: development
  deprecated:
    reason: uncategorized
    note: |
      Chat history is reported on `gen_ai.output.messages` attribute on spans or `gen_ai.client.inference.operation.details` event.
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  name: gen_ai.choice
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/events-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
  body:
    type: map
    id: gen_ai.choice
    note: |
      If GenAI model returns multiple choices, each choice SHOULD be recorded as an individual event. When response is streamed, instrumentations that report response events MUST reconstruct and report the full message and MUST NOT report individual chunks as events. If the request to GenAI model fails with an error before content is received, instrumentation SHOULD report an event with truncated content (if enabled). If `finish_reason` was not received, it MUST be set to `error`.
    stability: development
    requirement_level: opt_in
    fields:
    - type: int
      id: index
      brief: |
        The index of the choice in the list of choices.
      stability: development
      examples:
      - 0
      - 1
      requirement_level: required
    - type: enum
      id: finish_reason
      brief: |
        The reason the model stopped generating tokens.
      stability: development
      requirement_level: required
      members:
      - id: stop
        value: stop
        brief: Stop
        stability: development
      - id: tool_calls
        value: tool_calls
        brief: Tool Calls
        stability: development
      - id: content_filter
        value: content_filter
        brief: Content Filter
        stability: development
      - id: length
        value: length
        brief: Length
        stability: development
      - id: error
        value: error
        brief: Error
        stability: development
    - type: map
      id: message
      brief: |
        GenAI response message.
      stability: development
      requirement_level: recommended
      fields:
      - type: undefined
        id: content
        brief: |
          The contents of the assistant message.
        stability: development
        examples:
        - The weather in Paris is rainy and overcast, with temperatures around 57°F
        requirement_level: opt_in
      - type: string
        id: role
        brief: |
          The actual role of the message author as passed in the message.
        stability: development
        examples:
        - assistant
        - bot
        requirement_level:
          conditionally_required: if available and not equal to `assistant`.
    - type: map[]
      id: tool_calls
      brief: |
        The tool calls generated by the model, such as function calls.
      stability: development
      requirement_level:
        conditionally_required: if available
      fields:
      - type: string
        id: id
        brief: |
          The id of the tool call.
        stability: development
        examples:
        - call_mszuSIzqtI65i1wAUOE8w5H4
        requirement_level: required
      - type: enum
        id: type
        brief: |
          The type of the tool.
        stability: development
        requirement_level: required
        members:
        - id: function
          value: function
          brief: Function
          stability: development
      - type: map
        id: function
        brief: |
          The function that the model called.
        stability: development
        requirement_level: required
        fields:
        - type: string
          id: name
          brief: |
            The name of the function.
          stability: development
          examples:
          - get_weather
          requirement_level: required
        - type: undefined
          id: arguments
          brief: |
            The arguments of the function as provided in the LLM response.
          note: |
            Models usually return arguments as a JSON string. In this case, it's RECOMMENDED to provide arguments as is without attempting to deserialize them.
            Semantic conventions for individual systems MAY specify a different type for arguments field.
          stability: development
          examples:
          - '{\"location\": \"Paris\"}'
          requirement_level: opt_in
- id: gen_ai.common.event.attributes
  type: attribute_group
  brief: |
    Describes common Gen AI event attributes.
  stability: development
  attributes:
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/registry-deprecated.yaml
    attributes:
      gen_ai.system:
        source_group: registry.gen_ai.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
- id: registry.gen_ai.deprecated
  type: attribute_group
  brief: Describes deprecated `gen_ai` attributes.
  attributes:
  - name: gen_ai.usage.prompt_tokens
    type: int
    brief: Deprecated, use `gen_ai.usage.input_tokens` instead.
    examples:
    - 42
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.usage.input_tokens
      note: Replaced by `gen_ai.usage.input_tokens`.
  - name: gen_ai.usage.completion_tokens
    type: int
    brief: Deprecated, use `gen_ai.usage.output_tokens` instead.
    examples:
    - 42
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.usage.output_tokens
      note: Replaced by `gen_ai.usage.output_tokens`.
  - name: gen_ai.prompt
    type: string
    brief: Deprecated, use Event API to report prompt contents.
    examples:
    - '[{''role'': ''user'', ''content'': ''What is the capital of France?''}]'
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed, no replacement at this time.
  - name: gen_ai.completion
    type: string
    brief: Deprecated, use Event API to report completions contents.
    examples:
    - '[{''role'': ''assistant'', ''content'': ''The capital of France is Paris.''}]'
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed, no replacement at this time.
  - name: gen_ai.system
    type:
      members:
      - id: openai
        value: openai
        brief: OpenAI
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: Vertex AI
        note: |
          This refers to the 'aiplatform.googleapis.com' endpoint. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: Gemini
        note: |
          This refers to the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API. May use common attributes prefixed with 'gcp.gen_ai.'.
        stability: development
      - id: vertex_ai
        value: vertex_ai
        brief: Vertex AI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.vertex_ai
          note: Replaced by `gcp.vertex_ai`.
      - id: gemini
        value: gemini
        brief: Gemini
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gcp.gemini
          note: Replaced by `gcp.gemini`.
      - id: anthropic
        value: anthropic
        brief: Anthropic
        stability: development
      - id: cohere
        value: cohere
        brief: Cohere
        stability: development
      - id: az.ai.inference
        value: az.ai.inference
        brief: Azure AI Inference
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.inference
          note: Replaced by `azure.ai.inference`.
      - id: az.ai.openai
        value: az.ai.openai
        brief: Azure OpenAI
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.ai.openai
          note: Replaced by `azure.ai.openai`.
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: Azure OpenAI
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: IBM Watsonx AI
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: AWS Bedrock
        stability: development
      - id: perplexity
        value: perplexity
        brief: Perplexity
        stability: development
      - id: xai
        value: xai
        brief: xAI
        stability: development
      - id: deepseek
        value: deepseek
        brief: DeepSeek
        stability: development
      - id: groq
        value: groq
        brief: Groq
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: Mistral AI
        stability: development
    brief: Deprecated, use `gen_ai.provider.name` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.provider.name
      note: Replaced by `gen_ai.provider.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/registry-deprecated.yaml
  display_name: Deprecated GenAI Attributes
- id: registry.gen_ai.openai.deprecated
  type: attribute_group
  brief: Describes deprecated `gen_ai.openai` attributes.
  attributes:
  - name: gen_ai.openai.request.seed
    type: int
    brief: Deprecated, use `gen_ai.request.seed`.
    examples:
    - 100
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.request.seed
      note: Replaced by `gen_ai.request.seed`.
  - name: gen_ai.openai.request.response_format
    type:
      members:
      - id: text
        value: text
        brief: Text response format
        stability: development
      - id: json_object
        value: json_object
        brief: JSON object response format
        stability: development
      - id: json_schema
        value: json_schema
        brief: JSON schema response format
        stability: development
    brief: |
      Deprecated, use `gen_ai.output.type`.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: gen_ai.output.type
      note: Replaced by `gen_ai.output.type`.
  - name: gen_ai.openai.request.service_tier
    type:
      members:
      - id: auto
        value: auto
        brief: The system will utilize scale tier credits until they are exhausted.
        stability: development
      - id: default
        value: default
        brief: The system will utilize the default scale tier.
        stability: development
    brief: Deprecated, use `openai.request.service_tier`.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: openai.request.service_tier
      note: Replaced by `openai.request.service_tier`.
  - name: gen_ai.openai.response.service_tier
    type: string
    brief: Deprecated, use `openai.response.service_tier`.
    examples:
    - scale
    - default
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: openai.response.service_tier
      note: Replaced by `openai.response.service_tier`.
  - name: gen_ai.openai.response.system_fingerprint
    type: string
    brief: Deprecated, use `openai.response.system_fingerprint`.
    examples:
    - fp_44709d6fcb
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: openai.response.system_fingerprint
      note: Replaced by `openai.response.system_fingerprint`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/deprecated/registry-deprecated.yaml
  display_name: Deprecated OpenAI GenAI Attributes
- id: registry.jvm
  type: attribute_group
  brief: |
    This document defines Java Virtual machine related attributes.
  attributes:
  - name: jvm.gc.action
    type: string
    brief: Name of the garbage collector action.
    examples:
    - end of minor GC
    - end of major GC
    requirement_level: recommended
    note: |
      Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).
    stability: stable
  - name: jvm.gc.cause
    type: string
    brief: Name of the garbage collector cause.
    examples:
    - System.gc()
    - Allocation Failure
    requirement_level: recommended
    note: |
      Garbage collector cause is generally obtained via [GarbageCollectionNotificationInfo#getGcCause()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcCause()).
    stability: development
  - name: jvm.gc.name
    type: string
    brief: Name of the garbage collector.
    examples:
    - G1 Young Generation
    - G1 Old Generation
    requirement_level: recommended
    note: |
      Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).
    stability: stable
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  - name: jvm.thread.daemon
    type: boolean
    brief: Whether the thread is daemon or not.
    requirement_level: recommended
    stability: stable
  - name: jvm.thread.state
    type:
      members:
      - id: new
        value: new
        brief: A thread that has not yet started is in this state.
        stability: stable
      - id: runnable
        value: runnable
        brief: A thread executing in the Java virtual machine is in this state.
        stability: stable
      - id: blocked
        value: blocked
        brief: A thread that is blocked waiting for a monitor lock is in this state.
        stability: stable
      - id: waiting
        value: waiting
        brief: A thread that is waiting indefinitely for another thread to perform a particular action is in this state.
        stability: stable
      - id: timed_waiting
        value: timed_waiting
        brief: A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.
        stability: stable
      - id: terminated
        value: terminated
        brief: A thread that has exited is in this state.
        stability: stable
    brief: State of the thread.
    examples:
    - runnable
    - blocked
    requirement_level: recommended
    stability: stable
  - name: jvm.buffer.pool.name
    type: string
    brief: Name of the buffer pool.
    examples:
    - mapped
    - direct
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/registry.yaml
  display_name: Java Virtual Machine (JVM) Attributes
- id: metric.jvm.buffer.memory.usage
  type: metric
  brief: Deprecated, use `jvm.buffer.memory.used` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: jvm.buffer.memory.used
    note: Replaced by `jvm.buffer.memory.used`.
  attributes:
  - name: jvm.buffer.pool.name
    type: string
    brief: Name of the buffer pool.
    examples:
    - mapped
    - direct
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    stability: development
  metric_name: jvm.buffer.memory.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/deprecated/metrics-deprecated.yaml
    attributes:
      jvm.buffer.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.memory.init
  type: metric
  brief: Measure of initial memory requested.
  stability: development
  attributes:
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  metric_name: jvm.memory.init
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
    attributes:
      jvm.memory.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      jvm.memory.type:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.system.cpu.utilization
  type: metric
  brief: Recent CPU utilization for the whole system as reported by the JVM.
  note: |
    The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getCpuLoad()).
  stability: development
  metric_name: jvm.system.cpu.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.jvm.system.cpu.load_1m
  type: metric
  brief: Average CPU load of the whole system for the last minute as reported by the JVM.
  note: |
    The value range is [0,n], where n is the number of CPU cores - or a negative number if the value is not available. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html#getSystemLoadAverage()).
  stability: development
  metric_name: jvm.system.cpu.load_1m
  instrument: gauge
  unit: '{run_queue_item}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: attributes.jvm.buffer
  type: attribute_group
  brief: Describes JVM buffer metric attributes.
  attributes:
  - name: jvm.buffer.pool.name
    type: string
    brief: Name of the buffer pool.
    examples:
    - mapped
    - direct
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
    attributes:
      jvm.buffer.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.jvm.buffer.memory.used
  type: metric
  brief: Measure of memory used by buffers.
  stability: development
  attributes:
  - name: jvm.buffer.pool.name
    type: string
    brief: Name of the buffer pool.
    examples:
    - mapped
    - direct
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    stability: development
  metric_name: jvm.buffer.memory.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
    attributes:
      jvm.buffer.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.buffer.memory.limit
  type: metric
  brief: Measure of total memory capacity of buffers.
  stability: development
  attributes:
  - name: jvm.buffer.pool.name
    type: string
    brief: Name of the buffer pool.
    examples:
    - mapped
    - direct
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    stability: development
  metric_name: jvm.buffer.memory.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
    attributes:
      jvm.buffer.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.buffer.count
  type: metric
  brief: Number of buffers in the pool.
  stability: development
  attributes:
  - name: jvm.buffer.pool.name
    type: string
    brief: Name of the buffer pool.
    examples:
    - mapped
    - direct
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    stability: development
  metric_name: jvm.buffer.count
  instrument: updowncounter
  unit: '{buffer}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
    attributes:
      jvm.buffer.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.file_descriptor.count
  type: metric
  brief: Number of open file descriptors as reported by the JVM.
  stability: development
  metric_name: jvm.file_descriptor.count
  instrument: updowncounter
  unit: '{file_descriptor}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics-experimental.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: opentracing
  type: attribute_group
  brief: This document defines semantic conventions for the OpenTracing Shim
  note: |
    These conventions are used by the OpenTracing Shim layer.
  attributes:
  - name: opentracing.ref_type
    type:
      members:
      - id: child_of
        value: child_of
        brief: The parent Span depends on the child Span in some capacity
        stability: development
      - id: follows_from
        value: follows_from
        brief: The parent Span doesn't depend in any way on the result of the child Span
        stability: development
    brief: Parent-child Reference type
    requirement_level: recommended
    note: |
      The causal relationship between a child Span and a parent Span.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/opentracing/common.yaml
    attributes:
      opentracing.ref_type:
        source_group: registry.opentracing
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.host
  type: attribute_group
  brief: |
    A host is defined as a computing instance. For example, physical servers, virtual machines, switches or disk array.
  attributes:
  - name: host.id
    type: string
    brief: |
      Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.
    examples:
    - fdbf79e8af94cb7f9e8df36789187052
    requirement_level: recommended
    stability: development
  - name: host.name
    type: string
    brief: |
      Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
    examples:
    - opentelemetry-test
    requirement_level: recommended
    stability: development
  - name: host.type
    type: string
    brief: |
      Type of host. For Cloud, this must be the machine type.
    examples:
    - n1-standard-1
    requirement_level: recommended
    stability: development
  - name: host.arch
    type:
      members:
      - id: amd64
        value: amd64
        brief: AMD64
        stability: development
      - id: arm32
        value: arm32
        brief: ARM32
        stability: development
      - id: arm64
        value: arm64
        brief: ARM64
        stability: development
      - id: ia64
        value: ia64
        brief: Itanium
        stability: development
      - id: ppc32
        value: ppc32
        brief: 32-bit PowerPC
        stability: development
      - id: ppc64
        value: ppc64
        brief: 64-bit PowerPC
        stability: development
      - id: s390x
        value: s390x
        brief: IBM z/Architecture
        stability: development
      - id: x86
        value: x86
        brief: 32-bit x86
        stability: development
    brief: |
      The CPU architecture the host system is running on.
    requirement_level: recommended
    stability: development
  - name: host.image.name
    type: string
    brief: |
      Name of the VM image or OS install the host was instantiated from.
    examples:
    - infra-ami-eks-worker-node-7d4ec78312
    - CentOS-8-x86_64-1905
    requirement_level: recommended
    stability: development
  - name: host.image.id
    type: string
    brief: |
      VM image ID or host OS image ID. For Cloud, this value is from the provider.
    examples:
    - ami-07b06b442921831e5
    requirement_level: recommended
    stability: development
  - name: host.image.version
    type: string
    brief: |
      The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
    examples:
    - '0.1'
    requirement_level: recommended
    stability: development
  - name: host.ip
    type: string[]
    brief: |
      Available IP addresses of the host, excluding loopback interfaces.
    examples:
    - - 192.168.1.140
      - fe80::abc2:4a28:737a:609e
    requirement_level: recommended
    note: |
      IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.
    stability: development
  - name: host.mac
    type: string[]
    brief: |
      Available MAC addresses of the host, excluding loopback interfaces.
    examples:
    - - AC-DE-48-23-45-67
      - AC-DE-48-23-45-67-01-9F
    requirement_level: recommended
    note: |
      MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.
    stability: development
  - name: host.cpu.vendor.id
    type: string
    brief: |
      Processor manufacturer identifier. A maximum 12-character string.
    examples:
    - GenuineIntel
    requirement_level: recommended
    note: |
      [CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.
    stability: development
  - name: host.cpu.family
    type: string
    brief: |
      Family or generation of the CPU.
    examples:
    - '6'
    - PA-RISC 1.1e
    requirement_level: recommended
    stability: development
  - name: host.cpu.model.id
    type: string
    brief: |
      Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.
    examples:
    - '6'
    - 9000/778/B180L
    requirement_level: recommended
    stability: development
  - name: host.cpu.model.name
    type: string
    brief: |
      Model designation of the processor.
    examples:
    - 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz
    requirement_level: recommended
    stability: development
  - name: host.cpu.stepping
    type: string
    brief: |
      Stepping or core revisions.
    examples:
    - '1'
    - r1p1
    requirement_level: recommended
    stability: development
  - name: host.cpu.cache.l2.size
    type: int
    brief: |
      The amount of level 2 memory cache available to the processor (in Bytes).
    examples:
    - 12288000
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/host/registry.yaml
  display_name: Host Attributes
- id: span.dotnet.http.request.wait_for_connection.internal
  type: span
  brief: The span describes the time it takes for the HTTP request to obtain a connection from the connection pool.
  note: |
    The span is reported only if there was no connection readily available when request has started.
    It's reported as a child of *HTTP client request* span.

    The span ends when the connection is obtained - it could happen when an existing connection becomes available or once
    a new connection is established, so the duration of *Wait For Connection* span is different from duration of the
    [*HTTP connection setup*](/docs/dotnet/dotnet-network-traces.md#http-connection-setup) span.

    The time it takes to get a connection from the pool is also reported by the
    [`http.client.request.time_in_queue` metric](/docs/dotnet/dotnet-http-metrics.md#metric-httpclientrequesttime_in_queue).

    Corresponding `Activity.OperationName` is `Experimental.System.Net.Http.Connections.WaitForConnection`, `ActivitySource` name - `Experimental.System.Net.Http`.
    Added in .NET 9.

    **Span name** SHOULD be `HTTP wait_for_connection {server.address}:{server.port}`.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      One of the [HTTP Request errors](https://learn.microsoft.com/dotnet/api/system.net.http.httprequesterror) in snake_case, or a full exception type.
    examples:
    - version_negotiation_error
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/network-spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
- id: span.dotnet.http.connection_setup.internal
  type: span
  brief: |
    The span describes the establishment of the HTTP connection. It includes the time it takes to resolve the DNS, establish the socket connection, and perform the TLS handshake.
  note: |
    There is no parent-child relationship between the [*HTTP client request*](/docs/dotnet/dotnet-network-traces.md#http-client-request) and the
    [*HTTP connection setup*]/docs/dotnet/dotnet-network-traces.md(/docs/dotnet/dotnet-network-traces.md#http-connection-setup) spans;
    the latter will always be a root span, defining a separate trace.

    However, if the connection attempt represented by the [*HTTP connection setup*](/docs/dotnet/dotnet-network-traces.md#http-connection-setup) span results in a
    successful HTTP connection, and that connection is picked up by a request to serve it, the instrumentation adds a link
    to the [*HTTP client request*](/docs/dotnet/dotnet-network-traces.md#http-client-request) span pointing to the *HTTP connection setup* span.
    I.e., each request is linked to the connection that served this request.

    Corresponding `Activity.OperationName` is `Experimental.System.Net.Http.Connections.ConnectionSetup`, `ActivitySource` name - `Experimental.System.Net.Http.Connections`.
    Added in .NET 9.

    **Span name** SHOULD be `HTTP connection_setup {server.address}:{server.port}`.
  stability: development
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - https
    - ftp
    - telnet
    requirement_level: recommended
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer IP address of the socket connection.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      The `network.peer.address` attribute is available only if the connection was successfully established and only for IP sockets.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      One of the [HTTP Request errors](https://learn.microsoft.com/dotnet/api/system.net.http.httprequesterror) in snake_case, or a full exception type.
    examples:
    - name_resolution_error
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/network-spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: span.dotnet.socket.connect.internal
  type: span
  brief: |
    The span describes the establishment of the socket connection.
  note: |
    It's different from [*HTTP connection setup*](/docs/dotnet/dotnet-network-traces.md#http-connection-setup) span, which also covers the DNS lookup and TLS handshake.

    When *socket connect* span is reported along with *HTTP connection setup* span, the socket span becomes a child of HTTP connection setup.

    Corresponding `Activity.OperationName` is `Experimental.System.Net.Sockets.Connect`, `ActivitySource` name - `Experimental.System.Net.Sockets`.
    Added in .NET 9.

    **Span name** SHOULD be `socket connect {network.peer.address}:{network.peer.port}` when socket address family has a
    notion of port and `socket connect {network.peer.address}`
    otherwise.
  stability: development
  attributes:
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If port is supported for the socket address family.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if `network.peer.address` is an IP address.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    - unix
    requirement_level:
      recommended: If value is not `tcp`. When missing, the value is assumed to be `tcp`.
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: Socket error code.
    examples:
    - connection_refused
    - address_not_available
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    note: |
      The following errors codes are reported:

      - `network_down`
      - `address_already_in_use`
      - `interrupted`
      - `in_progress`
      - `already_in_progress`
      - `address_not_available`
      - `address_family_not_supported`
      - `connection_refused`
      - `fault`
      - `invalid_argument`
      - `is_connected`
      - `network_unreachable`
      - `host_unreachable`
      - `no_buffer_space_available`
      - `timed_out`
      - `access_denied`
      - `protocol_type`

      See socket errors on [Windows](https://learn.microsoft.com/windows/win32/api/winsock2/nf-winsock2-connect#return-value) and
      [Linux](https://man7.org/linux/man-pages/man2/connect.2.html) for more details.
    stability: stable
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/network-spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.dotnet.dns.lookup.internal
  type: span
  brief: |
    The span describes DNS lookup or reverse lookup performed with one of the methods on [System.Net.Dns](https://learn.microsoft.com/dotnet/api/system.net.dns) class.
  note: |
    DNS spans track logical operations rather than physical DNS calls and the actual behavior depends on the
    resolver implementation which could be changed in the future versions of .NET.
    .NET 9 uses OS DNS resolver which may do zero or more physical lookups for one API call.

    When the *DNS lookup* span is reported along with *HTTP connection setup* and *socket connect* span,
    the *DNS lookup* span span becomes a child of *HTTP connection setup* and a sibling of *socket connect*.

    DNS lookup duration is also reported by [`dns.lookup.duration` metric](/docs/dotnet/dotnet-dns-metrics.md#metric-dnslookupduration).

    Corresponding `Activity.OperationName` is `Experimental.System.Net.NameResolution.DnsLookup`, `ActivitySource` name - `Experimental.System.Net.NameResolution`.
    Added in .NET 9.

    **Span name** SHOULD be `DNS lookup {dns.question.name}` for DNS lookup (IP addresses from host name)
    and `DNS reverse lookup {dns.question.name}` for reverse lookup (host names from IP address).
  stability: development
  attributes:
  - name: dns.question.name
    type: string
    brief: The domain name or an IP address being queried.
    examples:
    - www.example.com
    - opentelemetry.io
    requirement_level: recommended
    stability: development
  - name: dns.answers
    type: string[]
    brief: List of resolved IP addresses (for DNS lookup) or a single element containing domain name (for reverse lookup).
    examples:
    - - 10.0.0.1
      - 2001:0db8:85a3:0000:0000:8a2e:0370:7334
    requirement_level:
      recommended: if DNS lookup was successful.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The error code or exception name returned by [System.Net.Dns](https://learn.microsoft.com/dotnet/api/system.net.dns).
    examples:
    - host_not_found
    - try_again
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    note: |
      The following errors are reported:

      - `host_not_found`
      - `try_again`
      - `no_recovery`
      - `address_family_not_supported`
      - the full exception type name

      See [SocketError](https://learn.microsoft.com/dotnet/api/system.net.sockets.socketerror) for more details.
    stability: stable
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/network-spans.yaml
    attributes:
      dns.answers:
        source_group: registry.dns
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      dns.question.name:
        source_group: registry.dns
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
- id: span.dotnet.tls.handshake.internal
  type: span
  brief: |
    The span describes TLS client or server handshake performed with [System.Net.Security.SslStream](https://learn.microsoft.com/dotnet/api/system.net.security.sslstream).
  note: |
    When *TLS* span is reported for client-side authentication along with *HTTP connection setup* and *socket connect* span, the *TLS* span becomes a child of *HTTP connection setup*.

    Corresponding `Activity.OperationName` is `Experimental.System.Net.Security.TlsHandshake`, `ActivitySource` name - `Experimental.System.Net.Security`.
    Added in .NET 9.

    **Span name** SHOULD be `TLS client handshake {server.address}` when authenticating on the client
    side and `TLS server handshake` when authenticating the server.

    **Span kind** SHOULD be `INTERNAL` in both cases.
  stability: development
  attributes:
  - name: tls.protocol.name
    type:
      members:
      - id: ssl
        value: ssl
        stability: development
      - id: tls
        value: tls
        stability: development
    brief: |
      Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    requirement_level:
      recommended: when available
    stability: development
  - name: tls.protocol.version
    type: string
    brief: |
      Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    examples:
    - '1.2'
    - '3'
    requirement_level:
      recommended: when available
    stability: development
  - name: server.address
    type: string
    brief: The [server name indication (SNI)](https://en.wikipedia.org/wiki/Server_Name_Indication) used in the 'Client Hello' message during TLS handshake.
    examples:
    - opentelemetry.io
    - example.com
    requirement_level:
      recommended: when authenticating the client.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - System.Net.Security.Authentication.AuthenticationException
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/network-spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      tls.protocol.name:
        source_group: registry.tls
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      tls.protocol.version:
        source_group: registry.tls
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: peer
  type: attribute_group
  brief: Operations that access some remote service.
  attributes:
  - name: peer.service
    type: string
    brief: |
      The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.
    examples: AuthTokenCache
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/peer/common.yaml
    attributes:
      peer.service:
        source_group: registry.peer
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.browser
  type: attribute_group
  brief: |
    The web browser attributes
  attributes:
  - name: browser.brands
    type: string[]
    brief: Array of brand name and version separated by a space
    examples:
    - - ' Not A;Brand 99'
      - Chromium 99
      - Chrome 99
    requirement_level: recommended
    note: |
      This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).
    stability: development
  - name: browser.platform
    type: string
    brief: The platform on which the browser is running
    examples:
    - Windows
    - macOS
    - Android
    requirement_level: recommended
    note: |
      This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.
      The list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.
    stability: development
  - name: browser.mobile
    type: boolean
    brief: A boolean that is true if the browser is running on a mobile device
    requirement_level: recommended
    note: |
      This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.
    stability: development
  - name: browser.language
    type: string
    brief: Preferred language of the user using the browser
    examples:
    - en
    - en-US
    - fr
    - fr-FR
    requirement_level: recommended
    note: |
      This value is intended to be taken from the Navigator API `navigator.language`.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/browser/registry.yaml
  display_name: Browser Attributes
- id: common.kestrel.attributes
  type: attribute_group
  brief: Common kestrel attributes
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.kestrel.active_connections
  type: metric
  brief: Number of connections that are currently active on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  metric_name: kestrel.active_connections
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.kestrel.connection.duration
  type: metric
  brief: The duration of connections on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.1'
    - '2'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: tls.protocol.version
    type: string
    brief: |
      Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    examples:
    - '1.2'
    - '3'
    requirement_level: recommended
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - connection_reset
    - invalid_handshake
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    note: |
      Starting from .NET 9, Kestrel `kestrel.connection.duration` metric reports
      the following errors types when a corresponding error occurs:

      | Value  | Description | Stability |
      |---|---|---|
      | `aborted_by_app` | The HTTP/1.1 connection was aborted when app code aborted an HTTP request with `HttpContext.Abort()`. |
      | `app_shutdown_timeout` | The connection was aborted during app shutdown. During shutdown, the server stops accepting new connections and HTTP requests, and it is given time for active requests to complete. If the app shutdown timeout is exceeded, all remaining connections are aborted. |
      | `closed_critical_stream` | A critical control stream for an HTTP/3 connection was closed. |
      | `connection_reset` | The connection was reset while there were active HTTP/2 or HTTP/3 streams on the connection. |
      | `error_after_starting_response` | An error such as an unhandled application exception or invalid request body occurred after the response was started, causing an abort of the HTTP/1.1 connection. |
      | `error_reading_headers` | An error occurred when decoding HPACK headers in an HTTP/2 `HEADERS` frame. |
      | `error_writing_headers` | An error occurred when encoding HPACK headers in an HTTP/2 `HEADERS` frame. |
      | `flow_control_queue_size_exceeded` | The connection exceeded the outgoing flow control maximum queue size and was closed with `INTERNAL_ERROR`. This can be caused by an excessive number of HTTP/2 stream resets. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |
      | `flow_control_window_exceeded` | The client sent more data than allowed by the current flow-control window. |
      | `frame_after_stream_close` | An HTTP/2 frame was received on a closed stream. |
      | `insufficient_tls_version` | The connection doesn't have TLS 1.2 or greater, as required by HTTP/2. |
      | `invalid_body_reader_state` | An error occurred when draining the request body, aborting the HTTP/1.1 connection. This could be caused by app code reading the request body and missing a call to `PipeReader.AdvanceTo` in a finally block. |
      | `invalid_data_padding` | An HTTP/2 `HEADER` or `DATA` frame has an invalid amount of padding. |
      | `invalid_frame_length` | An HTTP/2 frame was received with an invalid frame payload length. The frame could contain a payload that is not valid for the type, or a `DATA` frame payload does not match the length specified in the frame header. |
      | `invalid_handshake` | An invalid HTTP/2 handshake was received. |
      | `invalid_http_version` | The connection received an HTTP request with the wrong version. For example, a browser sends an HTTP/1.1 request to a plain-text HTTP/2 connection. |
      | `invalid_request_headers` | The HTTP request contains invalid headers. This error can occur in a number of scenarios: a header might not be allowed by the HTTP protocol, such as a pseudo-header in the `HEADERS` frame of an HTTP/2 request. A header could also have an invalid value, such as a non-integer `content-length`, or a header name or value might contain invalid characters. |
      | `invalid_request_line` | The first line of an HTTP/1.1 request was invalid, potentially due to invalid content or exceeding the allowed limit. Configured by `KestrelServerLimits.MaxRequestLineSize`. |
      | `invalid_settings` | The connection received an HTTP/2 or HTTP/3 `SETTINGS` frame with invalid settings. |
      | `invalid_stream_id` | An HTTP/2 stream with an invalid stream ID was received. |
      | `invalid_window_update_size` | The server received an HTTP/2 `WINDOW_UPDATE` frame with a zero increment, or an increment that caused a flow-control window to exceed the maximum size. |
      | `io_error` | An `IOException` occurred while reading or writing HTTP/2 or HTTP/3 connection data. |
      | `keep_alive_timeout` | There was no activity on the connection, and the keep-alive timeout configured by `KestrelServerLimits.KeepAliveTimeout` was exceeded. |
      | `max_concurrent_connections_exceeded` | The connection exceeded the maximum concurrent connection limit. Configured by `KestrelServerLimits.MaxConcurrentConnections`. |
      | `max_frame_length_exceeded` | The connection received an HTTP/2 frame that exceeded the size limit specified by `Http2Limits.MaxFrameSize`. |
      | `max_request_body_size_exceeded` | The HTTP request body exceeded the maximum request body size limit. Configured by `KestrelServerLimits.MaxRequestBodySize`. |
      | `max_request_header_count_exceeded` | The HTTP request headers exceeded the maximum count limit. Configured by `KestrelServerLimits.MaxRequestHeaderCount`. |
      | `max_request_headers_total_size_exceeded` | The HTTP request headers exceeded the maximum total size limit. Configured by `KestrelServerLimits.MaxRequestHeadersTotalSize`. |
      | `min_request_body_data_rate` | Reading the request body timed out due to data arriving too slowly. Configured by `KestrelServerLimits.MinRequestBodyDataRate`. |
      | `min_response_data_rate` | Writing the response timed out because the client did not read it at the specified minimum data rate. Configured by `KestrelServerLimits.MinResponseDataRate`. |
      | `missing_stream_end` | The connection received an HTTP/2 `HEADERS` frame for trailers without a stream end flag. |
      | `output_queue_size_exceeded` | The connection exceeded the output queue size and was closed with `INTERNAL_ERROR`. This can be caused by an excessive number of HTTP/2 stream resets. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |
      | `request_headers_timeout` | Request headers timed out while waiting for headers to be received after the request started. Configured by `KestrelServerLimits.RequestHeadersTimeout`. |
      | `response_content_length_mismatch` | The HTTP response body sent data that didn't match the response's `content-length` header. |
      | `server_timeout` | The connection timed out with the `IConnectionTimeoutFeature`. |
      | `stream_creation_error` | The HTTP/3 connection received a stream that it wouldn't accept. For example, the client created duplicate control streams. |
      | `stream_reset_limit_exceeded` | The connection received an excessive number of HTTP/2 stream resets and was closed with `ENHANCE_YOUR_CALM`. For more information, see [Microsoft Security Advisory CVE-2023-44487](https://github.com/dotnet/runtime/issues/93303). |
      | `stream_self_dependency` | The connection received an HTTP/2 frame that caused a frame to depend on itself. |
      | `tls_handshake_failed` | An error occurred during the TLS handshake for a connection. Only reported for HTTP/1.1 and HTTP/2 connections. The TLS handshake for HTTP/3 is internal to QUIC transport. ![Development](https://img.shields.io/badge/-development-blue) |
      | `tls_not_supported` | A TLS handshake was received by an endpoint that isn't configured to support TLS. |
      | `unexpected_end_of_request_content` | The HTTP/1.1 request body ended before the data specified by the `content-length` header or chunked transfer encoding mechanism was received. |
      | `unexpected_frame` | An unexpected HTTP/2 or HTTP/3 frame type was received. The frame type is either unknown, unsupported, or invalid for the current stream state. |
      | `unknown_stream` | An HTTP/2 frame was received on an unknown stream. |
      | `write_canceled` | The cancellation of a response body write aborted the HTTP/1.1 connection. |

      In other cases, `error.type` contains the fully qualified type name of the exception.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - web_sockets
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  metric_name: kestrel.connection.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      tls.protocol.version:
        source_group: registry.tls
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.kestrel.rejected_connections
  type: metric
  brief: Number of connections rejected by the server.
  note: |
    Connections are rejected when the currently active count exceeds the value configured with `MaxConcurrentConnections`.
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  metric_name: kestrel.rejected_connections
  instrument: counter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.kestrel.queued_connections
  type: metric
  brief: Number of connections that are currently queued and are waiting to start.
  note: |
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  metric_name: kestrel.queued_connections
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.kestrel.queued_requests
  type: metric
  brief: Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start.
  note: |
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.1'
    - '2'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - web_sockets
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  metric_name: kestrel.queued_requests
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.kestrel.upgraded_connections
  type: metric
  brief: Number of connections that are currently upgraded (WebSockets). .
  note: |
    The counter only tracks HTTP/1.1 connections.

    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  metric_name: kestrel.upgraded_connections
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.kestrel.tls_handshake.duration
  type: metric
  brief: The duration of TLS handshakes on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: tls.protocol.version
    type: string
    brief: |
      Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    examples:
    - '1.2'
    - '3'
    requirement_level: recommended
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    - Contoso.MyException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    note: Captures the exception type when a TLS handshake fails.
    stability: stable
  metric_name: kestrel.tls_handshake.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      tls.protocol.version:
        source_group: registry.tls
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.kestrel.active_tls_handshakes
  type: metric
  brief: Number of TLS handshakes that are currently in progress on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level:
      recommended: if the transport is `tcp` or `udp`
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - unix
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  metric_name: kestrel.active_tls_handshakes
  instrument: updowncounter
  unit: '{handshake}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/kestrel/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.v8js.gc.duration
  type: metric
  brief: Garbage collection duration.
  note: |
    The values can be retrieved from [`perf_hooks.PerformanceObserver(...).observe({ entryTypes: ['gc'] })`](https://nodejs.org/api/perf_hooks.html#performanceobserverobserveoptions)
  stability: development
  attributes:
  - name: v8js.gc.type
    type:
      members:
      - id: major
        value: major
        brief: Major (Mark Sweep Compact).
        stability: development
      - id: minor
        value: minor
        brief: Minor (Scavenge).
        stability: development
      - id: incremental
        value: incremental
        brief: Incremental (Incremental Marking).
        stability: development
      - id: weakcb
        value: weakcb
        brief: Weak Callbacks (Process Weak Callbacks).
        stability: development
    brief: The type of garbage collection.
    requirement_level: required
    stability: development
  metric_name: v8js.gc.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/v8js/metrics.yaml
    attributes:
      v8js.gc.type:
        source_group: registry.v8js
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.v8js.memory.heap.limit
  type: metric
  brief: Total heap memory size pre-allocated.
  note: |
    The value can be retrieved from value `space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
  stability: development
  attributes:
  - name: v8js.heap.space.name
    type:
      members:
      - id: new_space
        value: new_space
        brief: New memory space.
        stability: development
      - id: old_space
        value: old_space
        brief: Old memory space.
        stability: development
      - id: code_space
        value: code_space
        brief: Code memory space.
        stability: development
      - id: map_space
        value: map_space
        brief: Map memory space.
        stability: development
      - id: large_object_space
        value: large_object_space
        brief: Large object memory space.
        stability: development
    brief: The name of the space type of heap memory.
    requirement_level: required
    note: |
      Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
    stability: development
  metric_name: v8js.memory.heap.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/v8js/metrics.yaml
    attributes:
      v8js.heap.space.name:
        source_group: registry.v8js
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.v8js.memory.heap.used
  type: metric
  brief: Heap Memory size allocated.
  note: |
    The value can be retrieved from value `space_used_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
  stability: development
  attributes:
  - name: v8js.heap.space.name
    type:
      members:
      - id: new_space
        value: new_space
        brief: New memory space.
        stability: development
      - id: old_space
        value: old_space
        brief: Old memory space.
        stability: development
      - id: code_space
        value: code_space
        brief: Code memory space.
        stability: development
      - id: map_space
        value: map_space
        brief: Map memory space.
        stability: development
      - id: large_object_space
        value: large_object_space
        brief: Large object memory space.
        stability: development
    brief: The name of the space type of heap memory.
    requirement_level: required
    note: |
      Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
    stability: development
  metric_name: v8js.memory.heap.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/v8js/metrics.yaml
    attributes:
      v8js.heap.space.name:
        source_group: registry.v8js
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.v8js.heap.space.available_size
  type: metric
  brief: Heap space available size.
  note: |
    Value can be retrieved from value `space_available_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
  stability: development
  attributes:
  - name: v8js.heap.space.name
    type:
      members:
      - id: new_space
        value: new_space
        brief: New memory space.
        stability: development
      - id: old_space
        value: old_space
        brief: Old memory space.
        stability: development
      - id: code_space
        value: code_space
        brief: Code memory space.
        stability: development
      - id: map_space
        value: map_space
        brief: Map memory space.
        stability: development
      - id: large_object_space
        value: large_object_space
        brief: Large object memory space.
        stability: development
    brief: The name of the space type of heap memory.
    requirement_level: required
    note: |
      Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
    stability: development
  metric_name: v8js.heap.space.available_size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/v8js/metrics.yaml
    attributes:
      v8js.heap.space.name:
        source_group: registry.v8js
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.v8js.heap.space.physical_size
  type: metric
  brief: Committed size of a heap space.
  note: |
    Value can be retrieved from value `physical_space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
  stability: development
  attributes:
  - name: v8js.heap.space.name
    type:
      members:
      - id: new_space
        value: new_space
        brief: New memory space.
        stability: development
      - id: old_space
        value: old_space
        brief: Old memory space.
        stability: development
      - id: code_space
        value: code_space
        brief: Code memory space.
        stability: development
      - id: map_space
        value: map_space
        brief: Map memory space.
        stability: development
      - id: large_object_space
        value: large_object_space
        brief: Large object memory space.
        stability: development
    brief: The name of the space type of heap memory.
    requirement_level: required
    note: |
      Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
    stability: development
  metric_name: v8js.heap.space.physical_size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/v8js/metrics.yaml
    attributes:
      v8js.heap.space.name:
        source_group: registry.v8js
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: entity.vcs.repo
  type: entity
  brief: |
    A repository in the Version Control System.
  stability: development
  attributes:
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: recommended
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  name: vcs.repo
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/entities.yaml
    attributes:
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.vcs.ref
  type: entity
  brief: |
    A reference to a specific version in the Version Control System.
  stability: development
  attributes:
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: recommended
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.head.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: recommended
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.The revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.head.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  - name: vcs.ref.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: recommended
    stability: development
  name: vcs.ref
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/entities.yaml
    attributes:
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      vcs.ref.head.revision:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      vcs.ref.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.vcs.change.count
  type: metric
  brief: The number of changes (pull requests/merge requests/changelists) in a repository, categorized by their state (e.g. open or merged).
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.change.state
    type:
      members:
      - id: open
        value: open
        brief: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
        stability: development
      - id: wip
        value: wip
        brief: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
        stability: development
      - id: closed
        value: closed
        brief: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
        stability: development
      - id: merged
        value: merged
        brief: Merged indicates that the change has been successfully integrated into the target codebase.
        stability: development
    brief: |
      The state of the change (pull request/merge request/changelist).
    examples:
    - open
    - closed
    - merged
    requirement_level: required
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  metric_name: vcs.change.count
  instrument: updowncounter
  unit: '{change}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.change.state:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.vcs.change.duration
  type: metric
  brief: The time duration a change (pull request/merge request/changelist) has been in a given state.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.change.state
    type:
      members:
      - id: open
        value: open
        brief: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
        stability: development
      - id: wip
        value: wip
        brief: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
        stability: development
      - id: closed
        value: closed
        brief: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
        stability: development
      - id: merged
        value: merged
        brief: Merged indicates that the change has been successfully integrated into the target codebase.
        stability: development
    brief: |
      The state of the change (pull request/merge request/changelist).
    examples:
    - open
    - closed
    - merged
    requirement_level: required
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  metric_name: vcs.change.duration
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.change.state:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.vcs.change.time_to_approval
  type: metric
  brief: The amount of time since its creation it took a change (pull request/merge request/changelist) to get the first approval.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.ref.base.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: recommended
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.head.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: opt_in
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.The revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.head.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  - name: vcs.ref.base.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: opt_in
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits. The
      revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.base.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  metric_name: vcs.change.time_to_approval
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.revision:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.revision:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  - vcs.ref
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.vcs.change.time_to_merge
  type: metric
  brief: The amount of time since its creation it took a change (pull request/merge request/changelist) to get merged into the target(base) ref.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.ref.base.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: recommended
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.head.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: opt_in
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.The revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.head.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  - name: vcs.ref.base.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: opt_in
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits. The
      revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.base.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  metric_name: vcs.change.time_to_merge
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.revision:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.revision:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  - vcs.ref
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.vcs.repository.count
  type: metric
  brief: The number of repositories in an organization.
  stability: development
  attributes:
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  metric_name: vcs.repository.count
  instrument: updowncounter
  unit: '{repository}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.vcs.ref.count
  type: metric
  brief: The number of refs of type branch or tag in a repository.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: required
    stability: development
  metric_name: vcs.ref.count
  instrument: updowncounter
  unit: '{ref}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.vcs.ref.lines_delta
  type: metric
  brief: The number of lines added/removed in a ref (branch) relative to the ref from the `vcs.ref.base.name` attribute.
  note: |
    This metric should be reported for each `vcs.line_change.type` value. For example if a ref added 3 lines and removed 2 lines,
    instrumentation SHOULD report two measurements: 3 and 2 (both positive numbers).
    If number of lines added/removed should be calculated from the start of time, then `vcs.ref.base.name` SHOULD be set to an empty string.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.change.id
    type: string
    brief: |
      The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
    examples:
    - '123'
    requirement_level:
      conditionally_required: if a change is associate with the ref.
    stability: development
  - name: vcs.ref.head.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.base.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.ref.base.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: required
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.line_change.type
    type:
      members:
      - id: added
        value: added
        brief: How many lines were added.
        stability: development
      - id: removed
        value: removed
        brief: How many lines were removed.
        stability: development
    brief: |
      The type of line change being measured on a branch or change.
    examples:
    - added
    - removed
    requirement_level: required
    stability: development
  metric_name: vcs.ref.lines_delta
  instrument: gauge
  unit: '{line}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.change.id:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.line_change.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.vcs.ref.revisions_delta
  type: metric
  brief: The number of revisions (commits) a ref (branch) is ahead/behind the branch from the `vcs.ref.base.name` attribute.
  note: |
    This metric should be reported for each `vcs.revision_delta.direction` value. For example if branch `a` is 3 commits behind and 2 commits ahead of `trunk`,
    instrumentation SHOULD report two measurements: 3 and 2 (both positive numbers) and `vcs.ref.base.name` is set to `trunk`.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.change.id
    type: string
    brief: |
      The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
    examples:
    - '123'
    requirement_level:
      conditionally_required: if a change is associate with the ref.
    stability: development
  - name: vcs.ref.head.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.base.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.ref.base.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: required
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.revision_delta.direction
    type:
      members:
      - id: behind
        value: behind
        brief: How many revisions the change is behind the target ref.
        stability: development
      - id: ahead
        value: ahead
        brief: How many revisions the change is ahead of the target ref.
        stability: development
    brief: |
      The type of revision comparison.
    examples:
    - ahead
    - behind
    requirement_level: required
    stability: development
  metric_name: vcs.ref.revisions_delta
  instrument: gauge
  unit: '{revision}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.change.id:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.base.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.revision_delta.direction:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.vcs.ref.time
  type: metric
  brief: Time a ref (branch) created from the default branch (trunk) has existed. The `ref.type` attribute will always be `branch`.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.head.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: required
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  metric_name: vcs.ref.time
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.ref.head.type:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.vcs.contributor.count
  type: metric
  brief: The number of unique contributors to a repository.
  stability: development
  attributes:
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: required
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: opt_in
    stability: development
  metric_name: vcs.contributor.count
  instrument: gauge
  unit: '{contributor}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/metrics.yaml
    attributes:
      vcs.owner.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.provider.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.name:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      vcs.repository.url.full:
        source_group: registry.vcs.repository
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - vcs.repo
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.aspnetcore
  type: attribute_group
  brief: ASP.NET Core attributes
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.rate_limiting.result
    type:
      members:
      - id: acquired
        value: acquired
        brief: Lease was acquired
        stability: stable
      - id: endpoint_limiter
        value: endpoint_limiter
        brief: Lease request was rejected by the endpoint limiter
        stability: stable
      - id: global_limiter
        value: global_limiter
        brief: Lease request was rejected by the global limiter
        stability: stable
      - id: request_canceled
        value: request_canceled
        brief: Lease request was canceled
        stability: stable
    brief: Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
    examples:
    - acquired
    - request_canceled
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.routing.is_fallback
    type: boolean
    brief: A value that indicates whether the matched route is a fallback route.
    examples:
    - true
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.diagnostics.handler.type
    type: string
    brief: Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.
    examples:
    - Contoso.MyHandler
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.request.is_unhandled
    type: boolean
    brief: Flag indicating if request was handled by the application pipeline.
    examples:
    - true
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.routing.match_status
    type:
      members:
      - id: success
        value: success
        brief: Match succeeded
        stability: stable
      - id: failure
        value: failure
        brief: Match failed
        stability: stable
    brief: Match result - success or failure
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.diagnostics.exception.result
    type:
      members:
      - id: handled
        value: handled
        brief: Exception was handled by the exception handling middleware.
        stability: stable
      - id: unhandled
        value: unhandled
        brief: Exception was not handled by the exception handling middleware.
        stability: stable
      - id: skipped
        value: skipped
        brief: Exception handling was skipped because the response had started.
        stability: stable
      - id: aborted
        value: aborted
        brief: Exception handling didn't run because the request was aborted.
        stability: stable
    brief: ASP.NET Core exception middleware handling result.
    examples:
    - handled
    - unhandled
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.memory_pool.owner
    type: string
    brief: The name of the library or subsystem using the memory pool instance.
    examples:
    - kestrel
    - iis
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: recommended
    stability: development
  - name: aspnetcore.authentication.result
    type:
      members:
      - id: success
        value: success
        brief: Authentication was successful.
        stability: development
      - id: failure
        value: failure
        brief: Authentication failed.
        stability: development
      - id: none
        value: none
        brief: No authentication information returned.
        stability: development
    brief: The result of the authentication operation.
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: development
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level: recommended
    stability: development
  - name: aspnetcore.user.is_authenticated
    type: boolean
    brief: A value that indicates whether the user is authenticated.
    examples:
    - true
    requirement_level: recommended
    stability: stable
  - name: aspnetcore.authorization.policy
    type: string
    brief: The name of the authorization policy.
    examples:
    - RequireAdminRole
    requirement_level: recommended
    stability: development
  - name: aspnetcore.authorization.result
    type:
      members:
      - id: success
        value: success
        brief: Authorization was successful.
        stability: development
      - id: failure
        value: failure
        brief: Authorization failed.
        stability: development
    brief: The result of calling the authorization service.
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.result
    type:
      members:
      - id: success
        value: success
        brief: Identity operation was successful.
        stability: development
      - id: failure
        value: failure
        brief: Identity operation failed.
        stability: development
    brief: The result of the identity operation.
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.error_code
    type: string
    brief: The error code for a failed identity operation.
    examples:
    - DefaultError
    - PasswordMismatch
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.user.update_type
    type:
      members:
      - id: update
        value: update
        brief: Identity user updated.
        stability: development
      - id: user_name
        value: user_name
        brief: Identity user name updated.
        stability: development
      - id: add_password
        value: add_password
        brief: Identity user password added.
        stability: development
      - id: change_password
        value: change_password
        brief: Identity user password changed.
        stability: development
      - id: security_stamp
        value: security_stamp
        brief: Identity user security stamp updated.
        stability: development
      - id: reset_password
        value: reset_password
        brief: Identity user password reset.
        stability: development
      - id: remove_login
        value: remove_login
        brief: Identity user login removed.
        stability: development
      - id: add_login
        value: add_login
        brief: Identity user login added.
        stability: development
      - id: add_claims
        value: add_claims
        brief: Identity user claims added.
        stability: development
      - id: replace_claim
        value: replace_claim
        brief: Identity user claim replaced.
        stability: development
      - id: remove_claims
        value: remove_claims
        brief: Identity user claims removed.
        stability: development
      - id: add_to_roles
        value: add_to_roles
        brief: Identity user added to roles.
        stability: development
      - id: remove_from_roles
        value: remove_from_roles
        brief: Identity user removed from roles.
        stability: development
      - id: set_email
        value: set_email
        brief: Identity user email set.
        stability: development
      - id: confirm_email
        value: confirm_email
        brief: Identity user email confirmed.
        stability: development
      - id: password_rehash
        value: password_rehash
        brief: Identity user password rehashed.
        stability: development
      - id: remove_password
        value: remove_password
        brief: Identity user password removed.
        stability: development
      - id: change_email
        value: change_email
        brief: Identity user email changed.
        stability: development
      - id: set_phone_number
        value: set_phone_number
        brief: Identity user phone number set.
        stability: development
      - id: change_phone_number
        value: change_phone_number
        brief: Identity user phone number changed.
        stability: development
      - id: set_two_factor_enabled
        value: set_two_factor_enabled
        brief: Identity user two-factor authentication enabled or disabled.
        stability: development
      - id: set_lockout_enabled
        value: set_lockout_enabled
        brief: Identity user lockout enabled or disabled.
        stability: development
      - id: set_lockout_end_date
        value: set_lockout_end_date
        brief: Identity user lockout end date set.
        stability: development
      - id: access_failed
        value: access_failed
        brief: Identity user access failure recorded.
        stability: development
      - id: reset_access_failed_count
        value: reset_access_failed_count
        brief: Identity user access failure count reset.
        stability: development
      - id: set_authentication_token
        value: set_authentication_token
        brief: Identity user authentication token set.
        stability: development
      - id: remove_authentication_token
        value: remove_authentication_token
        brief: Identity user authentication token removed.
        stability: development
      - id: reset_authenticator_key
        value: reset_authenticator_key
        brief: Identity user authenticator key reset.
        stability: development
      - id: generate_new_two_factor_recovery_codes
        value: generate_new_two_factor_recovery_codes
        brief: Identity user new two-factor recovery codes generated.
        stability: development
      - id: redeem_two_factor_recovery_code
        value: redeem_two_factor_recovery_code
        brief: Identity user two-factor recovery code redeemed.
        stability: development
      - id: set_passkey
        value: set_passkey
        brief: Identity user passkey set.
        stability: development
      - id: remove_passkey
        value: remove_passkey
        brief: Identity user passkey removed.
        stability: development
      - id: other
        value: _OTHER
        brief: Any update type that the instrumentation has no prior knowledge of.
        stability: development
    brief: The user update type.
    examples:
    - update
    - user_name
    - reset_password
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.password_check_result
    type:
      members:
      - id: success
        value: success
        brief: Password check was successful.
        stability: development
      - id: success_rehash_needed
        value: success_rehash_needed
        brief: Password check was successful however the password was encoded using a deprecated algorithm and should be rehashed and updated.
        stability: development
      - id: failure
        value: failure
        brief: Password check failed.
        stability: development
      - id: password_missing
        value: password_missing
        brief: Password check couldn't proceed because the password was missing from the user.
        stability: development
      - id: user_missing
        value: user_missing
        brief: Password check couldn't proceed because the user was missing.
        stability: development
    brief: The result from checking the password.
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.token_purpose
    type:
      members:
      - id: reset_password
        value: reset_password
        brief: The token is for resetting a user password.
        stability: development
      - id: change_phone_number
        value: change_phone_number
        brief: The token is for changing a user phone number.
        stability: development
      - id: email_confirmation
        value: email_confirmation
        brief: The token is for confirming user email address.
        stability: development
      - id: change_email
        value: change_email
        brief: The token is for changing the user email address.
        stability: development
      - id: two_factor
        value: two_factor
        brief: The token is for changing user two factor settings.
        stability: development
      - id: other
        value: _OTHER
        brief: Any token purpose that the instrumentation has no prior knowledge of.
        stability: development
    brief: What the token will be used for.
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.token_verified
    type:
      members:
      - id: success
        value: success
        brief: Token verification was successful.
        stability: development
      - id: failure
        value: failure
        brief: Token verification failed.
        stability: development
    brief: The result of token verification.
    examples:
    - success
    - failure
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.sign_in.type
    type:
      members:
      - id: password
        value: password
        brief: Sign in with password.
        stability: development
      - id: two_factor_recovery_code
        value: two_factor_recovery_code
        brief: Sign in with two factory recovery code.
        stability: development
      - id: two_factor_authenticator
        value: two_factor_authenticator
        brief: Sign in with two factor authenticator app.
        stability: development
      - id: two_factor
        value: two_factor
        brief: Sign in with a two factor provider.
        stability: development
      - id: external
        value: external
        brief: Sign in with a previously registered third-party login.
        stability: development
      - id: passkey
        value: passkey
        brief: Sign in with passkey.
        stability: development
    brief: The authentication type.
    examples:
    - password
    - two_factor
    requirement_level: recommended
    stability: development
  - name: aspnetcore.sign_in.is_persistent
    type: boolean
    brief: A flag indicating whether the sign in is persistent.
    requirement_level: recommended
    stability: development
  - name: aspnetcore.identity.sign_in.result
    type:
      members:
      - id: success
        value: success
        brief: Sign in was successful.
        stability: development
      - id: locked_out
        value: locked_out
        brief: User is locked out.
        stability: development
      - id: not_allowed
        value: not_allowed
        brief: User is not allowed to sign in.
        stability: development
      - id: requires_two_factor
        value: requires_two_factor
        brief: User requires two factory authentication to sign in.
        stability: development
      - id: failure
        value: failure
        brief: Sign in failed.
        stability: development
    brief: Whether the sign in result was success or failure.
    examples:
    - password
    - two_factor
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/registry.yaml
  display_name: ASP.NET Core Attributes
- id: registry.rpc
  type: attribute_group
  brief: This document defines attributes for remote procedure calls.
  attributes:
  - name: rpc.connect_rpc.error_code
    type:
      members:
      - id: cancelled
        value: cancelled
        stability: development
      - id: unknown
        value: unknown
        stability: development
      - id: invalid_argument
        value: invalid_argument
        stability: development
      - id: deadline_exceeded
        value: deadline_exceeded
        stability: development
      - id: not_found
        value: not_found
        stability: development
      - id: already_exists
        value: already_exists
        stability: development
      - id: permission_denied
        value: permission_denied
        stability: development
      - id: resource_exhausted
        value: resource_exhausted
        stability: development
      - id: failed_precondition
        value: failed_precondition
        stability: development
      - id: aborted
        value: aborted
        stability: development
      - id: out_of_range
        value: out_of_range
        stability: development
      - id: unimplemented
        value: unimplemented
        stability: development
      - id: internal
        value: internal
        stability: development
      - id: unavailable
        value: unavailable
        stability: development
      - id: data_loss
        value: data_loss
        stability: development
      - id: unauthenticated
        value: unauthenticated
        stability: development
    brief: The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    requirement_level: recommended
    stability: development
  - name: rpc.connect_rpc.request.metadata
    type: template[string[]]
    brief: |
      Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
    examples:
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: recommended
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
      the `rpc.connect_rpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
    stability: development
  - name: rpc.connect_rpc.response.metadata
    type: template[string[]]
    brief: |
      Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
    examples:
    - - attribute_value
    requirement_level: recommended
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `"attribute_value"` SHOULD be recorded as
      the `rpc.connect_rpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
    stability: development
  - name: rpc.grpc.status_code
    type:
      members:
      - id: ok
        value: 0
        brief: OK
        stability: development
      - id: cancelled
        value: 1
        brief: CANCELLED
        stability: development
      - id: unknown
        value: 2
        brief: UNKNOWN
        stability: development
      - id: invalid_argument
        value: 3
        brief: INVALID_ARGUMENT
        stability: development
      - id: deadline_exceeded
        value: 4
        brief: DEADLINE_EXCEEDED
        stability: development
      - id: not_found
        value: 5
        brief: NOT_FOUND
        stability: development
      - id: already_exists
        value: 6
        brief: ALREADY_EXISTS
        stability: development
      - id: permission_denied
        value: 7
        brief: PERMISSION_DENIED
        stability: development
      - id: resource_exhausted
        value: 8
        brief: RESOURCE_EXHAUSTED
        stability: development
      - id: failed_precondition
        value: 9
        brief: FAILED_PRECONDITION
        stability: development
      - id: aborted
        value: 10
        brief: ABORTED
        stability: development
      - id: out_of_range
        value: 11
        brief: OUT_OF_RANGE
        stability: development
      - id: unimplemented
        value: 12
        brief: UNIMPLEMENTED
        stability: development
      - id: internal
        value: 13
        brief: INTERNAL
        stability: development
      - id: unavailable
        value: 14
        brief: UNAVAILABLE
        stability: development
      - id: data_loss
        value: 15
        brief: DATA_LOSS
        stability: development
      - id: unauthenticated
        value: 16
        brief: UNAUTHENTICATED
        stability: development
    brief: The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    requirement_level: recommended
    stability: development
  - name: rpc.grpc.request.metadata
    type: template[string[]]
    brief: |
      gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
    examples:
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: recommended
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
      `rpc.grpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
    stability: development
  - name: rpc.grpc.response.metadata
    type: template[string[]]
    brief: |
      gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
    examples:
    - - attribute_value
    requirement_level: recommended
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `["attribute_value"]` SHOULD be recorded as
      the `rpc.grpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
    stability: development
  - name: rpc.jsonrpc.error_code
    type: int
    brief: '`error.code` property of response if it is an error response.'
    examples:
    - -32700
    - 100
    requirement_level: recommended
    stability: development
  - name: rpc.jsonrpc.error_message
    type: string
    brief: '`error.message` property of response if it is an error response.'
    examples:
    - Parse error
    - User already exists
    requirement_level: recommended
    stability: development
  - name: rpc.jsonrpc.request_id
    type: string
    brief: |
      `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.
    examples:
    - '10'
    - request-7
    - ''
    requirement_level: recommended
    stability: development
  - name: rpc.jsonrpc.version
    type: string
    brief: Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.
    examples:
    - '2.0'
    - '1.0'
    requirement_level: recommended
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the (logical) method being called, must be equal to the $method part in the span name.
    examples: exampleMethod
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: rpc.service
    type: string
    brief: The full (logical) name of the service being called, including its package name, if applicable.
    examples: myservice.EchoService
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: A string identifying the remoting system. See below for a list of well-known identifiers.
    requirement_level: recommended
    stability: development
  - name: rpc.message.type
    type:
      members:
      - id: sent
        value: SENT
        stability: development
      - id: received
        value: RECEIVED
        stability: development
    brief: Whether this is a received or sent message.
    requirement_level: recommended
    stability: development
  - name: rpc.message.id
    type: int
    brief: MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.
    requirement_level: recommended
    note: This way we guarantee that the values will be consistent between different implementations.
    stability: development
  - name: rpc.message.compressed_size
    type: int
    brief: Compressed size of the message in bytes.
    requirement_level: recommended
    stability: development
  - name: rpc.message.uncompressed_size
    type: int
    brief: Uncompressed size of the message in bytes.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/registry.yaml
  display_name: Remote Procedure Call (RPC) Attributes
- id: rpc
  type: attribute_group
  brief: This document defines semantic conventions for remote procedure calls.
  attributes:
  - name: rpc.method
    type: string
    brief: The name of the (logical) method being called, must be equal to the $method part in the span name.
    examples: exampleMethod
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: rpc.service
    type: string
    brief: The full (logical) name of the service being called, including its package name, if applicable.
    examples: myservice.EchoService
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: A string identifying the remoting system. See below for a list of well-known identifiers.
    requirement_level: required
    stability: development
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: server.address
    type: string
    brief: |
      RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: if the port is supported by the network transport used for communication.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.rpc.client
  type: span
  brief: This span represents an outgoing Remote Procedure Call (RPC).
  note: |
    Remote procedure calls can only be represented with these semantic conventions
    when the names of the called service and method are known and available.

    **Span name:** refer to the [Span Name](#span-name) section.

    **Span kind** MUST be `CLIENT`.
  stability: development
  attributes:
  - name: rpc.method
    type: string
    brief: The name of the (logical) method being called, must be equal to the $method part in the span name.
    examples: exampleMethod
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: rpc.service
    type: string
    brief: The full (logical) name of the service being called, including its package name, if applicable.
    examples: myservice.EchoService
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: A string identifying the remoting system. See below for a list of well-known identifiers.
    requirement_level: required
    stability: development
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If `network.peer.address` is set.
    stability: stable
  - name: server.address
    type: string
    brief: |
      RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: if the port is supported by the network transport used for communication.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  events:
  - rpc.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.rpc.server
  type: span
  brief: This span represents an incoming Remote Procedure Call (RPC).
  note: |
    Remote procedure calls can only be represented with these semantic conventions
    when the names of the called service and method are known and available.

    **Span name:** refer to the [Span Name](#span-name) section.

    **Span kind** MUST be `SERVER`.
  stability: development
  attributes:
  - name: client.address
    type: string
    brief: Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - client.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  - name: client.port
    type: int
    brief: Client port number.
    examples:
    - 65123
    requirement_level: recommended
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  - name: rpc.method
    type: string
    brief: The name of the (logical) method being called, must be equal to the $method part in the span name.
    examples: exampleMethod
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: rpc.service
    type: string
    brief: The full (logical) name of the service being called, including its package name, if applicable.
    examples: myservice.EchoService
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: A string identifying the remoting system. See below for a list of well-known identifiers.
    requirement_level: required
    stability: development
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If `network.peer.address` is set.
    stability: stable
  - name: server.address
    type: string
    brief: |
      RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: if the port is supported by the network transport used for communication.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: server
  events:
  - rpc.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      client.address:
        source_group: registry.client
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      client.port:
        source_group: registry.client
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: rpc.grpc.attributes
  type: attribute_group
  brief: Tech-specific attributes for gRPC.
  stability: development
  attributes:
  - name: rpc.grpc.status_code
    type:
      members:
      - id: ok
        value: 0
        brief: OK
        stability: development
      - id: cancelled
        value: 1
        brief: CANCELLED
        stability: development
      - id: unknown
        value: 2
        brief: UNKNOWN
        stability: development
      - id: invalid_argument
        value: 3
        brief: INVALID_ARGUMENT
        stability: development
      - id: deadline_exceeded
        value: 4
        brief: DEADLINE_EXCEEDED
        stability: development
      - id: not_found
        value: 5
        brief: NOT_FOUND
        stability: development
      - id: already_exists
        value: 6
        brief: ALREADY_EXISTS
        stability: development
      - id: permission_denied
        value: 7
        brief: PERMISSION_DENIED
        stability: development
      - id: resource_exhausted
        value: 8
        brief: RESOURCE_EXHAUSTED
        stability: development
      - id: failed_precondition
        value: 9
        brief: FAILED_PRECONDITION
        stability: development
      - id: aborted
        value: 10
        brief: ABORTED
        stability: development
      - id: out_of_range
        value: 11
        brief: OUT_OF_RANGE
        stability: development
      - id: unimplemented
        value: 12
        brief: UNIMPLEMENTED
        stability: development
      - id: internal
        value: 13
        brief: INTERNAL
        stability: development
      - id: unavailable
        value: 14
        brief: UNAVAILABLE
        stability: development
      - id: data_loss
        value: 15
        brief: DATA_LOSS
        stability: development
      - id: unauthenticated
        value: 16
        brief: UNAUTHENTICATED
        stability: development
    brief: The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    requirement_level: required
    stability: development
  - name: rpc.grpc.request.metadata
    type: template[string[]]
    brief: |
      gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
    examples:
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
      `rpc.grpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
    stability: development
  - name: rpc.grpc.response.metadata
    type: template[string[]]
    brief: |
      gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
    examples:
    - - attribute_value
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `["attribute_value"]` SHOULD be recorded as
      the `rpc.grpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      rpc.grpc.request.metadata:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.grpc.response.metadata:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.grpc.status_code:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: rpc.jsonrpc.attributes
  type: attribute_group
  brief: Tech-specific attributes for [JSON RPC](https://www.jsonrpc.org/).
  stability: development
  attributes:
  - name: rpc.jsonrpc.error_message
    type: string
    brief: '`error.message` property of response if it is an error response.'
    examples:
    - Parse error
    - User already exists
    requirement_level: recommended
    stability: development
  - name: rpc.jsonrpc.request_id
    type: string
    brief: |
      `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.
    examples:
    - '10'
    - request-7
    - ''
    requirement_level: recommended
    stability: development
  - name: rpc.jsonrpc.version
    type: string
    brief: Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.
    examples:
    - '2.0'
    - '1.0'
    requirement_level:
      conditionally_required: If other than the default version (`1.0`)
    stability: development
  - name: rpc.jsonrpc.error_code
    type: int
    brief: '`error.code` property of response if it is an error response.'
    examples:
    - -32700
    - 100
    requirement_level:
      conditionally_required: If response is not successful.
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the (logical) method being called, must be equal to the $method part in the span name.
    examples: exampleMethod
    requirement_level: required
    note: |
      This is always required for jsonrpc. See the note in the general RPC conventions for more information.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      rpc.jsonrpc.error_code:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.jsonrpc.error_message:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.jsonrpc.request_id:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.jsonrpc.version:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
- id: event.rpc.message
  type: event
  brief: Describes a message sent or received within the context of an RPC call.
  note: |
    In the lifetime of an RPC stream, an event for each message sent/received on client and server spans SHOULD be created. In case of unary calls only one sent and one received message will be recorded for both client and server spans.
  stability: development
  attributes:
  - name: rpc.message.type
    type:
      members:
      - id: sent
        value: SENT
        stability: development
      - id: received
        value: RECEIVED
        stability: development
    brief: Whether this is a received or sent message.
    requirement_level: recommended
    stability: development
  - name: rpc.message.id
    type: int
    brief: MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.
    requirement_level: recommended
    note: This way we guarantee that the values will be consistent between different implementations.
    stability: development
  - name: rpc.message.compressed_size
    type: int
    brief: Compressed size of the message in bytes.
    requirement_level: recommended
    stability: development
  - name: rpc.message.uncompressed_size
    type: int
    brief: Uncompressed size of the message in bytes.
    requirement_level: recommended
    stability: development
  name: rpc.message
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      rpc.message.compressed_size:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.message.id:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.message.type:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.message.uncompressed_size:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: rpc.connect_rpc.attributes
  type: attribute_group
  brief: Tech-specific attributes for Connect RPC.
  stability: development
  attributes:
  - name: rpc.connect_rpc.error_code
    type:
      members:
      - id: cancelled
        value: cancelled
        stability: development
      - id: unknown
        value: unknown
        stability: development
      - id: invalid_argument
        value: invalid_argument
        stability: development
      - id: deadline_exceeded
        value: deadline_exceeded
        stability: development
      - id: not_found
        value: not_found
        stability: development
      - id: already_exists
        value: already_exists
        stability: development
      - id: permission_denied
        value: permission_denied
        stability: development
      - id: resource_exhausted
        value: resource_exhausted
        stability: development
      - id: failed_precondition
        value: failed_precondition
        stability: development
      - id: aborted
        value: aborted
        stability: development
      - id: out_of_range
        value: out_of_range
        stability: development
      - id: unimplemented
        value: unimplemented
        stability: development
      - id: internal
        value: internal
        stability: development
      - id: unavailable
        value: unavailable
        stability: development
      - id: data_loss
        value: data_loss
        stability: development
      - id: unauthenticated
        value: unauthenticated
        stability: development
    brief: The [error codes](https://connectrpc.com//docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    requirement_level:
      conditionally_required: If response is not successful and if error code available.
    stability: development
  - name: rpc.connect_rpc.request.metadata
    type: template[string[]]
    brief: |
      Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
    examples:
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `["1.2.3.4", "1.2.3.5"]` SHOULD be recorded as
      the `rpc.connect_rpc.request.metadata.my-custom-key` attribute with value `["1.2.3.4", "1.2.3.5"]`
    stability: development
  - name: rpc.connect_rpc.response.metadata
    type: template[string[]]
    brief: |
      Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
    examples:
    - - attribute_value
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
      Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.

      For example, a property `my-custom-key` with value `"attribute_value"` SHOULD be recorded as
      the `rpc.connect_rpc.response.metadata.my-custom-key` attribute with value `["attribute_value"]`
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/spans.yaml
    attributes:
      rpc.connect_rpc.error_code:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.connect_rpc.request.metadata:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      rpc.connect_rpc.response.metadata:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.cpython.gc.collections
  type: metric
  brief: The number of times a generation was collected since interpreter start.
  note: |
    This metric reports data from [`gc.stats()`](https://docs.python.org/3/library/gc.html#gc.get_stats).
  stability: development
  attributes:
  - name: cpython.gc.generation
    type:
      members:
      - id: generation_0
        value: 0
        brief: Generation 0
        stability: development
      - id: generation_1
        value: 1
        brief: Generation 1
        stability: development
      - id: generation_2
        value: 2
        brief: Generation 2
        stability: development
    brief: Value of the garbage collector collection generation.
    examples:
    - 0
    - 1
    - 2
    requirement_level: required
    stability: development
  metric_name: cpython.gc.collections
  instrument: counter
  unit: '{collection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpython/metrics.yaml
    attributes:
      cpython.gc.generation:
        source_group: registry.cpython
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.cpython.gc.collected_objects
  type: metric
  brief: The total number of objects collected inside a generation since interpreter start.
  note: |
    This metric reports data from [`gc.stats()`](https://docs.python.org/3/library/gc.html#gc.get_stats).
  stability: development
  attributes:
  - name: cpython.gc.generation
    type:
      members:
      - id: generation_0
        value: 0
        brief: Generation 0
        stability: development
      - id: generation_1
        value: 1
        brief: Generation 1
        stability: development
      - id: generation_2
        value: 2
        brief: Generation 2
        stability: development
    brief: Value of the garbage collector collection generation.
    examples:
    - 0
    - 1
    - 2
    requirement_level: required
    stability: development
  metric_name: cpython.gc.collected_objects
  instrument: counter
  unit: '{object}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpython/metrics.yaml
    attributes:
      cpython.gc.generation:
        source_group: registry.cpython
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.cpython.gc.uncollectable_objects
  type: metric
  brief: The total number of objects which were found to be uncollectable inside a generation since interpreter start.
  note: |
    This metric reports data from [`gc.stats()`](https://docs.python.org/3/library/gc.html#gc.get_stats).
  stability: development
  attributes:
  - name: cpython.gc.generation
    type:
      members:
      - id: generation_0
        value: 0
        brief: Generation 0
        stability: development
      - id: generation_1
        value: 1
        brief: Generation 1
        stability: development
      - id: generation_2
        value: 2
        brief: Generation 2
        stability: development
    brief: Value of the garbage collector collection generation.
    examples:
    - 0
    - 1
    - 2
    requirement_level: required
    stability: development
  metric_name: cpython.gc.uncollectable_objects
  instrument: counter
  unit: '{object}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpython/metrics.yaml
    attributes:
      cpython.gc.generation:
        source_group: registry.cpython
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: log.record
  type: attribute_group
  brief: |
    The attributes described in this section are rather generic. They may be used in any Log Record they apply to.
  attributes:
  - name: log.record.uid
    type: string
    brief: |
      A unique identifier for the Log Record.
    examples:
    - 01ARZ3NDEKTSV4RRFFQ69G5FAV
    requirement_level: opt_in
    note: |
      If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.
      The id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.
    stability: development
  - name: log.record.original
    type: string
    brief: |
      The complete original Log Record.
    examples:
    - 77 <86>1 2015-08-06T21:58:59.694Z 192.168.2.133 inactive - - - Something happened
    - '[INFO] 8/3/24 12:34:56 Something happened'
    requirement_level: opt_in
    note: |
      This value MAY be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/log/common.yaml
    attributes:
      log.record.original:
        source_group: registry.log.record
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      log.record.uid:
        source_group: registry.log.record
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: attributes.log
  type: attribute_group
  brief: Describes Log attributes
  attributes:
  - name: log.iostream
    type:
      members:
      - id: stdout
        value: stdout
        brief: Logs from stdout stream
        stability: development
      - id: stderr
        value: stderr
        brief: Events from stderr stream
        stability: development
    brief: |
      The stream associated with the log. See below for a list of well-known values.
    requirement_level: opt_in
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/log/common.yaml
    attributes:
      log.iostream:
        source_group: registry.log
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: attributes.log.file
  type: attribute_group
  brief: |
    A file to which log was emitted.
  attributes:
  - name: log.file.name
    type: string
    brief: |
      The basename of the file.
    examples:
    - audit.log
    requirement_level: recommended
    stability: development
  - name: log.file.path
    type: string
    brief: |
      The full path to the file.
    examples:
    - /var/log/mysql/audit.log
    requirement_level: opt_in
    stability: development
  - name: log.file.name_resolved
    type: string
    brief: |
      The basename of the file, with symlinks resolved.
    examples:
    - uuid.log
    requirement_level: opt_in
    stability: development
  - name: log.file.path_resolved
    type: string
    brief: |
      The full path to the file, with symlinks resolved.
    examples:
    - /var/lib/docker/uuid.log
    requirement_level: opt_in
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/log/common.yaml
    attributes:
      log.file.name:
        source_group: registry.log.file
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      log.file.name_resolved:
        source_group: registry.log.file
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      log.file.path:
        source_group: registry.log.file
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      log.file.path_resolved:
        source_group: registry.log.file
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.enduser
  type: attribute_group
  brief: |
    Describes the end user.
  attributes:
  - name: enduser.id
    type: string
    brief: Unique identifier of an end user in the system. It maybe a username, email address, or other identifier.
    examples:
    - username
    requirement_level: recommended
    note: |
      Unique identifier of an end user in the system.

      > [!Warning]
      > This field contains sensitive (PII) information.
    stability: development
  - name: enduser.pseudo.id
    type: string
    brief: |
      Pseudonymous identifier of an end user. This identifier should be a random value that is not directly linked or associated with the end user's actual identity.
    examples:
    - QdH5CAWJgqVT4rOr0qtumf
    requirement_level: recommended
    note: |
      Pseudonymous identifier of an end user.

      > [!Warning]
      > This field contains sensitive (linkable PII) information.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/enduser/registry.yaml
  display_name: End User Attributes
- id: registry.enduser.deprecated
  type: attribute_group
  brief: Describes deprecated enduser attributes.
  attributes:
  - name: enduser.role
    type: string
    brief: Deprecated, use `user.roles` instead.
    examples: admin
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Uncategorized.
  - name: enduser.scope
    type: string
    brief: Deprecated, no replacement at this time.
    examples: read:message, write:files
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed, no replacement at this time.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/enduser/deprecated/registry-deprecated.yaml
  display_name: Deprecated End User Attributes
- id: entity.telemetry.sdk
  type: entity
  brief: |
    The telemetry SDK used to capture data recorded by the instrumentation libraries.
  stability: stable
  attributes:
  - name: telemetry.sdk.name
    type: string
    brief: |
      The name of the telemetry SDK as defined above.
    examples:
    - opentelemetry
    requirement_level: required
    note: |
      The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.
      If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
      `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
      or another suitable identifier depending on the language.
      The identifier `opentelemetry` is reserved and MUST NOT be used in this case.
      All custom identifiers SHOULD be stable across different versions of an implementation.
    stability: stable
    role: identifying
  - name: telemetry.sdk.language
    type:
      members:
      - id: cpp
        value: cpp
        stability: stable
      - id: dotnet
        value: dotnet
        stability: stable
      - id: erlang
        value: erlang
        stability: stable
      - id: go
        value: go
        stability: stable
      - id: java
        value: java
        stability: stable
      - id: nodejs
        value: nodejs
        stability: stable
      - id: php
        value: php
        stability: stable
      - id: python
        value: python
        stability: stable
      - id: ruby
        value: ruby
        stability: stable
      - id: rust
        value: rust
        stability: stable
      - id: swift
        value: swift
        stability: stable
      - id: webjs
        value: webjs
        stability: stable
    brief: |
      The language of the telemetry SDK.
    requirement_level: required
    stability: stable
    role: identifying
  - name: telemetry.sdk.version
    type: string
    brief: |
      The version string of the telemetry SDK.
    examples:
    - 1.2.3
    requirement_level: required
    stability: stable
    role: descriptive
  name: telemetry.sdk
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/telemetry/entities.yaml
    attributes:
      telemetry.sdk.language:
        source_group: registry.telemetry
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - role
      telemetry.sdk.name:
        source_group: registry.telemetry
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - role
      telemetry.sdk.version:
        source_group: registry.telemetry
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - role
- id: entity.telemetry.distro
  type: entity
  brief: |
    The distribution of telemetry SDK used to capture data recorded by the instrumentation libraries.
  stability: development
  attributes:
  - name: telemetry.distro.name
    type: string
    brief: |
      The name of the auto instrumentation agent or distribution, if used.
    examples:
    - parts-unlimited-java
    requirement_level: recommended
    note: |
      Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to
      a string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.
    stability: development
  - name: telemetry.distro.version
    type: string
    brief: |
      The version string of the auto instrumentation agent or distribution, if used.
    examples:
    - 1.2.3
    requirement_level: recommended
    stability: development
  name: telemetry.distro
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/telemetry/entities.yaml
    attributes:
      telemetry.distro.name:
        source_group: registry.telemetry
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      telemetry.distro.version:
        source_group: registry.telemetry
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.profile.frame
  type: attribute_group
  brief: |
    Describes the origin of a single frame in a Profile.
  attributes:
  - name: profile.frame.type
    type:
      members:
      - id: dotnet
        value: dotnet
        brief: |
          [.NET](https://wikipedia.org/wiki/.NET)
        stability: development
      - id: jvm
        value: jvm
        brief: |
          [JVM](https://wikipedia.org/wiki/Java_virtual_machine)
        stability: development
      - id: kernel
        value: kernel
        brief: |
          [Kernel](https://wikipedia.org/wiki/Kernel_(operating_system))
        stability: development
      - id: native
        value: native
        brief: |
          Can be one of but not limited to [C](https://wikipedia.org/wiki/C_(programming_language)), [C++](https://wikipedia.org/wiki/C%2B%2B), [Go](https://wikipedia.org/wiki/Go_(programming_language)) or [Rust](https://wikipedia.org/wiki/Rust_(programming_language)). If possible, a more precise value MUST be used.
        stability: development
      - id: perl
        value: perl
        brief: |
          [Perl](https://wikipedia.org/wiki/Perl)
        stability: development
      - id: php
        value: php
        brief: |
          [PHP](https://wikipedia.org/wiki/PHP)
        stability: development
      - id: cpython
        value: cpython
        brief: |
          [Python](https://wikipedia.org/wiki/Python_(programming_language))
        stability: development
      - id: ruby
        value: ruby
        brief: |
          [Ruby](https://wikipedia.org/wiki/Ruby_(programming_language))
        stability: development
      - id: v8js
        value: v8js
        brief: |
          [V8JS](https://wikipedia.org/wiki/V8_(JavaScript_engine))
        stability: development
      - id: beam
        value: beam
        brief: |
          [Erlang](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))
        stability: development
      - id: go
        value: go
        brief: |
          [Go](https://wikipedia.org/wiki/Go_(programming_language)),
        stability: development
      - id: rust
        value: rust
        brief: |
          [Rust](https://wikipedia.org/wiki/Rust_(programming_language))
        stability: development
    brief: |
      Describes the interpreter or compiler of a single frame.
    examples:
    - cpython
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/profile/registry.yaml
  display_name: Profile Frame Attributes
- id: entity.aws.ecs
  type: entity
  brief: |
    Entities used by AWS Elastic Container Service (ECS).
  stability: development
  attributes:
  - name: aws.ecs.container.arn
    type: string
    brief: |
      The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).
    examples:
    - arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9
    requirement_level: recommended
    stability: development
  - name: aws.ecs.cluster.arn
    type: string
    brief: |
      The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).
    examples:
    - arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
    requirement_level: recommended
    stability: development
  - name: aws.ecs.launchtype
    type:
      members:
      - id: ec2
        value: ec2
        brief: Amazon EC2
        stability: development
      - id: fargate
        value: fargate
        brief: Amazon Fargate
        stability: development
    brief: |
      The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.arn
    type: string
    brief: |
      The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).
    examples:
    - arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b
    - arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.family
    type: string
    brief: |
      The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.
    examples:
    - opentelemetry-family
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.revision
    type: string
    brief: |
      The revision for the task definition used to create the ECS task.
    examples:
    - '8'
    - '26'
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.id
    type: string
    brief: |
      The ID of a running ECS task. The ID MUST be extracted from `task.arn`.
    examples:
    - 10838bed-421f-43ef-870a-f43feacbbb5b
    - 23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd
    requirement_level:
      conditionally_required: If and only if `task.arn` is populated.
    stability: development
  name: aws.ecs
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/ecs-entities.yaml
    attributes:
      aws.ecs.cluster.arn:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.ecs.container.arn:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.ecs.launchtype:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.ecs.task.arn:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.ecs.task.family:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.ecs.task.id:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      aws.ecs.task.revision:
        source_group: registry.aws.ecs
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.aws.eks
  type: entity
  brief: |
    Entities used by AWS Elastic Kubernetes Service (EKS).
  stability: development
  attributes:
  - name: aws.eks.cluster.arn
    type: string
    brief: |
      The ARN of an EKS cluster.
    examples:
    - arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
    requirement_level: recommended
    stability: development
  name: aws.eks
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/eks-entities.yaml
    attributes:
      aws.eks.cluster.arn:
        source_group: registry.aws.eks
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.aws
  type: attribute_group
  brief: |
    This section defines generic attributes for AWS services.
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: General AWS Attributes
- id: registry.aws.dynamodb
  type: attribute_group
  brief: |
    This document defines attributes for AWS DynamoDB.
  attributes:
  - name: aws.dynamodb.table_names
    type: string[]
    brief: The keys in the `RequestItems` object field.
    examples:
    - - Users
      - Cats
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.item_collection_metrics
    type: string
    brief: The JSON-serialized value of the `ItemCollectionMetrics` response field.
    examples:
    - '{ "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.provisioned_read_capacity
    type: double
    brief: The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.
    examples:
    - 1.0
    - 2.0
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.provisioned_write_capacity
    type: double
    brief: The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.
    examples:
    - 1.0
    - 2.0
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consistent_read
    type: boolean
    brief: The value of the `ConsistentRead` request parameter.
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.projection
    type: string
    brief: The value of the `ProjectionExpression` request parameter.
    examples:
    - Title
    - Title, Price, Color
    - Title, Description, RelatedItems, ProductReviews
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.limit
    type: int
    brief: The value of the `Limit` request parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.attributes_to_get
    type: string[]
    brief: The value of the `AttributesToGet` request parameter.
    examples:
    - - lives
      - id
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.index_name
    type: string
    brief: The value of the `IndexName` request parameter.
    examples:
    - name_to_group
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.select
    type: string
    brief: The value of the `Select` request parameter.
    examples:
    - ALL_ATTRIBUTES
    - COUNT
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.global_secondary_indexes
    type: string[]
    brief: The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field
    examples:
    - - '{ "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.local_secondary_indexes
    type: string[]
    brief: The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.
    examples:
    - - '{ "IndexArn": "string", "IndexName": "string", "IndexSizeBytes": number, "ItemCount": number, "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" } }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.exclusive_start_table
    type: string
    brief: The value of the `ExclusiveStartTableName` request parameter.
    examples:
    - Users
    - CatsTable
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.table_count
    type: int
    brief: The number of items in the `TableNames` response parameter.
    examples:
    - 20
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.scan_forward
    type: boolean
    brief: The value of the `ScanIndexForward` request parameter.
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.segment
    type: int
    brief: The value of the `Segment` request parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.total_segments
    type: int
    brief: The value of the `TotalSegments` request parameter.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.count
    type: int
    brief: The value of the `Count` response parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.scanned_count
    type: int
    brief: The value of the `ScannedCount` response parameter.
    examples:
    - 50
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.attribute_definitions
    type: string[]
    brief: The JSON-serialized value of each item in the `AttributeDefinitions` request field.
    examples:
    - - '{ "AttributeName": "string", "AttributeType": "string" }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.global_secondary_index_updates
    type: string[]
    brief: The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.
    examples:
    - - '{ "Create": { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }'
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon DynamoDB Attributes
- id: registry.aws.ecs
  type: attribute_group
  brief: |
    This document defines attributes for AWS Elastic Container Service (ECS).
  attributes:
  - name: aws.ecs.container.arn
    type: string
    brief: |
      The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).
    examples:
    - arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9
    requirement_level: recommended
    stability: development
  - name: aws.ecs.cluster.arn
    type: string
    brief: |
      The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).
    examples:
    - arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
    requirement_level: recommended
    stability: development
  - name: aws.ecs.launchtype
    type:
      members:
      - id: ec2
        value: ec2
        brief: Amazon EC2
        stability: development
      - id: fargate
        value: fargate
        brief: Amazon Fargate
        stability: development
    brief: |
      The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.arn
    type: string
    brief: |
      The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).
    examples:
    - arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b
    - arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.family
    type: string
    brief: |
      The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.
    examples:
    - opentelemetry-family
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.id
    type: string
    brief: |
      The ID of a running ECS task. The ID MUST be extracted from `task.arn`.
    examples:
    - 10838bed-421f-43ef-870a-f43feacbbb5b
    - 23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd
    requirement_level: recommended
    stability: development
  - name: aws.ecs.task.revision
    type: string
    brief: |
      The revision for the task definition used to create the ECS task.
    examples:
    - '8'
    - '26'
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon ECS Attributes
- id: registry.aws.eks
  type: attribute_group
  brief: |
    This document defines attributes for AWS Elastic Kubernetes Service (EKS).
  attributes:
  - name: aws.eks.cluster.arn
    type: string
    brief: |
      The ARN of an EKS cluster.
    examples:
    - arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon EKS Attributes
- id: registry.aws.log
  type: attribute_group
  brief: |
    This document defines attributes for AWS Logs.
  attributes:
  - name: aws.log.group.names
    type: string[]
    brief: |
      The name(s) of the AWS log group(s) an application is writing to.
    examples:
    - - /aws/lambda/my-function
      - opentelemetry-service
    requirement_level: recommended
    note: |
      Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
    stability: development
  - name: aws.log.group.arns
    type: string[]
    brief: |
      The Amazon Resource Name(s) (ARN) of the AWS log group(s).
    examples:
    - - arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*
    requirement_level: recommended
    note: |
      See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).
    stability: development
  - name: aws.log.stream.names
    type: string[]
    brief: |
      The name(s) of the AWS log stream(s) an application is writing to.
    examples:
    - - logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    requirement_level: recommended
    stability: development
  - name: aws.log.stream.arns
    type: string[]
    brief: |
      The ARN(s) of the AWS log stream(s).
    examples:
    - - arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    requirement_level: recommended
    note: |
      See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon Logs Attributes
- id: registry.aws.lambda
  type: attribute_group
  brief: |
    This document defines attributes for AWS Lambda.
  attributes:
  - name: aws.lambda.invoked_arn
    type: string
    brief: |
      The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).
    examples:
    - arn:aws:lambda:us-east-1:123456:function:myfunction:myalias
    requirement_level: recommended
    note: This may be different from `cloud.resource_id` if an alias is involved.
    stability: development
  - name: aws.lambda.resource_mapping.id
    type: string
    brief: |
      The UUID of the [AWS Lambda EvenSource Mapping](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html). An event source is mapped to a lambda function. It's contents are read by Lambda and used to trigger a function. This isn't available in the lambda execution context or the lambda runtime environtment. This is going to be populated by the AWS SDK for each language when that UUID is present. Some of these operations are Create/Delete/Get/List/Update EventSourceMapping.
    examples:
    - 587ad24b-03b9-4413-8202-bbd56b36e5b7
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon Lambda Attributes
- id: registry.aws.s3
  type: attribute_group
  brief: |
    This document defines attributes for AWS S3.
  attributes:
  - name: aws.s3.bucket
    type: string
    brief: The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.
    examples:
    - some-bucket-name
    requirement_level: recommended
    note: |
      The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.
      This applies to almost all S3 operations except `list-buckets`.
    stability: development
  - name: aws.s3.key
    type: string
    brief: The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.
    examples:
    - someFile.yml
    requirement_level: recommended
    note: |
      The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.
      This applies in particular to the following operations:

      - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
      - [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)
      - [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)
      - [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)
      - [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)
      - [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)
      - [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)
      - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
      - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
      - [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)
      - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
      - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
    stability: development
  - name: aws.s3.copy_source
    type: string
    brief: The source object (in the form `bucket`/`key`) for the copy operation.
    examples:
    - someFile.yml
    requirement_level: recommended
    note: |
      The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter
      of the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).
      This applies in particular to the following operations:

      - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
    stability: development
  - name: aws.s3.upload_id
    type: string
    brief: Upload ID that identifies the multipart upload.
    examples:
    - dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ
    requirement_level: recommended
    note: |
      The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter
      of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.
      This applies in particular to the following operations:

      - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
      - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
      - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
      - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
    stability: development
  - name: aws.s3.delete
    type: string
    brief: The delete request container that specifies the objects to be deleted.
    examples:
    - Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean
    requirement_level: recommended
    note: |
      The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.
      The `delete` attribute corresponds to the `--delete` parameter of the
      [delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).
    stability: development
  - name: aws.s3.part_number
    type: int
    brief: The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.
    examples:
    - 3456
    requirement_level: recommended
    note: |
      The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      and [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.
      The `part_number` attribute corresponds to the `--part-number` parameter of the
      [upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon S3 Attributes
- id: registry.aws.sqs
  type: attribute_group
  brief: |
    This document defines attributes for AWS SQS.
  attributes:
  - name: aws.sqs.queue.url
    type: string
    brief: |
      The URL of the AWS SQS Queue. It's a unique identifier for a queue in Amazon Simple Queue Service (SQS) and is used to access the queue and perform actions on it.
    examples:
    - https://sqs.us-east-1.amazonaws.com/123456789012/MyQueue
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon SQS Attributes
- id: registry.aws.sns
  type: attribute_group
  brief: |
    This document defines attributes for AWS SNS.
  attributes:
  - name: aws.sns.topic.arn
    type: string
    brief: |
      The ARN of the AWS SNS Topic. An Amazon SNS [topic](https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html) is a logical access point that acts as a communication channel.
    examples:
    - arn:aws:sns:us-east-1:123456789012:mystack-mytopic-NZJ5JSMVGFIE
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon SNS Attributes
- id: registry.aws.kinesis
  type: attribute_group
  brief: |
    This document defines attributes for AWS Kinesis.
  attributes:
  - name: aws.kinesis.stream_name
    type: string
    brief: |
      The name of the AWS Kinesis [stream](https://docs.aws.amazon.com/streams/latest/dev/introduction.html) the request refers to. Corresponds to the `--stream-name` parameter of the Kinesis [describe-stream](https://docs.aws.amazon.com/cli/latest/reference/kinesis/describe-stream.html) operation.
    examples:
    - some-stream-name
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon Kinesis Attributes
- id: registry.aws.step_functions
  type: attribute_group
  brief: |
    This document defines attributes for AWS Step Functions.
  attributes:
  - name: aws.step_functions.activity.arn
    type: string
    brief: |
      The ARN of the AWS Step Functions Activity.
    examples:
    - arn:aws:states:us-east-1:123456789012:activity:get-greeting
    requirement_level: recommended
    stability: development
  - name: aws.step_functions.state_machine.arn
    type: string
    brief: |
      The ARN of the AWS Step Functions State Machine.
    examples:
    - arn:aws:states:us-east-1:123456789012:stateMachine:myStateMachine:1
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon Step Functions Attributes
- id: registry.aws.secretsmanager
  type: attribute_group
  brief: |
    This document defines attributes for AWS Secrets Manager.
  attributes:
  - name: aws.secretsmanager.secret.arn
    type: string
    brief: |
      The ARN of the Secret stored in the Secrets Mangger
    examples:
    - arn:aws:secretsmanager:us-east-1:123456789012:secret:SecretName-6RandomCharacters
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon Secrets Manager Attributes
- id: registry.aws.bedrock
  type: attribute_group
  brief: |
    This document defines attributes for AWS Bedrock.
  attributes:
  - name: aws.bedrock.guardrail.id
    type: string
    brief: |
      The unique identifier of the AWS Bedrock Guardrail. A [guardrail](https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html) helps safeguard and prevent unwanted behavior from model responses or user messages.
    examples:
    - sgi5gkybzqak
    requirement_level: recommended
    stability: development
  - name: aws.bedrock.knowledge_base.id
    type: string
    brief: |
      The unique identifier of the AWS Bedrock Knowledge base. A [knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html) is a bank of information that can be queried by models to generate more relevant responses and augment prompts.
    examples:
    - XFWUPB9PAW
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/registry.yaml
  display_name: Amazon Bedrock Attributes
- id: entity.os
  type: entity
  brief: |
    The operating system (OS) on which the process represented by this resource is running.
  note: |
    In case of virtualized environments, this is the operating system as it is observed by the process, i.e., the virtualized guest rather than the underlying host.
  stability: development
  attributes:
  - name: os.description
    type: string
    brief: |
      Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.
    examples:
    - Microsoft Windows [Version 10.0.18363.778]
    - Ubuntu 18.04.1 LTS
    requirement_level: recommended
    stability: development
  - name: os.name
    type: string
    brief: Human readable operating system name.
    examples:
    - iOS
    - Android
    - Ubuntu
    requirement_level: recommended
    stability: development
  - name: os.version
    type: string
    brief: |
      The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
    examples:
    - 14.2.1
    - 18.04.1
    requirement_level: recommended
    stability: development
  - name: os.type
    type:
      members:
      - id: windows
        value: windows
        brief: Microsoft Windows
        stability: development
      - id: linux
        value: linux
        brief: Linux
        stability: development
      - id: darwin
        value: darwin
        brief: Apple Darwin
        stability: development
      - id: freebsd
        value: freebsd
        brief: FreeBSD
        stability: development
      - id: netbsd
        value: netbsd
        brief: NetBSD
        stability: development
      - id: openbsd
        value: openbsd
        brief: OpenBSD
        stability: development
      - id: dragonflybsd
        value: dragonflybsd
        brief: DragonFly BSD
        stability: development
      - id: hpux
        value: hpux
        brief: HP-UX (Hewlett Packard Unix)
        stability: development
      - id: aix
        value: aix
        brief: AIX (Advanced Interactive eXecutive)
        stability: development
      - id: solaris
        value: solaris
        brief: SunOS, Oracle Solaris
        stability: development
      - id: z_os
        value: z_os
        brief: Deprecated. Use `zos` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: zos
          note: Replaced by `zos`.
      - id: zos
        value: zos
        brief: IBM z/OS
        stability: development
    brief: |
      The operating system type.
    requirement_level: required
    stability: development
  - name: os.build_id
    type: string
    brief: Unique identifier for a particular build or compilation of the operating system.
    examples:
    - TQ3C.230805.001.B2
    - '20E247'
    - '22621'
    requirement_level: recommended
    note: |
      `build_id` values SHOULD be obtained from the following sources:

      | OS | Primary | Fallback |
      | ------- | ------- | ------- |
      | Windows | `CurrentBuildNumber` from registry `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion` | - |
      | MacOS | `ProductBuildVersion` from `/System/Library/CoreServices/SystemVersion.plist` | `ProductBuildVersion` from `/System/Library/CoreServices/ServerVersion.plist` |
      | Linux | `BUILD_ID` from `/etc/os-release` | `BUILD_ID` from `/usr/lib/os-release`; <br> contents of `/proc/sys/kernel/osrelease`|
    stability: development
  name: os
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/os/entities.yaml
    attributes:
      os.build_id:
        source_group: registry.os
        inherited_fields:
        - brief
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
      os.description:
        source_group: registry.os
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      os.name:
        source_group: registry.os
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      os.type:
        source_group: registry.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      os.version:
        source_group: registry.os
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.test
  type: attribute_group
  brief: |
    This group describes attributes specific to [software tests](https://wikipedia.org/wiki/Software_testing).
  attributes:
  - name: test.suite.name
    type: string
    brief: |
      The human readable name of a [test suite](https://wikipedia.org/wiki/Test_suite).
    examples:
    - TestSuite1
    requirement_level: recommended
    stability: development
  - name: test.suite.run.status
    type:
      members:
      - id: success
        value: success
        brief: success
        stability: development
      - id: failure
        value: failure
        brief: failure
        stability: development
      - id: skipped
        value: skipped
        brief: skipped
        stability: development
      - id: aborted
        value: aborted
        brief: aborted
        stability: development
      - id: timed_out
        value: timed_out
        brief: timed_out
        stability: development
      - id: in_progress
        value: in_progress
        brief: in_progress
        stability: development
    brief: |
      The status of the test suite run.
    examples:
    - success
    - failure
    - skipped
    - aborted
    - timed_out
    - in_progress
    requirement_level: recommended
    stability: development
  - name: test.case.name
    type: string
    brief: |
      The fully qualified human readable name of the [test case](https://wikipedia.org/wiki/Test_case).
    examples:
    - org.example.TestCase1.test1
    - example/tests/TestCase1.test1
    - ExampleTestCase1_test1
    requirement_level: recommended
    stability: development
  - name: test.case.result.status
    type:
      members:
      - id: pass
        value: pass
        brief: pass
        stability: development
      - id: fail
        value: fail
        brief: fail
        stability: development
    brief: |
      The status of the actual test case result from test execution.
    examples:
    - pass
    - fail
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/test/registry.yaml
  display_name: Test Attributes
- id: thread
  type: attribute_group
  brief: |
    These attributes may be used for any operation to store information about a thread that started a span.
  attributes:
  - name: thread.id
    type: int
    brief: |
      Current "managed" thread ID (as opposed to OS thread ID).
    examples: 42
    requirement_level: recommended
    stability: development
  - name: thread.name
    type: string
    brief: |
      Current thread name.
    examples: main
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/thread/common.yaml
    attributes:
      thread.id:
        source_group: registry.thread
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      thread.name:
        source_group: registry.thread
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.azure.client.sdk
  type: attribute_group
  brief: |
    This section defines generic attributes used by Azure Client Libraries.
  attributes:
  - name: azure.service.request.id
    type: string
    brief: The unique identifier of the service request. It's generated by the Azure service and returned with the response.
    examples:
    - 00000000-0000-0000-0000-000000000000
    requirement_level: recommended
    stability: development
  - name: azure.resource_provider.namespace
    type: string
    brief: |
      [Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.
    examples:
    - Microsoft.Storage
    - Microsoft.KeyVault
    - Microsoft.ServiceBus
    requirement_level: recommended
    stability: development
  - name: azure.client.id
    type: string
    brief: The unique identifier of the client instance.
    examples:
    - 3ba4827d-4422-483f-b59f-85b74211c11d
    - storage-client-1
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/registry.yaml
  display_name: Azure Client Library Attributes
- id: registry.azure.cosmosdb
  type: attribute_group
  brief: |
    This section defines attributes for Azure Cosmos DB.
  stability: development
  attributes:
  - name: azure.cosmosdb.connection.mode
    type:
      members:
      - id: gateway
        value: gateway
        brief: Gateway (HTTP) connection.
        stability: development
      - id: direct
        value: direct
        brief: Direct connection.
        stability: development
    brief: Cosmos client connection mode.
    requirement_level: recommended
    stability: development
  - name: azure.cosmosdb.operation.request_charge
    type: double
    brief: |
      The number of request units consumed by the operation.
    examples:
    - 46.18
    - 1.0
    requirement_level: recommended
    stability: development
  - name: azure.cosmosdb.request.body.size
    type: int
    brief: Request payload size in bytes.
    requirement_level: recommended
    stability: development
  - name: azure.cosmosdb.operation.contacted_regions
    type: string[]
    brief: |
      List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.
    examples:
    - - North Central US
      - Australia East
      - Australia Southeast
    requirement_level: recommended
    note: |
      Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)
    stability: development
  - name: azure.cosmosdb.response.sub_status_code
    type: int
    brief: Cosmos DB sub status code.
    examples:
    - 1000
    - 1002
    requirement_level: recommended
    stability: development
  - name: azure.cosmosdb.consistency.level
    type:
      members:
      - id: strong
        value: Strong
        brief: Strong
        stability: development
      - id: bounded_staleness
        value: BoundedStaleness
        brief: Bounded Staleness
        stability: development
      - id: session
        value: Session
        brief: Session
        stability: development
      - id: eventual
        value: Eventual
        brief: Eventual
        stability: development
      - id: consistent_prefix
        value: ConsistentPrefix
        brief: Consistent Prefix
        stability: development
    brief: Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).
    examples:
    - Eventual
    - ConsistentPrefix
    - BoundedStaleness
    - Strong
    - Session
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/registry.yaml
  display_name: Azure Cosmos DB Attributes
- id: event.az.resource.log
  type: event
  brief: |
    Deprecated. Use `azure.resource.log` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: azure.resource.log
    note: Replaced by `azure.resource.log`.
  attributes:
  - name: az.service_request_id
    type: string
    brief: Deprecated, use `azure.service.request.id` instead.
    examples:
    - 00000000-0000-0000-0000-000000000000
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.service.request.id
      note: Replaced by `azure.service.request.id`.
  - name: cloud.resource_id
    type: string
    brief: The [Fully Qualified Azure Resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) the log is emitted for.
    examples:
    - arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
    - //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
    - /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
    requirement_level: recommended
    stability: development
  name: az.resource.log
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/deprecated/events-deprecated.yaml
    attributes:
      az.service_request_id:
        source_group: registry.azure.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - requirement_level
        - stability
      cloud.resource_id:
        source_group: registry.cloud
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
  body:
    type: undefined
    id: az.resource.log
    stability: development
    requirement_level: recommended
- id: registry.azure.deprecated
  type: attribute_group
  brief: |
    This section describes deprecated Azure attributes.
  attributes:
  - name: az.service_request_id
    type: string
    brief: Deprecated, use `azure.service.request.id` instead.
    examples:
    - 00000000-0000-0000-0000-000000000000
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.service.request.id
      note: Replaced by `azure.service.request.id`.
  - name: az.namespace
    type: string
    brief: |
      Deprecated, use `azure.resource_provider.namespace` instead.
    examples:
    - Microsoft.Storage
    - Microsoft.KeyVault
    - Microsoft.ServiceBus
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.resource_provider.namespace
      note: Replaced by `azure.resource_provider.namespace`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/deprecated/registry-deprecated.yaml
  display_name: Deprecated Azure Attributes
- id: event.feature_flag.evaluation
  type: event
  brief: |
    Defines feature flag evaluation as an event.
  note: |
    A `feature_flag.evaluation` event SHOULD be emitted whenever a feature flag value is evaluated, which may happen many times over the course of an application lifecycle. For example, a website A/B testing different animations may evaluate a flag each time a button is clicked. A `feature_flag.evaluation` event is emitted on each evaluation even if the result is the same.
  stability: release_candidate
  attributes:
  - name: feature_flag.provider.name
    type: string
    brief: Identifies the feature flag provider.
    examples:
    - Flag Manager
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.context.id
    type: string
    brief: |
      The unique identifier for the flag evaluation context. For example, the targeting key.
    examples:
    - 5157782b-2203-4c80-a857-dbbd5e7761db
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.version
    type: string
    brief: |
      The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.
    examples:
    - '1'
    - 01ABCDEF
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.set.id
    type: string
    brief: |
      The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to which the feature flag belongs.
    examples:
    - proj-1
    - ab98sgs
    - service1/dev
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.result.reason
    type:
      members:
      - id: static
        value: static
        brief: The resolved value is static (no dynamic evaluation).
        stability: release_candidate
      - id: default
        value: default
        brief: The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).
        stability: release_candidate
      - id: targeting_match
        value: targeting_match
        brief: The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.
        stability: release_candidate
      - id: split
        value: split
        brief: The resolved value was the result of pseudorandom assignment.
        stability: release_candidate
      - id: cached
        value: cached
        brief: The resolved value was retrieved from cache.
        stability: release_candidate
      - id: disabled
        value: disabled
        brief: The resolved value was the result of the flag being disabled in the management system.
        stability: release_candidate
      - id: unknown
        value: unknown
        brief: The reason for the resolved value could not be determined.
        stability: release_candidate
      - id: stale
        value: stale
        brief: The resolved value is non-authoritative or possibly out of date
        stability: release_candidate
      - id: error
        value: error
        brief: The resolved value was the result of an error.
        stability: release_candidate
    brief: |
      The reason code which shows how a feature flag value was determined.
    examples:
    - static
    - targeting_match
    - error
    - default
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.key
    type: string
    brief: The lookup key of the feature flag.
    examples:
    - logo-color
    requirement_level: required
    stability: release_candidate
  - name: feature_flag.result.variant
    type: string
    brief: |
      A semantic identifier for an evaluated flag value.
    examples:
    - red
    - 'true'
    - on
    requirement_level:
      conditionally_required: If feature flag provider supplies a variant or equivalent concept.
    note: |-
      A semantic identifier, commonly referred to as a variant, provides a means
      for referring to a value without including the value itself. This can
      provide additional context for understanding the meaning behind a value.
      For example, the variant `red` maybe be used for the value `#c05543`.
    stability: release_candidate
  - name: feature_flag.result.value
    type: any
    brief: The evaluated value of the feature flag.
    examples:
    - '#ff0000'
    - true
    - 3
    requirement_level:
      conditionally_required: |
        If and only if feature flag provider does not supply variant or equivalent concept. Otherwise, `feature_flag.result.value` should be treated as opt-in.
    note: |
      With some feature flag providers, feature flag results can be quite large or contain private or sensitive details.
      Because of this, `feature_flag.result.variant` is often the preferred attribute if it is available.

      It may be desirable to redact or otherwise limit the size and scope of `feature_flag.result.value` if possible.
      Because the evaluated flag value is unstructured and may be any type, it is left to the instrumentation author to determine how best to achieve this.
    stability: release_candidate
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - provider_not_ready
    - targeting_key_missing
    - provider_fatal
    - general
    requirement_level:
      conditionally_required: If and only if an error occurred during flag evaluation.
    note: |
      If one of these values applies, then it MUST be used; otherwise, a custom value MAY be used.

      | Value  | Description | Stability |
      |---|---|---|
      | `flag_not_found` | The flag could not be found. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `invalid_context` | The evaluation context does not meet provider requirements. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `parse_error` | An error was encountered parsing data, such as a flag configuration. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `provider_fatal` | The provider has entered an irrecoverable error state. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `provider_not_ready` | The value was resolved before the provider was initialized. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `targeting_key_missing` | The provider requires a targeting key and one was not provided in the evaluation context. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `type_mismatch` | The type of the flag value does not match the expected type. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
      | `general` | The error was for a reason not enumerated above. | ![Release Candidate](https://img.shields.io/badge/-rc-mediumorchid) |
    stability: stable
  - name: error.message
    type: string
    brief: A message providing more detail about an error in human-readable form.
    examples:
    - 'Unexpected input type: string'
    - The user has exceeded their storage quota
    requirement_level:
      recommended: If and only if an error occurred during flag evaluation and `error.type` does not sufficiently describe the error.
    note: |
      Should not simply duplicate the value of `error.type`, but should provide more context. For example, if `error.type` is `invalid_context` the `error.message` may enumerate which context keys are missing or invalid.
    stability: development
  name: feature_flag.evaluation
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/feature-flags/events.yaml
    attributes:
      error.message:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      feature_flag.context.id:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.key:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.provider.name:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.result.reason:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.result.value:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.result.variant:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.set.id:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      feature_flag.version:
        source_group: registry.feature_flag
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.feature_flag.deprecated
  type: attribute_group
  brief: Describes deprecated feature flag attributes.
  attributes:
  - name: feature_flag.provider_name
    type: string
    brief: Deprecated, use `feature_flag.provider.name` instead.
    examples:
    - Flag Manager
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: feature_flag.provider.name
      note: Replaced by `feature_flag.provider.name`.
    annotations:
      code_generation:
        exclude: true
  - name: feature_flag.evaluation.reason
    type:
      members:
      - id: static
        value: static
        brief: The resolved value is static (no dynamic evaluation).
        stability: development
      - id: default
        value: default
        brief: The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).
        stability: development
      - id: targeting_match
        value: targeting_match
        brief: The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.
        stability: development
      - id: split
        value: split
        brief: The resolved value was the result of pseudorandom assignment.
        stability: development
      - id: cached
        value: cached
        brief: The resolved value was retrieved from cache.
        stability: development
      - id: disabled
        value: disabled
        brief: The resolved value was the result of the flag being disabled in the management system.
        stability: development
      - id: unknown
        value: unknown
        brief: The reason for the resolved value could not be determined.
        stability: development
      - id: stale
        value: stale
        brief: The resolved value is non-authoritative or possibly out of date
        stability: development
      - id: error
        value: error
        brief: The resolved value was the result of an error.
        stability: development
    brief: Deprecated, use `feature_flag.result.reason` instead.
    examples:
    - static
    - targeting_match
    - error
    - default
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: feature_flag.result.reason
      note: Replaced by `feature_flag.result.reason`.
  - name: feature_flag.variant
    type: string
    brief: Deprecated, use `feature_flag.result.variant` instead.
    examples:
    - red
    - 'true'
    - on
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: feature_flag.result.variant
      note: Replaced by `feature_flag.result.variant`.
  - name: feature_flag.evaluation.error.message
    type: string
    brief: Deprecated, use `error.message` instead.
    examples:
    - Flag `header-color` expected type `string` but found type `number`
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: error.message
      note: Replaced by `error.message`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/feature-flags/deprecated/registry-deprecated.yaml
  display_name: Deprecated Feature Flag Attributes
- id: registry.k8s
  type: attribute_group
  brief: |
    Kubernetes resource attributes.
  attributes:
  - name: k8s.cluster.name
    type: string
    brief: |
      The name of the cluster.
    examples:
    - opentelemetry-cluster
    requirement_level: recommended
    stability: development
  - name: k8s.cluster.uid
    type: string
    brief: |
      A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      K8s doesn't have support for obtaining a cluster ID. If this is ever
      added, we will recommend collecting the `k8s.cluster.uid` through the
      official APIs. In the meantime, we are able to use the `uid` of the
      `kube-system` namespace as a proxy for cluster ID. Read on for the
      rationale.

      Every object created in a K8s cluster is assigned a distinct UID. The
      `kube-system` namespace is used by Kubernetes itself and will exist
      for the lifetime of the cluster. Using the `uid` of the `kube-system`
      namespace is a reasonable proxy for the K8s ClusterID as it will only
      change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
      UUIDs as standardized by
      [ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).
      Which states:

      > If generated according to one of the mechanisms defined in Rec.
      > ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
      > different from all other UUIDs generated before 3603 A.D., or is
      > extremely likely to be different (depending on the mechanism chosen).

      Therefore, UIDs between clusters should be extremely unlikely to
      conflict.
    stability: development
  - name: k8s.node.name
    type: string
    brief: |
      The name of the Node.
    examples:
    - node-1
    requirement_level: recommended
    stability: development
  - name: k8s.node.uid
    type: string
    brief: |
      The UID of the Node.
    examples:
    - 1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2
    requirement_level: recommended
    stability: development
  - name: k8s.node.label
    type: template[string]
    brief: |
      The label placed on the Node, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - arm64
    - ''
    requirement_level: recommended
    note: |
      Examples:

      - A label `kubernetes.io/arch` with value `arm64` SHOULD be recorded
        as the `k8s.node.label.kubernetes.io/arch` attribute with value `"arm64"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.node.label.data` attribute with value `""`.
    stability: development
  - name: k8s.node.annotation
    type: template[string]
    brief: |
      The annotation placed on the Node, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '0'
    - ''
    requirement_level: recommended
    note: |
      Examples:

      - An annotation `node.alpha.kubernetes.io/ttl` with value `0` SHOULD be recorded as
        the `k8s.node.annotation.node.alpha.kubernetes.io/ttl` attribute with value `"0"`.
      - An annotation `data` with empty string value SHOULD be recorded as
        the `k8s.node.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.namespace.name
    type: string
    brief: |
      The name of the namespace that the pod is running in.
    examples:
    - default
    requirement_level: recommended
    stability: development
  - name: k8s.namespace.label
    type: template[string]
    brief: |
      The label placed on the Namespace, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - default
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `kubernetes.io/metadata.name` with value `default` SHOULD be recorded
        as the `k8s.namespace.label.kubernetes.io/metadata.name` attribute with value `"default"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.namespace.label.data` attribute with value `""`.
    stability: development
  - name: k8s.namespace.annotation
    type: template[string]
    brief: |
      The annotation placed on the Namespace, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '0'
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `ttl` with value `0` SHOULD be recorded
        as the `k8s.namespace.annotation.ttl` attribute with value `"0"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.namespace.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.pod.uid
    type: string
    brief: |
      The UID of the Pod.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.pod.name
    type: string
    brief: |
      The name of the Pod.
    examples:
    - opentelemetry-pod-autoconf
    requirement_level: recommended
    stability: development
  - name: k8s.pod.label
    type: template[string]
    brief: |
      The label placed on the Pod, the `<key>` being the label name, the value being the label value.
    examples:
    - my-app
    - x64
    - ''
    requirement_level: recommended
    note: |
      Examples:

      - A label `app` with value `my-app` SHOULD be recorded as
        the `k8s.pod.label.app` attribute with value `"my-app"`.
      - A label `mycompany.io/arch` with value `x64` SHOULD be recorded as
        the `k8s.pod.label.mycompany.io/arch` attribute with value `"x64"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.pod.label.data` attribute with value `""`.
    stability: development
  - name: k8s.pod.annotation
    type: template[string]
    brief: |
      The annotation placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.
    examples:
    - 'true'
    - x64
    - ''
    requirement_level: recommended
    note: |
      Examples:

      - An annotation `kubernetes.io/enforce-mountable-secrets` with value `true` SHOULD be recorded as
        the `k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets` attribute with value `"true"`.
      - An annotation `mycompany.io/arch` with value `x64` SHOULD be recorded as
        the `k8s.pod.annotation.mycompany.io/arch` attribute with value `"x64"`.
      - An annotation `data` with empty string value SHOULD be recorded as
        the `k8s.pod.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.container.name
    type: string
    brief: |
      The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
    examples:
    - redis
    requirement_level: recommended
    stability: development
  - name: k8s.container.restart_count
    type: int
    brief: |
      Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
    requirement_level: recommended
    stability: development
  - name: k8s.container.status.last_terminated_reason
    type: string
    brief: |
      Last terminated reason of the Container.
    examples:
    - Evicted
    - Error
    requirement_level: recommended
    stability: development
  - name: k8s.replicaset.uid
    type: string
    brief: |
      The UID of the ReplicaSet.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.replicaset.name
    type: string
    brief: |
      The name of the ReplicaSet.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.replicaset.label
    type: template[string]
    brief: |
      The label placed on the ReplicaSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `app` with value `guestbook` SHOULD be recorded
        as the `k8s.replicaset.label.app` attribute with value `"guestbook"`.
      - A label `injected` with empty string value SHOULD be recorded as
        the `k8s.replicaset.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.replicaset.annotation
    type: template[string]
    brief: |
      The annotation placed on the ReplicaSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '0'
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `replicas` with value `0` SHOULD be recorded
        as the `k8s.replicaset.annotation.replicas` attribute with value `"0"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.replicaset.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.replicationcontroller.uid
    type: string
    brief: |
      The UID of the replication controller.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.replicationcontroller.name
    type: string
    brief: |
      The name of the replication controller.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.resourcequota.uid
    type: string
    brief: |
      The UID of the resource quota.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.resourcequota.name
    type: string
    brief: |
      The name of the resource quota.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.deployment.uid
    type: string
    brief: |
      The UID of the Deployment.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.deployment.name
    type: string
    brief: |
      The name of the Deployment.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.deployment.label
    type: template[string]
    brief: |
      The label placed on the Deployment, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `replicas` with value `0` SHOULD be recorded
        as the `k8s.deployment.label.app` attribute with value `"guestbook"`.
      - A label `injected` with empty string value SHOULD be recorded as
        the `k8s.deployment.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.deployment.annotation
    type: template[string]
    brief: |
      The annotation placed on the Deployment, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `replicas` with value `1` SHOULD be recorded
        as the `k8s.deployment.annotation.replicas` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.deployment.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.statefulset.uid
    type: string
    brief: |
      The UID of the StatefulSet.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.statefulset.name
    type: string
    brief: |
      The name of the StatefulSet.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.statefulset.label
    type: template[string]
    brief: |
      The label placed on the StatefulSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `replicas` with value `0` SHOULD be recorded
        as the `k8s.statefulset.label.app` attribute with value `"guestbook"`.
      - A label `injected` with empty string value SHOULD be recorded as
        the `k8s.statefulset.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.statefulset.annotation
    type: template[string]
    brief: |
      The annotation placed on the StatefulSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `replicas` with value `1` SHOULD be recorded
        as the `k8s.statefulset.annotation.replicas` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.statefulset.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.daemonset.uid
    type: string
    brief: |
      The UID of the DaemonSet.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.daemonset.name
    type: string
    brief: |
      The name of the DaemonSet.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.daemonset.label
    type: template[string]
    brief: |
      The label placed on the DaemonSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `app` with value `guestbook` SHOULD be recorded
        as the `k8s.daemonset.label.app` attribute with value `"guestbook"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.daemonset.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.daemonset.annotation
    type: template[string]
    brief: |
      The annotation placed on the DaemonSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `replicas` with value `1` SHOULD be recorded
        as the `k8s.daemonset.annotation.replicas` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.daemonset.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.hpa.uid
    type: string
    brief: |
      The UID of the horizontal pod autoscaler.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.hpa.name
    type: string
    brief: |
      The name of the horizontal pod autoscaler.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.hpa.scaletargetref.kind
    type: string
    brief: |
      The kind of the target resource to scale for the HorizontalPodAutoscaler.
    examples:
    - Deployment
    - StatefulSet
    requirement_level: recommended
    note: |
      This maps to the `kind` field in the `scaleTargetRef` of the HPA spec.
    stability: development
  - name: k8s.hpa.scaletargetref.name
    type: string
    brief: |
      The name of the target resource to scale for the HorizontalPodAutoscaler.
    examples:
    - my-deployment
    - my-statefulset
    requirement_level: recommended
    note: |
      This maps to the `name` field in the `scaleTargetRef` of the HPA spec.
    stability: development
  - name: k8s.hpa.scaletargetref.api_version
    type: string
    brief: |
      The API version of the target resource to scale for the HorizontalPodAutoscaler.
    examples:
    - apps/v1
    - autoscaling/v2
    requirement_level: recommended
    note: |
      This maps to the `apiVersion` field in the `scaleTargetRef` of the HPA spec.
    stability: development
  - name: k8s.hpa.metric.type
    type: string
    brief: |
      The type of metric source for the horizontal pod autoscaler.
    examples:
    - Resource
    - ContainerResource
    requirement_level: recommended
    note: |
      This attribute reflects the `type` field of spec.metrics[] in the HPA.
    stability: development
  - name: k8s.job.uid
    type: string
    brief: |
      The UID of the Job.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.job.name
    type: string
    brief: |
      The name of the Job.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.job.label
    type: template[string]
    brief: |
      The label placed on the Job, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - ci
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `jobtype` with value `ci` SHOULD be recorded
        as the `k8s.job.label.jobtype` attribute with value `"ci"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.job.label.automated` attribute with value `""`.
    stability: development
  - name: k8s.job.annotation
    type: template[string]
    brief: |
      The annotation placed on the Job, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: recommended
    note: |2

      Examples:

      - A label `number` with value `1` SHOULD be recorded
        as the `k8s.job.annotation.number` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.job.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.cronjob.uid
    type: string
    brief: |
      The UID of the CronJob.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.cronjob.name
    type: string
    brief: |
      The name of the CronJob.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.cronjob.label
    type: template[string]
    brief: |
      The label placed on the CronJob, the `<key>` being the label name, the value being the label value.
    examples:
    - weekly
    - ''
    requirement_level: recommended
    note: |
      Examples:

      - A label `type` with value `weekly` SHOULD be recorded as the
        `k8s.cronjob.label.type` attribute with value `"weekly"`.
      - A label `automated` with empty string value SHOULD be recorded as
        the `k8s.cronjob.label.automated` attribute with value `""`.
    stability: development
  - name: k8s.cronjob.annotation
    type: template[string]
    brief: |
      The cronjob annotation placed on the CronJob, the `<key>` being the annotation name, the value being the annotation value.
    examples:
    - '4'
    - ''
    requirement_level: recommended
    note: |
      Examples:

      - An annotation `retries` with value `4` SHOULD be recorded as the
        `k8s.cronjob.annotation.retries` attribute with value `"4"`.
      - An annotation `data` with empty string value SHOULD be recorded as
        the `k8s.cronjob.annotation.data` attribute with value `""`.
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: recommended
    stability: development
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.namespace.phase
    type:
      members:
      - id: active
        value: active
        brief: Active namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)
        stability: development
      - id: terminating
        value: terminating
        brief: Terminating namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)
        stability: development
    brief: |
      The phase of the K8s namespace.
    examples:
    - active
    - terminating
    requirement_level: recommended
    note: |
      This attribute aligns with the `phase` field of the
      [K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)
    stability: development
  - name: k8s.node.condition.type
    type:
      members:
      - id: ready
        value: Ready
        brief: The node is healthy and ready to accept pods
        stability: development
      - id: disk_pressure
        value: DiskPressure
        brief: Pressure exists on the disk size—that is, if the disk capacity is low
        stability: development
      - id: memory_pressure
        value: MemoryPressure
        brief: Pressure exists on the node memory—that is, if the node memory is low
        stability: development
      - id: pid_pressure
        value: PIDPressure
        brief: Pressure exists on the processes—that is, if there are too many processes on the node
        stability: development
      - id: network_unavailable
        value: NetworkUnavailable
        brief: The network for the node is not correctly configured
        stability: development
    brief: |
      The condition type of a K8s Node.
    examples:
    - Ready
    - DiskPressure
    requirement_level: recommended
    note: |
      K8s Node conditions as described
      by [K8s documentation](https://v1-32.docs.kubernetes.io/docs/reference/node/node-status/#condition).

      This attribute aligns with the `type` field of the
      [NodeCondition](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core)

      The set of possible values is not limited to those listed here. Managed Kubernetes environments,
      or custom controllers MAY introduce additional node condition types.
      When this occurs, the exact value as reported by the Kubernetes API SHOULD be used.
    stability: development
  - name: k8s.node.condition.status
    type:
      members:
      - id: condition_true
        value: 'true'
        stability: development
      - id: condition_false
        value: 'false'
        stability: development
      - id: condition_unknown
        value: unknown
        stability: development
    brief: |
      The status of the condition, one of True, False, Unknown.
    examples:
    - 'true'
    - 'false'
    - unknown
    requirement_level: recommended
    note: |
      This attribute aligns with the `status` field of the
      [NodeCondition](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core)
    stability: development
  - name: k8s.container.status.state
    type:
      members:
      - id: terminated
        value: terminated
        brief: The container has terminated.
        stability: development
      - id: running
        value: running
        brief: The container is running.
        stability: development
      - id: waiting
        value: waiting
        brief: The container is waiting.
        stability: development
    brief: |
      The state of the container. [K8s ContainerState](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstate-v1-core)
    examples:
    - terminated
    - running
    - waiting
    requirement_level: recommended
    stability: development
  - name: k8s.container.status.reason
    type:
      members:
      - id: container_creating
        value: ContainerCreating
        brief: The container is being created.
        stability: development
      - id: crash_loop_back_off
        value: CrashLoopBackOff
        brief: The container is in a crash loop back off state.
        stability: development
      - id: create_container_config_error
        value: CreateContainerConfigError
        brief: There was an error creating the container configuration.
        stability: development
      - id: err_image_pull
        value: ErrImagePull
        brief: There was an error pulling the container image.
        stability: development
      - id: image_pull_back_off
        value: ImagePullBackOff
        brief: The container image pull is in back off state.
        stability: development
      - id: oom_killed
        value: OOMKilled
        brief: The container was killed due to out of memory.
        stability: development
      - id: completed
        value: Completed
        brief: The container has completed execution.
        stability: development
      - id: error
        value: Error
        brief: There was an error with the container.
        stability: development
      - id: container_cannot_run
        value: ContainerCannotRun
        brief: The container cannot run.
        stability: development
    brief: |
      The reason for the container state. Corresponds to the `reason` field of the: [K8s ContainerStateWaiting](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatewaiting-v1-core) or [K8s ContainerStateTerminated](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstateterminated-v1-core)
    examples:
    - ContainerCreating
    - CrashLoopBackOff
    - CreateContainerConfigError
    - ErrImagePull
    - ImagePullBackOff
    - OOMKilled
    - Completed
    - Error
    - ContainerCannotRun
    requirement_level: recommended
    stability: development
  - name: k8s.hugepage.size
    type: string
    brief: |
      The size (identifier) of the K8s huge page.
    examples:
    - 2Mi
    requirement_level: recommended
    stability: development
  - name: k8s.storageclass.name
    type: string
    brief: |
      The name of K8s [StorageClass](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io) object.
    examples:
    - gold.storageclass.storage.k8s.io
    requirement_level: recommended
    stability: development
  - name: k8s.resourcequota.resource_name
    type: string
    brief: |
      The name of the K8s resource a resource quota defines.
    examples:
    - count/replicationcontrollers
    requirement_level: recommended
    note: |
      The value for this attribute can be either the full `count/<resource>[.<group>]` string (e.g., count/deployments.apps, count/pods), or, for certain core Kubernetes resources, just the resource name (e.g., pods, services, configmaps). Both forms are supported by Kubernetes for object count quotas. See [Kubernetes Resource Quotas documentation](https://kubernetes.io/docs/concepts/policy/resource-quotas/#object-count-quota) for more details.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/registry.yaml
  display_name: Kubernetes Attributes
- id: registry.k8s.deprecated
  type: attribute_group
  brief: Describes deprecated k8s attributes.
  attributes:
  - name: k8s.pod.labels
    type: template[string]
    brief: Deprecated, use `k8s.pod.label` instead.
    examples:
    - my-app
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: k8s.pod.label
      note: Replaced by `k8s.pod.label`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/deprecated/registry-deprecated.yaml
  display_name: Deprecated Kubernetes Attributes
- id: metric.k8s.replication_controller.desired_pods
  type: metric
  brief: Deprecated, use `k8s.replicationcontroller.desired_pods` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: k8s.replicationcontroller.desired_pods
    note: Replaced by `k8s.replicationcontroller.desired_pods`.
  metric_name: k8s.replication_controller.desired_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.replication_controller.available_pods
  type: metric
  brief: Deprecated, use `k8s.replicationcontroller.available_pods` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: k8s.replicationcontroller.available_pods
    note: Replaced by `k8s.replicationcontroller.available_pods`.
  metric_name: k8s.replication_controller.available_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/deprecated/metrics-deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.error
  type: attribute_group
  brief: |
    This document defines the shared attributes used to report an error.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: error.message
    type: string
    brief: A message providing more detail about an error in human-readable form.
    examples:
    - 'Unexpected input type: string'
    - The user has exceeded their storage quota
    requirement_level: recommended
    note: |
      `error.message` should provide additional context and detail about an error.
      It is NOT RECOMMENDED to duplicate the value of `error.type` in `error.message`.
      It is also NOT RECOMMENDED to duplicate the value of `exception.message` in `error.message`.

      `error.message` is NOT RECOMMENDED for metrics or spans due to its unbounded cardinality and overlap with span status.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/error/registry.yaml
  display_name: Error Attributes
- id: registry.pprof
  type: attribute_group
  brief: |
    Attributes specific to pprof that help convert from pprof to Profiling signal.
  attributes:
  - name: pprof.mapping.has_functions
    type: boolean
    brief: |
      Indicates that there are functions related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.mapping.has_filenames
    type: boolean
    brief: |
      Indicates that there are filenames related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.mapping.has_line_numbers
    type: boolean
    brief: |
      Indicates that there are line numbers related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.mapping.has_inline_frames
    type: boolean
    brief: |
      Indicates that there are inline frames related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.location.is_folded
    type: boolean
    brief: |
      Provides an indication that multiple symbols map to this location's address, for example due to identical code folding by the linker. In that case the line information represents one of the multiple symbols. This field must be recomputed when the symbolization state of the profile changes.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/pprof/registry.yaml
  display_name: Pprof specific attributes for the Profiling signal
- id: pprof
  type: attribute_group
  brief: |
    Attributes specific to pprof that help convert from pprof to Profiling signal.
  attributes:
  - name: pprof.mapping.has_functions
    type: boolean
    brief: |
      Indicates that there are functions related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.mapping.has_filenames
    type: boolean
    brief: |
      Indicates that there are filenames related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.mapping.has_line_numbers
    type: boolean
    brief: |
      Indicates that there are line numbers related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.mapping.has_inline_frames
    type: boolean
    brief: |
      Indicates that there are inline frames related to this mapping.
    requirement_level: recommended
    stability: development
  - name: pprof.location.is_folded
    type: boolean
    brief: |
      Provides an indication that multiple symbols map to this location's address, for example due to identical code folding by the linker. In that case the line information represents one of the multiple symbols. This field must be recomputed when the symbolization state of the profile changes.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/pprof/common.yaml
    attributes:
      pprof.location.is_folded:
        source_group: registry.pprof
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      pprof.mapping.has_filenames:
        source_group: registry.pprof
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      pprof.mapping.has_functions:
        source_group: registry.pprof
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      pprof.mapping.has_inline_frames:
        source_group: registry.pprof
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      pprof.mapping.has_line_numbers:
        source_group: registry.pprof
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.service
  type: attribute_group
  brief: |
    A service instance.
  attributes:
  - name: service.name
    type: string
    brief: |
      Logical name of the service.
    examples:
    - shoppingcart
    requirement_level: recommended
    note: |
      MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.
    stability: stable
  - name: service.version
    type: string
    brief: |
      The version string of the service API or implementation. The format is not defined by these conventions.
    examples:
    - 2.0.0
    - a01dbef8a
    requirement_level: recommended
    stability: stable
  - name: service.namespace
    type: string
    brief: |
      A namespace for `service.name`.
    examples:
    - Shop
    requirement_level: recommended
    note: |
      A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
    stability: development
  - name: service.instance.id
    type: string
    brief: |
      The string ID of the service instance.
    examples:
    - 627cc493-f310-47de-96bd-71410b7dec09
    requirement_level: recommended
    note: |
      MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words
      `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to
      distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled
      service).

      Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC
      4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of
      this value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and
      SHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.

      UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is
      needed. Similar to what can be seen in the man page for the
      [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying
      data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it
      or not via another resource attribute.

      For applications running behind an application server (like unicorn), we do not recommend using one identifier
      for all processes participating in the application. Instead, it's recommended each division (e.g. a worker
      thread in unicorn) to have its own instance.id.

      It's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the
      service instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will
      likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.
      However, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance
      for that telemetry. This is typically the case for scraping receivers, as they know the target address and
      port.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/service/registry.yaml
  display_name: Service Attributes
- id: entity.service
  type: entity
  brief: |
    A service instance.
  stability: stable
  attributes:
  - name: service.name
    type: string
    brief: |
      Logical name of the service.
    examples:
    - shoppingcart
    requirement_level: required
    note: |
      MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.
    stability: stable
    role: identifying
  - name: service.version
    type: string
    brief: |
      The version string of the service API or implementation. The format is not defined by these conventions.
    examples:
    - 2.0.0
    - a01dbef8a
    requirement_level: recommended
    stability: stable
    role: descriptive
  - name: service.namespace
    type: string
    brief: |
      A namespace for `service.name`.
    examples:
    - Shop
    requirement_level: recommended
    note: |
      A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
    stability: development
    role: identifying
  - name: service.instance.id
    type: string
    brief: |
      The string ID of the service instance.
    examples:
    - 627cc493-f310-47de-96bd-71410b7dec09
    requirement_level: recommended
    note: |
      MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words
      `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to
      distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled
      service).

      Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC
      4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of
      this value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and
      SHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.

      UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is
      needed. Similar to what can be seen in the man page for the
      [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying
      data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it
      or not via another resource attribute.

      For applications running behind an application server (like unicorn), we do not recommend using one identifier
      for all processes participating in the application. Instead, it's recommended each division (e.g. a worker
      thread in unicorn) to have its own instance.id.

      It's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the
      service instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will
      likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.
      However, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance
      for that telemetry. This is typically the case for scraping receivers, as they know the target address and
      port.
    stability: development
    role: identifying
  name: service
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/service/entities.yaml
    attributes:
      service.instance.id:
        source_group: registry.service
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
      service.name:
        source_group: registry.service
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - role
      service.namespace:
        source_group: registry.service
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
      service.version:
        source_group: registry.service
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
- id: registry.go
  type: attribute_group
  brief: |
    This document defines Go related attributes.
  attributes:
  - name: go.memory.type
    type:
      members:
      - id: stack
        value: stack
        brief: Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.
        note: |
          Computed from `/memory/classes/heap/stacks:bytes`.
        stability: development
      - id: other
        value: other
        brief: Memory used by the Go runtime, excluding other categories of memory usage described in this enumeration.
        stability: development
    brief: The type of memory.
    examples:
    - other
    - stack
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/registry.yaml
  display_name: Go Attributes
- id: metric.go.memory.used
  type: metric
  brief: Memory used by the Go runtime.
  note: |
    Computed from `(/memory/classes/total:bytes - /memory/classes/heap/released:bytes)`.
  stability: development
  attributes:
  - name: go.memory.type
    type:
      members:
      - id: stack
        value: stack
        brief: Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.
        note: |
          Computed from `/memory/classes/heap/stacks:bytes`.
        stability: development
      - id: other
        value: other
        brief: Memory used by the Go runtime, excluding other categories of memory usage described in this enumeration.
        stability: development
    brief: The type of memory.
    examples:
    - other
    - stack
    requirement_level: recommended
    stability: development
  metric_name: go.memory.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
    attributes:
      go.memory.type:
        source_group: registry.go
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.memory.limit
  type: metric
  brief: Go runtime memory limit configured by the user, if a limit exists.
  note: |
    Computed from `/gc/gomemlimit:bytes`. This metric is excluded if the limit obtained from the Go runtime is math.MaxInt64.
  stability: development
  metric_name: go.memory.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.memory.allocated
  type: metric
  brief: Memory allocated to the heap by the application.
  note: |
    Computed from `/gc/heap/allocs:bytes`.
  stability: development
  metric_name: go.memory.allocated
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.memory.allocations
  type: metric
  brief: Count of allocations to the heap by the application.
  note: |
    Computed from `/gc/heap/allocs:objects`.
  stability: development
  metric_name: go.memory.allocations
  instrument: counter
  unit: '{allocation}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.memory.gc.goal
  type: metric
  brief: Heap size target for the end of the GC cycle.
  note: |
    Computed from `/gc/heap/goal:bytes`.
  stability: development
  metric_name: go.memory.gc.goal
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.goroutine.count
  type: metric
  brief: Count of live goroutines.
  note: |
    Computed from `/sched/goroutines:goroutines`.
  stability: development
  metric_name: go.goroutine.count
  instrument: updowncounter
  unit: '{goroutine}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.processor.limit
  type: metric
  brief: The number of OS threads that can execute user-level Go code simultaneously.
  note: |
    Computed from `/sched/gomaxprocs:threads`.
  stability: development
  metric_name: go.processor.limit
  instrument: updowncounter
  unit: '{thread}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.go.schedule.duration
  type: metric
  brief: The time goroutines have spent in the scheduler in a runnable state before actually running.
  note: |
    Computed from `/sched/latencies:seconds`. Bucket boundaries are provided by the runtime, and are subject to change.
  stability: development
  metric_name: go.schedule.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.go.config.gogc
  type: metric
  brief: Heap size target percentage configured by the user, otherwise 100.
  note: |
    The value range is [0.0,100.0]. Computed from `/gc/gogc:percent`.
  stability: development
  metric_name: go.config.gogc
  instrument: updowncounter
  unit: '%'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/go/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: registry.network
  type: attribute_group
  brief: |
    These attributes may be used for any network related operation.
  attributes:
  - name: network.carrier.icc
    type: string
    brief: The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.
    examples: DE
    requirement_level: recommended
    stability: development
  - name: network.carrier.mcc
    type: string
    brief: The mobile carrier country code.
    examples: '310'
    requirement_level: recommended
    stability: development
  - name: network.carrier.mnc
    type: string
    brief: The mobile carrier network code.
    examples: '001'
    requirement_level: recommended
    stability: development
  - name: network.carrier.name
    type: string
    brief: The name of the mobile carrier.
    examples: sprint
    requirement_level: recommended
    stability: development
  - name: network.connection.subtype
    type:
      members:
      - id: gprs
        value: gprs
        brief: GPRS
        stability: development
      - id: edge
        value: edge
        brief: EDGE
        stability: development
      - id: umts
        value: umts
        brief: UMTS
        stability: development
      - id: cdma
        value: cdma
        brief: CDMA
        stability: development
      - id: evdo_0
        value: evdo_0
        brief: EVDO Rel. 0
        stability: development
      - id: evdo_a
        value: evdo_a
        brief: EVDO Rev. A
        stability: development
      - id: cdma2000_1xrtt
        value: cdma2000_1xrtt
        brief: CDMA2000 1XRTT
        stability: development
      - id: hsdpa
        value: hsdpa
        brief: HSDPA
        stability: development
      - id: hsupa
        value: hsupa
        brief: HSUPA
        stability: development
      - id: hspa
        value: hspa
        brief: HSPA
        stability: development
      - id: iden
        value: iden
        brief: IDEN
        stability: development
      - id: evdo_b
        value: evdo_b
        brief: EVDO Rev. B
        stability: development
      - id: lte
        value: lte
        brief: LTE
        stability: development
      - id: ehrpd
        value: ehrpd
        brief: EHRPD
        stability: development
      - id: hspap
        value: hspap
        brief: HSPAP
        stability: development
      - id: gsm
        value: gsm
        brief: GSM
        stability: development
      - id: td_scdma
        value: td_scdma
        brief: TD-SCDMA
        stability: development
      - id: iwlan
        value: iwlan
        brief: IWLAN
        stability: development
      - id: nr
        value: nr
        brief: 5G NR (New Radio)
        stability: development
      - id: nrnsa
        value: nrnsa
        brief: 5G NRNSA (New Radio Non-Standalone)
        stability: development
      - id: lte_ca
        value: lte_ca
        brief: LTE CA
        stability: development
    brief: This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
    examples: LTE
    requirement_level: recommended
    stability: development
  - name: network.connection.type
    type:
      members:
      - id: wifi
        value: wifi
        stability: development
      - id: wired
        value: wired
        stability: development
      - id: cell
        value: cell
        stability: development
      - id: unavailable
        value: unavailable
        stability: development
      - id: unknown
        value: unknown
        stability: development
    brief: The internet connection type.
    examples: wifi
    requirement_level: recommended
    stability: development
  - name: network.local.address
    type: string
    brief: Local address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.local.port
    type: int
    brief: Local port number of the network connection.
    examples:
    - 65123
    requirement_level: recommended
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level: recommended
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - amqp
    - http
    - mqtt
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.1'
    - '2'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  - name: network.connection.state
    type:
      members:
      - id: closed
        value: closed
        stability: development
      - id: close_wait
        value: close_wait
        stability: development
      - id: closing
        value: closing
        stability: development
      - id: established
        value: established
        stability: development
      - id: fin_wait_1
        value: fin_wait_1
        stability: development
      - id: fin_wait_2
        value: fin_wait_2
        stability: development
      - id: last_ack
        value: last_ack
        stability: development
      - id: listen
        value: listen
        stability: development
      - id: syn_received
        value: syn_received
        stability: development
      - id: syn_sent
        value: syn_sent
        stability: development
      - id: time_wait
        value: time_wait
        stability: development
    brief: The state of network connection
    examples:
    - close_wait
    requirement_level: recommended
    note: Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/network/registry.yaml
  display_name: Network Attributes
- id: metric.cpu.time
  type: metric
  brief: Deprecated. Use `system.cpu.time` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: system.cpu.time
    note: Replaced by `system.cpu.time`.
  attributes:
  - name: cpu.logical_number
    type: int
    brief: The logical CPU number [0..n-1]
    examples:
    - 1
    requirement_level: recommended
    stability: development
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The mode of the CPU
    examples:
    - user
    - system
    requirement_level: recommended
    note: 'Following states SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`'
    stability: development
  metric_name: cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpu/deprecated.yaml
    attributes:
      cpu.logical_number:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.cpu.utilization
  type: metric
  brief: Deprecated. Use `system.cpu.utilization` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: system.cpu.utilization
    note: Replaced by `system.cpu.utilization`.
  attributes:
  - name: cpu.logical_number
    type: int
    brief: The logical CPU number [0..n-1]
    examples:
    - 1
    requirement_level: recommended
    stability: development
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The mode of the CPU
    examples:
    - user
    - system
    requirement_level: recommended
    note: 'Following states SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`'
    stability: development
  metric_name: cpu.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpu/deprecated.yaml
    attributes:
      cpu.logical_number:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.cpu.frequency
  type: metric
  brief: Deprecated. Use `system.cpu.frequency` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: system.cpu.frequency
    note: Replaced by `system.cpu.frequency`.
  metric_name: cpu.frequency
  instrument: gauge
  unit: '{Hz}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpu/deprecated.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.cpu
  type: attribute_group
  brief: Attributes specific to a cpu instance.
  attributes:
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The mode of the CPU
    examples:
    - user
    - system
    requirement_level: recommended
    stability: development
  - name: cpu.logical_number
    type: int
    brief: The logical CPU number [0..n-1]
    examples:
    - 1
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpu/registry.yaml
  display_name: CPU Attributes
- id: registry.ios
  type: attribute_group
  brief: |
    This group describes iOS-specific attributes.
  attributes:
  - name: ios.app.state
    type:
      members:
      - id: active
        value: active
        brief: |
          The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.
        stability: development
      - id: inactive
        value: inactive
        brief: |
          The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.
        stability: development
      - id: background
        value: background
        brief: |
          The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.
        stability: development
      - id: foreground
        value: foreground
        brief: |
          The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.
        stability: development
      - id: terminate
        value: terminate
        brief: |
          The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.
        stability: development
    brief: |
      This attribute represents the state of the application.
    requirement_level: recommended
    note: |
      The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate), and from which the `OS terminology` column values are derived.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/ios/registry.yaml
  display_name: iOS Attributes
- id: registry.disk
  type: attribute_group
  brief: |
    These attributes may be used for any disk related operation.
  attributes:
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/disk/registry.yaml
  display_name: Disk Attributes
- id: registry.heroku
  type: attribute_group
  brief: |
    This document defines attributes for the Heroku platform on which application/s are running.
  attributes:
  - name: heroku.release.creation_timestamp
    type: string
    brief: |
      Time and date the release was created
    examples:
    - 2022-10-23T18:00:42Z
    requirement_level: recommended
    stability: development
  - name: heroku.release.commit
    type: string
    brief: |
      Commit hash for the current release
    examples:
    - e6134959463efd8966b20e75b913cafe3f5ec
    requirement_level: recommended
    stability: development
  - name: heroku.app.id
    type: string
    brief: |
      Unique identifier for the application
    examples:
    - 2daa2797-e42b-4624-9322-ec3f968df4da
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/heroku/registry.yaml
  display_name: Heroku Attributes
- id: entity.heroku
  type: entity
  brief: |
    [Heroku dyno metadata](https://devcenter.heroku.com/articles/dyno-metadata)
  stability: development
  attributes:
  - name: heroku.release.creation_timestamp
    type: string
    brief: |
      Time and date the release was created
    examples:
    - 2022-10-23T18:00:42Z
    requirement_level: opt_in
    stability: development
  - name: heroku.release.commit
    type: string
    brief: |
      Commit hash for the current release
    examples:
    - e6134959463efd8966b20e75b913cafe3f5ec
    requirement_level: opt_in
    stability: development
  - name: heroku.app.id
    type: string
    brief: |
      Unique identifier for the application
    examples:
    - 2daa2797-e42b-4624-9322-ec3f968df4da
    requirement_level: opt_in
    stability: development
  name: heroku
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/heroku/entities.yaml
    attributes:
      heroku.app.id:
        source_group: registry.heroku
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      heroku.release.commit:
        source_group: registry.heroku
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      heroku.release.creation_timestamp:
        source_group: registry.heroku
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.elasticsearch
  type: attribute_group
  brief: |
    This section defines attributes for Elasticsearch.
  attributes:
  - name: elasticsearch.node.name
    type: string
    brief: |
      Represents the human-readable identifier of the node/instance to which a request was routed.
    examples:
    - instance-0000000001
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/elasticsearch/registry.yaml
  display_name: Elasticsearch Attributes
- id: registry.tls
  type: attribute_group
  brief: This document defines semantic convention attributes in the TLS namespace.
  attributes:
  - name: tls.cipher
    type: string
    brief: |
      String indicating the [cipher](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5) used during the current connection.
    examples:
    - TLS_RSA_WITH_3DES_EDE_CBC_SHA
    - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    requirement_level: recommended
    note: |
      The values allowed for `tls.cipher` MUST be one of the `Descriptions` of the [registered TLS Cipher Suits](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4).
    stability: development
  - name: tls.client.certificate
    type: string
    brief: |
      PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.
    examples:
    - MII...
    requirement_level: recommended
    stability: development
  - name: tls.client.certificate_chain
    type: string[]
    brief: |
      Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.
    examples:
    - - MII...
      - MI...
    requirement_level: recommended
    stability: development
  - name: tls.client.hash.md5
    type: string
    brief: |
      Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
    examples:
    - 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
    requirement_level: recommended
    stability: development
  - name: tls.client.hash.sha1
    type: string
    brief: |
      Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
    examples:
    - 9E393D93138888D288266C2D915214D1D1CCEB2A
    requirement_level: recommended
    stability: development
  - name: tls.client.hash.sha256
    type: string
    brief: |
      Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
    examples:
    - 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
    requirement_level: recommended
    stability: development
  - name: tls.client.issuer
    type: string
    brief: Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.
    examples:
    - CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
    requirement_level: recommended
    stability: development
  - name: tls.client.ja3
    type: string
    brief: A hash that identifies clients based on how they perform an SSL/TLS handshake.
    examples:
    - d4e5b18d6b55c71272893221c96ba240
    requirement_level: recommended
    stability: development
  - name: tls.client.not_after
    type: string
    brief: Date/Time indicating when client certificate is no longer considered valid.
    examples:
    - 2021-01-01T00:00:00.000Z
    requirement_level: recommended
    stability: development
  - name: tls.client.not_before
    type: string
    brief: Date/Time indicating when client certificate is first considered valid.
    examples:
    - 1970-01-01T00:00:00.000Z
    requirement_level: recommended
    stability: development
  - name: tls.client.subject
    type: string
    brief: Distinguished name of subject of the x.509 certificate presented by the client.
    examples:
    - CN=myclient, OU=Documentation Team, DC=example, DC=com
    requirement_level: recommended
    stability: development
  - name: tls.client.supported_ciphers
    type: string[]
    brief: Array of ciphers offered by the client during the client hello.
    examples:
    - - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    requirement_level: recommended
    stability: development
  - name: tls.curve
    type: string
    brief: String indicating the curve used for the given cipher, when applicable
    examples:
    - secp256r1
    requirement_level: recommended
    stability: development
  - name: tls.established
    type: boolean
    brief: Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
    examples:
    - true
    requirement_level: recommended
    stability: development
  - name: tls.next_protocol
    type: string
    brief: |
      String indicating the protocol being tunneled. Per the values in the [IANA registry](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.
    examples:
    - http/1.1
    requirement_level: recommended
    stability: development
  - name: tls.protocol.name
    type:
      members:
      - id: ssl
        value: ssl
        stability: development
      - id: tls
        value: tls
        stability: development
    brief: |
      Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    requirement_level: recommended
    stability: development
  - name: tls.protocol.version
    type: string
    brief: |
      Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values)
    examples:
    - '1.2'
    - '3'
    requirement_level: recommended
    stability: development
  - name: tls.resumed
    type: boolean
    brief: Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
    examples:
    - true
    requirement_level: recommended
    stability: development
  - name: tls.server.certificate
    type: string
    brief: |
      PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.
    examples:
    - MII...
    requirement_level: recommended
    stability: development
  - name: tls.server.certificate_chain
    type: string[]
    brief: |
      Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.
    examples:
    - - MII...
      - MI...
    requirement_level: recommended
    stability: development
  - name: tls.server.hash.md5
    type: string
    brief: |
      Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
    examples:
    - 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
    requirement_level: recommended
    stability: development
  - name: tls.server.hash.sha1
    type: string
    brief: |
      Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
    examples:
    - 9E393D93138888D288266C2D915214D1D1CCEB2A
    requirement_level: recommended
    stability: development
  - name: tls.server.hash.sha256
    type: string
    brief: |
      Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
    examples:
    - 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
    requirement_level: recommended
    stability: development
  - name: tls.server.issuer
    type: string
    brief: Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.
    examples:
    - CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
    requirement_level: recommended
    stability: development
  - name: tls.server.ja3s
    type: string
    brief: A hash that identifies servers based on how they perform an SSL/TLS handshake.
    examples:
    - d4e5b18d6b55c71272893221c96ba240
    requirement_level: recommended
    stability: development
  - name: tls.server.not_after
    type: string
    brief: Date/Time indicating when server certificate is no longer considered valid.
    examples:
    - 2021-01-01T00:00:00.000Z
    requirement_level: recommended
    stability: development
  - name: tls.server.not_before
    type: string
    brief: Date/Time indicating when server certificate is first considered valid.
    examples:
    - 1970-01-01T00:00:00.000Z
    requirement_level: recommended
    stability: development
  - name: tls.server.subject
    type: string
    brief: Distinguished name of subject of the x.509 certificate presented by the server.
    examples:
    - CN=myserver, OU=Documentation Team, DC=example, DC=com
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/tls/registry.yaml
  display_name: TLS Attributes
- id: url
  type: attribute_group
  brief: Attributes describing URL.
  attributes:
  - name: url.fragment
    type: string
    brief: |
      The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component
    examples:
    - SemConv
    requirement_level: recommended
    stability: stable
  - name: url.path
    type: string
    brief: |
      The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component
    examples:
    - /search
    requirement_level: recommended
    note: |
      Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - https
    - ftp
    - telnet
    requirement_level: recommended
    stability: stable
  - name: url.full
    type: string
    brief: Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)
    examples:
    - https://www.foo.bar/search?q=OpenTelemetry#SemConv
    - //localhost
    tag: sensitive-information
    requirement_level: recommended
    note: |
      For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment
      is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.

      `url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.
      In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.

      `url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).

      Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the
      value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `https://www.example.com/path?color=blue&sig=REDACTED`.
    stability: stable
  - name: url.query
    type: string
    brief: |
      The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component
    examples:
    - q=OpenTelemetry
    tag: sensitive-information
    requirement_level: recommended
    note: |
      Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `q=OpenTelemetry&sig=REDACTED`.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/url/common.yaml
    attributes:
      url.fragment:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      url.full:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - tag
      url.path:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      url.query:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - tag
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.messaging
  type: attribute_group
  brief: Attributes describing telemetry around messaging systems and messaging activities.
  stability: development
  attributes:
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level: recommended
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.client.id
    type: string
    brief: |
      A unique identifier for the client that consumes or produces a message.
    examples:
    - client-5
    - myhost@8742@s8083jm
    requirement_level: recommended
    stability: development
  - name: messaging.consumer.group.name
    type: string
    brief: |
      The name of the consumer group with which a consumer is associated.
    examples:
    - my-group
    - indexer
    requirement_level: recommended
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level: recommended
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: The name of the destination subscription from which a message is consumed.
    examples:
    - subscription-a
    requirement_level: recommended
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level: recommended
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.destination.anonymous
    type: boolean
    brief: A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
    requirement_level: recommended
    stability: development
  - name: messaging.destination.temporary
    type: boolean
    brief: A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
    requirement_level: recommended
    stability: development
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: messaging.message.conversation_id
    type: string
    brief: |
      The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".
    examples: MyConversationId
    requirement_level: recommended
    stability: development
  - name: messaging.message.envelope.size
    type: int
    brief: |
      The size of the message body and metadata in bytes.
    examples: 2738
    requirement_level: recommended
    note: |
      This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed
      size should be used.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level: recommended
    stability: development
  - name: messaging.message.body.size
    type: int
    brief: |
      The size of the message body in bytes.
    examples: 1439
    requirement_level: recommended
    note: |
      This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
      body size should be used.
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level: recommended
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: recommended
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: recommended
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: General Messaging Attributes
- id: registry.messaging.kafka
  type: attribute_group
  brief: |
    This group describes attributes specific to Apache Kafka.
  attributes:
  - name: messaging.kafka.message.key
    type: string
    brief: |
      Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.
    examples: myKey
    requirement_level: recommended
    note: |
      If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.
    stability: development
  - name: messaging.kafka.offset
    type: int
    brief: |
      The offset of a record in the corresponding Kafka partition.
    examples: 42
    requirement_level: recommended
    stability: development
  - name: messaging.kafka.message.tombstone
    type: boolean
    brief: A boolean that is true if the message is a tombstone.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: Kafka Attributes
- id: registry.messaging.rabbitmq
  type: attribute_group
  brief: |
    This group describes attributes specific to RabbitMQ.
  attributes:
  - name: messaging.rabbitmq.destination.routing_key
    type: string
    brief: |
      RabbitMQ message routing key.
    examples: myKey
    requirement_level: recommended
    stability: development
  - name: messaging.rabbitmq.message.delivery_tag
    type: int
    brief: |
      RabbitMQ message delivery tag
    examples: 123
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: RabbitMQ Attributes
- id: registry.messaging.rocketmq
  type: attribute_group
  brief: |
    This group describes attributes specific to RocketMQ.
  attributes:
  - name: messaging.rocketmq.consumption_model
    type:
      members:
      - id: clustering
        value: clustering
        brief: Clustering consumption model
        stability: development
      - id: broadcasting
        value: broadcasting
        brief: Broadcasting consumption model
        stability: development
    brief: |
      Model of message consumption. This only applies to consumer spans.
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.delay_time_level
    type: int
    brief: |
      The delay time level for delay message, which determines the message delay time.
    examples: 3
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.delivery_timestamp
    type: int
    brief: |
      The timestamp in milliseconds that the delay message is expected to be delivered to consumer.
    examples: 1665987217045
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.group
    type: string
    brief: |
      It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.
    examples: myMessageGroup
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.keys
    type: string[]
    brief: |
      Key(s) of message, another way to mark message besides message id.
    examples:
    - - keyA
      - keyB
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.tag
    type: string
    brief: |
      The secondary classifier of message besides topic.
    examples: tagA
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.type
    type:
      members:
      - id: normal
        value: normal
        brief: Normal message
        stability: development
      - id: fifo
        value: fifo
        brief: FIFO message
        stability: development
      - id: delay
        value: delay
        brief: Delay message
        stability: development
      - id: transaction
        value: transaction
        brief: Transaction message
        stability: development
    brief: |
      Type of message.
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.namespace
    type: string
    brief: |
      Namespace of RocketMQ resources, resources in different namespaces are individual.
    examples: myNamespace
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: RocketMQ Attributes
- id: registry.messaging.gcp_pubsub
  type: attribute_group
  brief: |
    This group describes attributes specific to GCP Pub/Sub.
  attributes:
  - name: messaging.gcp_pubsub.message.ordering_key
    type: string
    brief: |
      The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.
    examples: ordering_key
    requirement_level: recommended
    stability: development
  - name: messaging.gcp_pubsub.message.ack_id
    type: string
    brief: |
      The ack id for a given message.
    examples: ack_id
    requirement_level: recommended
    stability: development
  - name: messaging.gcp_pubsub.message.ack_deadline
    type: int
    brief: |
      The ack deadline in seconds set for the modify ack deadline request.
    examples: 10
    requirement_level: recommended
    stability: development
  - name: messaging.gcp_pubsub.message.delivery_attempt
    type: int
    brief: |
      The delivery attempt for a given message.
    examples: 2
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: GCP Pub/Sub Attributes
- id: registry.messaging.servicebus
  type: attribute_group
  brief: |
    This group describes attributes specific to Azure Service Bus.
  attributes:
  - name: messaging.servicebus.message.delivery_count
    type: int
    brief: |
      Number of deliveries that have been attempted for this message.
    examples: 2
    requirement_level: recommended
    stability: development
  - name: messaging.servicebus.message.enqueued_time
    type: int
    brief: |
      The UTC epoch seconds at which the message has been accepted and stored in the entity.
    examples: 1701393730
    requirement_level: recommended
    stability: development
  - name: messaging.servicebus.disposition_status
    type:
      members:
      - id: complete
        value: complete
        brief: Message is completed
        stability: development
      - id: abandon
        value: abandon
        brief: Message is abandoned
        stability: development
      - id: dead_letter
        value: dead_letter
        brief: Message is sent to dead letter queue
        stability: development
      - id: defer
        value: defer
        brief: Message is deferred
        stability: development
    brief: |
      Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: Azure Service Bus Attributes
- id: registry.messaging.eventhubs
  type: attribute_group
  brief: |
    This group describes attributes specific to Azure Event Hubs.
  attributes:
  - name: messaging.eventhubs.message.enqueued_time
    type: int
    brief: |
      The UTC epoch seconds at which the message has been accepted and stored in the entity.
    examples: 1701393730
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/registry.yaml
  display_name: Azure Event Hubs Attributes
- id: attributes.messaging.trace.minimal
  type: attribute_group
  brief: |
    Defines minimal set of attributes used by all messaging systems.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.attributes
  type: attribute_group
  brief: |
    Defines a full set of attributes used in messaging systems.
  stability: development
  attributes:
  - name: messaging.client.id
    type: string
    brief: |
      A unique identifier for the client that consumes or produces a message.
    examples:
    - client-5
    - myhost@8742@s8083jm
    requirement_level: recommended
    stability: development
  - name: messaging.message.conversation_id
    type: string
    brief: |
      The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".
    examples: MyConversationId
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level:
      conditionally_required: If the span describes an operation on a batch of messages.
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.consumer.group.name
    type: string
    brief: |
      The name of the consumer group with which a consumer is associated.
    examples:
    - my-group
    - indexer
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.anonymous
    type: boolean
    brief: A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
    requirement_level:
      conditionally_required: If value is `true`. When missing, the value is assumed to be `false`.
    stability: development
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level:
      recommended: When applicable.
    sampling_relevant: true
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: The name of the destination subscription from which a message is consumed.
    examples:
    - subscription-a
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: |
        If available. Instrumentations MUST NOT use `messaging.destination.name` as template unless low-cardinality of destination name is guaranteed.
    sampling_relevant: true
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.destination.temporary
    type: boolean
    brief: A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
    requirement_level:
      conditionally_required: If value is `true`. When missing, the value is assumed to be `false`.
    stability: development
  - name: messaging.message.body.size
    type: int
    brief: |
      The size of the message body in bytes.
    examples: 1439
    requirement_level: opt_in
    note: |
      This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
      body size should be used.
    stability: development
  - name: messaging.message.envelope.size
    type: int
    brief: |
      The size of the message body and metadata in bytes.
    examples: 2738
    requirement_level: opt_in
    note: |
      This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed
      size should be used.
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    sampling_relevant: true
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: network.peer.address
    type: string
    brief: Peer address of the messaging intermediary node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: If applicable for this messaging system.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `network.peer.*` attributes are applicable.
      Network peer address and port are important when the application interacts with individual intermediary nodes directly,
      If a messaging operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port of the messaging intermediary node where the operation was performed.
    examples:
    - 65123
    requirement_level:
      recommended: if and only if `network.peer.address` is set.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.batch.message_count:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.client.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.anonymous:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.temporary:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.body.size:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.conversation_id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.message.envelope.size:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.network.attributes
  type: attribute_group
  brief: Attributes that describe messaging operation along with network information.
  stability: development
  attributes:
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level: recommended
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.rabbitmq
  type: attribute_group
  brief: |
    Attributes for RabbitMQ
  stability: development
  attributes:
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level: recommended
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.message.body.size
    type: int
    brief: |
      The size of the message body in bytes.
    examples: 1439
    requirement_level: opt_in
    note: |
      This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
      body size should be used.
    stability: development
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - direct_logs:warning
    - logs
    requirement_level: required
    sampling_relevant: true
    note: |
      In RabbitMQ, the destination is defined by an *exchange*, a *routing key* and for consumers, a *queue*.

      `messaging.destination.name` SHOULD be set to:

      - **On the producer side**: `{exchange}:{routing key}` when both values are present and non-empty.
      When only one is available, only that value SHOULD be used. E.g., `{exchange}` or `{routing key}`.
      Otherwise: `amq.default` when the default exchange is used and no routing key is provided

      - **On the consumer side**: `{exchange}:{routing key}:{queue}` when all values are present and non-empty.
      If any has an empty value (e.g., the default exchange is used) it SHOULD be omitted.
      For cases when `{routing key}` and `{queue}` are equal, only one of them SHOULD
      be used, e.g., `{exchange}:{routing key}`.
    stability: development
  - name: messaging.message.conversation_id
    type: string
    brief: |
      Message [correlation Id](https://www.rabbitmq.com/tutorials/tutorial-six-java#correlation-id) property.
    examples: MyConversationId
    requirement_level: recommended
    stability: development
  - name: messaging.rabbitmq.destination.routing_key
    type: string
    brief: |
      RabbitMQ message routing key.
    examples: myKey
    requirement_level:
      conditionally_required: If not empty.
    stability: development
  - name: messaging.rabbitmq.message.delivery_tag
    type: int
    brief: |
      RabbitMQ message delivery tag
    examples: 123
    requirement_level:
      conditionally_required: When available.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
        - sampling_relevant
      messaging.message.body.size:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.conversation_id:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.rabbitmq.destination.routing_key:
        source_group: registry.messaging.rabbitmq
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.rabbitmq.message.delivery_tag:
        source_group: registry.messaging.rabbitmq
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.kafka
  type: attribute_group
  brief: |
    Attributes for Apache Kafka
  stability: development
  attributes:
  - name: messaging.client.id
    type: string
    brief: |
      A unique identifier for the client that consumes or produces a message.
    examples:
    - client-5
    - myhost@8742@s8083jm
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level:
      conditionally_required: If the span describes an operation on a batch of messages.
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.consumer.group.name
    type: string
    brief: Kafka [consumer group id](https://docs.confluent.io/platform/current/clients/consumer.html).
    examples:
    - my-group
    - indexer
    requirement_level: recommended
    sampling_relevant: true
    stability: development
  - name: messaging.destination.partition.id
    type: string
    brief: |
      String representation of the partition id the message (or batch) is sent to or received from.
    examples: '1'
    requirement_level: recommended
    sampling_relevant: true
    stability: development
  - name: messaging.kafka.message.key
    type: string
    brief: |
      Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.
    examples: myKey
    requirement_level:
      recommended: If span describes operation on a single message.
    note: |
      If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.
    stability: development
  - name: messaging.kafka.message.tombstone
    type: boolean
    brief: A boolean that is true if the message is a tombstone.
    requirement_level:
      conditionally_required: If value is `true`. When missing, the value is assumed to be `false`.
    stability: development
  - name: messaging.kafka.offset
    type: int
    brief: |
      The offset of a record in the corresponding Kafka partition.
    examples: 42
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.message.body.size
    type: int
    brief: The size of the message body in bytes. Only applicable for spans describing single message operations.
    examples: 1439
    requirement_level: opt_in
    note: |
      This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
      body size should be used.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.batch.message_count:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.client.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
        - sampling_relevant
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
        - sampling_relevant
      messaging.kafka.message.key:
        source_group: registry.messaging.kafka
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.kafka.message.tombstone:
        source_group: registry.messaging.kafka
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.kafka.offset:
        source_group: registry.messaging.kafka
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.body.size:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.rocketmq
  type: attribute_group
  brief: |
    Attributes for Apache RocketMQ
  stability: development
  attributes:
  - name: messaging.client.id
    type: string
    brief: |
      A unique identifier for the client that consumes or produces a message.
    examples:
    - client-5
    - myhost@8742@s8083jm
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.consumption_model
    type:
      members:
      - id: clustering
        value: clustering
        brief: Clustering consumption model
        stability: development
      - id: broadcasting
        value: broadcasting
        brief: Broadcasting consumption model
        stability: development
    brief: |
      Model of message consumption. This only applies to consumer spans.
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.keys
    type: string[]
    brief: |
      Key(s) of message, another way to mark message besides message id.
    examples:
    - - keyA
      - keyB
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.tag
    type: string
    brief: |
      The secondary classifier of message besides topic.
    examples: tagA
    requirement_level: recommended
    stability: development
  - name: messaging.rocketmq.message.type
    type:
      members:
      - id: normal
        value: normal
        brief: Normal message
        stability: development
      - id: fifo
        value: fifo
        brief: FIFO message
        stability: development
      - id: delay
        value: delay
        brief: Delay message
        stability: development
      - id: transaction
        value: transaction
        brief: Transaction message
        stability: development
    brief: |
      Type of message.
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level:
      conditionally_required: If the span describes an operation on a batch of messages.
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.message.body.size
    type: int
    brief: |
      The size of the message body in bytes.
    examples: 1439
    requirement_level: opt_in
    note: |
      This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
      body size should be used.
    stability: development
  - name: messaging.consumer.group.name
    type: string
    brief: RocketMQ [consumer group name](https://rocketmq.apache.org/docs/domainModel/07consumergroup).
    examples:
    - my-group
    - indexer
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.rocketmq.message.delay_time_level
    type: int
    brief: |
      The delay time level for delay message, which determines the message delay time.
    examples: 3
    requirement_level:
      conditionally_required: If the message type is delay and delivery timestamp is not specified.
    stability: development
  - name: messaging.rocketmq.message.delivery_timestamp
    type: int
    brief: |
      The timestamp in milliseconds that the delay message is expected to be delivered to consumer.
    examples: 1665987217045
    requirement_level:
      conditionally_required: If the message type is delay and delay time level is not specified.
    stability: development
  - name: messaging.rocketmq.message.group
    type: string
    brief: |
      It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.
    examples: myMessageGroup
    requirement_level:
      conditionally_required: If the message type is FIFO.
    stability: development
  - name: messaging.rocketmq.namespace
    type: string
    brief: |
      Namespace of RocketMQ resources, resources in different namespaces are individual.
    examples: myNamespace
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.batch.message_count:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.client.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.message.body.size:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.rocketmq.consumption_model:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      messaging.rocketmq.message.delay_time_level:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.rocketmq.message.delivery_timestamp:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.rocketmq.message.group:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.rocketmq.message.keys:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.rocketmq.message.tag:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.rocketmq.message.type:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      messaging.rocketmq.namespace:
        source_group: registry.messaging.rocketmq
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.gcp_pubsub
  type: attribute_group
  brief: |
    Attributes for Google Cloud Pub/Sub
  stability: development
  attributes:
  - name: messaging.gcp_pubsub.message.ack_id
    type: string
    brief: |
      The ack id for a given message.
    examples: ack_id
    requirement_level: recommended
    stability: development
  - name: messaging.gcp_pubsub.message.ack_deadline
    type: int
    brief: |
      The ack deadline in seconds set for the modify ack deadline request.
    examples: 10
    requirement_level: recommended
    stability: development
  - name: messaging.gcp_pubsub.message.delivery_attempt
    type: int
    brief: |
      The delivery attempt for a given message.
    examples: 2
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level:
      conditionally_required: If the span describes an operation on a batch of messages.
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: Google Pub/Sub [subscription name](https://cloud.google.com/pubsub/docs/subscription-overview).
    examples:
    - subscription-a
    requirement_level: recommended
    sampling_relevant: true
    stability: development
  - name: messaging.gcp_pubsub.message.ordering_key
    type: string
    brief: |
      The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.
    examples: ordering_key
    requirement_level:
      conditionally_required: If the message type has an ordering key set.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    note: |
      The `messaging.operation.name` has the following list of well-known values in the context of Google Pub/Sub.
      If one of them applies, then the respective value MUST be used; otherwise, a custom value MAY be used.

      - `ack` and `nack` for settlement operations
      - `send` for publishing operations
      - `modack` for extending the lease for a single message or batch of messages
      - `subscribe` for operations that represent the time from after the message was received to when the message is acknowledged, negatively acknowledged, or expired.
      - `create` and `receive` for [common messaging operations](/docs/messaging/messaging-spans.md#operation-types)
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.batch.message_count:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
        - sampling_relevant
      messaging.gcp_pubsub.message.ack_deadline:
        source_group: registry.messaging.gcp_pubsub
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.gcp_pubsub.message.ack_id:
        source_group: registry.messaging.gcp_pubsub
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.gcp_pubsub.message.delivery_attempt:
        source_group: registry.messaging.gcp_pubsub
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.gcp_pubsub.message.ordering_key:
        source_group: registry.messaging.gcp_pubsub
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.servicebus
  type: attribute_group
  brief: |
    Attributes for Azure Service Bus
  stability: development
  attributes:
  - name: messaging.servicebus.message.enqueued_time
    type: int
    brief: |
      The UTC epoch seconds at which the message has been accepted and stored in the entity.
    examples: 1701393730
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level:
      conditionally_required: If the span describes an operation on a batch of messages.
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: Azure Service Bus [subscription name](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions).
    examples:
    - subscription-a
    requirement_level:
      conditionally_required: If messages are received from the subscription.
    sampling_relevant: true
    stability: development
  - name: messaging.message.conversation_id
    type: string
    brief: Message [correlation Id](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads#message-routing-and-correlation) property.
    examples: MyConversationId
    requirement_level: recommended
    stability: development
  - name: messaging.operation.name
    type: string
    brief: Azure Service Bus operation name.
    examples:
    - send
    - receive
    - complete
    - process
    - peek
    requirement_level: required
    sampling_relevant: true
    note: |
      The operation name SHOULD match one of the following values:

      - sender operations: `send`, `schedule`, `cancel_scheduled`
      - transaction operations: `create_transaction`, `commit_transaction`, `rollback_transaction`
      - receiver operation: `receive`, `peek`, `receive_deferred`, `renew_message_lock`
      - settlement operations: `abandon`, `complete`, `defer`, `dead_letter`, `delete`
      - session operations: `accept_session`, `get_session_state`, `set_session_state`, `renew_session_lock`

      If none of the above operation names apply, the attribute SHOULD be set
      to the name of the client method in snake_case.
    stability: development
  - name: messaging.servicebus.disposition_status
    type:
      members:
      - id: complete
        value: complete
        brief: Message is completed
        stability: development
      - id: abandon
        value: abandon
        brief: Message is abandoned
        stability: development
      - id: dead_letter
        value: dead_letter
        brief: Message is sent to dead letter queue
        stability: development
      - id: defer
        value: defer
        brief: Message is deferred
        stability: development
    brief: |
      Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).
    requirement_level:
      conditionally_required: if and only if `messaging.operation` is `settle`.
    stability: development
  - name: messaging.servicebus.message.delivery_count
    type: int
    brief: |
      Number of deliveries that have been attempted for this message.
    examples: 2
    requirement_level:
      conditionally_required: If delivery count is available and is bigger than 0.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.batch.message_count:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      messaging.message.conversation_id:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.servicebus.disposition_status:
        source_group: registry.messaging.servicebus
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.servicebus.message.delivery_count:
        source_group: registry.messaging.servicebus
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.servicebus.message.enqueued_time:
        source_group: registry.messaging.servicebus
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.eventhubs
  type: attribute_group
  brief: |
    Attributes for Azure Event Hubs
  stability: development
  attributes:
  - name: messaging.eventhubs.message.enqueued_time
    type: int
    brief: |
      The UTC epoch seconds at which the message has been accepted and stored in the entity.
    examples: 1701393730
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: messaging.batch.message_count
    type: int
    brief: The number of messages sent, received, or processed in the scope of the batching operation.
    examples:
    - 0
    - 1
    - 2
    requirement_level:
      conditionally_required: If the span describes an operation on a batch of messages.
    note: |
      Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    stability: development
  - name: messaging.consumer.group.name
    type: string
    brief: Azure Event Hubs [consumer group name](https://learn.microsoft.com/azure/event-hubs/event-hubs-features#consumer-groups).
    examples:
    - my-group
    - indexer
    requirement_level:
      conditionally_required: On consumer spans.
    sampling_relevant: true
    stability: development
  - name: messaging.destination.partition.id
    type: string
    brief: |
      String representation of the partition id messages are sent to or received from, unique within the Event Hub.
    examples: '1'
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    stability: development
  - name: messaging.operation.name
    type: string
    brief: Azure Event Hubs operation name.
    examples:
    - send
    - receive
    - checkpoint
    requirement_level: required
    sampling_relevant: true
    note: |
      The operation name SHOULD match one of the following values:

      - `send`
      - `receive`
      - `process`
      - `checkpoint`
      - `get_partition_properties`
      - `get_event_hub_properties`

      If none of the above operation names apply, the attribute SHOULD be set
      to the name of the client method in snake_case.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.batch.message_count:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
        - sampling_relevant
      messaging.eventhubs.message.enqueued_time:
        source_group: registry.messaging.eventhubs
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.aws.sqs
  type: attribute_group
  brief: Attributes that exist for SQS request types.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.sqs.queue.url
    type: string
    brief: |
      The URL of the AWS SQS Queue. It's a unique identifier for a queue in Amazon Simple Queue Service (SQS) and is used to access the queue and perform actions on it.
    examples:
    - https://sqs.us-east-1.amazonaws.com/123456789012/MyQueue
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.sqs.queue.url:
        source_group: registry.aws.sqs
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: messaging.aws.sns
  type: attribute_group
  brief: Attributes that exist for SNS request types.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.sns.topic.arn
    type: string
    brief: |
      The ARN of the AWS SNS Topic. An Amazon SNS [topic](https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html) is a logical access point that acts as a communication channel.
    examples:
    - arn:aws:sns:us-east-1:123456789012:mystack-mytopic-NZJ5JSMVGFIE
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: If span describes operation on a single message or if the value applies to all messages in the batch.
    sampling_relevant: true
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.message.id
    type: string
    brief: A value used by the messaging system as an identifier for the message, represented as a string.
    examples: 452a7c7c7c7048c2f887f61572b18fc2
    requirement_level:
      recommended: If span describes operation on a single message.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/spans.yaml
    attributes:
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.sns.topic.arn:
        source_group: registry.aws.sns
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.message.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
- id: attributes.http.common
  type: attribute_group
  brief: Describes HTTP attributes.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/common.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
- id: attributes.http.client
  type: attribute_group
  brief: HTTP Client attributes
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level: opt_in
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/common.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
- id: attributes.http.server
  type: attribute_group
  brief: HTTP Server attributes
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: If and only if it's available
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    note: |
      The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If available and `server.address` is set.
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/common.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
- id: registry.http.deprecated
  type: attribute_group
  brief: Describes deprecated HTTP attributes.
  attributes:
  - name: http.method
    type: string
    brief: Deprecated, use `http.request.method` instead.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: http.request.method
      note: Replaced by `http.request.method`.
  - name: http.status_code
    type: int
    brief: Deprecated, use `http.response.status_code` instead.
    examples:
    - 200
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: http.response.status_code
      note: Replaced by `http.response.status_code`.
  - name: http.scheme
    type: string
    brief: Deprecated, use `url.scheme` instead.
    examples:
    - http
    - https
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: url.scheme
      note: Replaced by `url.scheme`.
  - name: http.url
    type: string
    brief: Deprecated, use `url.full` instead.
    examples:
    - https://www.foo.bar/search?q=OpenTelemetry#SemConv
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: url.full
      note: Replaced by `url.full`.
  - name: http.target
    type: string
    brief: Deprecated, use `url.path` and `url.query` instead.
    examples:
    - /search?q=OpenTelemetry#SemConv
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Split to `url.path` and `url.query`.
  - name: http.request_content_length
    type: int
    brief: Deprecated, use `http.request.header.content-length` instead.
    examples: 3495
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Replaced by `http.request.header.content-length`.
  - name: http.response_content_length
    type: int
    brief: Deprecated, use `http.response.header.content-length` instead.
    examples: 3495
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Replaced by `http.response.header.content-length`.
  - name: http.client_ip
    type: string
    brief: Deprecated, use `client.address` instead.
    examples: 83.164.160.102
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: client.address
      note: Replaced by `client.address`.
  - name: http.host
    type: string
    brief: Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.
    examples:
    - www.example.org
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: |
        Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage.
  - name: http.request_content_length_uncompressed
    type: int
    brief: Deprecated, use `http.request.body.size` instead.
    examples: 5493
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: http.request.body.size
      note: Replaced by `http.request.body.size`.
  - name: http.response_content_length_uncompressed
    type: int
    brief: Deprecated, use `http.response.body.size` instead.
    examples: 5493
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: http.response.body.size
      note: Replaced by `http.response.body.size`.
  - name: http.server_name
    type: string
    brief: Deprecated, use `server.address` instead.
    examples:
    - example.com
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: server.address
      note: Replaced by `server.address`.
  - name: http.flavor
    type:
      members:
      - id: http_1_0
        value: '1.0'
        brief: HTTP/1.0
        stability: development
      - id: http_1_1
        value: '1.1'
        brief: HTTP/1.1
        stability: development
      - id: http_2_0
        value: '2.0'
        brief: HTTP/2
        stability: development
      - id: http_3_0
        value: '3.0'
        brief: HTTP/3
        stability: development
      - id: spdy
        value: SPDY
        brief: SPDY protocol.
        stability: development
      - id: quic
        value: QUIC
        brief: QUIC protocol.
        stability: development
    brief: Deprecated, use `network.protocol.name` and `network.protocol.version` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Split into `network.protocol.name` and `network.protocol.version`
  - name: http.user_agent
    type: string
    brief: Deprecated, use `user_agent.original` instead.
    examples:
    - CERN-LineMode/2.15 libwww/2.17b3
    - Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: user_agent.original
      note: Replaced by `user_agent.original`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/deprecated/registry-deprecated.yaml
  display_name: Deprecated HTTP Attributes
- id: entity.device
  type: entity
  brief: |
    The device on which the process represented by this resource is running.
  stability: development
  attributes:
  - name: device.manufacturer
    type: string
    brief: |
      The name of the device manufacturer
    examples:
    - Apple
    - Samsung
    requirement_level: recommended
    note: |
      The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.
    stability: development
  - name: device.model.identifier
    type: string
    brief: |
      The model identifier for the device
    examples:
    - iPhone3,4
    - SM-G920F
    requirement_level: recommended
    note: |
      It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.
    stability: development
  - name: device.model.name
    type: string
    brief: |
      The marketing name for the device model
    examples:
    - iPhone 6s Plus
    - Samsung Galaxy S6
    requirement_level: recommended
    note: |
      It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.
    stability: development
  - name: device.id
    type: string
    brief: |
      A unique identifier representing the device
    examples:
    - '123456789012345'
    - 01:23:45:67:89:AB
    requirement_level: opt_in
    note: |
      Its value SHOULD be identical for all apps on a device and it SHOULD NOT change if an app is uninstalled and re-installed.
      However, it might be resettable by the user for all apps on a device.
      Hardware IDs (e.g. vendor-specific serial number, IMEI or MAC address) MAY be used as values.

      More information about Android identifier best practices can be found in the [Android user data IDs guide](https://developer.android.com/training/articles/user-data-ids).

      > [!WARNING]
      >
      > This attribute may contain sensitive (PII) information. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply,
      > ensure you do your own due diligence.
      >
      > Due to these reasons, this identifier is not recommended for consumer applications and will likely result in rejection from both Google Play and App Store.
      > However, it may be appropriate for specific enterprise scenarios, such as kiosk devices or enterprise-managed devices, with appropriate compliance clearance.
      > Any instrumentation providing this identifier MUST implement it as an opt-in feature.
      >
      > See [`app.installation.id`](/docs/registry/attributes/app.md#app-installation-id) for a more privacy-preserving alternative.
    stability: development
  name: device
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/device/entities.yaml
    attributes:
      device.id:
        source_group: registry.device
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      device.manufacturer:
        source_group: registry.device
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      device.model.identifier:
        source_group: registry.device
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      device.model.name:
        source_group: registry.device
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: event.device.app.lifecycle
  type: event
  brief: |
    This event represents an occurrence of a lifecycle transition on Android or iOS platform.
  note: |
    The event body fields MUST be used to describe the state of the application at the time of the event.
    This event is meant to be used in conjunction with `os.name` [resource semantic convention](/docs/resource/os.md) to identify the mobile operating system (e.g. Android, iOS).
    The `android.app.state` and `ios.app.state` fields are mutually exclusive and MUST NOT be used together, each field MUST be used with its corresponding `os.name` value.
  stability: development
  attributes:
  - name: ios.app.state
    type:
      members:
      - id: active
        value: active
        brief: |
          The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.
        stability: development
      - id: inactive
        value: inactive
        brief: |
          The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.
        stability: development
      - id: background
        value: background
        brief: |
          The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.
        stability: development
      - id: foreground
        value: foreground
        brief: |
          The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.
        stability: development
      - id: terminate
        value: terminate
        brief: |
          The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.
        stability: development
    brief: |
      This attribute represents the state of the application.
    requirement_level:
      conditionally_required: if and only if `os.name` is `ios`
    note: |
      The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate), and from which the `OS terminology` column values are derived.
    stability: development
  - name: android.app.state
    type:
      members:
      - id: created
        value: created
        brief: |
          Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.
        stability: development
      - id: background
        value: background
        brief: |
          Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.
        stability: development
      - id: foreground
        value: foreground
        brief: |
          Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.
        stability: development
    brief: |
      This attribute represents the state of the application.
    examples:
    - created
    requirement_level:
      conditionally_required: if and only if `os.name` is `android`
    note: |
      The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.
    stability: development
  name: device.app.lifecycle
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/device/events.yaml
    attributes:
      android.app.state:
        source_group: registry.android
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      ios.app.state:
        source_group: registry.ios
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: cloudevents
  type: attribute_group
  brief: |
    This document defines attributes for CloudEvents. CloudEvents is a specification on how to define event data in a standard way. These attributes can be attached to spans when performing operations with CloudEvents, regardless of the protocol being used.
  attributes:
  - name: cloudevents.event_spec_version
    type: string
    brief: |
      The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.
    examples: '1.0'
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_type
    type: string
    brief: |
      The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.
    examples:
    - com.github.pull_request.opened
    - com.example.object.deleted.v2
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_subject
    type: string
    brief: |
      The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).
    examples: mynewfile.jpg
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_id
    type: string
    brief: |
      The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.
    examples:
    - 123e4567-e89b-12d3-a456-426614174000
    - '0001'
    requirement_level: required
    stability: development
  - name: cloudevents.event_source
    type: string
    brief: |
      The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.
    examples:
    - https://github.com/cloudevents
    - /cloudevents/spec/pull/123
    - my-service
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudevents/spans.yaml
    attributes:
      cloudevents.event_id:
        source_group: registry.cloudevents
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloudevents.event_source:
        source_group: registry.cloudevents
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloudevents.event_spec_version:
        source_group: registry.cloudevents
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloudevents.event_subject:
        source_group: registry.cloudevents
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloudevents.event_type:
        source_group: registry.cloudevents
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.container
  type: attribute_group
  brief: |
    A container instance.
  attributes:
  - name: container.name
    type: string
    brief: |
      Container name used by container runtime.
    examples:
    - opentelemetry-autoconf
    requirement_level: recommended
    stability: development
  - name: container.id
    type: string
    brief: |
      Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.
    examples:
    - a3bf90e006b2
    requirement_level: recommended
    stability: development
  - name: container.runtime.name
    type: string
    brief: |
      The container runtime managing this container.
    examples:
    - docker
    - containerd
    - rkt
    requirement_level: recommended
    stability: development
  - name: container.runtime.version
    type: string
    brief: |
      The version of the runtime of this process, as returned by the runtime without modification.
    examples: 1.0.0
    requirement_level: recommended
    stability: development
  - name: container.runtime.description
    type: string
    brief: |
      A description about the runtime which could include, for example details about the CRI/API version being used or other customisations.
    examples:
    - 'docker://19.3.1 - CRI: 1.22.0'
    requirement_level: recommended
    stability: development
  - name: container.image.name
    type: string
    brief: |
      Name of the image the container was built on.
    examples:
    - gcr.io/opentelemetry/operator
    requirement_level: recommended
    stability: development
  - name: container.image.tags
    type: string[]
    brief: |
      Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.
    examples:
    - - v1.27.1
      - 3.5.7-0
    requirement_level: recommended
    stability: development
  - name: container.image.id
    type: string
    brief: |
      Runtime specific image identifier. Usually a hash algorithm followed by a UUID.
    examples:
    - sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f
    requirement_level: recommended
    note: |
      Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.
      K8s defines a link to the container registry repository with digest `"imageID": "registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625"`.
      The ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.
    stability: development
  - name: container.image.repo_digests
    type: string[]
    brief: |
      Repo digests of the container image as provided by the container runtime.
    examples:
    - - example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb
      - internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578
    requirement_level: recommended
    note: |
      [Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.
    stability: development
  - name: container.command
    type: string
    brief: |
      The command used to run the container (i.e. the command name).
    examples:
    - otelcontribcol
    requirement_level: recommended
    note: |
      If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.
    stability: development
  - name: container.command_line
    type: string
    brief: |
      The full command run by the container as a single string representing the full command.
    examples:
    - otelcontribcol --config config.yaml
    requirement_level: recommended
    stability: development
  - name: container.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) run by the container.
    examples:
    - - otelcontribcol
      - --config
      - config.yaml
    requirement_level: recommended
    stability: development
  - name: container.label
    type: template[string]
    brief: |
      Container labels, `<key>` being the label name, the value being the label value.
    examples:
    - nginx
    requirement_level: recommended
    note: |
      For example, a docker container label `app` with value `nginx` SHOULD be recorded as the `container.label.app` attribute with value `"nginx"`.
    stability: development
  - name: container.csi.plugin.name
    type: string
    brief: |
      The name of the CSI ([Container Storage Interface](https://github.com/container-storage-interface/spec)) plugin used by the volume.
    examples:
    - pd.csi.storage.gke.io
    requirement_level: recommended
    note: |
      This can sometimes be referred to as a "driver" in CSI implementations. This should represent the `name` field of the GetPluginInfo RPC.
    stability: development
  - name: container.csi.volume.id
    type: string
    brief: |
      The unique volume ID returned by the CSI ([Container Storage Interface](https://github.com/container-storage-interface/spec)) plugin.
    examples:
    - projects/my-gcp-project/zones/my-gcp-zone/disks/my-gcp-disk
    requirement_level: recommended
    note: |
      This can sometimes be referred to as a "volume handle" in CSI implementations. This should represent the `Volume.volume_id` field in CSI spec.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/registry.yaml
  display_name: Container Attributes
- id: registry.container.deprecated
  type: attribute_group
  brief: Describes deprecated container attributes.
  attributes:
  - name: container.labels
    type: template[string]
    brief: Deprecated, use `container.label` instead.
    examples:
    - nginx
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: container.label
      note: Replaced by `container.label`.
  - name: container.cpu.state
    type:
      members:
      - id: user
        value: user
        brief: When tasks of the cgroup are in user mode (Linux). When all container processes are in user mode (Windows).
        stability: development
      - id: system
        value: system
        brief: When CPU is used by the system (host OS)
        stability: development
      - id: kernel
        value: kernel
        brief: When tasks of the cgroup are in kernel mode (Linux). When all container processes are in kernel mode (Windows).
        stability: development
    brief: Deprecated, use `cpu.mode` instead.
    examples:
    - user
    - kernel
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: cpu.mode
      note: Replaced by `cpu.mode`.
  - name: container.runtime
    type: string
    brief: |
      The container runtime managing this container.
    examples:
    - docker
    - containerd
    - rkt
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: container.runtime.name
      note: Replaced by `container.runtime.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/deprecated/registry-deprecated.yaml
  display_name: Deprecated Container Attributes
- id: entity.android
  type: entity
  brief: |
    The Android platform on which the Android application is running.
  stability: development
  attributes:
  - name: android.os.api_level
    type: string
    brief: |
      Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found in the [Android API levels documentation](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).
    examples:
    - '33'
    - '32'
    requirement_level: recommended
    stability: development
  name: android
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/android/entities.yaml
    attributes:
      android.os.api_level:
        source_group: registry.android
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.android.deprecated
  type: attribute_group
  brief: |
    This document defines attributes that represents an occurrence of a lifecycle transition on the Android platform.
  attributes:
  - name: android.state
    type:
      members:
      - id: created
        value: created
        brief: |
          Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.
        stability: development
      - id: background
        value: background
        brief: |
          Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.
        stability: development
      - id: foreground
        value: foreground
        brief: |
          Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.
        stability: development
    brief: Deprecated. Use `android.app.state` attribute instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: android.app.state
      note: Replaced by `android.app.state`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/android/deprecated/registry-deprecated.yaml
  display_name: Deprecated Android Attributes
- id: entity.cicd.pipeline
  type: entity
  brief: |
    A pipeline is a series of automated steps that helps software teams deliver code.
  stability: development
  attributes:
  - name: cicd.pipeline.name
    type: string
    brief: |
      The human readable name of the pipeline within a CI/CD system.
    examples:
    - Build and Test
    - Lint
    - Deploy Go Project
    - deploy_to_environment
    requirement_level: recommended
    stability: development
  name: cicd.pipeline
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/entities.yaml
    attributes:
      cicd.pipeline.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.cicd.pipeline.run
  type: entity
  brief: |
    A pipeline run is a singular execution of a given pipeline's tasks.
  stability: development
  attributes:
  - name: cicd.pipeline.run.id
    type: string
    brief: |
      The unique identifier of a pipeline run within a CI/CD system.
    examples:
    - '120912'
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.run.url.full
    type: string
    brief: |
      The [URL](https://wikipedia.org/wiki/URL) of the pipeline run, providing the complete address in order to locate and identify the pipeline run.
    examples:
    - https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763?pr=1075
    requirement_level: recommended
    stability: development
  name: cicd.pipeline.run
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/entities.yaml
    attributes:
      cicd.pipeline.run.id:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cicd.pipeline.run.url.full:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.cicd.worker
  type: entity
  brief: |
    A CICD worker is a component of the CICD system that performs work (eg. running pipeline tasks or performing sync).
    A single pipeline run may be distributed across multiple workers. Any OpenTelemetry signal associated with a worker should be associated to the worker that performed the corresponding work.
    For example, when a pipeline run involves several workers, its task run spans may reference the different `cicd.worker` resources corresponding to the workers that executed each task run. The pipeline run's parent span may instead reference the CICD controller as the `cicd.worker` resource.
  stability: development
  attributes:
  - name: cicd.worker.name
    type: string
    brief: The name of a worker within a CICD system.
    examples:
    - agent-abc
    - controller
    - Ubuntu LTS
    requirement_level: recommended
    stability: development
  - name: cicd.worker.id
    type: string
    brief: The unique identifier of a worker within a CICD system.
    examples:
    - abc123
    - 10.0.1.2
    - controller
    requirement_level: required
    stability: development
  - name: cicd.worker.url.full
    type: string
    brief: The [URL](https://wikipedia.org/wiki/URL) of the worker, providing the complete address in order to locate and identify the worker.
    examples:
    - https://cicd.example.org/worker/abc123
    requirement_level:
      recommended: If available
    stability: development
  name: cicd.worker
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/entities.yaml
    attributes:
      cicd.worker.id:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cicd.worker.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cicd.worker.url.full:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.cicd.pipeline.run.duration
  type: metric
  brief: Duration of a pipeline run grouped by pipeline, state and result.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the pipeline run failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: cicd.pipeline.name
    type: string
    brief: |
      The human readable name of the pipeline within a CI/CD system.
    examples:
    - Build and Test
    - Lint
    - Deploy Go Project
    - deploy_to_environment
    requirement_level: required
    stability: development
  - name: cicd.pipeline.run.state
    type:
      members:
      - id: pending
        value: pending
        brief: |
          The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).
        stability: development
      - id: executing
        value: executing
        brief: The executing state spans the execution of any run tasks (eg. build, test).
        stability: development
      - id: finalizing
        value: finalizing
        brief: The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).
        stability: development
    brief: |
      The pipeline run goes through these states during its lifecycle.
    examples:
    - pending
    - executing
    - finalizing
    requirement_level: required
    stability: development
  - name: cicd.pipeline.result
    type:
      members:
      - id: success
        value: success
        brief: The pipeline run finished successfully.
        stability: development
      - id: failure
        value: failure
        brief: The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.
        stability: development
      - id: error
        value: error
        brief: The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.
        stability: development
      - id: timeout
        value: timeout
        brief: A timeout caused the pipeline run to be interrupted.
        stability: development
      - id: cancellation
        value: cancellation
        brief: The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.
        stability: development
      - id: skip
        value: skip
        brief: The pipeline run was skipped, eg. due to a precondition not being met.
        stability: development
    brief: |
      The result of a pipeline run.
    examples:
    - success
    - failure
    - timeout
    - skipped
    requirement_level:
      conditionally_required: If and only if the pipeline run result has been set during that state.
    stability: development
  metric_name: cicd.pipeline.run.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/metrics.yaml
    attributes:
      cicd.pipeline.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cicd.pipeline.result:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cicd.pipeline.run.state:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - cicd.pipeline
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.cicd.pipeline.run.active
  type: metric
  brief: The number of pipeline runs currently active in the system by state.
  stability: development
  attributes:
  - name: cicd.pipeline.name
    type: string
    brief: |
      The human readable name of the pipeline within a CI/CD system.
    examples:
    - Build and Test
    - Lint
    - Deploy Go Project
    - deploy_to_environment
    requirement_level: required
    stability: development
  - name: cicd.pipeline.run.state
    type:
      members:
      - id: pending
        value: pending
        brief: |
          The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).
        stability: development
      - id: executing
        value: executing
        brief: The executing state spans the execution of any run tasks (eg. build, test).
        stability: development
      - id: finalizing
        value: finalizing
        brief: The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).
        stability: development
    brief: |
      The pipeline run goes through these states during its lifecycle.
    examples:
    - pending
    - executing
    - finalizing
    requirement_level: required
    stability: development
  metric_name: cicd.pipeline.run.active
  instrument: updowncounter
  unit: '{run}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/metrics.yaml
    attributes:
      cicd.pipeline.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cicd.pipeline.run.state:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - cicd.pipeline
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.cicd.worker.count
  type: metric
  brief: The number of workers on the CICD system by state.
  stability: development
  attributes:
  - name: cicd.worker.state
    type:
      members:
      - id: available
        value: available
        brief: The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).
        note: Pipelines might have conditions on which workers they are able to run so not every worker might be available to every pipeline.
        stability: development
      - id: busy
        value: busy
        brief: The worker is performing work for the CICD system.
        stability: development
      - id: offline
        value: offline
        brief: The worker is not available to the CICD system (disconnected / down).
        stability: development
    brief: |
      The state of a CICD worker / agent.
    examples:
    - idle
    - busy
    - down
    requirement_level: required
    stability: development
  metric_name: cicd.worker.count
  instrument: updowncounter
  unit: '{count}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/metrics.yaml
    attributes:
      cicd.worker.state:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.cicd.pipeline.run.errors
  type: metric
  brief: The number of errors encountered in pipeline runs (eg. compile, test failures).
  note: |
    There might be errors in a pipeline run that are non fatal (eg. they are suppressed) or in a parallel stage multiple stages could have a fatal error.
    This means that this error count might not be the same as the count of metric `cicd.pipeline.run.duration` with run result `failure`.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level: required
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: cicd.pipeline.name
    type: string
    brief: |
      The human readable name of the pipeline within a CI/CD system.
    examples:
    - Build and Test
    - Lint
    - Deploy Go Project
    - deploy_to_environment
    requirement_level: required
    stability: development
  metric_name: cicd.pipeline.run.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/metrics.yaml
    attributes:
      cicd.pipeline.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - cicd.pipeline
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.cicd.system.errors
  type: metric
  brief: The number of errors in a component of the CICD system (eg. controller, scheduler, agent).
  note: Errors in pipeline run execution are explicitly excluded. Ie a test failure is not counted in this metric.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level: required
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: cicd.system.component
    type: string
    brief: The name of a component of the CICD system.
    examples:
    - controller
    - scheduler
    - agent
    requirement_level: required
    stability: development
  metric_name: cicd.system.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/metrics.yaml
    attributes:
      cicd.system.component:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: span.cicd.pipeline.run.server
  type: span
  brief: This span describes a CICD pipeline run.
  note: |
    For all pipeline runs, a span with kind `SERVER` SHOULD be created corresponding to the execution of the pipeline run.

    **Span name** MUST follow the overall [guidelines for span names](https://github.com/open-telemetry/opentelemetry-specification/tree/v1.43.0/specification/trace/api.md#span).

    The span name SHOULD be `{action} {pipeline}` if there is a (low-cardinality) pipeline name available.
    If the pipeline name is not available or is likely to have high cardinality, then the span name SHOULD be `{action}`.

    The `{action}` SHOULD be the [`cicd.pipeline.action.name`](/docs/registry/attributes/cicd.md#cicd-pipeline-action-name).

    The `{pipeline}` SHOULD be the [`cicd.pipeline.name`](/docs/registry/attributes/cicd.md#cicd-pipeline-name).
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the pipeline result is `failure` or `error`
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: cicd.pipeline.result
    type:
      members:
      - id: success
        value: success
        brief: The pipeline run finished successfully.
        stability: development
      - id: failure
        value: failure
        brief: The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.
        stability: development
      - id: error
        value: error
        brief: The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.
        stability: development
      - id: timeout
        value: timeout
        brief: A timeout caused the pipeline run to be interrupted.
        stability: development
      - id: cancellation
        value: cancellation
        brief: The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.
        stability: development
      - id: skip
        value: skip
        brief: The pipeline run was skipped, eg. due to a precondition not being met.
        stability: development
    brief: |
      The result of a pipeline run.
    examples:
    - success
    - failure
    - timeout
    - skipped
    requirement_level: required
    stability: development
  - name: cicd.pipeline.action.name
    type:
      members:
      - id: build
        value: BUILD
        brief: The pipeline run is executing a build.
        stability: development
      - id: run
        value: RUN
        brief: The pipeline run is executing.
        stability: development
      - id: sync
        value: SYNC
        brief: The pipeline run is executing a sync.
        stability: development
    brief: |
      The kind of action a pipeline run is performing.
    examples:
    - BUILD
    - RUN
    - SYNC
    requirement_level: opt_in
    stability: development
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/spans.yaml
    attributes:
      cicd.pipeline.action.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cicd.pipeline.result:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.cicd.pipeline.task.internal
  type: span
  brief: This span describes task execution in a pipeline run.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the task result is `failure` or `error`
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: cicd.pipeline.task.name
    type: string
    brief: |
      The human readable name of a task within a pipeline. Task here most closely aligns with a [computing process](https://wikipedia.org/wiki/Pipeline_(computing)) in a pipeline. Other terms for tasks include commands, steps, and procedures.
    examples:
    - Run GoLang Linter
    - Go Build
    - go-test
    - deploy_binary
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: cicd.pipeline.task.run.id
    type: string
    brief: |
      The unique identifier of a task run within a pipeline.
    examples:
    - '12097'
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: cicd.pipeline.task.run.url.full
    type: string
    brief: |
      The [URL](https://wikipedia.org/wiki/URL) of the pipeline task run, providing the complete address in order to locate and identify the pipeline task run.
    examples:
    - https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763/job/26920038674?pr=1075
    requirement_level: required
    sampling_relevant: true
    stability: development
  - name: cicd.pipeline.task.run.result
    type:
      members:
      - id: success
        value: success
        brief: The task run finished successfully.
        stability: development
      - id: failure
        value: failure
        brief: The task run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the task run.
        stability: development
      - id: error
        value: error
        brief: The task run failed due to an error in the CICD system, eg. due to the worker being killed.
        stability: development
      - id: timeout
        value: timeout
        brief: A timeout caused the task run to be interrupted.
        stability: development
      - id: cancellation
        value: cancellation
        brief: The task run was cancelled, eg. by a user manually cancelling the task run.
        stability: development
      - id: skip
        value: skip
        brief: The task run was skipped, eg. due to a precondition not being met.
        stability: development
    brief: |
      The result of a task run.
    examples:
    - success
    - failure
    - timeout
    - skipped
    requirement_level: required
    stability: development
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/spans.yaml
    attributes:
      cicd.pipeline.task.name:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      cicd.pipeline.task.run.id:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      cicd.pipeline.task.run.result:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cicd.pipeline.task.run.url.full:
        source_group: registry.cicd.pipeline
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.security_rule
  type: attribute_group
  brief: |
    Describes security rule attributes. Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events.
  attributes:
  - name: security_rule.category
    type: string
    brief: |
      A categorization value keyword used by the entity using the rule for detection of this event
    examples:
    - Attempted Information Leak
    requirement_level: recommended
    stability: development
  - name: security_rule.description
    type: string
    brief: |
      The description of the rule generating the event.
    examples:
    - Block requests to public DNS over HTTPS / TLS protocols
    requirement_level: recommended
    stability: development
  - name: security_rule.license
    type: string
    brief: |
      Name of the license under which the rule used to generate this event is made available.
    examples:
    - Apache 2.0
    requirement_level: recommended
    stability: development
  - name: security_rule.name
    type: string
    brief: |
      The name of the rule or signature generating the event.
    examples:
    - BLOCK_DNS_over_TLS
    requirement_level: recommended
    stability: development
  - name: security_rule.reference
    type: string
    brief: |
      Reference URL to additional information about the rule used to generate this event.
    examples:
    - https://en.wikipedia.org/wiki/DNS_over_TLS
    requirement_level: recommended
    note: |
      The URL can point to the vendor’s documentation about the rule. If that’s not available, it can also be a link to a more general page describing this type of alert.
    stability: development
  - name: security_rule.ruleset.name
    type: string
    brief: |
      Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.
    examples:
    - Standard_Protocol_Filters
    requirement_level: recommended
    stability: development
  - name: security_rule.uuid
    type: string
    brief: |
      A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.
    examples:
    - 550e8400-e29b-41d4-a716-446655440000
    - '1100110011'
    requirement_level: recommended
    stability: development
  - name: security_rule.version
    type: string
    brief: |
      The version / revision of the rule being used for analysis.
    examples:
    - 1.0.0
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/security-rule/registry.yaml
  display_name: Security Rule
- id: metric.nodejs.eventloop.delay.min
  type: metric
  brief: Event loop minimum delay.
  note: |
    Value can be retrieved from value `histogram.min` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.min
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.delay.max
  type: metric
  brief: Event loop maximum delay.
  note: |
    Value can be retrieved from value `histogram.max` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.max
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.delay.mean
  type: metric
  brief: Event loop mean delay.
  note: |
    Value can be retrieved from value `histogram.mean` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.mean
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.delay.stddev
  type: metric
  brief: Event loop standard deviation delay.
  note: |
    Value can be retrieved from value `histogram.stddev` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.stddev
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.delay.p50
  type: metric
  brief: Event loop 50 percentile delay.
  note: |
    Value can be retrieved from value `histogram.percentile(50)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.p50
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.delay.p90
  type: metric
  brief: Event loop 90 percentile delay.
  note: |
    Value can be retrieved from value `histogram.percentile(90)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.p90
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.delay.p99
  type: metric
  brief: Event loop 99 percentile delay.
  note: |
    Value can be retrieved from value `histogram.percentile(99)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)
  stability: development
  metric_name: nodejs.eventloop.delay.p99
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.utilization
  type: metric
  brief: Event loop utilization.
  note: |
    The value range is [0.0, 1.0] and can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)
  stability: development
  metric_name: nodejs.eventloop.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.nodejs.eventloop.time
  type: metric
  brief: Cumulative duration of time the event loop has been in each state.
  note: |
    Value can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)
  stability: development
  attributes:
  - name: nodejs.eventloop.state
    type:
      members:
      - id: active
        value: active
        brief: Active time.
        stability: development
      - id: idle
        value: idle
        brief: Idle time.
        stability: development
    brief: The state of event loop time.
    requirement_level: required
    stability: development
  metric_name: nodejs.eventloop.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/metrics.yaml
    attributes:
      nodejs.eventloop.state:
        source_group: registry.nodejs
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: registry.cloud
  type: attribute_group
  brief: |
    A cloud environment (e.g. GCP, Azure, AWS).
  attributes:
  - name: cloud.provider
    type:
      members:
      - id: alibaba_cloud
        value: alibaba_cloud
        brief: Alibaba Cloud
        stability: development
      - id: aws
        value: aws
        brief: Amazon Web Services
        stability: development
      - id: azure
        value: azure
        brief: Microsoft Azure
        stability: development
      - id: gcp
        value: gcp
        brief: Google Cloud Platform
        stability: development
      - id: heroku
        value: heroku
        brief: Heroku Platform as a Service
        stability: development
      - id: ibm_cloud
        value: ibm_cloud
        brief: IBM Cloud
        stability: development
      - id: oracle_cloud
        value: oracle_cloud
        brief: Oracle Cloud Infrastructure (OCI)
        stability: development
      - id: tencent_cloud
        value: tencent_cloud
        brief: Tencent Cloud
        stability: development
    brief: |
      Name of the cloud provider.
    requirement_level: recommended
    stability: development
  - name: cloud.account.id
    type: string
    brief: |
      The cloud account ID the resource is assigned to.
    examples:
    - '111111111111'
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The geographical region within a cloud provider. When associated with a resource, this attribute specifies the region where the resource operates. When calling services or APIs deployed on a cloud, this attribute identifies the region where the called destination is deployed.
    examples:
    - us-central1
    - us-east-1
    requirement_level: recommended
    note: |
      Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).
    stability: development
  - name: cloud.resource_id
    type: string
    brief: |
      Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)
    examples:
    - arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
    - //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
    - /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
    requirement_level: recommended
    note: |
      On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      - **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invocable with
        multiple different aliases.
      - **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      - **Azure:** The [Fully Qualified Resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    stability: development
  - name: cloud.availability_zone
    type: string
    brief: |
      Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
    examples:
    - us-east-1c
    requirement_level: recommended
    note: |
      Availability zones are called "zones" on Alibaba Cloud and Google Cloud.
    stability: development
  - name: cloud.platform
    type:
      members:
      - id: alibaba_cloud_ecs
        value: alibaba_cloud_ecs
        brief: Alibaba Cloud Elastic Compute Service
        stability: development
      - id: alibaba_cloud_fc
        value: alibaba_cloud_fc
        brief: Alibaba Cloud Function Compute
        stability: development
      - id: alibaba_cloud_openshift
        value: alibaba_cloud_openshift
        brief: Red Hat OpenShift on Alibaba Cloud
        stability: development
      - id: aws_ec2
        value: aws_ec2
        brief: AWS Elastic Compute Cloud
        stability: development
      - id: aws_ecs
        value: aws_ecs
        brief: AWS Elastic Container Service
        stability: development
      - id: aws_eks
        value: aws_eks
        brief: AWS Elastic Kubernetes Service
        stability: development
      - id: aws_lambda
        value: aws_lambda
        brief: AWS Lambda
        stability: development
      - id: aws_elastic_beanstalk
        value: aws_elastic_beanstalk
        brief: AWS Elastic Beanstalk
        stability: development
      - id: aws_app_runner
        value: aws_app_runner
        brief: AWS App Runner
        stability: development
      - id: aws_openshift
        value: aws_openshift
        brief: Red Hat OpenShift on AWS (ROSA)
        stability: development
      - id: azure.vm
        value: azure.vm
        brief: Azure Virtual Machines
        stability: development
      - id: azure.container_apps
        value: azure.container_apps
        brief: Azure Container Apps
        stability: development
      - id: azure.container_instances
        value: azure.container_instances
        brief: Azure Container Instances
        stability: development
      - id: azure.aks
        value: azure.aks
        brief: Azure Kubernetes Service
        stability: development
      - id: azure.functions
        value: azure.functions
        brief: Azure Functions
        stability: development
      - id: azure.app_service
        value: azure.app_service
        brief: Azure App Service
        stability: development
      - id: azure.openshift
        value: azure.openshift
        brief: Azure Red Hat OpenShift
        stability: development
      - id: azure_vm
        value: azure_vm
        brief: Azure Virtual Machines
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.vm
          note: Replaced by `azure.vm`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_container_apps
        value: azure_container_apps
        brief: Azure Container Apps
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.container_apps
          note: Replaced by `azure.container_apps`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_container_instances
        value: azure_container_instances
        brief: Azure Container Instances
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.container_instances
          note: Replaced by `azure.container_instances`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_aks
        value: azure_aks
        brief: Azure Kubernetes Service
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.aks
          note: Replaced by `azure.aks`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_functions
        value: azure_functions
        brief: Azure Functions
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.functions
          note: Replaced by `azure.functions`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_app_service
        value: azure_app_service
        brief: Azure App Service
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.app_service
          note: Replaced by `azure.app_service`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_openshift
        value: azure_openshift
        brief: Azure Red Hat OpenShift
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.openshift
          note: Replaced by `azure.openshift`.
        annotations:
          code_generation:
            exclude: true
      - id: gcp_bare_metal_solution
        value: gcp_bare_metal_solution
        brief: Google Bare Metal Solution (BMS)
        stability: development
      - id: gcp_compute_engine
        value: gcp_compute_engine
        brief: Google Cloud Compute Engine (GCE)
        stability: development
      - id: gcp_cloud_run
        value: gcp_cloud_run
        brief: Google Cloud Run
        stability: development
      - id: gcp_kubernetes_engine
        value: gcp_kubernetes_engine
        brief: Google Cloud Kubernetes Engine (GKE)
        stability: development
      - id: gcp_cloud_functions
        value: gcp_cloud_functions
        brief: Google Cloud Functions (GCF)
        stability: development
      - id: gcp_app_engine
        value: gcp_app_engine
        brief: Google Cloud App Engine (GAE)
        stability: development
      - id: gcp_openshift
        value: gcp_openshift
        brief: Red Hat OpenShift on Google Cloud
        stability: development
      - id: ibm_cloud_openshift
        value: ibm_cloud_openshift
        brief: Red Hat OpenShift on IBM Cloud
        stability: development
      - id: oracle_cloud_compute
        value: oracle_cloud_compute
        brief: Compute on Oracle Cloud Infrastructure (OCI)
        stability: development
      - id: oracle_cloud_oke
        value: oracle_cloud_oke
        brief: Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI)
        stability: development
      - id: tencent_cloud_cvm
        value: tencent_cloud_cvm
        brief: Tencent Cloud Cloud Virtual Machine (CVM)
        stability: development
      - id: tencent_cloud_eks
        value: tencent_cloud_eks
        brief: Tencent Cloud Elastic Kubernetes Service (EKS)
        stability: development
      - id: tencent_cloud_scf
        value: tencent_cloud_scf
        brief: Tencent Cloud Serverless Cloud Function (SCF)
        stability: development
    brief: |
      The cloud platform in use.
    requirement_level: recommended
    note: |
      The prefix of the service SHOULD match the one specified in `cloud.provider`.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloud/registry.yaml
  display_name: Cloud Attributes
- id: metric.otel.sdk.span.live
  type: metric
  brief: The number of created spans with `recording=true` for which the end operation has not been called yet.
  stability: development
  attributes:
  - name: otel.span.sampling_result
    type:
      members:
      - id: drop
        value: DROP
        brief: The span is not sampled and not recording
        stability: development
      - id: record_only
        value: RECORD_ONLY
        brief: The span is not sampled, but recording
        stability: development
      - id: record_and_sample
        value: RECORD_AND_SAMPLE
        brief: The span is sampled and recording
        stability: development
    brief: The result value of the sampler for this span
    requirement_level: recommended
    stability: development
  metric_name: otel.sdk.span.live
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.span.sampling_result:
        source_group: registry.otel
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.span.started
  type: metric
  brief: The number of created spans.
  note: |
    Implementations MUST record this metric for all spans, even for non-recording ones.
  stability: development
  attributes:
  - name: otel.span.sampling_result
    type:
      members:
      - id: drop
        value: DROP
        brief: The span is not sampled and not recording
        stability: development
      - id: record_only
        value: RECORD_ONLY
        brief: The span is not sampled, but recording
        stability: development
      - id: record_and_sample
        value: RECORD_AND_SAMPLE
        brief: The span is sampled and recording
        stability: development
    brief: The result value of the sampler for this span
    requirement_level: recommended
    stability: development
  - name: otel.span.parent.origin
    type:
      members:
      - id: none
        value: none
        brief: The span does not have a parent, it is a root span
        stability: development
      - id: local
        value: local
        brief: The span has a parent and the parent's span context [isRemote()](https://opentelemetry.io/docs/specs/otel/trace/api/#isremote) is false
        stability: development
      - id: remote
        value: remote
        brief: The span has a parent and the parent's span context [isRemote()](https://opentelemetry.io/docs/specs/otel/trace/api/#isremote) is true
        stability: development
    brief: Determines whether the span has a parent span, and if so, [whether it is a remote parent](https://opentelemetry.io/docs/specs/otel/trace/api/#isremote)
    requirement_level: recommended
    stability: development
  metric_name: otel.sdk.span.started
  instrument: counter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.span.parent.origin:
        source_group: registry.otel
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      otel.span.sampling_result:
        source_group: registry.otel
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.span.queue.size
  type: metric
  brief: The number of spans in the queue of a given instance of an SDK span processor.
  note: |
    Only applies to span processors which use a queue, e.g. the SDK Batching Span Processor.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  metric_name: otel.sdk.processor.span.queue.size
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.span.queue.capacity
  type: metric
  brief: The maximum number of spans the queue of a given instance of an SDK span processor can hold.
  note: |
    Only applies to span processors which use a queue, e.g. the SDK Batching Span Processor.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  metric_name: otel.sdk.processor.span.queue.capacity
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.span.processed
  type: metric
  brief: The number of spans for which the processing has finished, either successful or failed.
  note: |
    For successful processing, `error.type` MUST NOT be set. For failed processing, `error.type` MUST contain the failure cause.
    For the SDK Simple and Batching Span Processor a span is considered to be processed already when it has been submitted to the exporter, not when the corresponding export call has finished.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      A low-cardinality description of the failure reason. SDK Batching Span Processors MUST use `queue_full` for spans dropped due to a full queue.
    examples:
    - queue_full
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  metric_name: otel.sdk.processor.span.processed
  instrument: counter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.span.inflight
  type: metric
  brief: The number of spans which were passed to the exporter, but that have not been exported yet (neither successful, nor failed).
  note: |
    For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` MUST contain the failure cause.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: otel.sdk.exporter.span.inflight
  instrument: updowncounter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.span.exported
  type: metric
  brief: The number of spans for which the export has finished, either successful or failed.
  note: |
    For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` MUST contain the failure cause.
    For exporters with partial success semantics (e.g. OTLP with `rejected_spans`), rejected spans MUST count as failed and only non-rejected spans count as success.
    If no rejection reason is available, `rejected` SHOULD be used as value for `error.type`.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - rejected
    - timeout
    - '500'
    - java.net.UnknownHostException
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: otel.sdk.exporter.span.exported
  instrument: counter
  unit: '{span}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.log.created
  type: metric
  brief: The number of logs submitted to enabled SDK Loggers.
  stability: development
  metric_name: otel.sdk.log.created
  instrument: counter
  unit: '{log_record}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.log.queue.size
  type: metric
  brief: The number of log records in the queue of a given instance of an SDK log processor.
  note: |
    Only applies to log record processors which use a queue, e.g. the SDK Batching Log Record Processor.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  metric_name: otel.sdk.processor.log.queue.size
  instrument: updowncounter
  unit: '{log_record}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.log.queue.capacity
  type: metric
  brief: The maximum number of log records the queue of a given instance of an SDK Log Record processor can hold.
  note: |
    Only applies to Log Record processors which use a queue, e.g. the SDK Batching Log Record Processor.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  metric_name: otel.sdk.processor.log.queue.capacity
  instrument: updowncounter
  unit: '{log_record}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.processor.log.processed
  type: metric
  brief: The number of log records for which the processing has finished, either successful or failed.
  note: |
    For successful processing, `error.type` MUST NOT be set. For failed processing, `error.type` MUST contain the failure cause.
    For the SDK Simple and Batching Log Record Processor a log record is considered to be processed already when it has been submitted to the exporter,
    not when the corresponding export call has finished.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      A low-cardinality description of the failure reason. SDK Batching Log Record Processors MUST use `queue_full` for log records dropped due to a full queue.
    examples:
    - queue_full
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  metric_name: otel.sdk.processor.log.processed
  instrument: counter
  unit: '{log_record}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.log.inflight
  type: metric
  brief: The number of log records which were passed to the exporter, but that have not been exported yet (neither successful, nor failed).
  note: |
    For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` MUST contain the failure cause.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: otel.sdk.exporter.log.inflight
  instrument: updowncounter
  unit: '{log_record}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.log.exported
  type: metric
  brief: The number of log records for which the export has finished, either successful or failed.
  note: |
    For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` MUST contain the failure cause.
    For exporters with partial success semantics (e.g. OTLP with `rejected_log_records`), rejected log records MUST count as failed and only non-rejected log records count as success.
    If no rejection reason is available, `rejected` SHOULD be used as value for `error.type`.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - rejected
    - timeout
    - '500'
    - java.net.UnknownHostException
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: otel.sdk.exporter.log.exported
  instrument: counter
  unit: '{log_record}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.metric_data_point.inflight
  type: metric
  brief: The number of metric data points which were passed to the exporter, but that have not been exported yet (neither successful, nor failed).
  note: |
    For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` MUST contain the failure cause.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: otel.sdk.exporter.metric_data_point.inflight
  instrument: updowncounter
  unit: '{data_point}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.exporter.metric_data_point.exported
  type: metric
  brief: The number of metric data points for which the export has finished, either successful or failed.
  note: |
    For successful exports, `error.type` MUST NOT be set. For failed exports, `error.type` MUST contain the failure cause.
    For exporters with partial success semantics (e.g. OTLP with `rejected_data_points`), rejected data points MUST count as failed and only non-rejected data points count as success.
    If no rejection reason is available, `rejected` SHOULD be used as value for `error.type`.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - rejected
    - timeout
    - '500'
    - java.net.UnknownHostException
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: otel.sdk.exporter.metric_data_point.exported
  instrument: counter
  unit: '{data_point}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.otel.sdk.metric_reader.collection.duration
  type: metric
  brief: The duration of the collect operation of the metric reader.
  note: |
    For successful collections, `error.type` MUST NOT be set. For failed collections, `error.type` SHOULD contain the failure cause.
    It can happen that metrics collection is successful for some MetricProducers, while others fail. In that case `error.type` SHOULD be set to any of the failure causes.
  stability: development
  attributes:
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - batching_span_processor
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level: recommended
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  metric_name: otel.sdk.metric_reader.collection.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.otel.sdk.exporter.operation.duration
  type: metric
  brief: The duration of exporting a batch of telemetry records.
  note: |
    This metric defines successful operations using the full success definitions for [http](https://github.com/open-telemetry/opentelemetry-proto/blob/v1.5.0/docs/specification.md#full-success-1)
    and [grpc](https://github.com/open-telemetry/opentelemetry-proto/blob/v1.5.0/docs/specification.md#full-success). Anything else is defined as an unsuccessful operation. For successful
    operations, `error.type` MUST NOT be set. For unsuccessful export operations, `error.type` MUST contain a relevant failure cause.
  stability: development
  attributes:
  - name: otel.component.name
    type: string
    brief: |
      A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.
    examples:
    - otlp_grpc_span_exporter/0
    - custom-name
    requirement_level: recommended
    note: |
      Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
      E.g. implementations MUST NOT use UUIDs as values for this attribute.

      Implementations MAY achieve these goals by following a `<otel.component.type>/<instance-counter>` pattern, e.g. `batching_span_processor/0`.
      Hereby `otel.component.type` refers to the corresponding attribute value of the component.

      The value of `instance-counter` MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
      For example, `<instance-counter>` MAY be implemented by using a monotonically increasing counter (starting with `0`), which is incremented every time an
      instance of the given component type is started.

      With this implementation, for example the first Batching Span Processor would have `batching_span_processor/0`
      as `otel.component.name`, the second one `batching_span_processor/1` and so on.
      These values will therefore be reused in the case of an application restart.
    stability: development
  - name: otel.component.type
    type:
      members:
      - id: batching_span_processor
        value: batching_span_processor
        brief: |
          The builtin SDK batching span processor
        stability: development
      - id: simple_span_processor
        value: simple_span_processor
        brief: |
          The builtin SDK simple span processor
        stability: development
      - id: batching_log_processor
        value: batching_log_processor
        brief: |
          The builtin SDK batching log record processor
        stability: development
      - id: simple_log_processor
        value: simple_log_processor
        brief: |
          The builtin SDK simple log record processor
        stability: development
      - id: otlp_grpc_span_exporter
        value: otlp_grpc_span_exporter
        brief: |
          OTLP span exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_span_exporter
        value: otlp_http_span_exporter
        brief: |
          OTLP span exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_span_exporter
        value: otlp_http_json_span_exporter
        brief: |
          OTLP span exporter over HTTP with JSON serialization
        stability: development
      - id: zipkin_http_span_exporter
        value: zipkin_http_span_exporter
        brief: |
          Zipkin span exporter over HTTP
        stability: development
      - id: otlp_grpc_log_exporter
        value: otlp_grpc_log_exporter
        brief: |
          OTLP log record exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_log_exporter
        value: otlp_http_log_exporter
        brief: |
          OTLP log record exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_log_exporter
        value: otlp_http_json_log_exporter
        brief: |
          OTLP log record exporter over HTTP with JSON serialization
        stability: development
      - id: periodic_metric_reader
        value: periodic_metric_reader
        brief: |
          The builtin SDK periodically exporting metric reader
        stability: development
      - id: otlp_grpc_metric_exporter
        value: otlp_grpc_metric_exporter
        brief: |
          OTLP metric exporter over gRPC with protobuf serialization
        stability: development
      - id: otlp_http_metric_exporter
        value: otlp_http_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with protobuf serialization
        stability: development
      - id: otlp_http_json_metric_exporter
        value: otlp_http_json_metric_exporter
        brief: |
          OTLP metric exporter over HTTP with JSON serialization
        stability: development
      - id: prometheus_http_text_metric_exporter
        value: prometheus_http_text_metric_exporter
        brief: |
          Prometheus metric exporter over HTTP with the default text-based format
        stability: development
    brief: |
      A name identifying the type of the OpenTelemetry component.
    examples:
    - otlp_grpc_span_exporter
    - com.example.MySpanExporter
    requirement_level: recommended
    note: |
      If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
      E.g. for Java the fully qualified classname SHOULD be used in this case.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - rejected
    - timeout
    - '500'
    - java.net.UnknownHostException
    requirement_level:
      conditionally_required: If operation has ended with an error
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: rpc.grpc.status_code
    type:
      members:
      - id: ok
        value: 0
        brief: OK
        stability: development
      - id: cancelled
        value: 1
        brief: CANCELLED
        stability: development
      - id: unknown
        value: 2
        brief: UNKNOWN
        stability: development
      - id: invalid_argument
        value: 3
        brief: INVALID_ARGUMENT
        stability: development
      - id: deadline_exceeded
        value: 4
        brief: DEADLINE_EXCEEDED
        stability: development
      - id: not_found
        value: 5
        brief: NOT_FOUND
        stability: development
      - id: already_exists
        value: 6
        brief: ALREADY_EXISTS
        stability: development
      - id: permission_denied
        value: 7
        brief: PERMISSION_DENIED
        stability: development
      - id: resource_exhausted
        value: 8
        brief: RESOURCE_EXHAUSTED
        stability: development
      - id: failed_precondition
        value: 9
        brief: FAILED_PRECONDITION
        stability: development
      - id: aborted
        value: 10
        brief: ABORTED
        stability: development
      - id: out_of_range
        value: 11
        brief: OUT_OF_RANGE
        stability: development
      - id: unimplemented
        value: 12
        brief: UNIMPLEMENTED
        stability: development
      - id: internal
        value: 13
        brief: INTERNAL
        stability: development
      - id: unavailable
        value: 14
        brief: UNAVAILABLE
        stability: development
      - id: data_loss
        value: 15
        brief: DATA_LOSS
        stability: development
      - id: unauthenticated
        value: 16
        brief: UNAUTHENTICATED
        stability: development
    brief: The gRPC status code of the last gRPC requests performed in scope of this export call.
    requirement_level:
      recommended: when applicable
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      recommended: when applicable
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: The HTTP status code of the last HTTP request performed in scope of this export call.
    examples:
    - 200
    requirement_level:
      recommended: when applicable
    stability: stable
  metric_name: otel.sdk.exporter.operation.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      otel.component.name:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      otel.component.type:
        source_group: registry.otel.component
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      rpc.grpc.status_code:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: entity.otel.scope
  type: entity
  brief: Attributes used by non-OTLP exporters to represent OpenTelemetry Scope's concepts.
  stability: development
  deprecated:
    reason: obsoleted
    note: Obsoleted.
  attributes:
  - name: otel.scope.name
    type: string
    brief: The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).
    examples:
    - io.opentelemetry.contrib.mongodb
    requirement_level: recommended
    stability: stable
  - name: otel.scope.version
    type: string
    brief: The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).
    examples:
    - 1.0.0
    requirement_level: recommended
    stability: stable
  name: otel.scope
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/otel/deprecated/entities-deprecated.yaml
    attributes:
      otel.scope.name:
        source_group: registry.otel.scope
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      otel.scope.version:
        source_group: registry.otel.scope
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: attributes.cli.common
  type: attribute_group
  brief: |
    Common CLI attributes.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if and only if process.exit.code is not 0
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: process.executable.path
    type: string
    brief: |
      The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
    examples:
    - /usr/bin/cmd/otelcol
    requirement_level: recommended
    stability: development
  - name: process.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - - cmd/otecol
      - --config=config.yaml
    requirement_level: recommended
    stability: development
  - name: process.executable.name
    type: string
    brief: |
      The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.
    examples:
    - otelcol
    requirement_level: required
    stability: development
  - name: process.pid
    type: int
    brief: |
      Process identifier (PID).
    examples:
    - 1234
    requirement_level: required
    stability: development
  - name: process.exit.code
    type: int
    brief: |
      The exit code of the process.
    examples:
    - 127
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cli/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.command_args:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.name:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.path:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.exit.code:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.pid:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.cli.internal
  type: span
  brief: |
    This span describes CLI (Command Line Interfaces) program execution from a callee perspective.
  note: |
    **Span name** SHOULD be set to {process.executable.name}.
    Instrumentations that have additional context about executed commands MAY use
    a different low-cardinality span name format and SHOULD document it.

    **Span status** SHOULD be set to Error if {process.exit.code} is not 0. Refer to
    the [Recording Errors](/docs/general/recording-errors.md) document for details on how to record span status.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if and only if process.exit.code is not 0
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: process.executable.path
    type: string
    brief: |
      The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
    examples:
    - /usr/bin/cmd/otelcol
    requirement_level: recommended
    stability: development
  - name: process.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - - cmd/otecol
      - --config=config.yaml
    requirement_level: recommended
    stability: development
  - name: process.executable.name
    type: string
    brief: |
      The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.
    examples:
    - otelcol
    requirement_level: required
    stability: development
  - name: process.pid
    type: int
    brief: |
      Process identifier (PID).
    examples:
    - 1234
    requirement_level: required
    stability: development
  - name: process.exit.code
    type: int
    brief: |
      The exit code of the process.
    examples:
    - 127
    requirement_level: required
    stability: development
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cli/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.command_args:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.name:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.path:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.exit.code:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.pid:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.cli.client
  type: span
  brief: |
    This span describes CLI (Command Line Interfaces) program execution from a caller perspective.
  note: |
    **Span name** SHOULD be set to {process.executable.name}.
    Instrumentations that have additional context about executed commands MAY use
    a different low-cardinality span name format and SHOULD document it.

    **Span status** SHOULD be set to Error if {process.exit.code} is not 0. Refer to
    the [Recording Errors](/docs/general/recording-errors.md) document for details on how to record span status.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if and only if process.exit.code is not 0
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: process.executable.path
    type: string
    brief: |
      The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
    examples:
    - /usr/bin/cmd/otelcol
    requirement_level: recommended
    stability: development
  - name: process.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - - cmd/otecol
      - --config=config.yaml
    requirement_level: recommended
    stability: development
  - name: process.executable.name
    type: string
    brief: |
      The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.
    examples:
    - otelcol
    requirement_level: required
    stability: development
  - name: process.pid
    type: int
    brief: |
      Process identifier (PID).
    examples:
    - 1234
    requirement_level: required
    stability: development
  - name: process.exit.code
    type: int
    brief: |
      The exit code of the process.
    examples:
    - 127
    requirement_level: required
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cli/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.command_args:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.name:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.executable.path:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.exit.code:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      process.pid:
        source_group: registry.process
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric_attributes.hw.logical_disk
  type: attribute_group
  brief: |
    Common attributes for logical disk metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.logical_disk.raid_level
    type: string
    brief: |
      RAID Level of the logical disk
    examples:
    - RAID0+1
    - RAID5
    - RAID10
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/logical-disk-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.logical_disk.raid_level:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.logical_disk.limit
  type: metric
  brief: Size of the logical disk.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.logical_disk.raid_level
    type: string
    brief: |
      RAID Level of the logical disk
    examples:
    - RAID0+1
    - RAID5
    - RAID10
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.logical_disk.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/logical-disk-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.logical_disk.raid_level:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.logical_disk.usage
  type: metric
  brief: Logical disk space usage.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.logical_disk.raid_level
    type: string
    brief: |
      RAID Level of the logical disk
    examples:
    - RAID0+1
    - RAID5
    - RAID10
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.logical_disk.state
    type:
      members:
      - id: used
        value: used
        brief: Used
        stability: development
      - id: free
        value: free
        brief: Free
        stability: development
    brief: |
      State of the logical disk space usage
    examples:
    - used
    - free
    requirement_level: required
    stability: development
  metric_name: hw.logical_disk.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/logical-disk-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.logical_disk.raid_level:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.logical_disk.state:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.logical_disk.utilization
  type: metric
  brief: Logical disk space utilization as a fraction.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.logical_disk.raid_level
    type: string
    brief: |
      RAID Level of the logical disk
    examples:
    - RAID0+1
    - RAID5
    - RAID10
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.logical_disk.state
    type:
      members:
      - id: used
        value: used
        brief: Used
        stability: development
      - id: free
        value: free
        brief: Free
        stability: development
    brief: |
      State of the logical disk space usage
    examples:
    - used
    - free
    requirement_level: required
    stability: development
  metric_name: hw.logical_disk.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/logical-disk-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.logical_disk.raid_level:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.logical_disk.state:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: registry.hardware
  type: attribute_group
  brief: |
    Attributes for hardware.
  attributes:
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: recommended
    stability: development
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.type
    type:
      members:
      - id: battery
        value: battery
        brief: Battery
        stability: development
      - id: cpu
        value: cpu
        brief: CPU
        stability: development
      - id: disk_controller
        value: disk_controller
        brief: Disk controller
        stability: development
      - id: enclosure
        value: enclosure
        brief: Enclosure
        stability: development
      - id: fan
        value: fan
        brief: Fan
        stability: development
      - id: gpu
        value: gpu
        brief: GPU
        stability: development
      - id: logical_disk
        value: logical_disk
        brief: Logical disk
        stability: development
      - id: memory
        value: memory
        brief: Memory
        stability: development
      - id: network
        value: network
        brief: Network
        stability: development
      - id: physical_disk
        value: physical_disk
        brief: Physical disk
        stability: development
      - id: power_supply
        value: power_supply
        brief: Power supply
        stability: development
      - id: tape_drive
        value: tape_drive
        brief: Tape drive
        stability: development
      - id: temperature
        value: temperature
        brief: Temperature
        stability: development
      - id: voltage
        value: voltage
        brief: Voltage
        stability: development
    brief: |
      Type of the component
    requirement_level: recommended
    note: |
      Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
    stability: development
  - name: hw.state
    type:
      members:
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: failed
        value: failed
        brief: Failed
        stability: development
      - id: needs_cleaning
        value: needs_cleaning
        brief: Needs Cleaning
        stability: development
      - id: ok
        value: ok
        brief: OK
        stability: development
      - id: predicted_failure
        value: predicted_failure
        brief: Predicted Failure
        stability: development
    brief: |
      The current state of the component
    requirement_level: recommended
    stability: development
  - name: hw.battery.state
    type:
      members:
      - id: charging
        value: charging
        brief: Charging
        stability: development
      - id: discharging
        value: discharging
        brief: Discharging
        stability: development
    brief: |
      The current state of the battery
    requirement_level: recommended
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Type of limit for hardware components
    requirement_level: recommended
    stability: development
  - name: hw.bios_version
    type: string
    brief: |
      BIOS version of the hardware component
    examples:
    - 1.2.3
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.battery.chemistry
    type: string
    brief: |
      Battery [chemistry](https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html), e.g. Lithium-Ion, Nickel-Cadmium, etc.
    examples:
    - Li-ion
    - NiMH
    requirement_level: recommended
    stability: development
  - name: hw.battery.capacity
    type: string
    brief: |
      Design capacity in Watts-hours or Amper-hours
    examples:
    - 9.3Ah
    - 50Wh
    requirement_level: recommended
    stability: development
  - name: hw.enclosure.type
    type: string
    brief: |
      Type of the enclosure (useful for modular systems)
    examples:
    - Computer
    - Storage
    - Switch
    requirement_level: recommended
    stability: development
  - name: hw.gpu.task
    type:
      members:
      - id: decoder
        value: decoder
        brief: Decoder
        stability: development
      - id: encoder
        value: encoder
        brief: Encoder
        stability: development
      - id: general
        value: general
        brief: General
        stability: development
    brief: |
      Type of task the GPU is performing
    requirement_level: recommended
    stability: development
  - name: hw.logical_disk.raid_level
    type: string
    brief: |
      RAID Level of the logical disk
    examples:
    - RAID0+1
    - RAID5
    - RAID10
    requirement_level: recommended
    stability: development
  - name: hw.logical_disk.state
    type:
      members:
      - id: used
        value: used
        brief: Used
        stability: development
      - id: free
        value: free
        brief: Free
        stability: development
    brief: |
      State of the logical disk space usage
    requirement_level: recommended
    stability: development
  - name: hw.memory.type
    type: string
    brief: |
      Type of the memory module
    examples:
    - DDR4
    - DDR5
    - LPDDR5
    requirement_level: recommended
    stability: development
  - name: hw.network.logical_addresses
    type: string[]
    brief: |
      Logical addresses of the adapter (e.g. IP address, or WWPN)
    examples:
    - - 172.16.8.21
      - 57.11.193.42
    requirement_level: recommended
    stability: development
  - name: hw.network.physical_address
    type: string
    brief: |
      Physical address of the adapter (e.g. MAC address, or WWNN)
    examples:
    - 00-90-F5-E9-7B-36
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.type
    type: string
    brief: |
      Type of the physical disk
    examples:
    - HDD
    - SSD
    - 10K
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.state
    type:
      members:
      - id: remaining
        value: remaining
        brief: Remaining
        stability: development
    brief: |
      State of the physical disk endurance utilization
    requirement_level: recommended
    stability: development
  - name: hw.physical_disk.smart_attribute
    type: string
    brief: |
      [S.M.A.R.T.](https://wikipedia.org/wiki/S.M.A.R.T.) (Self-Monitoring, Analysis, and Reporting Technology) attribute of the physical disk
    examples:
    - Spin Retry Count
    - Seek Error Rate
    - Raw Read Error Rate
    requirement_level: recommended
    stability: development
  - name: hw.tape_drive.operation_type
    type:
      members:
      - id: mount
        value: mount
        brief: Mount
        stability: development
      - id: unmount
        value: unmount
        brief: Unmount
        stability: development
      - id: clean
        value: clean
        brief: Clean
        stability: development
    brief: |
      Type of tape drive operation
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/registry.yaml
  display_name: Hardware Attributes
- id: metric_attributes.hw.voltage.common
  type: attribute_group
  brief: |
    Common attributes for voltage metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/voltage-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.voltage
  type: metric
  brief: Voltage measured by the sensor.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.voltage
  instrument: gauge
  unit: V
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/voltage-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.voltage.limit
  type: metric
  brief: Voltage limit in Volts.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.limit_type
    type:
      members:
      - id: critical
        value: critical
        brief: Critical
        stability: development
      - id: degraded
        value: degraded
        brief: Degraded
        stability: development
      - id: high_critical
        value: high.critical
        brief: High Critical
        stability: development
      - id: high_degraded
        value: high.degraded
        brief: High Degraded
        stability: development
      - id: low_critical
        value: low.critical
        brief: Low Critical
        stability: development
      - id: low_degraded
        value: low.degraded
        brief: Low Degraded
        stability: development
      - id: max
        value: max
        brief: Maximum
        stability: development
      - id: throttled
        value: throttled
        brief: Throttled
        stability: development
      - id: turbo
        value: turbo
        brief: Turbo
        stability: development
    brief: |
      Type of limit for hardware components
    examples:
    - low.critical
    - low.degraded
    - high.degraded
    - high.critical
    requirement_level: recommended
    stability: development
  metric_name: hw.voltage.limit
  instrument: gauge
  unit: V
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/voltage-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.limit_type:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.voltage.nominal
  type: metric
  brief: Nominal (expected) voltage.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.sensor_location
    type: string
    brief: |
      Location of the sensor
    examples:
    - cpu0
    - ps1
    - INLET
    - CPU0_DIE
    - AMBIENT
    - MOTHERBOARD
    - PS0 V3_3
    - MAIN_12V
    - CPU_VCORE
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.voltage.nominal
  instrument: gauge
  unit: V
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/voltage-metrics.yaml
    attributes:
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.sensor_location:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric_attributes.hw.gpu
  type: attribute_group
  brief: |
    Common attributes for GPU metrics
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/gpu-metrics.yaml
    attributes:
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.hw.gpu.io
  type: metric
  brief: Received and transmitted bytes by the GPU.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - receive
    - transmit
    requirement_level: required
    stability: development
  metric_name: hw.gpu.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/gpu-metrics.yaml
    attributes:
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.gpu.memory.limit
  type: metric
  brief: Size of the GPU memory.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.gpu.memory.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/gpu-metrics.yaml
    attributes:
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.gpu.memory.utilization
  type: metric
  brief: Fraction of GPU memory used.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.gpu.memory.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/gpu-metrics.yaml
    attributes:
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.hw.gpu.memory.usage
  type: metric
  brief: GPU memory used.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  metric_name: hw.gpu.memory.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/gpu-metrics.yaml
    attributes:
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.hw.gpu.utilization
  type: metric
  brief: Fraction of time spent in a specific task.
  stability: development
  attributes:
  - name: hw.name
    type: string
    brief: |
      An easily-recognizable name for the hardware component
    examples:
    - eth0
    requirement_level: recommended
    stability: development
  - name: hw.parent
    type: string
    brief: |
      Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
    examples:
    - dellStorage_perc_0
    requirement_level: recommended
    stability: development
  - name: hw.driver_version
    type: string
    brief: |
      Driver version for the hardware component
    examples:
    - 10.2.1-3
    requirement_level: recommended
    stability: development
  - name: hw.firmware_version
    type: string
    brief: |
      Firmware version of the hardware component
    examples:
    - 2.0.1
    requirement_level: recommended
    stability: development
  - name: hw.model
    type: string
    brief: |
      Descriptive model name of the hardware component
    examples:
    - PERC H740P
    - Intel(R) Core(TM) i7-10700K
    - Dell XPS 15 Battery
    requirement_level: recommended
    stability: development
  - name: hw.serial_number
    type: string
    brief: |
      Serial number of the hardware component
    examples:
    - CNFCP0123456789
    requirement_level: recommended
    stability: development
  - name: hw.vendor
    type: string
    brief: |
      Vendor name of the hardware component
    examples:
    - Dell
    - HP
    - Intel
    - AMD
    - LSI
    - Lenovo
    requirement_level: recommended
    stability: development
  - name: hw.id
    type: string
    brief: |
      An identifier for the hardware component, unique within the monitored host
    examples:
    - win32battery_battery_testsysa33_1
    requirement_level: required
    stability: development
  - name: hw.gpu.task
    type:
      members:
      - id: decoder
        value: decoder
        brief: Decoder
        stability: development
      - id: encoder
        value: encoder
        brief: Encoder
        stability: development
      - id: general
        value: general
        brief: General
        stability: development
    brief: |
      Type of task the GPU is performing
    examples:
    - decoder
    - encoder
    - general
    requirement_level: recommended
    stability: development
  metric_name: hw.gpu.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/hardware/gpu-metrics.yaml
    attributes:
      hw.driver_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.firmware_version:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.gpu.task:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      hw.id:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.model:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.name:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.parent:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.serial_number:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      hw.vendor:
        source_group: registry.hardware
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: registry.zos
  type: attribute_group
  brief: |
    This document defines attributes of a z/OS resource.
  attributes:
  - name: zos.smf.id
    type: string
    brief: The System Management Facility (SMF) Identifier uniquely identified a z/OS system within a SYSPLEX or mainframe environment and is used for system and performance analysis.
    examples:
    - SYS1
    requirement_level: recommended
    stability: development
  - name: zos.sysplex.name
    type: string
    brief: The name of the SYSPLEX to which the z/OS system belongs too.
    examples:
    - SYSPLEX1
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/zos/registry.yaml
  display_name: z/OS attributes
- id: entity.zos.software
  type: entity
  brief: A software resource running on a z/OS system.
  stability: development
  attributes:
  - name: zos.sysplex.name
    type: string
    brief: The name of the SYSPLEX to which the z/OS system belongs too.
    examples:
    - SYSPLEX1
    requirement_level: required
    stability: development
  - name: zos.smf.id
    type: string
    brief: The System Management Facility (SMF) Identifier uniquely identified a z/OS system within a SYSPLEX or mainframe environment and is used for system and performance analysis.
    examples:
    - SYS1
    requirement_level: required
    stability: development
  - name: mainframe.lpar.name
    type: string
    brief: Name of the logical partition that hosts a systems with a mainframe operating system.
    examples:
    - LPAR01
    requirement_level: recommended
    stability: development
  name: zos.software
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/zos/entities.yaml
    attributes:
      mainframe.lpar.name:
        source_group: registry.mainframe.lpar
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      zos.smf.id:
        source_group: registry.zos
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      zos.sysplex.name:
        source_group: registry.zos
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.geo
  type: attribute_group
  brief: |
    Geo fields can carry data about a specific location related to an event. This geolocation information can be derived from techniques such as Geo IP, or be user-supplied.
    Note: Geo attributes are typically used under another namespace, such as client.* and describe the location of the corresponding entity (device, end-user, etc). Semantic conventions that reference geo attributes (as a root namespace) or embed them (under their own namespace) SHOULD document what geo attributes describe in the scope of that convention.
  attributes:
  - name: geo.locality.name
    type: string
    brief: |
      Locality name. Represents the name of a city, town, village, or similar populated place.
    examples:
    - Montreal
    - Berlin
    requirement_level: recommended
    stability: development
  - name: geo.continent.code
    type:
      members:
      - id: af
        value: AF
        brief: Africa
        stability: development
      - id: an
        value: AN
        brief: Antarctica
        stability: development
      - id: as
        value: AS
        brief: Asia
        stability: development
      - id: eu
        value: EU
        brief: Europe
        stability: development
      - id: na
        value: NA
        brief: North America
        stability: development
      - id: oc
        value: OC
        brief: Oceania
        stability: development
      - id: sa
        value: SA
        brief: South America
        stability: development
    brief: |
      Two-letter code representing continent’s name.
    requirement_level: recommended
    stability: development
  - name: geo.country.iso_code
    type: string
    brief: |
      Two-letter ISO Country Code ([ISO 3166-1 alpha2](https://wikipedia.org/wiki/ISO_3166-1#Codes)).
    examples:
    - CA
    requirement_level: recommended
    stability: development
  - name: geo.location.lon
    type: double
    brief: |
      Longitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).
    examples:
    - -73.61483
    requirement_level: recommended
    stability: development
  - name: geo.location.lat
    type: double
    brief: |
      Latitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).
    examples:
    - 45.505918
    requirement_level: recommended
    stability: development
  - name: geo.postal_code
    type: string
    brief: |
      Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.
    examples:
    - '94040'
    requirement_level: recommended
    stability: development
  - name: geo.region.iso_code
    type: string
    brief: |
      Region ISO code ([ISO 3166-2](https://wikipedia.org/wiki/ISO_3166-2)).
    examples:
    - CA-QC
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/geo/registry.yaml
- id: metric.system.uptime
  type: metric
  brief: The time the system has been running.
  note: |
    Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
    The actual accuracy would depend on the instrumentation and operating system.
  stability: development
  metric_name: system.uptime
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.cpu.physical.count
  type: metric
  brief: Reports the number of actual physical processor cores on the hardware.
  note: Calculated by multiplying the number of sockets by the number of cores per socket
  stability: development
  metric_name: system.cpu.physical.count
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.cpu.logical.count
  type: metric
  brief: Reports the number of logical (virtual) processor cores created by the operating system to manage multitasking.
  note: Calculated by multiplying the number of sockets by the number of cores per socket, and then by the number of threads per core
  stability: development
  metric_name: system.cpu.logical.count
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.cpu.time
  type: metric
  brief: Seconds each logical CPU spent on each mode.
  stability: development
  attributes:
  - name: cpu.logical_number
    type: int
    brief: The logical CPU number [0..n-1]
    examples:
    - 1
    requirement_level: recommended
    stability: development
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The mode of the CPU
    examples:
    - user
    - system
    requirement_level: recommended
    note: 'Following states SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`'
    stability: development
  metric_name: system.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      cpu.logical_number:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.cpu.utilization
  type: metric
  brief: For each logical CPU, the utilization is calculated as the change in cumulative CPU time (cpu.time) over a measurement interval, divided by the elapsed time.
  stability: development
  attributes:
  - name: cpu.logical_number
    type: int
    brief: The logical CPU number [0..n-1]
    examples:
    - 1
    requirement_level: recommended
    stability: development
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The mode of the CPU
    examples:
    - user
    - system
    requirement_level: recommended
    note: 'Following modes SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`'
    stability: development
  metric_name: system.cpu.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      cpu.logical_number:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.cpu.frequency
  type: metric
  brief: Operating frequency of the logical CPU in Hertz.
  stability: development
  attributes:
  - name: cpu.logical_number
    type: int
    brief: The logical CPU number [0..n-1]
    examples:
    - 1
    requirement_level: recommended
    stability: development
  metric_name: system.cpu.frequency
  instrument: gauge
  unit: Hz
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      cpu.logical_number:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.memory.usage
  type: metric
  brief: Reports memory in use by state.
  stability: development
  attributes:
  - name: system.memory.state
    type:
      members:
      - id: used
        value: used
        brief: Actual used virtual memory in bytes.
        note: |
          Calculation based on the operating system metrics. On Linux, this corresponds to "MemTotal - MemAvailable" from /proc/meminfo, which more accurately reflects memory in active use by applications compared to older formulas based on free, cached, and buffers. If MemAvailable is not available, a fallback to those older formulas may be used.
        stability: development
      - id: free
        value: free
        stability: development
      - id: shared
        value: shared
        stability: development
        deprecated:
          reason: uncategorized
          note: Removed, report shared memory usage with `metric.system.memory.shared` metric
      - id: buffers
        value: buffers
        stability: development
      - id: cached
        value: cached
        stability: development
    brief: The memory state
    examples:
    - free
    - cached
    requirement_level: recommended
    stability: development
  metric_name: system.memory.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.memory.state:
        source_group: registry.system.memory
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.memory.limit
  type: metric
  brief: Total virtual memory available in the system.
  stability: development
  metric_name: system.memory.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.memory.shared
  type: metric
  brief: Shared memory used (mostly by tmpfs).
  note: |
    Equivalent of `shared` from [`free` command](https://man7.org/linux/man-pages/man1/free.1.html) or
    `Shmem` from [`/proc/meminfo`](https://man7.org/linux/man-pages/man5/proc.5.html)"
  stability: development
  metric_name: system.memory.shared
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.memory.utilization
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.memory.state
    type:
      members:
      - id: used
        value: used
        brief: Actual used virtual memory in bytes.
        note: |
          Calculation based on the operating system metrics. On Linux, this corresponds to "MemTotal - MemAvailable" from /proc/meminfo, which more accurately reflects memory in active use by applications compared to older formulas based on free, cached, and buffers. If MemAvailable is not available, a fallback to those older formulas may be used.
        stability: development
      - id: free
        value: free
        stability: development
      - id: shared
        value: shared
        stability: development
        deprecated:
          reason: uncategorized
          note: Removed, report shared memory usage with `metric.system.memory.shared` metric
      - id: buffers
        value: buffers
        stability: development
      - id: cached
        value: cached
        stability: development
    brief: The memory state
    examples:
    - free
    - cached
    requirement_level: recommended
    stability: development
  metric_name: system.memory.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.memory.state:
        source_group: registry.system.memory
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.paging.usage
  type: metric
  brief: Unix swap or windows pagefile usage.
  stability: development
  attributes:
  - name: system.paging.state
    type:
      members:
      - id: used
        value: used
        stability: development
      - id: free
        value: free
        stability: development
    brief: The memory paging state
    examples:
    - free
    requirement_level: recommended
    stability: development
  - name: system.device
    type: string
    brief: Unique identifier for the device responsible for managing paging operations.
    examples:
    - /dev/dm-0
    requirement_level: recommended
    stability: development
  metric_name: system.paging.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      system.paging.state:
        source_group: registry.system.paging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.paging.utilization
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.paging.state
    type:
      members:
      - id: used
        value: used
        stability: development
      - id: free
        value: free
        stability: development
    brief: The memory paging state
    examples:
    - free
    requirement_level: recommended
    stability: development
  - name: system.device
    type: string
    brief: Unique identifier for the device responsible for managing paging operations.
    examples:
    - /dev/dm-0
    requirement_level: recommended
    stability: development
  metric_name: system.paging.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      system.paging.state:
        source_group: registry.system.paging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.paging.faults
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.paging.type
    type:
      members:
      - id: major
        value: major
        stability: development
      - id: minor
        value: minor
        stability: development
    brief: The memory paging type
    examples:
    - minor
    requirement_level: recommended
    stability: development
  metric_name: system.paging.faults
  instrument: counter
  unit: '{fault}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.paging.type:
        source_group: registry.system.paging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.paging.operations
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.paging.type
    type:
      members:
      - id: major
        value: major
        stability: development
      - id: minor
        value: minor
        stability: development
    brief: The memory paging type
    examples:
    - minor
    requirement_level: recommended
    stability: development
  - name: system.paging.direction
    type:
      members:
      - id: in
        value: in
        stability: development
      - id: out
        value: out
        stability: development
    brief: The paging access direction
    examples:
    - in
    requirement_level: recommended
    stability: development
  metric_name: system.paging.operations
  instrument: counter
  unit: '{operation}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.paging.direction:
        source_group: registry.system.paging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.paging.type:
        source_group: registry.system.paging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.disk.io
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  metric_name: system.disk.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      disk.io.direction:
        source_group: registry.disk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.disk.operations
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  metric_name: system.disk.operations
  instrument: counter
  unit: '{operation}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      disk.io.direction:
        source_group: registry.disk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.disk.io_time
  type: metric
  brief: Time disk spent activated.
  note: |
    The real elapsed time ("wall clock") used in the I/O path (time from operations running in parallel are not counted). Measured as:

    - Linux: Field 13 from [procfs-diskstats](https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats)
    - Windows: The complement of
      ["Disk\% Idle Time"](https://learn.microsoft.com/archive/blogs/askcore/windows-performance-monitor-disk-counters-explained#windows-performance-monitor-disk-counters-explained)
      performance counter: `uptime * (100 - "Disk\% Idle Time") / 100`
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  metric_name: system.disk.io_time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.disk.operation_time
  type: metric
  brief: Sum of the time each operation took to complete.
  note: |
    Because it is the sum of time each request took, parallel-issued requests each contribute to make the count grow. Measured as:

    - Linux: Fields 7 & 11 from [procfs-diskstats](https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats)
    - Windows: "Avg. Disk sec/Read" perf counter multiplied by "Disk Reads/sec" perf counter (similar for Writes)
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  metric_name: system.disk.operation_time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      disk.io.direction:
        source_group: registry.disk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.disk.merged
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  metric_name: system.disk.merged
  instrument: counter
  unit: '{operation}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      disk.io.direction:
        source_group: registry.disk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.disk.limit
  type: metric
  brief: The total storage capacity of the disk.
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  metric_name: system.disk.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.filesystem.usage
  type: metric
  brief: Reports a filesystem's space usage across different states.
  note: |
    The sum of all `system.filesystem.usage` values over the different `system.filesystem.state` attributes
    SHOULD equal the total storage capacity of the filesystem, that is `system.filesystem.limit`.
  stability: development
  attributes:
  - name: system.filesystem.state
    type:
      members:
      - id: used
        value: used
        stability: development
      - id: free
        value: free
        stability: development
      - id: reserved
        value: reserved
        stability: development
    brief: The filesystem state
    examples:
    - used
    requirement_level: recommended
    stability: development
  - name: system.filesystem.type
    type:
      members:
      - id: fat32
        value: fat32
        stability: development
      - id: exfat
        value: exfat
        stability: development
      - id: ntfs
        value: ntfs
        stability: development
      - id: refs
        value: refs
        stability: development
      - id: hfsplus
        value: hfsplus
        stability: development
      - id: ext4
        value: ext4
        stability: development
    brief: The filesystem type
    examples:
    - ext4
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mode
    type: string
    brief: The filesystem mode
    examples:
    - rw, ro
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mountpoint
    type: string
    brief: The filesystem mount path
    examples:
    - /mnt/data
    requirement_level: recommended
    stability: development
  - name: system.device
    type: string
    brief: Identifier for the device where the filesystem resides.
    examples:
    - /dev/sda
    - \network-drive
    requirement_level: recommended
    stability: development
  metric_name: system.filesystem.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      system.filesystem.mode:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.mountpoint:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.state:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.type:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.filesystem.utilization
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.filesystem.state
    type:
      members:
      - id: used
        value: used
        stability: development
      - id: free
        value: free
        stability: development
      - id: reserved
        value: reserved
        stability: development
    brief: The filesystem state
    examples:
    - used
    requirement_level: recommended
    stability: development
  - name: system.filesystem.type
    type:
      members:
      - id: fat32
        value: fat32
        stability: development
      - id: exfat
        value: exfat
        stability: development
      - id: ntfs
        value: ntfs
        stability: development
      - id: refs
        value: refs
        stability: development
      - id: hfsplus
        value: hfsplus
        stability: development
      - id: ext4
        value: ext4
        stability: development
    brief: The filesystem type
    examples:
    - ext4
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mode
    type: string
    brief: The filesystem mode
    examples:
    - rw, ro
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mountpoint
    type: string
    brief: The filesystem mount path
    examples:
    - /mnt/data
    requirement_level: recommended
    stability: development
  - name: system.device
    type: string
    brief: Identifier for the device where the filesystem resides.
    examples:
    - /dev/sda
    - \network-drive
    requirement_level: recommended
    stability: development
  metric_name: system.filesystem.utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      system.filesystem.mode:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.mountpoint:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.state:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.type:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.system.filesystem.limit
  type: metric
  brief: The total storage capacity of the filesystem.
  stability: development
  attributes:
  - name: system.filesystem.type
    type:
      members:
      - id: fat32
        value: fat32
        stability: development
      - id: exfat
        value: exfat
        stability: development
      - id: ntfs
        value: ntfs
        stability: development
      - id: refs
        value: refs
        stability: development
      - id: hfsplus
        value: hfsplus
        stability: development
      - id: ext4
        value: ext4
        stability: development
    brief: The filesystem type
    examples:
    - ext4
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mode
    type: string
    brief: The filesystem mode
    examples:
    - rw, ro
    requirement_level: recommended
    stability: development
  - name: system.filesystem.mountpoint
    type: string
    brief: The filesystem mount path
    examples:
    - /mnt/data
    requirement_level: recommended
    stability: development
  - name: system.device
    type: string
    brief: Identifier for the device where the filesystem resides.
    examples:
    - /dev/sda
    - \network-drive
    requirement_level: recommended
    stability: development
  metric_name: system.filesystem.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.device:
        source_group: registry.system
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      system.filesystem.mode:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.mountpoint:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.filesystem.type:
        source_group: registry.system.filesystem
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.network.packet.dropped
  type: metric
  brief: Count of packets that are dropped or discarded even though there was no error.
  note: |
    Measured as:

    - Linux: the `drop` column in `/proc/net/dev` ([source](https://web.archive.org/web/20180321091318/http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html))
    - Windows: [`InDiscards`/`OutDiscards`](https://docs.microsoft.com/windows/win32/api/netioapi/ns-netioapi-mib_if_row2)
      from [`GetIfEntry2`](https://docs.microsoft.com/windows/win32/api/netioapi/nf-netioapi-getifentry2)
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: system.network.packet.dropped
  instrument: counter
  unit: '{packet}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.network.packet.count
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  metric_name: system.network.packet.count
  instrument: counter
  unit: '{packet}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.network.errors
  type: metric
  brief: Count of network errors detected.
  note: |
    Measured as:

    - Linux: the `errs` column in `/proc/net/dev` ([source](https://web.archive.org/web/20180321091318/http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html)).
    - Windows: [`InErrors`/`OutErrors`](https://docs.microsoft.com/windows/win32/api/netioapi/ns-netioapi-mib_if_row2)
      from [`GetIfEntry2`](https://docs.microsoft.com/windows/win32/api/netioapi/nf-netioapi-getifentry2).
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: system.network.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.network.io
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: system.network.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.network.connection.count
  type: metric
  brief: TODO.
  stability: development
  attributes:
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  - name: network.connection.state
    type:
      members:
      - id: closed
        value: closed
        stability: development
      - id: close_wait
        value: close_wait
        stability: development
      - id: closing
        value: closing
        stability: development
      - id: established
        value: established
        stability: development
      - id: fin_wait_1
        value: fin_wait_1
        stability: development
      - id: fin_wait_2
        value: fin_wait_2
        stability: development
      - id: last_ack
        value: last_ack
        stability: development
      - id: listen
        value: listen
        stability: development
      - id: syn_received
        value: syn_received
        stability: development
      - id: syn_sent
        value: syn_sent
        stability: development
      - id: time_wait
        value: time_wait
        stability: development
    brief: The state of network connection
    examples:
    - close_wait
    requirement_level: recommended
    note: Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)
    stability: development
  metric_name: system.network.connection.count
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      network.connection.state:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.process.count
  type: metric
  brief: Total number of processes in each state.
  stability: development
  attributes:
  - name: system.process.status
    type:
      members:
      - id: running
        value: running
        stability: development
      - id: sleeping
        value: sleeping
        stability: development
      - id: stopped
        value: stopped
        stability: development
      - id: defunct
        value: defunct
        stability: development
    brief: |
      The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)
    examples:
    - running
    requirement_level: recommended
    stability: development
  metric_name: system.process.count
  instrument: updowncounter
  unit: '{process}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      system.process.status:
        source_group: registry.system.process
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.process.created
  type: metric
  brief: Total number of processes created over uptime of the host.
  stability: development
  metric_name: system.process.created
  instrument: counter
  unit: '{process}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.linux.memory.available
  type: metric
  brief: An estimate of how much memory is available for starting new applications, without causing swapping.
  note: |
    This is an alternative to `system.memory.usage` metric with `state=free`.
    Linux starting from 3.14 exports "available" memory. It takes "free" memory as a baseline, and then factors in kernel-specific values.
    This is supposed to be more accurate than just "free" memory.
    For reference, see the calculations [here](https://superuser.com/a/980821).
    See also `MemAvailable` in [/proc/meminfo](https://man7.org/linux/man-pages/man5/proc.5.html).
  stability: development
  metric_name: system.linux.memory.available
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.system.linux.memory.slab.usage
  type: metric
  brief: Reports the memory used by the Linux kernel for managing caches of frequently used objects.
  note: |
    The sum over the `reclaimable` and `unreclaimable` state values in `linux.memory.slab.usage` SHOULD be equal to the total slab memory available on the system.
    Note that the total slab memory is not constant and may vary over time.
    See also the [Slab allocator](https://blogs.oracle.com/linux/post/understanding-linux-kernel-memory-statistics) and `Slab` in [/proc/meminfo](https://man7.org/linux/man-pages/man5/proc.5.html).
  stability: development
  attributes:
  - name: linux.memory.slab.state
    type:
      members:
      - id: reclaimable
        value: reclaimable
        stability: development
      - id: unreclaimable
        value: unreclaimable
        stability: development
    brief: The Linux Slab memory state
    examples:
    - reclaimable
    - unreclaimable
    requirement_level: recommended
    stability: development
  metric_name: system.linux.memory.slab.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/system/metrics.yaml
    attributes:
      linux.memory.slab.state:
        source_group: registry.linux.memory
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - host
  annotations:
    code_generation:
      metric_value_type: int
- id: entity.cloudfoundry.system
  type: entity
  brief: |
    The system component which is monitored.
  stability: development
  attributes:
  - name: cloudfoundry.system.id
    type: string
    brief: |
      A guid or another name describing the event source.
    examples:
    - cf/gorouter
    requirement_level: recommended
    note: |
      CloudFoundry defines the `source_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
      It is used for logs and metrics emitted by CloudFoundry. It is
      supposed to contain the component name, e.g. "gorouter", for
      CloudFoundry components.

      When system components are instrumented, values from the
      [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
      should be used. The `system.id` should be set to
      `spec.deployment/spec.name`.
    stability: development
  - name: cloudfoundry.system.instance.id
    type: string
    brief: |
      A guid describing the concrete instance of the event source.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
      It is used for logs and metrics emitted by CloudFoundry. It is
      supposed to contain the vm id for CloudFoundry components.

      When system components are instrumented, values from the
      [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
      should be used. The `system.instance.id` should be set to `spec.id`.
    stability: development
  name: cloudfoundry.system
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudfoundry/entities.yaml
    attributes:
      cloudfoundry.system.id:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloudfoundry.system.instance.id:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.cloudfoundry.app
  type: entity
  brief: |
    The application which is monitored.
  stability: development
  attributes:
  - name: cloudfoundry.app.name
    type: string
    brief: |
      The name of the application.
    examples:
    - my-app-name
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.application_name`. This is the same value
      as reported by `cf apps`.
    stability: development
  - name: cloudfoundry.app.id
    type: string
    brief: |
      The guid of the application.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.application_id`. This is the same value as
      reported by `cf app <app-name> --guid`.
    stability: development
  name: cloudfoundry.app
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudfoundry/entities.yaml
    attributes:
      cloudfoundry.app.id:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloudfoundry.app.name:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.cloudfoundry.space
  type: entity
  brief: |
    The space of the application which is monitored.
  stability: development
  attributes:
  - name: cloudfoundry.space.name
    type: string
    brief: |
      The name of the CloudFoundry space the application is running in.
    examples:
    - my-space-name
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.space_name`. This is the same value as
      reported by `cf spaces`.
    stability: development
  - name: cloudfoundry.space.id
    type: string
    brief: |
      The guid of the CloudFoundry space the application is running in.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.space_id`. This is the same value as
      reported by `cf space <space-name> --guid`.
    stability: development
  name: cloudfoundry.space
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudfoundry/entities.yaml
    attributes:
      cloudfoundry.space.id:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloudfoundry.space.name:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.cloudfoundry.org
  type: entity
  brief: |
    The organization of the application which is monitored.
  stability: development
  attributes:
  - name: cloudfoundry.org.name
    type: string
    brief: |
      The name of the CloudFoundry organization the app is running in.
    examples:
    - my-org-name
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.org_name`. This is the same value as
      reported by `cf orgs`.
    stability: development
  - name: cloudfoundry.org.id
    type: string
    brief: |
      The guid of the CloudFoundry org the application is running in.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.org_id`. This is the same value as
      reported by `cf org <org-name> --guid`.
    stability: development
  name: cloudfoundry.org
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudfoundry/entities.yaml
    attributes:
      cloudfoundry.org.id:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloudfoundry.org.name:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.cloudfoundry.process
  type: entity
  brief: |
    The process of the application which is monitored.
  stability: development
  attributes:
  - name: cloudfoundry.process.id
    type: string
    brief: |
      The UID identifying the process.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      Application instrumentation should use the value from environment
      variable `VCAP_APPLICATION.process_id`. It is supposed to be equal to
      `VCAP_APPLICATION.app_id` for applications deployed to the runtime.
      For system components, this could be the actual PID.
    stability: development
  - name: cloudfoundry.process.type
    type: string
    brief: |
      The type of process.
    examples:
    - web
    requirement_level: recommended
    note: |
      CloudFoundry applications can consist of multiple jobs. Usually the
      main process will be of type `web`. There can be additional background
      tasks or side-cars with different process types.
    stability: development
  name: cloudfoundry.process
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudfoundry/entities.yaml
    attributes:
      cloudfoundry.process.id:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloudfoundry.process.type:
        source_group: registry.cloudfoundry
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.app
  type: attribute_group
  brief: |
    Describes attributes related to client-side applications (e.g. web apps or mobile apps).
  stability: development
  attributes:
  - name: app.installation.id
    type: string
    brief: |
      A unique identifier representing the installation of an application on a specific device
    examples:
    - 2ab2916d-a51f-4ac8-80ee-45ac31a28092
    requirement_level: recommended
    note: |
      Its value SHOULD persist across launches of the same application installation, including through application upgrades.
      It SHOULD change if the application is uninstalled or if all applications of the vendor are uninstalled.
      Additionally, users might be able to reset this value (e.g. by clearing application data).
      If an app is installed multiple times on the same device (e.g. in different accounts on Android), each `app.installation.id` SHOULD have a different value.
      If multiple OpenTelemetry SDKs are used within the same application, they SHOULD use the same value for `app.installation.id`.
      Hardware IDs (e.g. serial number, IMEI, MAC address) MUST NOT be used as the `app.installation.id`.

      For iOS, this value SHOULD be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/identifierforvendor).

      For Android, examples of `app.installation.id` implementations include:

      - [Firebase Installation ID](https://firebase.google.com/docs/projects/manage-installations).
      - A globally unique UUID which is persisted across sessions in your application.
      - [App set ID](https://developer.android.com/identity/app-set-id).
      - [`Settings.getString(Settings.Secure.ANDROID_ID)`](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID).

      More information about Android identifier best practices can be found in the [Android user data IDs guide](https://developer.android.com/training/articles/user-data-ids).
    stability: development
  - name: app.jank.frame_count
    type: int
    brief: A number of frame renders that experienced jank.
    examples:
    - 9
    - 42
    requirement_level: recommended
    note: |
      Depending on platform limitations, the value provided MAY be approximation.
    stability: development
  - name: app.jank.threshold
    type: double
    brief: The minimum rendering threshold for this jank, in seconds.
    examples:
    - 0.016
    - 0.7
    - 1.024
    requirement_level: recommended
    stability: development
  - name: app.jank.period
    type: double
    brief: The time period, in seconds, for which this jank is being reported.
    examples:
    - 1.0
    - 5.0
    - 10.24
    requirement_level: recommended
    stability: development
  - name: app.screen.coordinate.x
    type: int
    brief: The x (horizontal) coordinate of a screen coordinate, in screen pixels.
    examples:
    - 0
    - 131
    requirement_level: recommended
    stability: development
  - name: app.screen.coordinate.y
    type: int
    brief: |
      The y (vertical) component of a screen coordinate, in screen pixels.
    examples:
    - 12
    - 99
    requirement_level: recommended
    stability: development
  - name: app.widget.id
    type: string
    brief: |
      An identifier that uniquely differentiates this widget from other widgets in the same application.
    examples:
    - f9bc787d-ff05-48ad-90e1-fca1d46130b3
    - submit_order_1829
    requirement_level: recommended
    note: |
      A widget is an application component, typically an on-screen visual GUI element.
    stability: development
  - name: app.widget.name
    type: string
    brief: The name of an application widget.
    examples:
    - submit
    - attack
    - Clear Cart
    requirement_level: recommended
    note: |
      A widget is an application component, typically an on-screen visual GUI element.
    stability: development
  - name: app.build_id
    type: string
    brief: Unique identifier for a particular build or compilation of the application.
    examples:
    - 6cff0a7e-cefc-4668-96f5-1273d8b334d0
    - 9f2b833506aa6973a92fde9733e6271f
    - my-app-1.0.0-code-123
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/app/registry.yaml
  display_name: Application Attributes
- id: registry.faas
  type: attribute_group
  brief: FaaS attributes
  attributes:
  - name: faas.name
    type: string
    brief: |
      The name of the single function that this runtime instance executes.
    examples:
    - my-function
    - myazurefunctionapp/some-function-name
    requirement_level: recommended
    note: |
      This is the name of the function as configured/deployed on the FaaS
      platform and is usually different from the name of the callback
      function (which may be stored in the
      [`code.namespace`/`code.function.name`](/docs/general/attributes.md#source-code-attributes)
      span attributes).

      For some cloud providers, the above definition is ambiguous. The following
      definition of function name MUST be used for this attribute
      (and consequently the span name) for the listed cloud providers/products:

      - **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name
        followed by a forward slash followed by the function name (this form
        can also be seen in the resource JSON for the function).
        This means that a span attribute MUST be used, as an Azure function
        app can host multiple functions that would usually share
        a TracerProvider (see also the `cloud.resource_id` attribute).
    stability: development
  - name: faas.version
    type: string
    brief: The immutable version of the function being executed.
    examples:
    - '26'
    - pinkfroid-00002
    requirement_level: recommended
    note: |
      Depending on the cloud provider and platform, use:

      - **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
        (an integer represented as a decimal string).
      - **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)
        (i.e., the function name plus the revision suffix).
      - **Google Cloud Functions:** The value of the
        [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
      - **Azure Functions:** Not applicable. Do not set this attribute.
    stability: development
  - name: faas.instance
    type: string
    brief: |
      The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
    examples:
    - 2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de
    requirement_level: recommended
    note: |
      - **AWS Lambda:** Use the (full) log stream name.
    stability: development
  - name: faas.max_memory
    type: int
    brief: |
      The amount of memory available to the serverless function converted to Bytes.
    examples: 134217728
    requirement_level: recommended
    note: |
      It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).
    stability: development
  - name: faas.trigger
    type:
      members:
      - id: datasource
        value: datasource
        brief: A response to some data source operation such as a database or filesystem read/write
        stability: development
      - id: http
        value: http
        brief: To provide an answer to an inbound HTTP request
        stability: development
      - id: pubsub
        value: pubsub
        brief: A function is set to be executed when messages are sent to a messaging system
        stability: development
      - id: timer
        value: timer
        brief: A function is scheduled to be executed regularly
        stability: development
      - id: other
        value: other
        brief: If none of the others apply
        stability: development
    brief: |
      Type of the trigger which caused this function invocation.
    requirement_level: recommended
    stability: development
  - name: faas.invoked_name
    type: string
    brief: |
      The name of the invoked function.
    examples: my-function
    requirement_level: recommended
    note: |
      SHOULD be equal to the `faas.name` resource attribute of the invoked function.
    stability: development
  - name: faas.invoked_provider
    type:
      members:
      - id: alibaba_cloud
        value: alibaba_cloud
        brief: Alibaba Cloud
        stability: development
      - id: aws
        value: aws
        brief: Amazon Web Services
        stability: development
      - id: azure
        value: azure
        brief: Microsoft Azure
        stability: development
      - id: gcp
        value: gcp
        brief: Google Cloud Platform
        stability: development
      - id: tencent_cloud
        value: tencent_cloud
        brief: Tencent Cloud
        stability: development
    brief: |
      The cloud provider of the invoked function.
    requirement_level: recommended
    note: |
      SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
    stability: development
  - name: faas.invoked_region
    type: string
    brief: |
      The cloud region of the invoked function.
    examples: eu-central-1
    requirement_level: recommended
    note: |
      SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
    stability: development
  - name: faas.invocation_id
    type: string
    brief: |
      The invocation ID of the current function invocation.
    examples: af9d5aa4-a685-4c5f-a22b-444f80b3cc28
    requirement_level: recommended
    stability: development
  - name: faas.time
    type: string
    brief: |
      A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
    examples: 2020-01-23T13:47:06Z
    requirement_level: recommended
    stability: development
  - name: faas.cron
    type: string
    brief: |
      A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).
    examples: 0/5 * * * ? *
    requirement_level: recommended
    stability: development
  - name: faas.coldstart
    type: boolean
    brief: |
      A boolean that is true if the serverless function is executed for the first time (aka cold-start).
    requirement_level: recommended
    stability: development
  - name: faas.document.collection
    type: string
    brief: |
      The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.
    examples:
    - myBucketName
    - myDbName
    requirement_level: recommended
    stability: development
  - name: faas.document.operation
    type:
      members:
      - id: insert
        value: insert
        brief: When a new object is created.
        stability: development
      - id: edit
        value: edit
        brief: When an object is modified.
        stability: development
      - id: delete
        value: delete
        brief: When an object is deleted.
        stability: development
    brief: Describes the type of the operation that was performed on the data.
    requirement_level: recommended
    stability: development
  - name: faas.document.time
    type: string
    brief: |
      A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
    examples: 2020-01-23T13:47:06Z
    requirement_level: recommended
    stability: development
  - name: faas.document.name
    type: string
    brief: |
      The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.
    examples:
    - myFile.txt
    - myTableName
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/faas/registry.yaml
  display_name: Function as a Service Attributes
- id: registry.process
  type: attribute_group
  brief: |
    An operating system process.
  attributes:
  - name: process.pid
    type: int
    brief: |
      Process identifier (PID).
    examples:
    - 1234
    requirement_level: recommended
    stability: development
  - name: process.parent_pid
    type: int
    brief: |
      Parent Process identifier (PPID).
    examples:
    - 111
    requirement_level: recommended
    stability: development
  - name: process.vpid
    type: int
    brief: |
      Virtual process identifier.
    examples:
    - 12
    requirement_level: recommended
    note: |
      The process ID within a PID namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.
    stability: development
  - name: process.session_leader.pid
    type: int
    brief: |
      The PID of the process's session leader. This is also the session ID (SID) of the process.
    examples:
    - 14
    requirement_level: recommended
    stability: development
  - name: process.group_leader.pid
    type: int
    brief: |
      The PID of the process's group leader. This is also the process group ID (PGID) of the process.
    examples:
    - 23
    requirement_level: recommended
    stability: development
  - name: process.executable.build_id.gnu
    type: string
    brief: |
      The GNU build ID as found in the `.note.gnu.build-id` ELF section (hex string).
    examples:
    - c89b11207f6479603b0d49bf291c092c2b719293
    requirement_level: recommended
    stability: development
  - name: process.executable.build_id.go
    type: string
    brief: |
      The Go build ID as retrieved by `go tool buildid <go executable>`.
    examples:
    - foh3mEXu7BLZjsN9pOwG/kATcXlYVCDEFouRMQed_/WwRFB1hPo9LBkekthSPG/x8hMC8emW2cCjXD0_1aY
    requirement_level: recommended
    stability: development
  - name: process.executable.build_id.htlhash
    type: string
    brief: |
      Profiling specific build ID for executables. See the OTel specification for Profiles for more information.
    examples:
    - 600DCAFE4A110000F2BF38C493F5FB92
    requirement_level: recommended
    stability: development
  - name: process.executable.name
    type: string
    brief: |
      The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of `/proc/[pid]/exe`. On Windows, this SHOULD be set to the base name of `GetProcessImageFileNameW`.
    examples:
    - otelcol
    requirement_level: recommended
    stability: development
  - name: process.executable.path
    type: string
    brief: |
      The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
    examples:
    - /usr/bin/cmd/otelcol
    requirement_level: recommended
    stability: development
  - name: process.command
    type: string
    brief: |
      The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.
    examples:
    - cmd/otelcol
    requirement_level: recommended
    stability: development
  - name: process.command_line
    type: string
    brief: |
      The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - C:\cmd\otecol --config="my directory\config.yaml"
    requirement_level: recommended
    stability: development
  - name: process.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.
    examples:
    - - cmd/otecol
      - --config=config.yaml
    requirement_level: recommended
    stability: development
  - name: process.args_count
    type: int
    brief: |
      Length of the process.command_args array
    examples:
    - 4
    requirement_level: recommended
    note: |
      This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
    stability: development
  - name: process.owner
    type: string
    brief: |
      The username of the user that owns the process.
    examples:
    - root
    requirement_level: recommended
    stability: development
  - name: process.user.id
    type: int
    brief: |
      The effective user ID (EUID) of the process.
    examples:
    - 1001
    requirement_level: recommended
    stability: development
  - name: process.user.name
    type: string
    brief: |
      The username of the effective user of the process.
    examples:
    - root
    requirement_level: recommended
    stability: development
  - name: process.real_user.id
    type: int
    brief: |
      The real user ID (RUID) of the process.
    examples:
    - 1000
    requirement_level: recommended
    stability: development
  - name: process.real_user.name
    type: string
    brief: |
      The username of the real user of the process.
    examples:
    - operator
    requirement_level: recommended
    stability: development
  - name: process.saved_user.id
    type: int
    brief: |
      The saved user ID (SUID) of the process.
    examples:
    - 1002
    requirement_level: recommended
    stability: development
  - name: process.saved_user.name
    type: string
    brief: |
      The username of the saved user.
    examples:
    - operator
    requirement_level: recommended
    stability: development
  - name: process.runtime.name
    type: string
    brief: |
      The name of the runtime of this process.
    examples:
    - OpenJDK Runtime Environment
    requirement_level: recommended
    stability: development
  - name: process.runtime.version
    type: string
    brief: |
      The version of the runtime of this process, as returned by the runtime without modification.
    examples: 14.0.2
    requirement_level: recommended
    stability: development
  - name: process.runtime.description
    type: string
    brief: |
      An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
    examples: Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0
    requirement_level: recommended
    stability: development
  - name: process.title
    type: string
    brief: |
      Process title (proctitle)
    examples:
    - cat /etc/hostname
    - xfce4-session
    - bash
    requirement_level: recommended
    note: |
      In many Unix-like systems, process title (proctitle), is the string that represents the name or command line of a running process, displayed by system monitoring tools like ps, top, and htop.
    stability: development
  - name: process.creation.time
    type: string
    brief: |
      The date and time the process was created, in ISO 8601 format.
    examples:
    - 2023-11-21T09:25:34.853Z
    requirement_level: recommended
    stability: development
  - name: process.exit.time
    type: string
    brief: |
      The date and time the process exited, in ISO 8601 format.
    examples:
    - 2023-11-21T09:26:12.315Z
    requirement_level: recommended
    stability: development
  - name: process.exit.code
    type: int
    brief: |
      The exit code of the process.
    examples:
    - 127
    requirement_level: recommended
    stability: development
  - name: process.interactive
    type: boolean
    brief: |
      Whether the process is connected to an interactive shell.
    requirement_level: recommended
    stability: development
  - name: process.working_directory
    type: string
    brief: |
      The working directory of the process.
    examples:
    - /root
    requirement_level: recommended
    stability: development
  - name: process.context_switch_type
    type:
      members:
      - id: voluntary
        value: voluntary
        stability: development
      - id: involuntary
        value: involuntary
        stability: development
    brief: Specifies whether the context switches for this data point were voluntary or involuntary.
    requirement_level: recommended
    stability: development
  - name: process.paging.fault_type
    type:
      members:
      - id: major
        value: major
        stability: development
      - id: minor
        value: minor
        stability: development
    brief: |
      The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.
    requirement_level: recommended
    stability: development
  - name: process.environment_variable
    type: template[string]
    brief: |
      Process environment variables, `<key>` being the environment variable name, the value being the environment variable value.
    examples:
    - ubuntu
    - /usr/local/bin:/usr/bin
    requirement_level: recommended
    note: |
      Examples:

      - an environment variable `USER` with value `"ubuntu"` SHOULD be recorded
      as the `process.environment_variable.USER` attribute with value `"ubuntu"`.

      - an environment variable `PATH` with value `"/usr/local/bin:/usr/bin"`
      SHOULD be recorded as the `process.environment_variable.PATH` attribute
      with value `"/usr/local/bin:/usr/bin"`.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/registry.yaml
  display_name: Process Attributes
- id: registry.process.linux
  type: attribute_group
  brief: Describes Linux Process attributes
  attributes:
  - name: process.linux.cgroup
    type: string
    brief: The control group associated with the process.
    examples:
    - 1:name=systemd:/user.slice/user-1000.slice/session-3.scope
    - 0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope
    requirement_level: recommended
    note: |
      Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the [/proc/\[PID\]/cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) file.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/process/registry.yaml
- id: entity.webengine
  type: entity
  brief: |
    Resource describing the packaged software running the application code. Web engines are typically executed using process.runtime.
  stability: development
  attributes:
  - name: webengine.version
    type: string
    brief: |
      The version of the web engine.
    examples:
    - 21.0.0
    requirement_level: recommended
    stability: development
  - name: webengine.description
    type: string
    brief: |
      Additional description of the web engine (e.g. detailed version and edition information).
    examples:
    - WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final
    requirement_level: recommended
    stability: development
  - name: webengine.name
    type: string
    brief: |
      The name of the web engine.
    examples:
    - WildFly
    requirement_level: required
    stability: development
  name: webengine
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/webengine/entities.yaml
    attributes:
      webengine.description:
        source_group: registry.webengine
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      webengine.name:
        source_group: registry.webengine
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      webengine.version:
        source_group: registry.webengine
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.signalr
  type: attribute_group
  brief: SignalR attributes
  attributes:
  - name: signalr.connection.status
    type:
      members:
      - id: normal_closure
        value: normal_closure
        brief: The connection was closed normally.
        stability: stable
      - id: timeout
        value: timeout
        brief: The connection was closed due to a timeout.
        stability: stable
      - id: app_shutdown
        value: app_shutdown
        brief: The connection was closed because the app is shutting down.
        stability: stable
    brief: SignalR HTTP connection closure status.
    examples:
    - app_shutdown
    - timeout
    requirement_level: recommended
    stability: stable
  - name: signalr.transport
    type:
      members:
      - id: server_sent_events
        value: server_sent_events
        brief: ServerSentEvents protocol
        stability: stable
      - id: long_polling
        value: long_polling
        brief: LongPolling protocol
        stability: stable
      - id: web_sockets
        value: web_sockets
        brief: WebSockets protocol
        stability: stable
    brief: '[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)'
    examples:
    - web_sockets
    - long_polling
    requirement_level: recommended
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/signalr/registry.yaml
  display_name: SignalR Attributes
- id: registry.db
  type: attribute_group
  brief: |
    This group defines the attributes used to describe telemetry in the context of databases.
  attributes:
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level: recommended
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level: recommended
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level: recommended
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level: recommended
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: recommended
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level: recommended
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level: recommended
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.operation.parameter
    type: template[string]
    brief: |
      A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: recommended
    note: |
      For example, a client-side maximum number of rows to read from the database
      MAY be recorded as the `db.operation.parameter.max_rows` attribute.

      `db.query.text` parameters SHOULD be captured using `db.query.parameter.<key>`
      instead of `db.operation.parameter.<key>`.
    stability: development
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level: recommended
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: recommended
    stability: development
  - name: db.system.name
    type:
      members:
      - id: other_sql
        value: other_sql
        brief: Some other SQL database. Fallback only.
        stability: development
      - id: softwareag.adabas
        value: softwareag.adabas
        brief: '[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)'
        stability: development
      - id: actian.ingres
        value: actian.ingres
        brief: '[Actian Ingres](https://www.actian.com/databases/ingres/)'
        stability: development
      - id: aws.dynamodb
        value: aws.dynamodb
        brief: '[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)'
        stability: development
      - id: aws.redshift
        value: aws.redshift
        brief: '[Amazon Redshift](https://aws.amazon.com/redshift/)'
        stability: development
      - id: azure.cosmosdb
        value: azure.cosmosdb
        brief: '[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)'
        stability: development
      - id: intersystems.cache
        value: intersystems.cache
        brief: '[InterSystems Caché](https://www.intersystems.com/products/cache/)'
        stability: development
      - id: cassandra
        value: cassandra
        brief: '[Apache Cassandra](https://cassandra.apache.org/)'
        stability: development
      - id: clickhouse
        value: clickhouse
        brief: '[ClickHouse](https://clickhouse.com/)'
        stability: development
      - id: cockroachdb
        value: cockroachdb
        brief: '[CockroachDB](https://www.cockroachlabs.com/)'
        stability: development
      - id: couchbase
        value: couchbase
        brief: '[Couchbase](https://www.couchbase.com/)'
        stability: development
      - id: couchdb
        value: couchdb
        brief: '[Apache CouchDB](https://couchdb.apache.org/)'
        stability: development
      - id: derby
        value: derby
        brief: '[Apache Derby](https://db.apache.org/derby/)'
        stability: development
      - id: elasticsearch
        value: elasticsearch
        brief: '[Elasticsearch](https://www.elastic.co/elasticsearch)'
        stability: development
      - id: firebirdsql
        value: firebirdsql
        brief: '[Firebird](https://www.firebirdsql.org/)'
        stability: development
      - id: gcp.spanner
        value: gcp.spanner
        brief: '[Google Cloud Spanner](https://cloud.google.com/spanner)'
        stability: development
      - id: geode
        value: geode
        brief: '[Apache Geode](https://geode.apache.org/)'
        stability: development
      - id: h2database
        value: h2database
        brief: '[H2 Database](https://h2database.com/)'
        stability: development
      - id: hbase
        value: hbase
        brief: '[Apache HBase](https://hbase.apache.org/)'
        stability: development
      - id: hive
        value: hive
        brief: '[Apache Hive](https://hive.apache.org/)'
        stability: development
      - id: hsqldb
        value: hsqldb
        brief: '[HyperSQL Database](https://hsqldb.org/)'
        stability: development
      - id: ibm.db2
        value: ibm.db2
        brief: '[IBM Db2](https://www.ibm.com/db2)'
        stability: development
      - id: ibm.informix
        value: ibm.informix
        brief: '[IBM Informix](https://www.ibm.com/products/informix)'
        stability: development
      - id: ibm.netezza
        value: ibm.netezza
        brief: '[IBM Netezza](https://www.ibm.com/products/netezza)'
        stability: development
      - id: influxdb
        value: influxdb
        brief: '[InfluxDB](https://www.influxdata.com/)'
        stability: development
      - id: instantdb
        value: instantdb
        brief: '[Instant](https://www.instantdb.com/)'
        stability: development
      - id: mariadb
        value: mariadb
        brief: '[MariaDB](https://mariadb.org/)'
        stability: stable
      - id: memcached
        value: memcached
        brief: '[Memcached](https://memcached.org/)'
        stability: development
      - id: mongodb
        value: mongodb
        brief: '[MongoDB](https://www.mongodb.com/)'
        stability: development
      - id: microsoft.sql_server
        value: microsoft.sql_server
        brief: '[Microsoft SQL Server](https://www.microsoft.com/sql-server)'
        stability: stable
      - id: mysql
        value: mysql
        brief: '[MySQL](https://www.mysql.com/)'
        stability: stable
      - id: neo4j
        value: neo4j
        brief: '[Neo4j](https://neo4j.com/)'
        stability: development
      - id: opensearch
        value: opensearch
        brief: '[OpenSearch](https://opensearch.org/)'
        stability: development
      - id: oracle.db
        value: oracle.db
        brief: '[Oracle Database](https://www.oracle.com/database/)'
        stability: development
      - id: postgresql
        value: postgresql
        brief: '[PostgreSQL](https://www.postgresql.org/)'
        stability: stable
      - id: redis
        value: redis
        brief: '[Redis](https://redis.io/)'
        stability: development
      - id: sap.hana
        value: sap.hana
        brief: '[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)'
        stability: development
      - id: sap.maxdb
        value: sap.maxdb
        brief: '[SAP MaxDB](https://maxdb.sap.com/)'
        stability: development
      - id: sqlite
        value: sqlite
        brief: '[SQLite](https://www.sqlite.org/)'
        stability: development
      - id: teradata
        value: teradata
        brief: '[Teradata](https://www.teradata.com/)'
        stability: development
      - id: trino
        value: trino
        brief: '[Trino](https://trino.io/)'
        stability: development
    brief: The database management system (DBMS) product as identified by the client instrumentation.
    requirement_level: recommended
    note: |
      The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.
    stability: stable
  - name: db.client.connection.state
    type:
      members:
      - id: idle
        value: idle
        stability: development
      - id: used
        value: used
        stability: development
    brief: The state of a connection in the pool
    examples:
    - idle
    requirement_level: recommended
    stability: development
  - name: db.client.connection.pool.name
    type: string
    brief: |
      The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    examples:
    - myDataSource
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/registry.yaml
  display_name: General Database Attributes
- id: metric.db.client.connections.usage
  type: metric
  brief: Deprecated, use `db.client.connection.count` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: db.client.connection.count
    note: Replaced by `db.client.connection.count`.
  attributes:
  - name: db.client.connections.state
    type:
      members:
      - id: idle
        value: idle
        stability: development
      - id: used
        value: used
        stability: development
    brief: Deprecated, use `db.client.connection.state` instead.
    examples:
    - idle
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.state
      note: Replaced by `db.client.connection.state`.
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.usage
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.client.connections.state:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connections.idle.max
  type: metric
  brief: Deprecated, use `db.client.connection.idle.max` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: db.client.connection.idle.max
    note: Replaced by `db.client.connection.idle.max`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.idle.max
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connections.idle.min
  type: metric
  brief: Deprecated, use `db.client.connection.idle.min` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: db.client.connection.idle.min
    note: Replaced by `db.client.connection.idle.min`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.idle.min
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connections.max
  type: metric
  brief: Deprecated, use `db.client.connection.max` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: db.client.connection.max
    note: Replaced by `db.client.connection.max`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.max
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connections.pending_requests
  type: metric
  brief: Deprecated, use `db.client.connection.pending_requests` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: db.client.connection.pending_requests
    note: Replaced by `db.client.connection.pending_requests`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.pending_requests
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connections.timeouts
  type: metric
  brief: Deprecated, use `db.client.connection.timeouts` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: db.client.connection.timeouts
    note: Replaced by `db.client.connection.timeouts`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.timeouts
  instrument: counter
  unit: '{timeout}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.db.client.connections.create_time
  type: metric
  brief: 'Deprecated, use `db.client.connection.create_time` instead. Note: the unit also changed from `ms` to `s`.'
  stability: development
  deprecated:
    reason: uncategorized
    note: Replaced by `db.client.connection.create_time` with unit `s`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.create_time
  instrument: histogram
  unit: ms
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.connections.wait_time
  type: metric
  brief: 'Deprecated, use `db.client.connection.wait_time` instead. Note: the unit also changed from `ms` to `s`.'
  stability: development
  deprecated:
    reason: uncategorized
    note: Replaced by `db.client.connection.wait_time` with unit `s`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.wait_time
  instrument: histogram
  unit: ms
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.connections.use_time
  type: metric
  brief: 'Deprecated, use `db.client.connection.use_time` instead. Note: the unit also changed from `ms` to `s`.'
  stability: development
  deprecated:
    reason: uncategorized
    note: Replaced by `db.client.connection.use_time` with unit `s`.
  attributes:
  - name: db.client.connections.pool.name
    type: string
    brief: Deprecated, use `db.client.connection.pool.name` instead.
    examples:
    - myDataSource
    requirement_level: required
    stability: development
    deprecated:
      reason: renamed
      renamed_to: db.client.connection.pool.name
      note: Replaced by `db.client.connection.pool.name`.
  metric_name: db.client.connections.use_time
  instrument: histogram
  unit: ms
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.client.connections.pool.name:
        source_group: registry.db.metrics.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.cosmosdb.operation.request_charge
  type: metric
  brief: Deprecated, use `azure.cosmosdb.client.operation.request_charge` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: azure.cosmosdb.client.operation.request_charge
    note: Replaced by `azure.cosmosdb.client.operation.request_charge`.
  attributes:
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call. The operation name MAY be parsed from the query text, in which case it SHOULD be the single operation name found in the query.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.collection.name
    type: string
    brief: Cosmos DB container name.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: If available.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    stability: stable
  - name: db.cosmosdb.sub_status_code
    type: int
    brief: Deprecated, use `azure.cosmosdb.response.sub_status_code` instead.
    examples:
    - 1000
    - 1002
    requirement_level:
      conditionally_required: when response was received and contained sub-code.
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.response.sub_status_code
      note: Replaced by `azure.cosmosdb.response.sub_status_code`.
  - name: db.cosmosdb.consistency_level
    type:
      members:
      - id: strong
        value: Strong
        stability: development
      - id: bounded_staleness
        value: BoundedStaleness
        stability: development
      - id: session
        value: Session
        stability: development
      - id: eventual
        value: Eventual
        stability: development
      - id: consistent_prefix
        value: ConsistentPrefix
        stability: development
    brief: Deprecated, use `cosmosdb.consistency.level` instead.
    examples:
    - Eventual
    - ConsistentPrefix
    - BoundedStaleness
    - Strong
    - Session
    requirement_level:
      conditionally_required: If available.
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.consistency.level
      note: Replaced by `azure.cosmosdb.consistency.level`.
  - name: db.cosmosdb.regions_contacted
    type: string[]
    brief: Deprecated, use `azure.cosmosdb.operation.contacted_regions` instead.
    examples:
    - - North Central US
      - Australia East
      - Australia Southeast
    requirement_level:
      recommended: If available
    stability: development
    deprecated:
      reason: renamed
      renamed_to: azure.cosmosdb.operation.contacted_regions
      note: Replaced by `azure.cosmosdb.operation.contacted_regions`.
  metric_name: db.client.cosmosdb.operation.request_charge
  instrument: histogram
  unit: '{request_unit}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      db.cosmosdb.consistency_level:
        source_group: registry.db.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.cosmosdb.regions_contacted:
        source_group: registry.db.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.cosmosdb.sub_status_code:
        source_group: registry.db.deprecated
        inherited_fields:
        - brief
        - deprecated
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.db.client.cosmosdb.active_instance.count
  type: metric
  brief: Deprecated, use `azure.cosmosdb.client.active_instance.count` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: azure.cosmosdb.client.active_instance.count
    note: Replaced by `azure.cosmosdb.client.active_instance.count`.
  attributes:
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: db.client.cosmosdb.active_instance.count
  instrument: updowncounter
  unit: '{instance}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/deprecated/metrics-deprecated.yaml
    attributes:
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: trace.db.common.minimal
  type: attribute_group
  brief: This group defines the attributes used to perform database client calls.
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: trace.db.common.query
  type: attribute_group
  brief: This group defines the attributes used to perform database client calls.
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: recommended
    stability: development
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: trace.db.common.query_and_collection
  type: attribute_group
  brief: This group defines the attributes used to perform database client calls.
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: recommended
    stability: development
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: trace.db.common.full
  type: attribute_group
  brief: This group documents attributes that describe database call along with network information.
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: recommended
    stability: development
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.system.name
    type:
      members:
      - id: other_sql
        value: other_sql
        brief: Some other SQL database. Fallback only.
        stability: development
      - id: softwareag.adabas
        value: softwareag.adabas
        brief: '[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)'
        stability: development
      - id: actian.ingres
        value: actian.ingres
        brief: '[Actian Ingres](https://www.actian.com/databases/ingres/)'
        stability: development
      - id: aws.dynamodb
        value: aws.dynamodb
        brief: '[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)'
        stability: development
      - id: aws.redshift
        value: aws.redshift
        brief: '[Amazon Redshift](https://aws.amazon.com/redshift/)'
        stability: development
      - id: azure.cosmosdb
        value: azure.cosmosdb
        brief: '[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)'
        stability: development
      - id: intersystems.cache
        value: intersystems.cache
        brief: '[InterSystems Caché](https://www.intersystems.com/products/cache/)'
        stability: development
      - id: cassandra
        value: cassandra
        brief: '[Apache Cassandra](https://cassandra.apache.org/)'
        stability: development
      - id: clickhouse
        value: clickhouse
        brief: '[ClickHouse](https://clickhouse.com/)'
        stability: development
      - id: cockroachdb
        value: cockroachdb
        brief: '[CockroachDB](https://www.cockroachlabs.com/)'
        stability: development
      - id: couchbase
        value: couchbase
        brief: '[Couchbase](https://www.couchbase.com/)'
        stability: development
      - id: couchdb
        value: couchdb
        brief: '[Apache CouchDB](https://couchdb.apache.org/)'
        stability: development
      - id: derby
        value: derby
        brief: '[Apache Derby](https://db.apache.org/derby/)'
        stability: development
      - id: elasticsearch
        value: elasticsearch
        brief: '[Elasticsearch](https://www.elastic.co/elasticsearch)'
        stability: development
      - id: firebirdsql
        value: firebirdsql
        brief: '[Firebird](https://www.firebirdsql.org/)'
        stability: development
      - id: gcp.spanner
        value: gcp.spanner
        brief: '[Google Cloud Spanner](https://cloud.google.com/spanner)'
        stability: development
      - id: geode
        value: geode
        brief: '[Apache Geode](https://geode.apache.org/)'
        stability: development
      - id: h2database
        value: h2database
        brief: '[H2 Database](https://h2database.com/)'
        stability: development
      - id: hbase
        value: hbase
        brief: '[Apache HBase](https://hbase.apache.org/)'
        stability: development
      - id: hive
        value: hive
        brief: '[Apache Hive](https://hive.apache.org/)'
        stability: development
      - id: hsqldb
        value: hsqldb
        brief: '[HyperSQL Database](https://hsqldb.org/)'
        stability: development
      - id: ibm.db2
        value: ibm.db2
        brief: '[IBM Db2](https://www.ibm.com/db2)'
        stability: development
      - id: ibm.informix
        value: ibm.informix
        brief: '[IBM Informix](https://www.ibm.com/products/informix)'
        stability: development
      - id: ibm.netezza
        value: ibm.netezza
        brief: '[IBM Netezza](https://www.ibm.com/products/netezza)'
        stability: development
      - id: influxdb
        value: influxdb
        brief: '[InfluxDB](https://www.influxdata.com/)'
        stability: development
      - id: instantdb
        value: instantdb
        brief: '[Instant](https://www.instantdb.com/)'
        stability: development
      - id: mariadb
        value: mariadb
        brief: '[MariaDB](https://mariadb.org/)'
        stability: stable
      - id: memcached
        value: memcached
        brief: '[Memcached](https://memcached.org/)'
        stability: development
      - id: mongodb
        value: mongodb
        brief: '[MongoDB](https://www.mongodb.com/)'
        stability: development
      - id: microsoft.sql_server
        value: microsoft.sql_server
        brief: '[Microsoft SQL Server](https://www.microsoft.com/sql-server)'
        stability: stable
      - id: mysql
        value: mysql
        brief: '[MySQL](https://www.mysql.com/)'
        stability: stable
      - id: neo4j
        value: neo4j
        brief: '[Neo4j](https://neo4j.com/)'
        stability: development
      - id: opensearch
        value: opensearch
        brief: '[OpenSearch](https://opensearch.org/)'
        stability: development
      - id: oracle.db
        value: oracle.db
        brief: '[Oracle Database](https://www.oracle.com/database/)'
        stability: development
      - id: postgresql
        value: postgresql
        brief: '[PostgreSQL](https://www.postgresql.org/)'
        stability: stable
      - id: redis
        value: redis
        brief: '[Redis](https://redis.io/)'
        stability: development
      - id: sap.hana
        value: sap.hana
        brief: '[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)'
        stability: development
      - id: sap.maxdb
        value: sap.maxdb
        brief: '[SAP MaxDB](https://maxdb.sap.com/)'
        stability: development
      - id: sqlite
        value: sqlite
        brief: '[SQLite](https://www.sqlite.org/)'
        stability: development
      - id: teradata
        value: teradata
        brief: '[Teradata](https://www.teradata.com/)'
        stability: development
      - id: trino
        value: trino
        brief: '[Trino](https://trino.io/)'
        stability: development
    brief: The database management system (DBMS) product as identified by the client instrumentation.
    requirement_level: required
    sampling_relevant: true
    note: |
      The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the database node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: If applicable for this database system.
    note: |
      Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.
      If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: if and only if `network.peer.address` is set.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.system.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.client
  type: span
  brief: This span describes database client call.
  note: |
    Instrumentations SHOULD, when possible, record database spans that cover the duration of
    the corresponding API call as if it was observed by the caller (such as client application).
    For example, if a transient issue happened and was retried within this database call, the corresponding
    span should cover the duration of the logical operation with all retries.

    When a database client provides higher-level convenience APIs for specific operations
    (e.g., calling a stored procedure), which internally generate and execute a generic query,
    it is RECOMMENDED to instrument the higher-level convenience APIs.
    These often allow setting `db.operation.*` attributes, which usually are not
    readily available at the generic query level.

    **Span name** is covered in the [Name](/docs/database/database-spans.md#name) section.

    **Span kind** SHOULD be `CLIENT`. It MAY be set to `INTERNAL` on spans representing
    in-memory database calls.
    It's RECOMMENDED to use `CLIENT` kind when database system being instrumented usually
    runs in a different process than its client or when database calls happen over
    instrumented protocol such as HTTP.

    **Span status** Refer to the [Recording Errors](/docs/general/recording-errors.md)
    document for details on how to record span status. Semantic conventions for
    individual systems SHOULD specify which values of `db.response.status_code`
    classify as errors.
  stability: stable
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The collection name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple collections
      in non-batch operations.

      For batch operations, if the individual operations are known to have the same
      collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.system.name
    type:
      members:
      - id: other_sql
        value: other_sql
        brief: Some other SQL database. Fallback only.
        stability: development
      - id: softwareag.adabas
        value: softwareag.adabas
        brief: '[Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)'
        stability: development
      - id: actian.ingres
        value: actian.ingres
        brief: '[Actian Ingres](https://www.actian.com/databases/ingres/)'
        stability: development
      - id: aws.dynamodb
        value: aws.dynamodb
        brief: '[Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)'
        stability: development
      - id: aws.redshift
        value: aws.redshift
        brief: '[Amazon Redshift](https://aws.amazon.com/redshift/)'
        stability: development
      - id: azure.cosmosdb
        value: azure.cosmosdb
        brief: '[Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)'
        stability: development
      - id: intersystems.cache
        value: intersystems.cache
        brief: '[InterSystems Caché](https://www.intersystems.com/products/cache/)'
        stability: development
      - id: cassandra
        value: cassandra
        brief: '[Apache Cassandra](https://cassandra.apache.org/)'
        stability: development
      - id: clickhouse
        value: clickhouse
        brief: '[ClickHouse](https://clickhouse.com/)'
        stability: development
      - id: cockroachdb
        value: cockroachdb
        brief: '[CockroachDB](https://www.cockroachlabs.com/)'
        stability: development
      - id: couchbase
        value: couchbase
        brief: '[Couchbase](https://www.couchbase.com/)'
        stability: development
      - id: couchdb
        value: couchdb
        brief: '[Apache CouchDB](https://couchdb.apache.org/)'
        stability: development
      - id: derby
        value: derby
        brief: '[Apache Derby](https://db.apache.org/derby/)'
        stability: development
      - id: elasticsearch
        value: elasticsearch
        brief: '[Elasticsearch](https://www.elastic.co/elasticsearch)'
        stability: development
      - id: firebirdsql
        value: firebirdsql
        brief: '[Firebird](https://www.firebirdsql.org/)'
        stability: development
      - id: gcp.spanner
        value: gcp.spanner
        brief: '[Google Cloud Spanner](https://cloud.google.com/spanner)'
        stability: development
      - id: geode
        value: geode
        brief: '[Apache Geode](https://geode.apache.org/)'
        stability: development
      - id: h2database
        value: h2database
        brief: '[H2 Database](https://h2database.com/)'
        stability: development
      - id: hbase
        value: hbase
        brief: '[Apache HBase](https://hbase.apache.org/)'
        stability: development
      - id: hive
        value: hive
        brief: '[Apache Hive](https://hive.apache.org/)'
        stability: development
      - id: hsqldb
        value: hsqldb
        brief: '[HyperSQL Database](https://hsqldb.org/)'
        stability: development
      - id: ibm.db2
        value: ibm.db2
        brief: '[IBM Db2](https://www.ibm.com/db2)'
        stability: development
      - id: ibm.informix
        value: ibm.informix
        brief: '[IBM Informix](https://www.ibm.com/products/informix)'
        stability: development
      - id: ibm.netezza
        value: ibm.netezza
        brief: '[IBM Netezza](https://www.ibm.com/products/netezza)'
        stability: development
      - id: influxdb
        value: influxdb
        brief: '[InfluxDB](https://www.influxdata.com/)'
        stability: development
      - id: instantdb
        value: instantdb
        brief: '[Instant](https://www.instantdb.com/)'
        stability: development
      - id: mariadb
        value: mariadb
        brief: '[MariaDB](https://mariadb.org/)'
        stability: stable
      - id: memcached
        value: memcached
        brief: '[Memcached](https://memcached.org/)'
        stability: development
      - id: mongodb
        value: mongodb
        brief: '[MongoDB](https://www.mongodb.com/)'
        stability: development
      - id: microsoft.sql_server
        value: microsoft.sql_server
        brief: '[Microsoft SQL Server](https://www.microsoft.com/sql-server)'
        stability: stable
      - id: mysql
        value: mysql
        brief: '[MySQL](https://www.mysql.com/)'
        stability: stable
      - id: neo4j
        value: neo4j
        brief: '[Neo4j](https://neo4j.com/)'
        stability: development
      - id: opensearch
        value: opensearch
        brief: '[OpenSearch](https://opensearch.org/)'
        stability: development
      - id: oracle.db
        value: oracle.db
        brief: '[Oracle Database](https://www.oracle.com/database/)'
        stability: development
      - id: postgresql
        value: postgresql
        brief: '[PostgreSQL](https://www.postgresql.org/)'
        stability: stable
      - id: redis
        value: redis
        brief: '[Redis](https://redis.io/)'
        stability: development
      - id: sap.hana
        value: sap.hana
        brief: '[SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)'
        stability: development
      - id: sap.maxdb
        value: sap.maxdb
        brief: '[SAP MaxDB](https://maxdb.sap.com/)'
        stability: development
      - id: sqlite
        value: sqlite
        brief: '[SQLite](https://www.sqlite.org/)'
        stability: development
      - id: teradata
        value: teradata
        brief: '[Teradata](https://www.teradata.com/)'
        stability: development
      - id: trino
        value: trino
        brief: '[Trino](https://trino.io/)'
        stability: development
    brief: The database management system (DBMS) product as identified by the client instrumentation.
    requirement_level: required
    sampling_relevant: true
    note: |
      The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the database node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      recommended: If applicable for this database system.
    note: |
      Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.
      If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: if and only if `network.peer.address` is set.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.system.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.sql_server.client
  type: span
  brief: |
    Spans representing calls to Microsoft SQL Server adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).
  note: |
    `db.system.name` MUST be set to `"microsoft.sql_server"` and SHOULD be provided **at span creation time**.
  stability: stable
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple collection names.
    note: |
      The collection name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The database associated with the connection, qualified by the instance name.
    examples:
    - instance1\|products
    - customers
    requirement_level:
      conditionally_required: If available without an additional network call.
    sampling_relevant: true
    note: |
      When connected to a default instance, `db.namespace` SHOULD be set to the name of
      the database. When connected to a [named instance](https://learn.microsoft.com/sql/connect/jdbc/building-the-connection-url#named-and-multiple-sql-server-instances),
      `db.namespace` SHOULD be set to the combination of instance and database name following the `{instance_name}|{database_name}` pattern.

      A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

      If instrumentation is unable to capture the connection's currently associated database on each query
      without triggering an additional query to be executed (e.g. `SELECT DB_NAME()`),
      then it is RECOMMENDED to fallback and use the database provided when the connection was established.

      Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - EXECUTE
    - INSERT
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple operation names.
    note: |
      The operation name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [Microsoft SQL Server error](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors) number represented as a string.
    examples:
    - '102'
    - '40020'
    requirement_level:
      conditionally_required: If response has ended with warning or an error.
    note: |
      Microsoft SQL Server does not report SQLSTATE.
      Instrumentations SHOULD use [error severity](https://learn.microsoft.com/sql/relational-databases/errors-events/database-engine-error-severities) returned along with the status code to determine the status of the span. Response codes with severity 11 or higher SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.postgresql.client
  type: span
  brief: |
    Spans representing calls to a PostgreSQL database adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).
  note: |
    `db.system.name` MUST be set to `"postgresql"` and SHOULD be provided **at span creation time**.
  stability: stable
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple collection names.
    note: |
      The collection name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - EXECUTE
    - INSERT
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple operation names.
    note: |
      The operation name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The schema associated with the connection, qualified by the database name.
    examples:
    - mydatabase.products
    - mydatabase.customers
    requirement_level:
      conditionally_required: If available without an additional network call.
    sampling_relevant: true
    note: |
      `db.namespace` SHOULD be set to the combination of database and schema name following the `{database}|{schema}` pattern.
      If either `{database}` or `{schema}` is unavailable, `db.namespace` SHOULD be set to the other (without any `|` separator).

      A connection's currently associated database may change during its lifetime, e.g. from executing `SET search_path TO <schema>`.
      If the search path has multiple schemas, the first schema in the search path SHOULD be used.

      If instrumentation is unable to capture the connection's currently associated schema on each query
      without triggering an additional query to be executed (e.g. `SELECT current_schema()`),
      then it is RECOMMENDED to fallback and use the schema provided when the connection was established.

      Instrumentation SHOULD document if `db.namespace` reflects the schema provided when the connection was established.

      Instrumentation MAY use the user name when the connection was established as a stand-in for the schema name.

      Instrumentation SHOULD document if `db.namespace` reflects the user provided when the connection was established.

      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [PostgreSQL error code](https://www.postgresql.org/docs/current/errcodes-appendix.html).
    examples:
    - '08000'
    - 08P01
    requirement_level:
      conditionally_required: If response has ended with warning or an error.
    note: |
      PostgreSQL follows SQL standard conventions for [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE). Response codes of "Class 02" or higher SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.mysql.client
  type: span
  brief: |
    Spans representing calls to a MySQL Server adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).
  note: |
    `db.system.name` MUST be set to `"mysql"` and SHOULD be provided **at span creation time**.
  stability: stable
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple collection names.
    note: |
      The collection name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - EXECUTE
    - INSERT
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple operation names.
    note: |
      The operation name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.namespace
    type: string
    brief: The database associated with the connection.
    examples:
    - products
    - customers
    requirement_level:
      conditionally_required: If available without an additional network call.
    sampling_relevant: true
    note: |
      A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

      If instrumentation is unable to capture the connection's currently associated database on each query
      without triggering an additional query to be executed (e.g. `SELECT DATABASE()`),
      then it is RECOMMENDED to fallback and use the database provided when the connection was established.

      Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [MySQL error number](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html) recorded as a string.
    examples:
    - '1005'
    - MY-010016
    requirement_level:
      conditionally_required: If response has ended with warning or an error.
    note: |
      MySQL error codes are vendor specific error codes and don't follow [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) conventions. All MySQL error codes SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.mariadb.client
  type: span
  brief: |
    Spans representing calls to MariaDB adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/README.md).
  note: |
    `db.system.name` MUST be set to `"mariadb"` and SHOULD be provided **at span creation time**.
  stability: stable
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple collection names.
    note: |
      The collection name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - EXECUTE
    - INSERT
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple operation names.
    note: |
      The operation name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.namespace
    type: string
    brief: The database associated with the connection.
    examples:
    - products
    - customers
    requirement_level:
      conditionally_required: If available without an additional network call.
    sampling_relevant: true
    note: |
      A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

      If instrumentation is unable to capture the connection's currently associated database on each query
      without triggering an additional query to be executed (e.g. `SELECT DATABASE()`),
      then it is RECOMMENDED to fallback and use the database provided when the connection was established.

      Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [Maria DB error code](https://mariadb.com/kb/en/mariadb-error-code-reference/) represented as a string.
    examples:
    - '1008'
    - '3058'
    requirement_level:
      conditionally_required: If response has ended with warning or an error.
    note: |
      MariaDB uses vendor-specific error codes on all errors and reports [SQLSTATE](https://mariadb.com/kb/en/sqlstate/) in some cases.
      MariaDB error codes are more granular than SQLSTATE, so MariaDB instrumentations SHOULD set the `db.response.status_code` to this known error code.
      When SQLSTATE is available, SQLSTATE of "Class 02" or higher SHOULD be considered errors. When SQLSTATE is not available, all MariaDB error codes SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.cassandra.client
  type: span
  brief: |
    Spans representing calls to a Cassandra database adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    `db.system.name` MUST be set to `"cassandra"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: recommended
    stability: development
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level:
      conditionally_required: |
        If readily available and if there is a single operation name that describes the database call.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: if and only if `network.peer.address` is set.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The name of the Cassandra table that the operation is acting upon.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: |
        If readily available and if a database call is performed on a single collection.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same collection name
      then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: The keyspace associated with the session.
    examples:
    - mykeyspace
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [Cassandra protocol error code](https://github.com/apache/cassandra/blob/cassandra-5.0/doc/native_protocol_v5.spec) represented as a string.
    examples:
    - '102'
    - '40020'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      All Cassandra protocol error codes SHOULD be considered errors.
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the database node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: cassandra.coordinator.dc
    type: string
    brief: |
      The data center of the coordinating node for a query.
    examples: us-west-2
    requirement_level: recommended
    stability: development
  - name: cassandra.coordinator.id
    type: string
    brief: |
      The ID of the coordinating node for a query.
    examples: be13faa2-8574-4d71-926d-27f16cf8a7af
    requirement_level: recommended
    stability: development
  - name: cassandra.consistency.level
    type:
      members:
      - id: all
        value: all
        brief: All
        stability: development
      - id: each_quorum
        value: each_quorum
        brief: Each Quorum
        stability: development
      - id: quorum
        value: quorum
        brief: Quorum
        stability: development
      - id: local_quorum
        value: local_quorum
        brief: Local Quorum
        stability: development
      - id: one
        value: one
        brief: One
        stability: development
      - id: two
        value: two
        brief: Two
        stability: development
      - id: three
        value: three
        brief: Three
        stability: development
      - id: local_one
        value: local_one
        brief: Local One
        stability: development
      - id: any
        value: any
        brief: Any
        stability: development
      - id: serial
        value: serial
        brief: Serial
        stability: development
      - id: local_serial
        value: local_serial
        brief: Local Serial
        stability: development
    brief: |
      The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    requirement_level: recommended
    stability: development
  - name: cassandra.query.idempotent
    type: boolean
    brief: |
      Whether or not the query is idempotent.
    requirement_level: recommended
    stability: development
  - name: cassandra.page.size
    type: int
    brief: |
      The fetch size used for paging, i.e. how many rows will be returned at once.
    examples:
    - 5000
    requirement_level: recommended
    stability: development
  - name: cassandra.speculative_execution.count
    type: int
    brief: |
      The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.
    examples:
    - 0
    - 2
    requirement_level: recommended
    stability: development
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      cassandra.consistency.level:
        source_group: registry.cassandra
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      cassandra.coordinator.dc:
        source_group: registry.cassandra
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cassandra.coordinator.id:
        source_group: registry.cassandra
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cassandra.page.size:
        source_group: registry.cassandra
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cassandra.query.idempotent:
        source_group: registry.cassandra
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      cassandra.speculative_execution.count:
        source_group: registry.cassandra
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.hbase.client
  type: span
  brief: |
    Spans representing calls to an HBase database adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    `db.system.name` MUST be set to `"hbase"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The HBase table name.
    examples:
    - mytable
    - ns:table
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization. If table name includes the namespace, the `db.collection.name` SHOULD be set to the full table name.
    stability: stable
  - name: db.namespace
    type: string
    brief: The HBase namespace.
    examples:
    - mynamespace
    requirement_level:
      conditionally_required: If applicable.
    sampling_relevant: true
    note: |
      If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
      Semantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level: required
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH`.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      Protocol-specific response code recorded as a string.
    examples:
    - '200'
    - '409'
    - '14'
    requirement_level:
      conditionally_required: If response was received.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.couchdb.client
  type: span
  brief: |
    Spans representing calls to CouchDB adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    `db.system.name` MUST be set to `"couchdb"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The HTTP method + the target REST route.
    examples:
    - GET /{db}/{docid}
    requirement_level:
      conditionally_required: If readily available.
    sampling_relevant: true
    note: |
      In **CouchDB**, `db.operation.name` should be set to the HTTP method + the target REST route according to the API reference documentation. For example, when retrieving a document, `db.operation.name` would be set to (literally, i.e., without replacing the placeholders with concrete values): [`GET /{db}/{docid}`](https://docs.couchdb.org/en/stable/api/document/common.html#get--db-docid).
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      The HTTP response code returned by the Couch DB recorded as a string.
    examples:
    - '200'
    - '201'
    - '429'
    requirement_level:
      conditionally_required: If response was received and the HTTP response code is available.
    note: |
      HTTP response codes in the 4xx and 5xx range SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.redis.client
  type: span
  brief: |
    Spans representing calls to Redis adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    `db.system.name` MUST be set to `"redis"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
    except that `db.namespace` SHOULD NOT be used in the span name since it is a numeric value that ends up
    looking confusing.
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: if and only if `network.peer.address` is set.
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the database node where the operation was performed.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The [database index] associated with the connection, represented as a string.
    examples:
    - '0'
    - '1'
    - '15'
    requirement_level:
      conditionally_required: If and only if it can be captured reliably.
    sampling_relevant: true
    note: |
      A connection's currently associated database index may change during its lifetime, e.g. from executing `SELECT <index>`.

      If instrumentation is unable to capture the connection's currently associated database index on each query
      without triggering an additional query to be executed,
      then it is RECOMMENDED to fallback and use the database index provided when the connection was established.

      Instrumentation SHOULD document if `db.namespace` reflects the database index provided when the connection was established.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The Redis command name.
    examples:
    - HMSET
    - GET
    - SET
    requirement_level: required
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
      For [transactions and pipelined calls](https://redis.io/docs/latest/develop/clients/redis-py/transpipe/), if the individual operations are known to have the same command then that command SHOULD be used prepended by `MULTI ` or `PIPELINE `. Otherwise `db.operation.name` SHOULD be `MULTI` or `PIPELINE`.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The full syntax of the Redis CLI command.
    examples:
    - HMSET myhash field1 ? field2 ?
    requirement_level: recommended
    sampling_relevant: true
    note: |
      Query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text.
      See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      The value provided for `db.query.text` SHOULD correspond to the syntax of the Redis CLI. If, for example, the [`HMSET` command](https://redis.io/docs/latest/commands/hmset) is invoked, `"HMSET myhash field1 ? field2 ?"` would be a suitable value for `db.query.text`.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      The Redis [simple error](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-errors) prefix.
    examples:
    - ERR
    - WRONGTYPE
    - CLUSTERDOWN
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      All Redis error prefixes SHOULD be considered errors.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: |
      The name or sha1 digest of a Lua script in the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific Lua script.
    note: |
      See [FCALL](https://redis.io/docs/latest/commands/fcall/) and [EVALSHA](https://redis.io/docs/latest/commands/evalsha/).
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.mongodb.client
  type: span
  brief: |
    Spans representing calls to MongoDB adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    `db.system.name` MUST be set to `"mongodb"` and SHOULD be provided **at span creation time**.
    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The MongoDB collection being accessed within the database stated in `db.namespace`.
    examples:
    - public.users
    - customers
    requirement_level: required
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
      For batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: The MongoDB database name.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the [MongoDB command](https://www.mongodb.com/docs/manual/reference/command/) being executed.
    examples:
    - findAndModify
    - getMore
    - insertMany
    - bulkWrite
    requirement_level: required
    sampling_relevant: true
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [MongoDB error code](https://www.mongodb.com/docs/manual/reference/error-codes/) represented as a string.
    examples:
    - '36'
    - '11602'
    requirement_level:
      conditionally_required: If the operation failed and error code is available.
    note: |
      All MongoDB error codes SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.db.elasticsearch.client
  type: span
  brief: |
    Spans representing calls to Elasticsearch adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    `db.system.name` MUST be set to `"elasticsearch"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
    with the endpoint identifier stored in `db.operation.name`, and the index stored in `db.collection.name`.
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.collection.name
    type: string
    brief: The index or data stream against which the query is executed.
    examples:
    - my_index
    - index1, index2
    requirement_level: recommended
    sampling_relevant: true
    note: |
      The query may target multiple indices or data streams, in which case it SHOULD be a comma separated list of those. If the query doesn't target a specific index, this field MUST NOT be set.
    stability: stable
  - name: db.namespace
    type: string
    brief: The name of the Elasticsearch cluster which the client connects to.
    examples:
    - customers
    - test.users
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When communicating with an Elastic Cloud deployment, this should be collected from the "X-Found-Handling-Cluster" HTTP response header.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - search
    - ml.close_job
    - cat.aliases
    requirement_level: required
    sampling_relevant: true
    note: |
      The `db.operation.name` SHOULD match the endpoint identifier provided in the request (see the [Elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json)).
      For batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `bulk `, otherwise `db.operation.name` SHOULD be `bulk`.
    stability: stable
  - name: db.operation.parameter
    type: template[string]
    brief: |
      A dynamic value in the url path.
    examples:
    - db.operation.parameter.index="test-index"
    - db.operation.parameter="123"
    requirement_level:
      conditionally_required: when the url has path parameters
    note: |
      Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.operation.parameter.<key>`, where `<key>` is the path parameter name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path parameter values to their names.
    stability: development
  - name: db.query.text
    type: string
    brief: The request body for a [search-type query](https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html), as a json string.
    examples:
    - '"{\"query\":{\"term\":{\"user.id\":\"kimchy\"}}}"'
    requirement_level:
      recommended: |
        Should be collected by default for search-type queries and only if there is sanitization that excludes sensitive information.
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      The HTTP response code returned by the Elasticsearch cluster.
    examples:
    - '200'
    - '201'
    - '429'
    requirement_level:
      conditionally_required: If response was received.
    note: |
      HTTP response codes in the 4xx and 5xx range SHOULD be considered errors.
    stability: stable
  - name: elasticsearch.node.name
    type: string
    brief: |
      Represents the human-readable identifier of the node/instance to which a request was routed.
    examples:
    - instance-0000000001
    requirement_level: recommended
    note: |
      When communicating with an Elastic Cloud deployment, this should be collected from the "X-Found-Handling-Instance" HTTP response header.
    stability: development
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    sampling_relevant: true
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: url.full
    type: string
    brief: Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)
    examples:
    - https://localhost:9200/index/_search?q=user.id:kimchy
    requirement_level: required
    sampling_relevant: true
    note: |
      For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment
      is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.

      `url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.
      In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.

      `url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).

      Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the
      value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `https://www.example.com/path?color=blue&sig=REDACTED`.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.parameter:
        source_group: registry.db
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
        - sampling_relevant
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      elasticsearch.node.name:
        source_group: registry.elasticsearch
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      url.full:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
        - sampling_relevant
- id: span.db.sql.client
  type: span
  brief: |
    The SQL databases Semantic Conventions describes how common [Database Semantic Conventions](/docs/database/database-spans.md) apply to SQL databases.
  note: |
    The following database systems (defined in the
    [`db.system.name`](/docs/database/database-spans.md#notes-and-well-known-identifiers-for-dbsystemname) set)
    are known to use SQL as their primary query language:

    - `actian.ingres`
    - `cockroachdb`
    - `derby`
    - `firebirdsql`
    - `h2database`
    - `hsqldb`
    - `ibm.db2`
    - `mariadb`
    - `microsoft.sql_server`
    - `mysql`
    - `oracle.db`
    - `other_sql`
    - `postgresql`
    - `sap.maxdb`
    - `sqlite`
    - `trino`

    Many other database systems support SQL and can be accessed via generic database driver such as JDBC or ODBC.
    Instrumentations applied to generic SQL drivers SHOULD adhere to SQL semantic conventions.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
  stability: stable
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
        Parameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](/docs/registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple collection names.
    note: |
      The collection name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - EXECUTE
    - INSERT
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple operation names.
    note: |
      The operation name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The database associated with the connection, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available without an additional network call.
    note: |
      If a database system has multiple namespace components (e.g. schema name and database name), they SHOULD be concatenated
      from the most general to the most specific namespace component,
      using `|` as a separator between the components.
      Any missing components (and their associated separators) SHOULD be omitted.

      Semantic conventions for individual database systems SHOULD document what `db.namespace`
      means in the context of that system.

      A connection's currently associated database may change during its lifetime, e.g. from executing `USE <database>`.

      If instrumentation is unable to capture the connection's currently associated database on each query
      without triggering an additional query to be executed (e.g. `SELECT DATABASE()`),
      then it is RECOMMENDED to fallback and use the database provided when the connection was established.

      Instrumentation SHOULD document if `db.namespace` reflects the database provided when the connection was established.

      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      Database response code recorded as a string.
    examples:
    - ORA-17027
    - '1052'
    - 2201B
    requirement_level:
      conditionally_required: If response has ended with warning or an error.
    note: |
      SQL defines [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) as a database
      return code which is adopted by some database systems like PostgreSQL.
      See [PostgreSQL error codes](https://www.postgresql.org/docs/current/errcodes-appendix.html)
      for the details.

      Other systems like MySQL, Oracle, or MS SQL Server define vendor-specific
      error codes. Database SQL drivers usually provide access to both properties.
      For example, in Java, the [`SQLException`](https://docs.oracle.com/javase/8/docs/api/java/sql/SQLException.html)
      class reports them with `getSQLState()` and `getErrorCode()` methods.

      Instrumentations SHOULD populate the `db.response.status_code` with the
      the most specific code available to them.

      Here's a non-exhaustive list of databases that report vendor-specific
      codes with granularity higher than SQLSTATE (or don't report SQLSTATE
      at all):

      - [DB2 SQL codes](https://www.ibm.com/docs/db2-for-zos/12?topic=codes-sql).
      - [Maria DB error codes](https://mariadb.com/kb/en/mariadb-error-code-reference/)
      - [Microsoft SQL Server errors](https://docs.microsoft.com/sql/relational-databases/errors-events/database-engine-events-and-errors)
      - [MySQL error codes](https://dev.mysql.com/doc/mysql-errors/9.0/en/error-reference-introduction.html)
      - [Oracle error codes](https://docs.oracle.com/cd/B28359_01/server.111/b28278/toc.htm)
      - [SQLite result codes](https://www.sqlite.org/rescode.html)

      These systems SHOULD set the `db.response.status_code` to a
      known vendor-specific error code. If only SQLSTATE is available,
      it SHOULD be used.

      When multiple error codes are available and specificity is unclear,
      instrumentation SHOULD set the `db.response.status_code` to the
      concatenated string of all codes with '/' used as a separator.

      For example, generic DB instrumentation that detected an error and has
      SQLSTATE `"42000"` and vendor-specific `1071` should set
      `db.response.status_code` to `"42000/1071"`."
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: span.azure.cosmosdb.client
  type: span
  brief: |
    Cosmos DB instrumentations include call-level spans that represent logical database calls and adhere to the general [Semantic Conventions for Database Client Spans](/docs/database/database-spans.md).
  note: |
    Additional spans representing network calls may also be created depending on the connection mode (Gateway or Direct).
    Semantic conventions described in this document apply to the call-level spans only.

    `db.system.name` MUST be set to `"azure.cosmosdb"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD follow the general [database span name convention](/docs/database/database-spans.md#name)
  stability: development
  attributes:
  - name: azure.client.id
    type: string
    brief: The unique identifier of the client instance.
    examples:
    - 3ba4827d-4422-483f-b59f-85b74211c11d
    - storage-client-1
    requirement_level: recommended
    stability: development
  - name: azure.cosmosdb.request.body.size
    type: int
    brief: Request payload size in bytes.
    requirement_level: recommended
    stability: development
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = ?
    - SET mykey ?
    requirement_level: recommended
    note: |
      For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).
      For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
      Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    stability: stable
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    sampling_relevant: true
    stability: stable
  - name: azure.cosmosdb.connection.mode
    type:
      members:
      - id: gateway
        value: gateway
        brief: Gateway (HTTP) connection.
        stability: development
      - id: direct
        value: direct
        brief: Direct connection.
        stability: development
    brief: Cosmos client connection mode.
    requirement_level:
      conditionally_required: if not `gateway` (the default value is assumed to be `gateway`).
    stability: development
  - name: azure.cosmosdb.consistency.level
    type:
      members:
      - id: strong
        value: Strong
        brief: Strong
        stability: development
      - id: bounded_staleness
        value: BoundedStaleness
        brief: Bounded Staleness
        stability: development
      - id: session
        value: Session
        brief: Session
        stability: development
      - id: eventual
        value: Eventual
        brief: Eventual
        stability: development
      - id: consistent_prefix
        value: ConsistentPrefix
        brief: Consistent Prefix
        stability: development
    brief: Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).
    examples:
    - Eventual
    - ConsistentPrefix
    - BoundedStaleness
    - Strong
    - Session
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: azure.cosmosdb.operation.contacted_regions
    type: string[]
    brief: |
      List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.
    examples:
    - - North Central US
      - Australia East
      - Australia Southeast
    requirement_level:
      conditionally_required: If available.
    note: |
      Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)
    stability: development
  - name: azure.cosmosdb.operation.request_charge
    type: double
    brief: |
      The number of request units consumed by the operation.
    examples:
    - 46.18
    - 1.0
    requirement_level:
      conditionally_required: when available
    stability: development
  - name: azure.cosmosdb.response.sub_status_code
    type: int
    brief: Cosmos DB sub status code.
    examples:
    - 1000
    - 1002
    requirement_level:
      conditionally_required: when response was received and contained sub-code.
    stability: development
  - name: azure.resource_provider.namespace
    type: string
    brief: |
      [Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.
    examples:
    - Microsoft.DocumentDB
    requirement_level: recommended
    note: |
      When `azure.resource_provider.namespace` attribute is populated, it MUST be set to `Microsoft.DocumentDB` for all operations performed by Cosmos DB client.
    stability: development
  - name: db.collection.name
    type: string
    brief: |
      Cosmos DB container name.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: if available
    sampling_relevant: true
    note: |
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - create_item
    - query_items
    - read_item
    requirement_level: required
    sampling_relevant: true
    note: |
      The `db.operation.name` has the following list of well-known values.
      If one of them applies, then the respective value MUST be used.

      Batch operations:

      - `execute_batch`

      Bulk operations:

      - `execute_bulk` SHOULD be used on spans reported for methods like
        [`executeBulkOperations`](https://javadoc.io/doc/com.azure/azure-cosmos/latest/com/azure/cosmos/CosmosAsyncContainer.html#executeBulkOperations)).
        which represents a bulk execution of multiple operations.
      - `bulk_{operation name}` (`bulk_create_item`, `bulk_upsert_item`, etc) SHOULD be used on spans describing individual operations (when they are reported)
        within the bulk. This pattern SHOULD be used when instrumentation creates span per each operation, but operations are buffered and then performed in bulk.
        For example, this applies when [`AllowBulkExecution`](https://learn.microsoft.com/dotnet/api/microsoft.azure.cosmos.cosmosclientoptions.allowbulkexecution)
        property is configured on the `Microsoft.Azure.Cosmos` client.

      Change feed operations:

      - `query_change_feed`

      Conflicts operations:

      - `delete_conflict`
      - `query_conflicts`
      - `read_all_conflicts`
      - `read_conflict`

      Container operations:

      - `create_container`
      - `create_container_if_not_exists`
      - `delete_container`
      - `query_containers`
      - `read_all_containers`
      - `read_container`
      - `read_container_throughput`
      - `replace_container`
      - `replace_container_throughput`

      Database operations:

      - `create_database`
      - `create_database_if_not_exists`
      - `delete_database`
      - `query_databases`
      - `read_all_databases`
      - `read_database`
      - `read_database_throughput`
      - `replace_database_throughput`

      Encryption key operations:

      - `create_client_encryption_key`
      - `query_client_encryption_keys`
      - `read_all_client_encryption_keys`
      - `read_client_encryption_key`
      - `replace_client_encryption_key`

      Item operations:

      - `create_item`
      - `delete_all_items_by_partition_key`
      - `delete_item`
      - `patch_item`
      - `query_items`
      - `read_all_items`
      - `read_all_items_of_logical_partition`
      - `read_many_items`
      - `read_item`
      - `replace_item`
      - `upsert_item`

      Permission operations:

      - `create_permission`
      - `delete_permission`
      - `query_permissions`
      - `read_all_permissions`
      - `read_permission`
      - `replace_permission`
      - `upsert_permission`

      Stored procedure operations:

      - `create_stored_procedure`
      - `delete_stored_procedure`
      - `execute_stored_procedure`
      - `query_stored_procedures`
      - `read_all_stored_procedures`
      - `read_stored_procedure`
      - `replace_stored_procedure`

      Trigger operations:

      - `create_trigger`
      - `delete_trigger`
      - `query_triggers`
      - `read_all_triggers`
      - `read_trigger`
      - `replace_trigger`

      User operations:

      - `create_user`
      - `delete_user`
      - `query_users`
      - `read_all_users`
      - `read_user`
      - `replace_user`
      - `upsert_user`

      User-defined function operations:

      - `create_user_defined_function`
      - `delete_user_defined_function`
      - `query_user_defined_functions`
      - `read_all_user_defined_functions`
      - `read_user_defined_function`

      If none of them applies, it's RECOMMENDED to use language-agnostic representation of
      client method name in snake_case. Instrumentations SHOULD document
      additional values when introducing new operations.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: |
      Cosmos DB row count in result set.
    examples:
    - 10
    - 20
    requirement_level:
      conditionally_required: if response was received and returned any rows
    stability: development
  - name: db.response.status_code
    type: string
    brief: |
      Cosmos DB status code.
    examples:
    - '200'
    - '201'
    requirement_level:
      conditionally_required: if response was received
    note: |
      Response codes in the 4xx and 5xx range SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If not default (443).
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: user_agent.original
    type: string
    brief: Full user-agent string is generated by Cosmos DB SDK
    examples:
    - cosmos-netstandard-sdk/3.23.0\|3.23.1\|1\|X64\|Linux 5.4.0-1098-azure 104 18\|.NET Core 3.1.32\|S\|
    requirement_level: recommended
    note: |
      The user-agent value is generated by SDK which is a combination of<br> `sdk_version` : Current version of SDK. e.g. 'cosmos-netstandard-sdk/3.23.0'<br> `direct_pkg_version` : Direct package version used by Cosmos DB SDK. e.g. '3.23.1'<br> `number_of_client_instances` : Number of cosmos client instances created by the application. e.g. '1'<br> `type_of_machine_architecture` : Machine architecture. e.g. 'X64'<br> `operating_system` : Operating System. e.g. 'Linux 5.4.0-1098-azure 104 18'<br> `runtime_framework` : Runtime Framework. e.g. '.NET Core 3.1.32'<br> `failover_information` : Generated key to determine if region failover enabled.
         Format Reg-{D (Disabled discovery)}-S(application region)|L(List of preferred regions)|N(None, user did not configure it).
         Default value is "NS".
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      azure.client.id:
        source_group: registry.azure.client.sdk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      azure.cosmosdb.connection.mode:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.consistency.level:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.operation.contacted_regions:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.operation.request_charge:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.request.body.size:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      azure.cosmosdb.response.sub_status_code:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.resource_provider.namespace:
        source_group: registry.azure.client.sdk
        inherited_fields:
        - brief
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
        - note
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      user_agent.original:
        source_group: registry.user_agent
        inherited_fields:
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
- id: span.db.oracledb.client
  type: span
  brief: |
    Spans representing calls to a Oracle SQL Database adhere to the general [Semantic Conventions for Database Client Spans](database-spans.md).
  note: |
    `db.system.name` MUST be set to `"oracle.db"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: db.operation.batch.size
    type: int
    brief: The number of queries included in a batch operation.
    examples:
    - 2
    - 3
    - 4
    requirement_level: recommended
    note: |
      Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: db.query.parameter
    type: template[string]
    brief: |
      A database query parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
    examples:
    - someval
    - '55'
    requirement_level: opt_in
    note: |
      If a query parameter has no name and instead is referenced only by index,
      then `<key>` SHOULD be the 0-based index.

      `db.query.parameter.<key>` SHOULD match
      up with the parameterized placeholders present in `db.query.text`.

      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      `db.query.parameter.<key>` SHOULD NOT be captured on batch operations.

      Examples:

      - For a query `SELECT * FROM users where username =  %s` with the parameter `"jdoe"`,
        the attribute `db.query.parameter.0` SHOULD be set to `"jdoe"`.

      - For a query `"SELECT * FROM users WHERE username = %(userName)s;` with parameter
        `userName = "jdoe"`, the attribute `db.query.parameter.userName` SHOULD be set to `"jdoe"`.
    stability: development
  - name: db.query.summary
    type: string
    brief: |
      Low cardinality summary of a database query.
    examples:
    - SELECT wuser_table
    - INSERT shipping_details SELECT orders
    - get user by id
    requirement_level:
      recommended: if available through instrumentation hooks or if the instrumentation supports generating a query summary.
    sampling_relevant: true
    note: |
      The query summary describes a class of database queries and is useful
      as a grouping key, especially when analyzing telemetry for database
      calls involving complex queries.

      Summary may be available to the instrumentation through
      instrumentation hooks or other means. If it is not available, instrumentations
      that support query parsing SHOULD generate a summary following
      [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)
      section.
    stability: stable
  - name: db.stored_procedure.name
    type: string
    brief: The name of a stored procedure within the database.
    examples:
    - GetCustomer
    requirement_level:
      recommended: If operation applies to a specific stored procedure.
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      For batch operations, if the individual operations are known to have the same
      stored procedure name then that stored procedure name SHOULD be used.
    stability: stable
  - name: db.response.returned_rows
    type: int
    brief: Number of rows returned by the operation.
    examples:
    - 10
    - 30
    - 1000
    requirement_level: opt_in
    stability: development
  - name: db.collection.name
    type: string
    brief: The name of a collection (table, container) within the database.
    examples:
    - public.users
    - customers
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple collection names.
    note: |
      The collection name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - EXECUTE
    - INSERT
    requirement_level:
      recommended: If the operation is executed via a higher-level API that does not support multiple operation names.
    note: |
      The operation name SHOULD NOT be extracted from `db.query.text`.
    stability: stable
  - name: db.namespace
    type: string
    brief: |
      The database associated with the connection, qualified by the instance name, database name and service name.
    examples:
    - ORCL1\|PDB1\|db_high.adb.oraclecloud.com
    - ORCL1\|DB1\|db_low.adb.oraclecloud.com
    - ORCL1\|DB1\|order-processing-service
    requirement_level:
      conditionally_required: If available without an additional network call.
    sampling_relevant: true
    note: |
      `db.namespace` SHOULD be set to the combination of instance name, database name and
      service name following the `{service_name}|{database_name}|{instance_name}` pattern.
      Any missing components (and their associated separators) SHOULD be omitted.

      For CDB architecture, database name would be pdb name. For Non-CDB, it would be
      `DB_NAME` parameter.
    stability: stable
  - name: db.query.text
    type: string
    brief: |
      The database query being executed.
    examples:
    - SELECT * FROM wuser_table where username = :mykey
    requirement_level:
      recommended: |
        Non-parameterized query text SHOULD NOT be collected by default unless explicitly configured and sanitized to exclude sensitive data, e.g. by redacting all literal values present in the query text. See [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext). Parameterized query text MUST also NOT be collected by default unless explicitly configured. The query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](../registry/attributes/db.md)).
    sampling_relevant: true
    note: |
      For sanitization see [Sanitization of `db.query.text`](../database/database-spans.md#sanitization-of-dbquerytext). For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: |
      [Oracle Database error number](https://docs.oracle.com/en/error-help/db/) recorded as a string.
    examples:
    - ORA-02813
    - ORA-02613
    requirement_level:
      conditionally_required: If response has ended with warning or an error.
    note: |
      Oracle Database error codes are vendor specific error codes and don't follow [SQLSTATE](https://wikipedia.org/wiki/SQLSTATE) conventions. All Oracle Database error codes SHOULD be considered errors.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    sampling_relevant: true
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/database/spans.yaml
    attributes:
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.operation.batch.size:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      db.query.parameter:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.query.summary:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      db.query.text:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
        - sampling_relevant
      db.response.returned_rows:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      db.stored_procedure.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
- id: gcp.client.attributes
  type: attribute_group
  brief: Conventions for official Google Cloud client libraries.
  stability: development
  attributes:
  - name: gcp.client.service
    type: string
    brief: Identifies the Google Cloud service for which the official client library is intended.
    examples:
    - appengine
    - run
    - firestore
    - alloydb
    - spanner
    requirement_level:
      conditionally_required: Required if and only if the instrumentation library is an official, Google-provided GCP and/or Firebase client library.
    note: |
      Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/common.yml
    attributes:
      gcp.client.service:
        source_group: registry.gcp.client
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.gcp.gce
  type: entity
  brief: |
    Resources used by Google Compute Engine (GCE).
  stability: development
  attributes:
  - name: gcp.gce.instance.name
    type: string
    brief: |
      The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).
    examples:
    - instance-1
    - my-vm-name
    requirement_level: recommended
    stability: development
  - name: gcp.gce.instance.hostname
    type: string
    brief: |
      The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).
    examples:
    - my-host1234.example.com
    - sample-vm.us-west1-b.c.my-project.internal
    requirement_level: recommended
    stability: development
  name: gcp.gce
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/gce-entities.yaml
    attributes:
      gcp.gce.instance.hostname:
        source_group: registry.gcp.gce
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.gce.instance.name:
        source_group: registry.gcp.gce
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.gcp.cloud_run
  type: entity
  brief: |
    Resource used by Google Cloud Run.
  stability: development
  attributes:
  - name: gcp.cloud_run.job.execution
    type: string
    brief: |
      The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.
    examples:
    - job-name-xxxx
    - sample-job-mdw84
    requirement_level: recommended
    stability: development
  - name: gcp.cloud_run.job.task_index
    type: int
    brief: |
      The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.
    examples:
    - 0
    - 1
    requirement_level: recommended
    stability: development
  name: gcp.cloud_run
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gcp/cloud-run-entities.yaml
    attributes:
      gcp.cloud_run.job.execution:
        source_group: registry.gcp.cloud_run
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gcp.cloud_run.job.task_index:
        source_group: registry.gcp.cloud_run
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.openai
  type: attribute_group
  brief: |
    This group defines attributes for OpenAI.
  attributes:
  - name: openai.request.service_tier
    type:
      members:
      - id: auto
        value: auto
        brief: The system will utilize scale tier credits until they are exhausted.
        stability: development
      - id: default
        value: default
        brief: The system will utilize the default scale tier.
        stability: development
    brief: The service tier requested. May be a specific tier, default, or auto.
    examples:
    - auto
    - default
    requirement_level: recommended
    stability: development
  - name: openai.response.service_tier
    type: string
    brief: The service tier used for the response.
    examples:
    - scale
    - default
    requirement_level: recommended
    stability: development
  - name: openai.response.system_fingerprint
    type: string
    brief: A fingerprint to track any eventual change in the Generative AI environment.
    examples:
    - fp_44709d6fcb
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/openai/registry.yaml
  display_name: OpenAI Attributes
- id: registry.code
  type: attribute_group
  brief: |
    These attributes provide context about source code
  attributes:
  - name: code.function.name
    type: string
    brief: |
      The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples:
    - com.example.MyHttpService.serveRequest
    - GuzzleHttp\Client::transfer
    - fopen
    requirement_level: recommended
    note: |
      Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.
      The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in
      `code.stacktrace` without information on arguments.

      Examples:

      * Java method: `com.example.MyHttpService.serveRequest`
      * Java anonymous class method: `com.mycompany.Main$1.myMethod`
      * Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`
      * PHP function: `GuzzleHttp\Client::transfer`
      * Go function: `github.com/my/repo/pkg.foo.func5`
      * Elixir: `OpenTelemetry.Ctx.new`
      * Erlang: `opentelemetry_ctx:new`
      * Rust: `playground::my_module::my_cool_func`
      * C function: `fopen`
    stability: stable
  - name: code.file.path
    type: string
    brief: |
      The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: /usr/local/MyApplication/content_root/app/index.php
    requirement_level: recommended
    stability: stable
  - name: code.line.number
    type: int
    brief: |
      The line number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: 42
    requirement_level: recommended
    stability: stable
  - name: code.column.number
    type: int
    brief: |
      The column number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: 16
    requirement_level: recommended
    stability: stable
  - name: code.stacktrace
    type: string
    brief: |
      A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: |
      at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)
    requirement_level: recommended
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/code/registry.yaml
  display_name: Code Attributes
- id: registry.code.deprecated
  type: attribute_group
  brief: |
    These deprecated attributes provide context about source code
  attributes:
  - name: code.function
    type: string
    brief: |
      Deprecated, use `code.function.name` instead
    examples: serveRequest
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: |
        Value should be included in `code.function.name` which is expected to be a fully-qualified name.
  - name: code.filepath
    type: string
    brief: |
      Deprecated, use `code.file.path` instead
    examples: /usr/local/MyApplication/content_root/app/index.php
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: code.file.path
      note: Replaced by `code.file.path`.
  - name: code.lineno
    type: int
    brief: |
      Deprecated, use `code.line.number` instead
    examples: 42
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: code.line.number
      note: Replaced by `code.line.number`.
  - name: code.column
    type: int
    brief: |
      Deprecated, use `code.column.number`
    examples: 16
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: code.column.number
      note: Replaced by `code.column.number`.
  - name: code.namespace
    type: string
    brief: |
      Deprecated, namespace is now included into `code.function.name`
    examples: com.example.MyHttpService
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: |
        Value should be included in `code.function.name` which is expected to be a fully-qualified name.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/code/registry-deprecated.yaml
  display_name: Deprecated Code Attributes
- id: code
  type: attribute_group
  brief: |
    These attributes provide context about source code
  attributes:
  - name: code.function.name
    type: string
    brief: |
      The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples:
    - com.example.MyHttpService.serveRequest
    - GuzzleHttp\Client::transfer
    - fopen
    requirement_level: recommended
    note: |
      Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.
      The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in
      `code.stacktrace` without information on arguments.

      Examples:

      * Java method: `com.example.MyHttpService.serveRequest`
      * Java anonymous class method: `com.mycompany.Main$1.myMethod`
      * Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`
      * PHP function: `GuzzleHttp\Client::transfer`
      * Go function: `github.com/my/repo/pkg.foo.func5`
      * Elixir: `OpenTelemetry.Ctx.new`
      * Erlang: `opentelemetry_ctx:new`
      * Rust: `playground::my_module::my_cool_func`
      * C function: `fopen`
    stability: stable
  - name: code.file.path
    type: string
    brief: |
      The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: /usr/local/MyApplication/content_root/app/index.php
    requirement_level: recommended
    stability: stable
  - name: code.line.number
    type: int
    brief: |
      The line number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: 42
    requirement_level: recommended
    stability: stable
  - name: code.column.number
    type: int
    brief: |
      The column number in `code.file.path` best representing the operation. It SHOULD point within the code unit named in `code.function.name`. This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: 16
    requirement_level: recommended
    stability: stable
  - name: code.stacktrace
    type: string
    brief: |
      A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute MUST NOT be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.
    examples: |
      at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)
    requirement_level: opt_in
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/code/common.yaml
    attributes:
      code.column.number:
        source_group: registry.code
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      code.file.path:
        source_group: registry.code
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      code.function.name:
        source_group: registry.code
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      code.line.number:
        source_group: registry.code
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      code.stacktrace:
        source_group: registry.code
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.gen_ai
  type: attribute_group
  brief: |
    This document defines the attributes used to describe telemetry in the context of Generative Artificial Intelligence (GenAI) Models requests and responses.
  attributes:
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: recommended
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_k
    type: double
    brief: The top_k sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.encoding_formats
    type: string[]
    brief: The encoding formats requested in an embeddings operation, if specified.
    examples:
    - - base64
    - - float
      - binary
    requirement_level: recommended
    note: |
      In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.token.type
    type:
      members:
      - id: input
        value: input
        brief: Input tokens (prompt, input, etc.)
        stability: development
      - id: completion
        value: output
        brief: Output tokens (completion, response, etc.)
        stability: development
        deprecated:
          reason: renamed
          renamed_to: output
          note: Replaced by `output`.
      - id: output
        value: output
        brief: Output tokens (completion, response, etc.)
        stability: development
    brief: The type of token being counted.
    examples:
    - input
    - output
    requirement_level: recommended
    stability: development
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level: recommended
    stability: development
  - name: gen_ai.agent.id
    type: string
    brief: The unique identifier of the GenAI agent.
    examples:
    - asst_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level: recommended
    stability: development
  - name: gen_ai.agent.name
    type: string
    brief: Human-readable name of the GenAI agent provided by the application.
    examples:
    - Math Tutor
    - Fiction Writer
    requirement_level: recommended
    stability: development
  - name: gen_ai.agent.description
    type: string
    brief: Free-form description of the GenAI agent provided by the application.
    examples:
    - Helps with math problems
    - Generates fiction stories
    requirement_level: recommended
    stability: development
  - name: gen_ai.tool.name
    type: string
    brief: Name of the tool utilized by the agent.
    examples:
    - Flights
    requirement_level: recommended
    stability: development
  - name: gen_ai.tool.call.id
    type: string
    brief: The tool call identifier.
    examples:
    - call_mszuSIzqtI65i1wAUOE8w5H4
    requirement_level: recommended
    stability: development
  - name: gen_ai.tool.description
    type: string
    brief: The tool description.
    examples:
    - Multiply two numbers
    requirement_level: recommended
    stability: development
  - name: gen_ai.tool.type
    type: string
    brief: Type of the tool utilized by the agent
    examples:
    - function
    - extension
    - datastore
    requirement_level: recommended
    note: |
      Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.
        Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.
      Function: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.
        Client-side operations are actions taken on the user's end or within the client application.
      Datastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.
    stability: development
  - name: gen_ai.tool.call.arguments
    type: any
    brief: Parameters passed to the tool call.
    examples:
    - |
      {
          "location": "San Francisco?",
          "date": "2025-10-01"
      }
    requirement_level: recommended
    note: |
      > [!WARNING]
      > This attribute may contain sensitive information.

      It's expected to be an object - in case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an object. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.
    stability: development
  - name: gen_ai.tool.call.result
    type: any
    brief: The result returned by the tool call (if any and if execution was successful).
    examples:
    - |
      {
        "temperature_range": {
          "high": 75,
          "low": 60
        },
        "conditions": "sunny"
      }
    requirement_level: recommended
    note: |
      > [!WARNING]
      > This attribute may contain sensitive information.

      It's expected to be an object - in case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an object. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: recommended
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.data_source.id
    type: string
    brief: The data source identifier.
    examples:
    - H7STPQYOND
    requirement_level: recommended
    note: |
      Data sources are used by AI agents and RAG applications to store grounding data. A data source may be an external database, object store, document collection, website, or any other storage system used by the GenAI agent or application. The `gen_ai.data_source.id` SHOULD match the identifier used by the GenAI system rather than a name specific to the external storage, such as a database or object store. Semantic conventions referencing `gen_ai.data_source.id` MAY also leverage additional attributes, such as `db.*`, to further identify and describe the data source.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: recommended
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level: recommended
    note: |
      This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
      This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
      Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.embeddings.dimension.count
    type: int
    brief: The number of dimensions the resulting output embeddings should have.
    examples:
    - 512
    - 1024
    requirement_level: recommended
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: recommended
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: recommended
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: recommended
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.evaluation.name
    type: string
    brief: The name of the evaluation metric used for the GenAI response.
    examples:
    - Relevance
    - IntentResolution
    requirement_level: recommended
    stability: development
  - name: gen_ai.evaluation.score.value
    type: double
    brief: The evaluation score returned by the evaluator.
    examples:
    - 4.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.evaluation.score.label
    type: string
    brief: Human readable label for evaluation.
    examples:
    - relevant
    - not_relevant
    - correct
    - incorrect
    - pass
    - fail
    requirement_level: recommended
    note: |
      This attribute provides a human-readable interpretation of the evaluation score produced by an evaluator. For example, a score value of 1 could mean "relevant" in one evaluation system and "not relevant" in another, depending on the scoring range and evaluator. The label SHOULD have low cardinality. Possible values depend on the evaluation metric and evaluator used; implementations SHOULD document the possible values.
    stability: development
  - name: gen_ai.evaluation.explanation
    type: string
    brief: A free-form explanation for the assigned score provided by the evaluator.
    examples:
    - The response is factually accurate but lacks sufficient detail to fully address the question.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/registry.yaml
  display_name: GenAI Attributes
- id: attributes.gen_ai.common.client
  type: attribute_group
  brief: |
    Common attributes for all GenAI spans.
  stability: development
  attributes:
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: attributes.gen_ai.inference.client
  type: attribute_group
  brief: |
    Describes GenAI inference attributes.
  stability: development
  attributes:
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
      This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
      Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.gen_ai.inference.client
  type: span
  brief: |
    This span represents a client call to Generative AI model or service that generates a response or requests a tool call based on the input prompt.
  note: |
    **Span name** SHOULD be `{gen_ai.operation.name} {gen_ai.request.model}`.
    Semantic conventions for individual GenAI systems and frameworks MAY specify different span name format
    and MUST follow the overall [guidelines for span names](https://github.com/open-telemetry/opentelemetry-specification/tree/v1.37.0/specification/trace/api.md#span).

    **Span kind** SHOULD be `CLIENT`and MAY be set to `INTERNAL` on spans representing
    call to models running in the same process. It's RECOMMENDED to use `CLIENT` kind
    when the GenAI system being instrumented usually runs in a different process than its
    client or when the GenAI call happens over instrumented protocol such as HTTP.
  stability: development
  attributes:
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_k
    type: double
    brief: The top_k sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
      This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
      Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_k:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: attributes.gen_ai.inference.openai_based
  type: attribute_group
  brief: |
    Describes attributes that are common to OpenAI-based Generative AI services.
  stability: development
  attributes:
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be set to the output type requested by the client:
      - `json` for structured outputs with defined or undefined schema
      - `image` for image output
      - `speech` for speech output
      - `text` for plain text output

      The attribute specifies the output modality and not the actual output format.
      For example, if an image is requested, the actual output could be a
      URL pointing to an image file.

      Additional output format details may be recorded in the future in the
      `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.openai.inference.client
  type: span
  brief: |
    Semantic Conventions for [OpenAI](https://openai.com/) client spans extend and override the semantic conventions for [Gen AI Spans](gen-ai-spans.md).
  note: |
    `gen_ai.provider.name` MUST be set to `"openai"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD be `{gen_ai.operation.name} {gen_ai.request.model}`.
  stability: development
  attributes:
  - name: openai.response.system_fingerprint
    type: string
    brief: A fingerprint to track any eventual change in the Generative AI environment.
    examples:
    - fp_44709d6fcb
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be set to the output type requested by the client:
      - `json` for structured outputs with defined or undefined schema
      - `image` for image output
      - `speech` for speech output
      - `text` for plain text output

      The attribute specifies the output modality and not the actual output format.
      For example, if an image is requested, the actual output could be a
      URL pointing to an image file.

      Additional output format details may be recorded in the future in the
      `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level: required
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: openai.request.service_tier
    type:
      members:
      - id: auto
        value: auto
        brief: The system will utilize scale tier credits until they are exhausted.
        stability: development
      - id: default
        value: default
        brief: The system will utilize the default scale tier.
        stability: development
    brief: The service tier requested. May be a specific tier, default, or auto.
    examples:
    - auto
    - default
    requirement_level:
      conditionally_required: if the request includes a service_tier and the value is not 'auto'
    stability: development
  - name: openai.response.service_tier
    type: string
    brief: The service tier used for the response.
    examples:
    - scale
    - default
    requirement_level:
      conditionally_required: if the response was received and includes a service_tier
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      openai.request.service_tier:
        source_group: registry.openai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      openai.response.service_tier:
        source_group: registry.openai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      openai.response.system_fingerprint:
        source_group: registry.openai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.azure.ai.inference.client
  type: span
  brief: |
    Semantic Conventions for [Azure AI Inference](https://learn.microsoft.com/azure/ai-studio/reference/reference-model-inference-api) client spans extend and override the semantic conventions for [Gen AI Spans](gen-ai-spans.md).
  note: |
    `gen_ai.provider.name` MUST be set to `"azure.ai.inference"` and SHOULD be provided **at span creation time**.

    **Span name** SHOULD be `{gen_ai.operation.name} {gen_ai.request.model}` when the
    model name is available and `{gen_ai.operation.name}` otherwise.
  stability: development
  attributes:
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be set to the output type requested by the client:
      - `json` for structured outputs with defined or undefined schema
      - `image` for image output
      - `speech` for speech output
      - `text` for plain text output

      The attribute specifies the output modality and not the actual output format.
      For example, if an image is requested, the actual output could be a
      URL pointing to an image file.

      Additional output format details may be recorded in the future in the
      `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: azure.resource_provider.namespace
    type: string
    brief: |
      [Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.
    examples:
    - Microsoft.CognitiveServices
    requirement_level: recommended
    note: |
      When `azure.resource_provider.namespace` attribute is populated, it MUST be set to `Microsoft.CognitiveServices` for all operations performed by Azure AI Inference clients.
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: |
      The number of prompt tokens as reported in the usage prompt_tokens property of the response.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: |
      The number of completion tokens as reported in the usage completion_tokens property of the response.
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If not default (443).
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      azure.resource_provider.namespace:
        source_group: registry.azure.client.sdk
        inherited_fields:
        - brief
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
        - note
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.gen_ai.embeddings.client
  type: span
  brief: |
    Describes GenAI embeddings span - a request to a Generative AI model or service that generates an embeddings based on the input.
    The `gen_ai.operation.name` SHOULD be `embeddings`.
    **Span name** SHOULD be `{gen_ai.operation.name} {gen_ai.request.model}`.
  stability: development
  attributes:
  - name: gen_ai.request.encoding_formats
    type: string[]
    brief: The encoding formats requested in an embeddings operation, if specified.
    examples:
    - - base64
    - - float
      - binary
    requirement_level: recommended
    note: |
      In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.embeddings.dimension.count
    type: int
    brief: The number of dimensions the resulting output embeddings should have.
    examples:
    - 512
    - 1024
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.embeddings.dimension.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.encoding_formats:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.gen_ai.create_agent.client
  type: span
  brief: |
    Describes GenAI agent creation and is usually applicable when working with remote agent services.
  note: |
    The `gen_ai.operation.name` SHOULD be `create_agent`.

    **Span name** SHOULD be `create_agent {gen_ai.agent.name}`.
    Semantic conventions for individual GenAI systems and frameworks MAY specify different span name format.
  stability: development
  attributes:
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: gen_ai.agent.description
    type: string
    brief: Free-form description of the GenAI agent provided by the application.
    examples:
    - Helps with math problems
    - Generates fiction stories
    requirement_level:
      conditionally_required: If provided by the application.
    stability: development
  - name: gen_ai.agent.id
    type: string
    brief: The unique identifier of the GenAI agent.
    examples:
    - asst_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: if applicable.
    stability: development
  - name: gen_ai.agent.name
    type: string
    brief: Human-readable name of the GenAI agent provided by the application.
    examples:
    - Math Tutor
    - Fiction Writer
    requirement_level:
      conditionally_required: If provided by the application.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.agent.description:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.agent.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.agent.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.gen_ai.invoke_agent.client
  type: span
  brief: |
    Describes GenAI agent invocation and is usually applicable when working with remote agent services.
  note: |
    The `gen_ai.operation.name` SHOULD be `invoke_agent`.
    The **span name** SHOULD be `invoke_agent {gen_ai.agent.name}` if `gen_ai.agent.name` is readily available.
    When `gen_ai.agent.name` is not available, it SHOULD be `invoke_agent`.
    Semantic conventions for individual GenAI systems and frameworks MAY specify different span name format.
  stability: development
  attributes:
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
      This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
      Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: gen_ai.agent.id
    type: string
    brief: The unique identifier of the GenAI agent.
    examples:
    - asst_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: if applicable.
    stability: development
  - name: gen_ai.agent.description
    type: string
    brief: Free-form description of the GenAI agent provided by the application.
    examples:
    - Helps with math problems
    - Generates fiction stories
    requirement_level:
      conditionally_required: when available
    stability: development
  - name: gen_ai.agent.name
    type: string
    brief: Human-readable name of the GenAI agent provided by the application.
    examples:
    - Math Tutor
    - Fiction Writer
    requirement_level:
      conditionally_required: when available
    stability: development
  - name: gen_ai.data_source.id
    type: string
    brief: The data source identifier.
    examples:
    - H7STPQYOND
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Data sources are used by AI agents and RAG applications to store grounding data. A data source may be an external database, object store, document collection, website, or any other storage system used by the GenAI agent or application. The `gen_ai.data_source.id` SHOULD match the identifier used by the GenAI system rather than a name specific to the external storage, such as a database or object store. Semantic conventions referencing `gen_ai.data_source.id` MAY also leverage additional attributes, such as `db.*`, to further identify and describe the data source.
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.agent.description:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.agent.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.agent.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.data_source.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: span.gen_ai.execute_tool.internal
  type: span
  brief: Describes tool execution span.
  note: |
    `gen_ai.operation.name` SHOULD be `execute_tool`.

    **Span name** SHOULD be `execute_tool {gen_ai.tool.name}`.

    GenAI instrumentations that are able to instrument tool execution call SHOULD do so.
    However, it's common for tools to be executed by the application code. It's recommended
    for the application developers to follow this semantic convention for tools invoked
    by the application code.
  stability: development
  attributes:
  - name: gen_ai.tool.name
    type: string
    brief: Name of the tool utilized by the agent.
    examples:
    - Flights
    requirement_level: recommended
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.tool.call.id
    type: string
    brief: The tool call identifier.
    examples:
    - call_mszuSIzqtI65i1wAUOE8w5H4
    requirement_level:
      recommended: if available
    stability: development
  - name: gen_ai.tool.description
    type: string
    brief: The tool description.
    examples:
    - Multiply two numbers
    requirement_level:
      recommended: if available
    stability: development
  - name: gen_ai.tool.type
    type: string
    brief: Type of the tool utilized by the agent
    examples:
    - function
    - extension
    - datastore
    requirement_level:
      recommended: if available
    note: |
      Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.
        Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.
      Function: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.
        Client-side operations are actions taken on the user's end or within the client application.
      Datastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.
    stability: development
  - name: gen_ai.tool.call.arguments
    type: any
    brief: Parameters passed to the tool call.
    examples:
    - |
      {
          "location": "San Francisco?",
          "date": "2025-10-01"
      }
    requirement_level: opt_in
    note: |
      > [!WARNING]
      > This attribute may contain sensitive information.

      It's expected to be an object - in case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an object. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.
    stability: development
  - name: gen_ai.tool.call.result
    type: any
    brief: The result returned by the tool call (if any and if execution was successful).
    examples:
    - |
      {
        "temperature_range": {
          "high": 75,
          "low": 60
        },
        "conditions": "sunny"
      }
    requirement_level: opt_in
    note: |
      > [!WARNING]
      > This attribute may contain sensitive information.

      It's expected to be an object - in case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an object. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.
    stability: development
  span_kind: internal
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.call.arguments:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.call.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.call.result:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.description:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.aws.bedrock.client
  type: span
  brief: |
    Describes an AWS Bedrock operation span.
  stability: development
  attributes:
  - name: aws.bedrock.knowledge_base.id
    type: string
    brief: |
      The unique identifier of the AWS Bedrock Knowledge base. A [knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html) is a bank of information that can be queried by models to generate more relevant responses and augment prompts.
    examples:
    - XFWUPB9PAW
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.max_tokens
    type: int
    brief: The maximum number of tokens the model generates for a request.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.temperature
    type: double
    brief: The temperature setting for the GenAI request.
    examples:
    - 0.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_p
    type: double
    brief: The top_p sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.top_k
    type: double
    brief: The top_k sampling setting for the GenAI request.
    examples:
    - 1.0
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.stop_sequences
    type: string[]
    brief: List of sequences that the model will use to stop generating further tokens.
    examples:
    - - forest
      - lived
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.frequency_penalty
    type: double
    brief: The frequency penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.presence_penalty
    type: double
    brief: The presence penalty setting for the GenAI request.
    examples:
    - 0.1
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.id
    type: string
    brief: The unique identifier for the completion.
    examples:
    - chatcmpl-123
    requirement_level: recommended
    stability: development
  - name: gen_ai.response.finish_reasons
    type: string[]
    brief: Array of reasons the model stopped generating tokens, corresponding to each generation received.
    examples:
    - - stop
    - - stop
      - length
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.input_tokens
    type: int
    brief: The number of tokens used in the GenAI input (prompt).
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: gen_ai.usage.output_tokens
    type: int
    brief: The number of tokens used in the GenAI response (completion).
    examples:
    - 180
    requirement_level: recommended
    stability: development
  - name: gen_ai.request.model
    type: string
    brief: The name of the GenAI model a request is being made to.
    examples: gpt-4
    requirement_level:
      conditionally_required: If available.
    note: |
      The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.operation.name
    type:
      members:
      - id: chat
        value: chat
        brief: Chat completion operation such as [OpenAI Chat API](https://platform.openai.com/docs/api-reference/chat)
        stability: development
      - id: generate_content
        value: generate_content
        brief: Multimodal content generation operation such as [Gemini Generate Content](https://ai.google.dev/api/generate-content)
        stability: development
      - id: text_completion
        value: text_completion
        brief: Text completions operation such as [OpenAI Completions API (Legacy)](https://platform.openai.com/docs/api-reference/completions)
        stability: development
      - id: embeddings
        value: embeddings
        brief: Embeddings operation such as [OpenAI Create embeddings API](https://platform.openai.com/docs/api-reference/embeddings/create)
        stability: development
      - id: create_agent
        value: create_agent
        brief: Create GenAI agent
        stability: development
      - id: invoke_agent
        value: invoke_agent
        brief: Invoke GenAI agent
        stability: development
      - id: execute_tool
        value: execute_tool
        brief: Execute a tool
        stability: development
    brief: The name of the operation being performed.
    requirement_level: required
    note: |
      If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: if the operation ended in an error
    note: |
      The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,
      the canonical name of exception that occurred, or another low-cardinality error identifier.
      Instrumentations SHOULD document the list of errors they report.
    stability: stable
  - name: gen_ai.conversation.id
    type: string
    brief: The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    examples:
    - conv_5j66UpCpwteGg4YSxUnt7lPY
    requirement_level:
      conditionally_required: when available
    note: |
      Instrumentations SHOULD populate conversation id when they have it readily available
      for a given operation, for example:

      -  when client framework being instrumented manages conversation history
      (see [LlamaIndex chat store](https://docs.llamaindex.ai/en/stable/module_guides/storing/chat_stores/))

      - when instrumenting GenAI client libraries that maintain conversation on the backend side
      (see [AWS Bedrock agent sessions](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html),
      [OpenAI Assistant threads](https://platform.openai.com/docs/api-reference/threads))

      Application developers that manage conversation history MAY add conversation id to GenAI and other
      spans or logs using custom span or log record processors or hooks provided by instrumentation
      libraries.
    stability: development
  - name: gen_ai.input.messages
    type: any
    brief: |
      The chat history provided to the model as an input.
    examples:
    - |
      [
        {
          "role": "user",
          "parts": [
            {
              "type": "text",
              "content": "Weather in Paris?"
            }
          ]
        },
        {
          "role": "assistant",
          "parts": [
            {
              "type": "tool_call",
              "id": "call_VSPygqKTWdrhaFErNvMV18Yl",
              "name": "get_weather",
              "arguments": {
                "location": "Paris"
              }
            }
          ]
        },
        {
          "role": "tool",
          "parts": [
            {
              "type": "tool_call_response",
              "id": " call_VSPygqKTWdrhaFErNvMV18Yl",
              "result": "rainy, 57°F"
            }
          ]
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Input messages JSON schema](/docs/gen-ai/gen-ai-input-messages.json).
      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Messages MUST be provided in the order they were sent to the model.
      Instrumentations MAY provide a way for users to filter or truncate
      input messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.messages
    type: any
    brief: Messages returned by the model where each message represents a specific model response (choice, candidate).
    examples:
    - |
      [
        {
          "role": "assistant",
          "parts": [
            {
              "type": "text",
              "content": "The weather in Paris is currently rainy with a temperature of 57°F."
            }
          ],
          "finish_reason": "stop"
        }
      ]
    requirement_level: opt_in
    note: |
      Instrumentations MUST follow [Output messages JSON schema](/docs/gen-ai/gen-ai-output-messages.json)

      Each message represents a single output choice/candidate generated by
      the model. Each message corresponds to exactly one generation
      (choice/candidate) and vice versa - one choice cannot be split across
      multiple messages or one message cannot contain parts from multiple choices.

      When the attribute is recorded on events, it MUST be recorded in structured
      form. When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      output messages.

      > [!Warning]
      > This attribute is likely to contain sensitive information including user/PII data.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.output.type
    type:
      members:
      - id: text
        value: text
        brief: Plain text
        stability: development
      - id: json
        value: json
        brief: JSON object with known or unknown schema
        stability: development
      - id: image
        value: image
        brief: Image
        stability: development
      - id: speech
        value: speech
        brief: Speech
        stability: development
    brief: Represents the content type requested by the client.
    requirement_level:
      conditionally_required: when applicable and if the request includes an output format.
    note: |
      This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
      This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
      Additional output format details may be recorded in the future in the `gen_ai.output.{type}.*` attributes.
    stability: development
  - name: gen_ai.request.choice.count
    type: int
    brief: The target number of candidate completions to return.
    examples:
    - 3
    requirement_level:
      conditionally_required: if available, in the request, and !=1
    stability: development
  - name: gen_ai.request.seed
    type: int
    brief: Requests with same seed value more likely to return same result.
    examples:
    - 100
    requirement_level:
      conditionally_required: if applicable and if the request includes a seed
    stability: development
  - name: gen_ai.response.model
    type: string
    brief: The name of the model that generated the response.
    examples:
    - gpt-4-0613
    requirement_level: recommended
    note: |
      If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.
    stability: development
  - name: gen_ai.system_instructions
    type: any
    brief: The system message or instructions provided to the GenAI model separately from the chat history.
    examples:
    - |
      [
        {
          "type": "text",
          "content": "You are an Agent that greet users, always use greetings tool to respond"
        }
      ]
    - |
      [
        {
          "type": "text",
          "content": "You are a language translator."
        },
        {
          "type": "text",
          "content": "Your mission is to translate text in English to French."
        }
      ]
    requirement_level: opt_in
    note: |
      This attribute SHOULD be used when the corresponding provider or API
      allows to provide system instructions or messages separately from the
      chat history.

      Instructions that are part of the chat history SHOULD be recorded in
      `gen_ai.input.messages` attribute instead.

      Instrumentations MUST follow [System instructions JSON schema](/docs/gen-ai/gen-ai-system-instructions.json).

      When recorded on spans, it MAY be recorded as a JSON string if structured
      format is not supported and SHOULD be recorded in structured form otherwise.

      Instrumentations MAY provide a way for users to filter or truncate
      system instructions.

      > [!Warning]
      > This attribute may contain sensitive information.

      See [Recording content on attributes](/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes)
      section for more details.
    stability: development
  - name: gen_ai.tool.definitions
    type: any
    brief: The list of source system tool definitions available to the GenAI agent or model.
    examples:
    - |
      [
        {
          "type": "function",
          "name": "get_current_weather",
          "description": "Get the current weather in a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              },
              "unit": {
                "type": "string",
                "enum": [
                  "celsius",
                  "fahrenheit"
                ]
              }
            },
            "required": [
              "location",
              "unit"
            ]
          }
        }
      ]
    requirement_level: opt_in
    note: |
      The value of this attribute matches source system tool definition format.

      It's expected to be an array of objects where each object represents a tool definition. In case a serialized string is available
      to the instrumentation, the instrumentation SHOULD do the best effort to
      deserialize it to an array. When recorded on spans, it MAY be recorded as a JSON string if structured format is not supported and SHOULD be recorded in structured form otherwise.

      Since this attribute could be large, it's NOT RECOMMENDED to populate
      it by default. Instrumentations MAY provide a way to enable
      populating this attribute.
    stability: development
  - name: gen_ai.provider.name
    type:
      members:
      - id: openai
        value: openai
        brief: '[OpenAI](https://openai.com/)'
        stability: development
      - id: gcp.gen_ai
        value: gcp.gen_ai
        brief: Any Google generative AI endpoint
        note: |
          May be used when specific backend is unknown.
        stability: development
      - id: gcp.vertex_ai
        value: gcp.vertex_ai
        brief: '[Vertex AI](https://cloud.google.com/vertex-ai)'
        note: |
          Used when accessing the 'aiplatform.googleapis.com' endpoint.
        stability: development
      - id: gcp.gemini
        value: gcp.gemini
        brief: '[Gemini](https://cloud.google.com/products/gemini)'
        note: |
          Used when accessing the 'generativelanguage.googleapis.com' endpoint. Also known as the AI Studio API.
        stability: development
      - id: anthropic
        value: anthropic
        brief: '[Anthropic](https://www.anthropic.com/)'
        stability: development
      - id: cohere
        value: cohere
        brief: '[Cohere](https://cohere.com/)'
        stability: development
      - id: azure.ai.inference
        value: azure.ai.inference
        brief: Azure AI Inference
        stability: development
      - id: azure.ai.openai
        value: azure.ai.openai
        brief: '[Azure OpenAI](https://azure.microsoft.com/products/ai-services/openai-service/)'
        stability: development
      - id: ibm.watsonx.ai
        value: ibm.watsonx.ai
        brief: '[IBM Watsonx AI](https://www.ibm.com/products/watsonx-ai)'
        stability: development
      - id: aws.bedrock
        value: aws.bedrock
        brief: '[AWS Bedrock](https://aws.amazon.com/bedrock)'
        stability: development
      - id: perplexity
        value: perplexity
        brief: '[Perplexity](https://www.perplexity.ai/)'
        stability: development
      - id: x_ai
        value: x_ai
        brief: '[xAI](https://x.ai/)'
        stability: development
      - id: deepseek
        value: deepseek
        brief: '[DeepSeek](https://www.deepseek.com/)'
        stability: development
      - id: groq
        value: groq
        brief: '[Groq](https://groq.com/)'
        stability: development
      - id: mistral_ai
        value: mistral_ai
        brief: '[Mistral AI](https://mistral.ai/)'
        stability: development
    brief: The Generative AI provider as identified by the client or server instrumentation.
    requirement_level: required
    note: |
      The attribute SHOULD be set based on the instrumentation's best
      knowledge and may differ from the actual model provider.

      Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
      are accessible using the OpenAI REST API and corresponding client libraries,
      but may proxy or host models from different providers.

      The `gen_ai.request.model`, `gen_ai.response.model`, and `server.address`
      attributes may help identify the actual system in use.

      The `gen_ai.provider.name` attribute acts as a discriminator that
      identifies the GenAI telemetry format flavor specific to that provider
      within GenAI semantic conventions.
      It SHOULD be set consistently with provider-specific attributes and signals.
      For example, GenAI spans, metrics, and events related to AWS Bedrock
      should have the `gen_ai.provider.name` set to `aws.bedrock` and include
      applicable `aws.bedrock.*` attributes and are not expected to include
      `openai.*` attributes.
    stability: development
  - name: aws.bedrock.guardrail.id
    type: string
    brief: |
      The unique identifier of the AWS Bedrock Guardrail. A [guardrail](https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html) helps safeguard and prevent unwanted behavior from model responses or user messages.
    examples:
    - sgi5gkybzqak
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: GenAI server address.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: GenAI server port.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/gen-ai/spans.yaml
    attributes:
      aws.bedrock.guardrail.id:
        source_group: registry.aws.bedrock
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.bedrock.knowledge_base.id:
        source_group: registry.aws.bedrock
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.conversation.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.input.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.operation.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.messages:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.output.type:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.provider.name:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.choice.count:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.frequency_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.max_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.request.presence_penalty:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.seed:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.stop_sequences:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.temperature:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_k:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.request.top_p:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.finish_reasons:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.id:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.response.model:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      gen_ai.system_instructions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.tool.definitions:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.input_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      gen_ai.usage.output_tokens:
        source_group: registry.gen_ai
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
- id: attributes.jvm.memory
  type: attribute_group
  brief: Describes JVM memory metric attributes.
  attributes:
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.memory.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      jvm.memory.type:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.jvm.memory.used
  type: metric
  brief: Measure of memory used.
  stability: stable
  attributes:
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  metric_name: jvm.memory.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.memory.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      jvm.memory.type:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.memory.committed
  type: metric
  brief: Measure of memory committed.
  stability: stable
  attributes:
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  metric_name: jvm.memory.committed
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.memory.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      jvm.memory.type:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.memory.limit
  type: metric
  brief: Measure of max obtainable memory.
  stability: stable
  attributes:
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  metric_name: jvm.memory.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.memory.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      jvm.memory.type:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.memory.used_after_last_gc
  type: metric
  brief: Measure of memory used, as measured after the most recent garbage collection event on this pool.
  stability: stable
  attributes:
  - name: jvm.memory.type
    type:
      members:
      - id: heap
        value: heap
        brief: Heap memory.
        stability: stable
      - id: non_heap
        value: non_heap
        brief: Non-heap memory
        stability: stable
    brief: The type of memory.
    examples:
    - heap
    - non_heap
    requirement_level: recommended
    stability: stable
  - name: jvm.memory.pool.name
    type: string
    brief: Name of the memory pool.
    examples:
    - G1 Old Gen
    - G1 Eden space
    - G1 Survivor Space
    requirement_level: recommended
    note: |
      Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
    stability: stable
  metric_name: jvm.memory.used_after_last_gc
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.memory.pool.name:
        source_group: registry.jvm
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      jvm.memory.type:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.gc.duration
  type: metric
  brief: Duration of JVM garbage collection actions.
  stability: stable
  attributes:
  - name: jvm.gc.action
    type: string
    brief: Name of the garbage collector action.
    examples:
    - end of minor GC
    - end of major GC
    requirement_level: recommended
    note: |
      Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).
    stability: stable
  - name: jvm.gc.name
    type: string
    brief: Name of the garbage collector.
    examples:
    - G1 Young Generation
    - G1 Old Generation
    requirement_level: recommended
    note: |
      Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).
    stability: stable
  - name: jvm.gc.cause
    type: string
    brief: Name of the garbage collector cause.
    examples:
    - System.gc()
    - Allocation Failure
    requirement_level: opt_in
    note: |
      Garbage collector cause is generally obtained via [GarbageCollectionNotificationInfo#getGcCause()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcCause()).
    stability: development
  metric_name: jvm.gc.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.gc.action:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      jvm.gc.cause:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      jvm.gc.name:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.jvm.thread.count
  type: metric
  brief: Number of executing platform threads.
  stability: stable
  attributes:
  - name: jvm.thread.daemon
    type: boolean
    brief: Whether the thread is daemon or not.
    requirement_level: recommended
    stability: stable
  - name: jvm.thread.state
    type:
      members:
      - id: new
        value: new
        brief: A thread that has not yet started is in this state.
        stability: stable
      - id: runnable
        value: runnable
        brief: A thread executing in the Java virtual machine is in this state.
        stability: stable
      - id: blocked
        value: blocked
        brief: A thread that is blocked waiting for a monitor lock is in this state.
        stability: stable
      - id: waiting
        value: waiting
        brief: A thread that is waiting indefinitely for another thread to perform a particular action is in this state.
        stability: stable
      - id: timed_waiting
        value: timed_waiting
        brief: A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.
        stability: stable
      - id: terminated
        value: terminated
        brief: A thread that has exited is in this state.
        stability: stable
    brief: State of the thread.
    examples:
    - runnable
    - blocked
    requirement_level: recommended
    stability: stable
  metric_name: jvm.thread.count
  instrument: updowncounter
  unit: '{thread}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
    attributes:
      jvm.thread.daemon:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      jvm.thread.state:
        source_group: registry.jvm
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.class.loaded
  type: metric
  brief: Number of classes loaded since JVM start.
  stability: stable
  metric_name: jvm.class.loaded
  instrument: counter
  unit: '{class}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.class.unloaded
  type: metric
  brief: Number of classes unloaded since JVM start.
  stability: stable
  metric_name: jvm.class.unloaded
  instrument: counter
  unit: '{class}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.class.count
  type: metric
  brief: Number of classes currently loaded.
  stability: stable
  metric_name: jvm.class.count
  instrument: updowncounter
  unit: '{class}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.cpu.count
  type: metric
  brief: Number of processors available to the Java virtual machine.
  stability: stable
  metric_name: jvm.cpu.count
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.jvm.cpu.time
  type: metric
  brief: CPU time used by the process as reported by the JVM.
  stability: stable
  metric_name: jvm.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.jvm.cpu.recent_utilization
  type: metric
  brief: Recent CPU utilization for the process as reported by the JVM.
  note: |
    The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).
  stability: stable
  metric_name: jvm.cpu.recent_utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/jvm/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: registry.server
  type: attribute_group
  brief: |
    These attributes may be used to describe the server in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the "user-facing" surface of the protocol / API doesn't expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/server/registry.yaml
  display_name: Server Attributes
- id: server
  type: attribute_group
  brief: |
    General server attributes.
  attributes:
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/server/common.yaml
    attributes:
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.opentracing
  type: attribute_group
  brief: Attributes used by the OpenTracing Shim layer.
  attributes:
  - name: opentracing.ref_type
    type:
      members:
      - id: child_of
        value: child_of
        brief: The parent Span depends on the child Span in some capacity
        stability: development
      - id: follows_from
        value: follows_from
        brief: The parent Span doesn't depend in any way on the result of the child Span
        stability: development
    brief: Parent-child Reference type
    requirement_level: recommended
    note: |
      The causal relationship between a child Span and a parent Span.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/opentracing/registry.yaml
  display_name: OpenTracing Attributes
- id: entity.host
  type: entity
  brief: |
    A host is defined as a computing instance. For example, physical servers, virtual machines, switches or disk array.
  stability: development
  attributes:
  - name: host.name
    type: string
    brief: |
      Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
    examples:
    - opentelemetry-test
    requirement_level: recommended
    stability: development
  - name: host.type
    type: string
    brief: |
      Type of host. For Cloud, this must be the machine type.
    examples:
    - n1-standard-1
    requirement_level: recommended
    stability: development
  - name: host.arch
    type:
      members:
      - id: amd64
        value: amd64
        brief: AMD64
        stability: development
      - id: arm32
        value: arm32
        brief: ARM32
        stability: development
      - id: arm64
        value: arm64
        brief: ARM64
        stability: development
      - id: ia64
        value: ia64
        brief: Itanium
        stability: development
      - id: ppc32
        value: ppc32
        brief: 32-bit PowerPC
        stability: development
      - id: ppc64
        value: ppc64
        brief: 64-bit PowerPC
        stability: development
      - id: s390x
        value: s390x
        brief: IBM z/Architecture
        stability: development
      - id: x86
        value: x86
        brief: 32-bit x86
        stability: development
    brief: |
      The CPU architecture the host system is running on.
    requirement_level: recommended
    stability: development
  - name: host.image.name
    type: string
    brief: |
      Name of the VM image or OS install the host was instantiated from.
    examples:
    - infra-ami-eks-worker-node-7d4ec78312
    - CentOS-8-x86_64-1905
    requirement_level: recommended
    stability: development
  - name: host.image.id
    type: string
    brief: |
      VM image ID or host OS image ID. For Cloud, this value is from the provider.
    examples:
    - ami-07b06b442921831e5
    requirement_level: recommended
    stability: development
  - name: host.image.version
    type: string
    brief: |
      The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
    examples:
    - '0.1'
    requirement_level: recommended
    stability: development
  - name: host.id
    type: string
    brief: |
      Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.
    examples:
    - fdbf79e8af94cb7f9e8df36789187052
    requirement_level: recommended
    note: |
      Collecting `host.id` from non-containerized systems

      **Non-privileged Machine ID Lookup**

      When collecting `host.id` for non-containerized systems non-privileged lookups
      of the machine id are preferred. SDK detector implementations MUST use the
      sources listed below to obtain the machine id.

      | OS | Primary | Fallback |
      |---------|---------|---------|
      | Linux   | contents of `/etc/machine-id` | contents of `/var/lib/dbus/machine-id` |
      | BSD     | contents of `/etc/hostid` | output of `kenv -q smbios.system.uuid` |
      | MacOS   | `IOPlatformUUID` line from the output of `ioreg -rd1 -c "IOPlatformExpertDevice"` | - |
      | Windows | `MachineGuid` from registry `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography`  | - |

      **Privileged Machine ID Lookup**

      The `host.id` can be looked up using privileged sources. For example, Linux
      systems can use the output of `dmidecode -t system`, `dmidecode -t baseboard`,
      `dmidecode -t chassis`, or read the corresponding data from the filesystem
      (e.g. `cat /sys/devices/virtual/dmi/id/product_id`,
      `cat /sys/devices/virtual/dmi/id/product_uuid`, etc), however, SDK resource
      detector implementations MUST not collect `host.id` from privileged sources. If
      privileged lookup of `host.id` is required, the value should be injected via the
      `OTEL_RESOURCE_ATTRIBUTES` environment variable.
    stability: development
  - name: host.ip
    type: string[]
    brief: |
      Available IP addresses of the host, excluding loopback interfaces.
    examples:
    - - 192.168.1.140
      - fe80::abc2:4a28:737a:609e
    requirement_level: opt_in
    note: |
      IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.
    stability: development
  - name: host.mac
    type: string[]
    brief: |
      Available MAC addresses of the host, excluding loopback interfaces.
    examples:
    - - AC-DE-48-23-45-67
      - AC-DE-48-23-45-67-01-9F
    requirement_level: opt_in
    note: |
      MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.
    stability: development
  name: host
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/host/entities.yaml
    attributes:
      host.arch:
        source_group: registry.host
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      host.id:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - note
      host.image.id:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      host.image.name:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      host.image.version:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      host.ip:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.mac:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.name:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      host.type:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.host.cpu
  type: entity
  brief: |
    A host's CPU information
  stability: development
  attributes:
  - name: host.cpu.vendor.id
    type: string
    brief: |
      Processor manufacturer identifier. A maximum 12-character string.
    examples:
    - GenuineIntel
    requirement_level: opt_in
    note: |
      [CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.
    stability: development
  - name: host.cpu.family
    type: string
    brief: |
      Family or generation of the CPU.
    examples:
    - '6'
    - PA-RISC 1.1e
    requirement_level: opt_in
    stability: development
  - name: host.cpu.model.id
    type: string
    brief: |
      Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.
    examples:
    - '6'
    - 9000/778/B180L
    requirement_level: opt_in
    stability: development
  - name: host.cpu.model.name
    type: string
    brief: |
      Model designation of the processor.
    examples:
    - 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz
    requirement_level: opt_in
    stability: development
  - name: host.cpu.stepping
    type: string
    brief: |
      Stepping or core revisions.
    examples:
    - '1'
    - r1p1
    requirement_level: opt_in
    stability: development
  - name: host.cpu.cache.l2.size
    type: int
    brief: |
      The amount of level 2 memory cache available to the processor (in Bytes).
    examples:
    - 12288000
    requirement_level: opt_in
    stability: development
  name: host.cpu
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/host/entities.yaml
    attributes:
      host.cpu.cache.l2.size:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.cpu.family:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.cpu.model.id:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.cpu.model.name:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.cpu.stepping:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      host.cpu.vendor.id:
        source_group: registry.host
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.dotnet
  type: attribute_group
  brief: |
    This document defines .NET related attributes.
  attributes:
  - name: dotnet.gc.heap.generation
    type:
      members:
      - id: gen0
        value: gen0
        brief: Generation 0
        stability: stable
      - id: gen1
        value: gen1
        brief: Generation 1
        stability: stable
      - id: gen2
        value: gen2
        brief: Generation 2
        stability: stable
      - id: loh
        value: loh
        brief: Large Object Heap
        stability: stable
      - id: poh
        value: poh
        brief: Pinned Object Heap
        stability: stable
    brief: Name of the garbage collector managed heap generation.
    examples:
    - gen0
    - gen1
    - gen2
    requirement_level: recommended
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/registry.yaml
  display_name: .NET Attributes
- id: metric.dotnet.process.cpu.count
  type: metric
  brief: The number of processors available to the process.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as accessing [`Environment.ProcessorCount`](https://learn.microsoft.com/dotnet/api/system.environment.processorcount).
  stability: stable
  metric_name: dotnet.process.cpu.count
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.process.cpu.time
  type: metric
  brief: CPU time used by the process.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as accessing the corresponding processor time properties on [`System.Diagnostics.Process`](https://learn.microsoft.com/dotnet/api/system.diagnostics.process).
  stability: stable
  attributes:
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The mode of the CPU
    examples:
    - user
    - system
    requirement_level: required
    stability: development
  metric_name: dotnet.process.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
    attributes:
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.dotnet.process.memory.working_set
  type: metric
  brief: The number of bytes of physical memory mapped to the process context.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`Environment.WorkingSet`](https://learn.microsoft.com/dotnet/api/system.environment.workingset).
  stability: stable
  metric_name: dotnet.process.memory.working_set
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.gc.collections
  type: metric
  brief: The number of garbage collections that have occurred since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric uses the [`GC.CollectionCount(int generation)`](https://learn.microsoft.com/dotnet/api/system.gc.collectioncount) API to calculate exclusive collections per generation.
  stability: stable
  attributes:
  - name: dotnet.gc.heap.generation
    type:
      members:
      - id: gen0
        value: gen0
        brief: Generation 0
        stability: stable
      - id: gen1
        value: gen1
        brief: Generation 1
        stability: stable
      - id: gen2
        value: gen2
        brief: Generation 2
        stability: stable
      - id: loh
        value: loh
        brief: Large Object Heap
        stability: stable
      - id: poh
        value: poh
        brief: Pinned Object Heap
        stability: stable
    brief: Name of the garbage collector managed heap generation.
    examples:
    - gen0
    - gen1
    - gen2
    requirement_level: required
    stability: stable
  metric_name: dotnet.gc.collections
  instrument: counter
  unit: '{collection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
    attributes:
      dotnet.gc.heap.generation:
        source_group: registry.dotnet
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.gc.heap.total_allocated
  type: metric
  brief: |
    The *approximate* number of bytes allocated on the managed GC heap since the process has started. The returned value does not include any native allocations.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`GC.GetTotalAllocatedBytes()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalallocatedbytes).
  stability: stable
  metric_name: dotnet.gc.heap.total_allocated
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.gc.last_collection.memory.committed_size
  type: metric
  brief: |
    The amount of committed virtual memory in use by the .NET GC, as observed during the latest garbage collection.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`GC.GetGCMemoryInfo().TotalCommittedBytes`](https://learn.microsoft.com/dotnet/api/system.gcmemoryinfo.totalcommittedbytes). Committed virtual memory may be larger than the heap size because it includes both memory for storing existing objects (the heap size) and some extra memory that is ready to handle newly allocated objects in the future.
  stability: stable
  metric_name: dotnet.gc.last_collection.memory.committed_size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.gc.last_collection.heap.size
  type: metric
  brief: |
    The managed GC heap size (including fragmentation), as observed during the latest garbage collection.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.SizeAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.sizeafterbytes).
  stability: stable
  attributes:
  - name: dotnet.gc.heap.generation
    type:
      members:
      - id: gen0
        value: gen0
        brief: Generation 0
        stability: stable
      - id: gen1
        value: gen1
        brief: Generation 1
        stability: stable
      - id: gen2
        value: gen2
        brief: Generation 2
        stability: stable
      - id: loh
        value: loh
        brief: Large Object Heap
        stability: stable
      - id: poh
        value: poh
        brief: Pinned Object Heap
        stability: stable
    brief: Name of the garbage collector managed heap generation.
    examples:
    - gen0
    - gen1
    - gen2
    requirement_level: required
    stability: stable
  metric_name: dotnet.gc.last_collection.heap.size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
    attributes:
      dotnet.gc.heap.generation:
        source_group: registry.dotnet
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.gc.last_collection.heap.fragmentation.size
  type: metric
  brief: |
    The heap fragmentation, as observed during the latest garbage collection.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`GC.GetGCMemoryInfo().GenerationInfo.FragmentationAfterBytes`](https://learn.microsoft.com/dotnet/api/system.gcgenerationinfo.fragmentationafterbytes).
  stability: stable
  attributes:
  - name: dotnet.gc.heap.generation
    type:
      members:
      - id: gen0
        value: gen0
        brief: Generation 0
        stability: stable
      - id: gen1
        value: gen1
        brief: Generation 1
        stability: stable
      - id: gen2
        value: gen2
        brief: Generation 2
        stability: stable
      - id: loh
        value: loh
        brief: Large Object Heap
        stability: stable
      - id: poh
        value: poh
        brief: Pinned Object Heap
        stability: stable
    brief: Name of the garbage collector managed heap generation.
    examples:
    - gen0
    - gen1
    - gen2
    requirement_level: required
    stability: stable
  metric_name: dotnet.gc.last_collection.heap.fragmentation.size
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
    attributes:
      dotnet.gc.heap.generation:
        source_group: registry.dotnet
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.gc.pause.time
  type: metric
  brief: The total amount of time paused in GC since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`GC.GetTotalPauseDuration()`](https://learn.microsoft.com/dotnet/api/system.gc.gettotalpauseduration).
  stability: stable
  metric_name: dotnet.gc.pause.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.dotnet.jit.compiled_il.size
  type: metric
  brief: Count of bytes of intermediate language that have been compiled since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`JitInfo.GetCompiledILBytes()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledilbytes).
  stability: stable
  metric_name: dotnet.jit.compiled_il.size
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.jit.compiled_methods
  type: metric
  brief: |
    The number of times the JIT compiler (re)compiled methods since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`JitInfo.GetCompiledMethodCount()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompiledmethodcount).
  stability: stable
  metric_name: dotnet.jit.compiled_methods
  instrument: counter
  unit: '{method}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.jit.compilation.time
  type: metric
  brief: |
    The amount of time the JIT compiler has spent compiling methods since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`JitInfo.GetCompilationTime()`](https://learn.microsoft.com/dotnet/api/system.runtime.jitinfo.getcompilationtime).
  stability: stable
  metric_name: dotnet.jit.compilation.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.dotnet.monitor.lock_contentions
  type: metric
  brief: |
    The number of times there was contention when trying to acquire a monitor lock since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`Monitor.LockContentionCount`](https://learn.microsoft.com/dotnet/api/system.threading.monitor.lockcontentioncount).
  stability: stable
  metric_name: dotnet.monitor.lock_contentions
  instrument: counter
  unit: '{contention}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.thread_pool.thread.count
  type: metric
  brief: The number of thread pool threads that currently exist.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`ThreadPool.ThreadCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.threadcount).
  stability: stable
  metric_name: dotnet.thread_pool.thread.count
  instrument: updowncounter
  unit: '{thread}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.thread_pool.work_item.count
  type: metric
  brief: |
    The number of work items that the thread pool has completed since the process has started.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`ThreadPool.CompletedWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.completedworkitemcount).
  stability: stable
  metric_name: dotnet.thread_pool.work_item.count
  instrument: counter
  unit: '{work_item}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.thread_pool.queue.length
  type: metric
  brief: |
    The number of work items that are currently queued to be processed by the thread pool.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`ThreadPool.PendingWorkItemCount`](https://learn.microsoft.com/dotnet/api/system.threading.threadpool.pendingworkitemcount).
  stability: stable
  metric_name: dotnet.thread_pool.queue.length
  instrument: updowncounter
  unit: '{work_item}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.timer.count
  type: metric
  brief: The number of timer instances that are currently active.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`Timer.ActiveCount`](https://learn.microsoft.com/dotnet/api/system.threading.timer.activecount).
  stability: stable
  metric_name: dotnet.timer.count
  instrument: updowncounter
  unit: '{timer}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.assembly.count
  type: metric
  brief: The number of .NET assemblies that are currently loaded.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as calling [`AppDomain.CurrentDomain.GetAssemblies().Length`](https://learn.microsoft.com/dotnet/api/system.appdomain.getassemblies).
  stability: stable
  metric_name: dotnet.assembly.count
  instrument: updowncounter
  unit: '{assembly}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.dotnet.exceptions
  type: metric
  brief: The number of exceptions that have been thrown in managed code.
  note: |
    Meter name: `System.Runtime`; Added in: .NET 9.0.
    This metric reports the same values as counting calls to [`AppDomain.CurrentDomain.FirstChanceException`](https://learn.microsoft.com/dotnet/api/system.appdomain.firstchanceexception).
  stability: stable
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - System.OperationCanceledException
    - Contoso.MyException
    requirement_level: required
    stability: stable
  metric_name: dotnet.exceptions
  instrument: counter
  unit: '{exception}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dotnet/runtime-metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.peer
  type: attribute_group
  brief: |
    Operations that access some remote service.
  attributes:
  - name: peer.service
    type: string
    brief: |
      The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.
    examples: AuthTokenCache
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/peer/registry.yaml
  display_name: Peer Attributes
- id: entity.browser
  type: entity
  brief: |
    The web browser in which the application represented by the resource is running. The `browser.*` attributes MUST be used only for resources that represent applications running in a web browser (regardless of whether running on a mobile or desktop device).
  stability: development
  attributes:
  - name: browser.brands
    type: string[]
    brief: Array of brand name and version separated by a space
    examples:
    - - ' Not A;Brand 99'
      - Chromium 99
      - Chrome 99
    requirement_level: recommended
    note: |
      This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).
    stability: development
  - name: browser.platform
    type: string
    brief: The platform on which the browser is running
    examples:
    - Windows
    - macOS
    - Android
    requirement_level: recommended
    note: |
      This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.
      The list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.
    stability: development
  - name: browser.mobile
    type: boolean
    brief: A boolean that is true if the browser is running on a mobile device
    requirement_level: recommended
    note: |
      This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.
    stability: development
  - name: browser.language
    type: string
    brief: Preferred language of the user using the browser
    examples:
    - en
    - en-US
    - fr
    - fr-FR
    requirement_level: recommended
    note: |
      This value is intended to be taken from the Navigator API `navigator.language`.
    stability: development
  - name: user_agent.original
    type: string
    brief: Full user-agent string provided by the browser
    examples:
    - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
    requirement_level: recommended
    note: |
      The user-agent value SHOULD be provided only from browsers that do not have a mechanism to retrieve brands and platform individually from the User-Agent Client Hints API. To retrieve the value, the legacy `navigator.userAgent` API can be used.
    stability: stable
  name: browser
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/browser/entities.yaml
    attributes:
      browser.brands:
        source_group: registry.browser
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      browser.language:
        source_group: registry.browser
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      browser.mobile:
        source_group: registry.browser
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      browser.platform:
        source_group: registry.browser
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      user_agent.original:
        source_group: registry.user_agent
        inherited_fields:
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
- id: event.browser.web_vital
  type: event
  brief: |
    This event describes the website performance metrics introduced by Google, See [web vitals](https://web.dev/vitals).
  stability: development
  name: browser.web_vital
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/browser/events.yaml
  body:
    type: map
    id: browser.web_vital
    stability: development
    requirement_level: required
    fields:
    - type: enum
      id: name
      brief: Name of the web vital.
      stability: development
      examples:
      - cls
      requirement_level: required
      members:
      - id: cls
        value: cls
        brief: Cumulative Layout Shift. See [cls](https://web.dev/articles/cls).
        stability: development
      - id: lcp
        value: lcp
        brief: Largest Contentful Paint. See [lcp](https://web.dev/articles/lcp).
        stability: development
      - id: fid
        value: fid
        brief: First Input Delay. See [fid](https://web.dev/articles/fid).
        stability: development
      - id: inp
        value: inp
        brief: Interation to Next Paint. See [inp](https://web.dev/articles/inp).
        stability: development
    - type: double
      id: value
      brief: Value of the web vital.
      stability: development
      examples:
      - 1.0
      requirement_level: required
    - type: double
      id: delta
      brief: The delta between the current value and the last-reported value. See [delta](https://github.com/GoogleChrome/web-vitals?tab=readme-ov-file#report-only-the-delta-of-changes).
      stability: development
      examples:
      - 0.2
      requirement_level: required
    - type: string
      id: id
      brief: A unique ID representing this particular metric instance.
      stability: development
      examples:
      - v3-1677874579383-6381583661209
      requirement_level: required
- id: registry.graphql
  type: attribute_group
  brief: This document defines attributes for GraphQL.
  attributes:
  - name: graphql.operation.name
    type: string
    brief: The name of the operation being executed.
    examples: findBookById
    requirement_level: recommended
    stability: development
  - name: graphql.operation.type
    type:
      members:
      - id: query
        value: query
        brief: GraphQL query
        stability: development
      - id: mutation
        value: mutation
        brief: GraphQL mutation
        stability: development
      - id: subscription
        value: subscription
        brief: GraphQL subscription
        stability: development
    brief: The type of the operation being executed.
    examples:
    - query
    - mutation
    - subscription
    requirement_level: recommended
    stability: development
  - name: graphql.document
    type: string
    brief: The GraphQL document being executed.
    examples: 'query findBookById { bookById(id: ?) { name } }'
    requirement_level: recommended
    note: The value may be sanitized to exclude sensitive information.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/graphql/registry.yaml
  display_name: GraphQL Attributes
- id: span.graphql.server
  type: span
  brief: |
    This span represents an incoming operation on a GraphQL server implementation.
  note: |
    **Span name** SHOULD be of the format `{graphql.operation.type}` provided
    `graphql.operation.type` is available. If `graphql.operation.type` is not available,
    the span SHOULD be named `GraphQL Operation`.

    > **Warning**
    > The `graphql.operation.name` value is provided by the client and can have high
    > cardinality. Using it in the GraphQL server span name (by default) is
    > NOT RECOMMENDED.
    >
    > Instrumentation MAY provide a configuration option to enable a more descriptive
    > span name following `{graphql.operation.type} {graphql.operation.name}` format
    > when `graphql.operation.name` is available.
  stability: development
  attributes:
  - name: graphql.operation.name
    type: string
    brief: The name of the operation being executed.
    examples: findBookById
    requirement_level: recommended
    stability: development
  - name: graphql.operation.type
    type:
      members:
      - id: query
        value: query
        brief: GraphQL query
        stability: development
      - id: mutation
        value: mutation
        brief: GraphQL mutation
        stability: development
      - id: subscription
        value: subscription
        brief: GraphQL subscription
        stability: development
    brief: The type of the operation being executed.
    examples:
    - query
    - mutation
    - subscription
    requirement_level: recommended
    stability: development
  - name: graphql.document
    type: string
    brief: The GraphQL document being executed.
    examples: 'query findBookById { bookById(id: ?) { name } }'
    requirement_level: recommended
    note: The value may be sanitized to exclude sensitive information.
    stability: development
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/graphql/spans.yml
    attributes:
      graphql.document:
        source_group: registry.graphql
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      graphql.operation.name:
        source_group: registry.graphql
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      graphql.operation.type:
        source_group: registry.graphql
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.v8js
  type: attribute_group
  brief: Describes V8 JS Engine Runtime related attributes.
  attributes:
  - name: v8js.gc.type
    type:
      members:
      - id: major
        value: major
        brief: Major (Mark Sweep Compact).
        stability: development
      - id: minor
        value: minor
        brief: Minor (Scavenge).
        stability: development
      - id: incremental
        value: incremental
        brief: Incremental (Incremental Marking).
        stability: development
      - id: weakcb
        value: weakcb
        brief: Weak Callbacks (Process Weak Callbacks).
        stability: development
    brief: The type of garbage collection.
    requirement_level: recommended
    stability: development
  - name: v8js.heap.space.name
    type:
      members:
      - id: new_space
        value: new_space
        brief: New memory space.
        stability: development
      - id: old_space
        value: old_space
        brief: Old memory space.
        stability: development
      - id: code_space
        value: code_space
        brief: Code memory space.
        stability: development
      - id: map_space
        value: map_space
        brief: Map memory space.
        stability: development
      - id: large_object_space
        value: large_object_space
        brief: Large object memory space.
        stability: development
    brief: The name of the space type of heap memory.
    requirement_level: recommended
    note: |
      Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/v8js/registry.yaml
  display_name: V8 JS Attributes
- id: registry.oci.manifest
  type: attribute_group
  brief: |
    An OCI image manifest.
  attributes:
  - name: oci.manifest.digest
    type: string
    brief: |
      The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.
    examples:
    - sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4
    requirement_level: recommended
    note: |
      Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).
      An example can be found in [Example Image Manifest](https://github.com/opencontainers/image-spec/blob/main/manifest.md#example-image-manifest).
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/oci/registry.yaml
  display_name: Open Container Initiative (OCI) Attributes
- id: registry.vcs.repository
  type: attribute_group
  brief: |
    This group defines the attributes for [Version Control Systems (VCS)](https://wikipedia.org/wiki/Version_control).
  attributes:
  - name: vcs.repository.url.full
    type: string
    brief: |
      The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
    examples:
    - https://github.com/opentelemetry/open-telemetry-collector-contrib
    - https://gitlab.com/my-org/my-project/my-projects-project/repo
    requirement_level: recommended
    note: |
      In Git Version Control Systems, the canonical URL SHOULD NOT include
      the `.git` extension.
    stability: development
  - name: vcs.repository.name
    type: string
    brief: |
      The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
    examples:
    - semantic-conventions
    - my-cool-repo
    requirement_level: recommended
    note: |
      Due to it only being the name, it can clash with forks of the same
      repository if collecting telemetry across multiple orgs or groups in
      the same backends.
    stability: development
  - name: vcs.ref.base.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: recommended
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.ref.base.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: recommended
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits.
    stability: development
  - name: vcs.ref.base.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: recommended
    note: |
      `base` refers to the starting point of a change. For example, `main`
      would be the base reference of type branch if you've created a new
      reference of type branch from it and created new commits. The
      revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.base.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  - name: vcs.ref.head.name
    type: string
    brief: |
      The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: recommended
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.head.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: recommended
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.
    stability: development
  - name: vcs.ref.head.revision
    type: string
    brief: |
      The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: recommended
    note: |
      `head` refers to where you are right now; the current reference at a
      given time.The revision can be a full [hash value (see
      glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
      of the recorded change to a ref within a repository pointing to a
      commit [commit](https://git-scm.com/docs/git-commit) object. It does
      not necessarily have to be a hash; it can simply define a [revision
      number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
      which is an integer that is monotonically increasing. In cases where
      it is identical to the `ref.head.name`, it SHOULD still be included.
      It is up to the implementer to decide which value to set as the
      revision based on the VCS system and situational context.
    stability: development
  - name: vcs.ref.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
    examples:
    - branch
    - tag
    requirement_level: recommended
    stability: development
  - name: vcs.revision_delta.direction
    type:
      members:
      - id: behind
        value: behind
        brief: How many revisions the change is behind the target ref.
        stability: development
      - id: ahead
        value: ahead
        brief: How many revisions the change is ahead of the target ref.
        stability: development
    brief: |
      The type of revision comparison.
    examples:
    - ahead
    - behind
    requirement_level: recommended
    stability: development
  - name: vcs.line_change.type
    type:
      members:
      - id: added
        value: added
        brief: How many lines were added.
        stability: development
      - id: removed
        value: removed
        brief: How many lines were removed.
        stability: development
    brief: |
      The type of line change being measured on a branch or change.
    examples:
    - added
    - removed
    requirement_level: recommended
    stability: development
  - name: vcs.change.title
    type: string
    brief: |
      The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.
    examples:
    - Fixes broken thing
    - 'feat: add my new feature'
    - '[chore] update dependency'
    requirement_level: recommended
    stability: development
  - name: vcs.change.id
    type: string
    brief: |
      The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
    examples:
    - '123'
    requirement_level: recommended
    stability: development
  - name: vcs.change.state
    type:
      members:
      - id: open
        value: open
        brief: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
        stability: development
      - id: wip
        value: wip
        brief: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
        stability: development
      - id: closed
        value: closed
        brief: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
        stability: development
      - id: merged
        value: merged
        brief: Merged indicates that the change has been successfully integrated into the target codebase.
        stability: development
    brief: |
      The state of the change (pull request/merge request/changelist).
    examples:
    - open
    - closed
    - merged
    requirement_level: recommended
    stability: development
  - name: vcs.owner.name
    type: string
    brief: |
      The group owner within the version control system.
    examples:
    - my-org
    - myteam
    - business-unit
    requirement_level: recommended
    stability: development
  - name: vcs.provider.name
    type:
      members:
      - id: github
        value: github
        brief: '[GitHub](https://github.com)'
        stability: development
      - id: gitlab
        value: gitlab
        brief: '[GitLab](https://gitlab.com)'
        stability: development
      - id: gittea
        value: gittea
        brief: Deprecated, use `gitea` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: gitea
          note: Replaced by `gitea`.
      - id: gitea
        value: gitea
        brief: '[Gitea](https://gitea.io)'
        stability: development
      - id: bitbucket
        value: bitbucket
        brief: '[Bitbucket](https://bitbucket.org)'
        stability: development
    brief: |
      The name of the version control system provider.
    examples:
    - github
    - gitlab
    - gitea
    - bitbucket
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/registry.yaml
  display_name: VCS Repository Attributes
- id: registry.vcs.deprecated
  type: attribute_group
  brief: |
    "Describes deprecated vcs attributes."
  attributes:
  - name: vcs.repository.ref.name
    type: string
    brief: |
      Deprecated, use `vcs.ref.head.name` instead.
    examples:
    - my-feature-branch
    - tag-1-test
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: vcs.ref.head.name
      note: Replaced by `vcs.ref.head.name`.
  - name: vcs.repository.ref.type
    type:
      members:
      - id: branch
        value: branch
        brief: '[branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)'
        stability: development
      - id: tag
        value: tag
        brief: '[tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)'
        stability: development
    brief: |
      Deprecated, use `vcs.ref.head.type` instead.
    examples:
    - branch
    - tag
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: vcs.ref.head.type
      note: Replaced by `vcs.ref.head.type`.
  - name: vcs.repository.ref.revision
    type: string
    brief: |
      Deprecated, use `vcs.ref.head.revision` instead.
    examples:
    - 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
    - main
    - '123'
    - HEAD
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: vcs.ref.head.revision
      note: Replaced by `vcs.ref.head.revision`.
  - name: vcs.repository.change.title
    type: string
    brief: |
      Deprecated, use `vcs.change.title` instead.
    examples:
    - Fixes broken thing
    - 'feat: add my new feature'
    - '[chore] update dependency'
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: vcs.change.title
      note: Replaced by `vcs.change.title`.
  - name: vcs.repository.change.id
    type: string
    brief: |
      Deprecated, use `vcs.change.id` instead.
    examples:
    - '123'
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: vcs.change.id
      note: Replaced by `vcs.change.id`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/vcs/deprecated/registry-deprecated.yaml
- id: aspnetcore.common.rate_limiting.metrics.attributes
  type: attribute_group
  brief: Common ASP.NET Core rate-limiting metrics attributes
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level:
      conditionally_required: if the matched endpoint for the request had a rate-limiting policy.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.rate_limiting.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: aspnetcore.common.authentication.metrics.attributes
  type: attribute_group
  brief: Common ASP.NET Core authentication metrics attributes
  attributes:
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level:
      conditionally_required: if a scheme is specified during authentication.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
- id: aspnetcore.common.identity.metrics.attributes
  type: attribute_group
  brief: Common ASP.NET Core Identity metrics attributes
  attributes:
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: aspnetcore.common.memory_pool.metrics.attributes
  type: attribute_group
  brief: Common ASP.NET Core memory pool metrics attributes
  attributes:
  - name: aspnetcore.memory_pool.owner
    type: string
    brief: The name of the library or subsystem using the memory pool instance.
    examples:
    - kestrel
    - iis
    requirement_level:
      conditionally_required: if owner is specified when the memory pool is created.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.memory_pool.owner:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric.aspnetcore.routing.match_attempts
  type: metric
  brief: Number of requests that were attempted to be matched to an endpoint.
  note: |
    Meter name: `Microsoft.AspNetCore.Routing`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: aspnetcore.routing.is_fallback
    type: boolean
    brief: A value that indicates whether the matched route is a fallback route.
    examples:
    - true
    requirement_level:
      conditionally_required: if and only if a route was successfully matched.
    stability: stable
  - name: aspnetcore.routing.match_status
    type:
      members:
      - id: success
        value: success
        brief: Match succeeded
        stability: stable
      - id: failure
        value: failure
        brief: Match failed
        stability: stable
    brief: Match result - success or failure
    examples:
    - success
    - failure
    requirement_level: required
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: if and only if a route was successfully matched.
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  metric_name: aspnetcore.routing.match_attempts
  instrument: counter
  unit: '{match_attempt}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.routing.is_fallback:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.routing.match_status:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.diagnostics.exceptions
  type: metric
  brief: Number of exceptions caught by exception handling middleware.
  note: |
    Meter name: `Microsoft.AspNetCore.Diagnostics`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    - Contoso.MyException
    requirement_level: required
    stability: stable
  - name: aspnetcore.diagnostics.handler.type
    type: string
    brief: Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.
    examples:
    - Contoso.MyHandler
    requirement_level:
      conditionally_required: if and only if the exception was handled by this handler.
    stability: stable
  - name: aspnetcore.diagnostics.exception.result
    type:
      members:
      - id: handled
        value: handled
        brief: Exception was handled by the exception handling middleware.
        stability: stable
      - id: unhandled
        value: unhandled
        brief: Exception was not handled by the exception handling middleware.
        stability: stable
      - id: skipped
        value: skipped
        brief: Exception handling was skipped because the response had started.
        stability: stable
      - id: aborted
        value: aborted
        brief: Exception handling didn't run because the request was aborted.
        stability: stable
    brief: ASP.NET Core exception middleware handling result.
    examples:
    - handled
    - unhandled
    requirement_level: required
    stability: stable
  metric_name: aspnetcore.diagnostics.exceptions
  instrument: counter
  unit: '{exception}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.diagnostics.exception.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.diagnostics.handler.type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.rate_limiting.active_request_leases
  type: metric
  brief: Number of requests that are currently active on the server that hold a rate limiting lease.
  note: |
    Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level:
      conditionally_required: if the matched endpoint for the request had a rate-limiting policy.
    stability: stable
  metric_name: aspnetcore.rate_limiting.active_request_leases
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.rate_limiting.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.rate_limiting.request_lease.duration
  type: metric
  brief: The duration of rate limiting lease held by requests on the server.
  note: |
    Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level:
      conditionally_required: if the matched endpoint for the request had a rate-limiting policy.
    stability: stable
  metric_name: aspnetcore.rate_limiting.request_lease.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.rate_limiting.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.aspnetcore.rate_limiting.request.time_in_queue
  type: metric
  brief: The time the request spent in a queue waiting to acquire a rate limiting lease.
  note: |
    Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level:
      conditionally_required: if the matched endpoint for the request had a rate-limiting policy.
    stability: stable
  - name: aspnetcore.rate_limiting.result
    type:
      members:
      - id: acquired
        value: acquired
        brief: Lease was acquired
        stability: stable
      - id: endpoint_limiter
        value: endpoint_limiter
        brief: Lease request was rejected by the endpoint limiter
        stability: stable
      - id: global_limiter
        value: global_limiter
        brief: Lease request was rejected by the global limiter
        stability: stable
      - id: request_canceled
        value: request_canceled
        brief: Lease request was canceled
        stability: stable
    brief: Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
    examples:
    - acquired
    - request_canceled
    requirement_level: required
    stability: stable
  metric_name: aspnetcore.rate_limiting.request.time_in_queue
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.rate_limiting.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.rate_limiting.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.aspnetcore.rate_limiting.queued_requests
  type: metric
  brief: Number of requests that are currently queued, waiting to acquire a rate limiting lease.
  note: |
    Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level:
      conditionally_required: if the matched endpoint for the request had a rate-limiting policy.
    stability: stable
  metric_name: aspnetcore.rate_limiting.queued_requests
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.rate_limiting.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.rate_limiting.requests
  type: metric
  brief: Number of requests that tried to acquire a rate limiting lease.
  note: |
    Requests could be:

    * Rejected by global or endpoint rate limiting policies
    * Canceled while waiting for the lease.

    Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0
  stability: stable
  attributes:
  - name: aspnetcore.rate_limiting.policy
    type: string
    brief: Rate limiting policy name.
    examples:
    - fixed
    - sliding
    - token
    requirement_level:
      conditionally_required: if the matched endpoint for the request had a rate-limiting policy.
    stability: stable
  - name: aspnetcore.rate_limiting.result
    type:
      members:
      - id: acquired
        value: acquired
        brief: Lease was acquired
        stability: stable
      - id: endpoint_limiter
        value: endpoint_limiter
        brief: Lease request was rejected by the endpoint limiter
        stability: stable
      - id: global_limiter
        value: global_limiter
        brief: Lease request was rejected by the global limiter
        stability: stable
      - id: request_canceled
        value: request_canceled
        brief: Lease request was canceled
        stability: stable
    brief: Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
    examples:
    - acquired
    - request_canceled
    requirement_level: required
    stability: stable
  metric_name: aspnetcore.rate_limiting.requests
  instrument: counter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.rate_limiting.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.rate_limiting.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.memory_pool.pooled
  type: metric
  brief: Number of bytes currently pooled and available for reuse.
  note: |
    Meter name: `Microsoft.AspNetCore.MemoryPool`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.memory_pool.owner
    type: string
    brief: The name of the library or subsystem using the memory pool instance.
    examples:
    - kestrel
    - iis
    requirement_level:
      conditionally_required: if owner is specified when the memory pool is created.
    stability: development
  metric_name: aspnetcore.memory_pool.pooled
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.memory_pool.owner:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.memory_pool.allocated
  type: metric
  brief: Total number of bytes allocated by the memory pool. Allocation occurs when a memory rental request exceeds the available pooled memory.
  note: |
    Meter name: `Microsoft.AspNetCore.MemoryPool`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.memory_pool.owner
    type: string
    brief: The name of the library or subsystem using the memory pool instance.
    examples:
    - kestrel
    - iis
    requirement_level:
      conditionally_required: if owner is specified when the memory pool is created.
    stability: development
  metric_name: aspnetcore.memory_pool.allocated
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.memory_pool.owner:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.memory_pool.evicted
  type: metric
  brief: Total number of bytes evicted from the memory pool. Eviction occurs when idle pooled memory is reclaimed.
  note: |
    Meter name: `Microsoft.AspNetCore.MemoryPool`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.memory_pool.owner
    type: string
    brief: The name of the library or subsystem using the memory pool instance.
    examples:
    - kestrel
    - iis
    requirement_level:
      conditionally_required: if owner is specified when the memory pool is created.
    stability: development
  metric_name: aspnetcore.memory_pool.evicted
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.memory_pool.owner:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.memory_pool.rented
  type: metric
  brief: Total number of bytes rented from the memory pool.
  note: |
    Meter name: `Microsoft.AspNetCore.MemoryPool`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.memory_pool.owner
    type: string
    brief: The name of the library or subsystem using the memory pool instance.
    examples:
    - kestrel
    - iis
    requirement_level:
      conditionally_required: if owner is specified when the memory pool is created.
    stability: development
  metric_name: aspnetcore.memory_pool.rented
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.memory_pool.owner:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.authentication.authenticate.duration
  type: metric
  brief: The authentication duration for a request.
  note: |
    Meter name: `Microsoft.AspNetCore.Authentication`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level:
      conditionally_required: if a scheme is specified during authentication.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.authentication.result
    type:
      members:
      - id: success
        value: success
        brief: Authentication was successful.
        stability: development
      - id: failure
        value: failure
        brief: Authentication failed.
        stability: development
      - id: none
        value: none
        brief: No authentication information returned.
        stability: development
    brief: The result of the authentication operation.
    examples:
    - success
    - failure
    requirement_level: required
    stability: development
  metric_name: aspnetcore.authentication.authenticate.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.aspnetcore.authentication.challenges
  type: metric
  brief: The total number of times a scheme is challenged.
  note: |
    Meter name: `Microsoft.AspNetCore.Authentication`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level:
      conditionally_required: if a scheme is specified during authentication.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  metric_name: aspnetcore.authentication.challenges
  instrument: counter
  unit: '{challenge}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.authentication.forbids
  type: metric
  brief: The total number of times an authenticated user attempts to access a resource they are not permitted to access.
  note: |
    Meter name: `Microsoft.AspNetCore.Authentication`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level:
      conditionally_required: if a scheme is specified during authentication.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  metric_name: aspnetcore.authentication.forbids
  instrument: counter
  unit: '{forbid}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.authentication.sign_ins
  type: metric
  brief: The total number of times a principal is signed in with a scheme.
  note: |
    Meter name: `Microsoft.AspNetCore.Authentication`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level:
      conditionally_required: if a scheme is specified during authentication.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  metric_name: aspnetcore.authentication.sign_ins
  instrument: counter
  unit: '{sign_in}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.authentication.sign_outs
  type: metric
  brief: The total number of times a principal is signed out with a scheme.
  note: |
    Meter name: `Microsoft.AspNetCore.Authentication`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level:
      conditionally_required: if a scheme is specified during authentication.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  metric_name: aspnetcore.authentication.sign_outs
  instrument: counter
  unit: '{sign_out}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.authorization.attempts
  type: metric
  brief: The total number of authorization attempts.
  note: |
    Meter name: `Microsoft.AspNetCore.Authorization`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.user.is_authenticated
    type: boolean
    brief: A value that indicates whether the user is authenticated.
    examples:
    - true
    requirement_level: required
    stability: stable
  - name: aspnetcore.authorization.policy
    type: string
    brief: The name of the authorization policy.
    examples:
    - RequireAdminRole
    requirement_level:
      conditionally_required: if a policy is specified.
    stability: development
  - name: aspnetcore.authorization.result
    type:
      members:
      - id: success
        value: success
        brief: Authorization was successful.
        stability: development
      - id: failure
        value: failure
        brief: Authorization failed.
        stability: development
    brief: The result of calling the authorization service.
    examples:
    - success
    - failure
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  metric_name: aspnetcore.authorization.attempts
  instrument: counter
  unit: '{attempt}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authorization.policy:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.authorization.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.user.is_authenticated:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.user.create.duration
  type: metric
  brief: The duration of user creation operations.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.error_code
    type: string
    brief: The error code for a failed identity operation.
    examples:
    - DefaultError
    - PasswordMismatch
    requirement_level:
      conditionally_required: if an error was set on a failed identity result.
    stability: development
  - name: aspnetcore.identity.result
    type:
      members:
      - id: success
        value: success
        brief: Identity operation was successful.
        stability: development
      - id: failure
        value: failure
        brief: Identity operation failed.
        stability: development
    brief: The result of the identity operation.
    examples:
    - success
    - failure
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type or the identity error code.
    examples:
    - System.OperationCanceledException
    - PasswordMismatch
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  metric_name: aspnetcore.identity.user.create.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.error_code:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.user.update.duration
  type: metric
  brief: The duration of user update operations.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.error_code
    type: string
    brief: The error code for a failed identity operation.
    examples:
    - DefaultError
    - PasswordMismatch
    requirement_level:
      conditionally_required: if an error was set on a failed identity result.
    stability: development
  - name: aspnetcore.identity.result
    type:
      members:
      - id: success
        value: success
        brief: Identity operation was successful.
        stability: development
      - id: failure
        value: failure
        brief: Identity operation failed.
        stability: development
    brief: The result of the identity operation.
    examples:
    - success
    - failure
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type or the identity error code.
    examples:
    - System.OperationCanceledException
    - PasswordMismatch
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user.update_type
    type:
      members:
      - id: update
        value: update
        brief: Identity user updated.
        stability: development
      - id: user_name
        value: user_name
        brief: Identity user name updated.
        stability: development
      - id: add_password
        value: add_password
        brief: Identity user password added.
        stability: development
      - id: change_password
        value: change_password
        brief: Identity user password changed.
        stability: development
      - id: security_stamp
        value: security_stamp
        brief: Identity user security stamp updated.
        stability: development
      - id: reset_password
        value: reset_password
        brief: Identity user password reset.
        stability: development
      - id: remove_login
        value: remove_login
        brief: Identity user login removed.
        stability: development
      - id: add_login
        value: add_login
        brief: Identity user login added.
        stability: development
      - id: add_claims
        value: add_claims
        brief: Identity user claims added.
        stability: development
      - id: replace_claim
        value: replace_claim
        brief: Identity user claim replaced.
        stability: development
      - id: remove_claims
        value: remove_claims
        brief: Identity user claims removed.
        stability: development
      - id: add_to_roles
        value: add_to_roles
        brief: Identity user added to roles.
        stability: development
      - id: remove_from_roles
        value: remove_from_roles
        brief: Identity user removed from roles.
        stability: development
      - id: set_email
        value: set_email
        brief: Identity user email set.
        stability: development
      - id: confirm_email
        value: confirm_email
        brief: Identity user email confirmed.
        stability: development
      - id: password_rehash
        value: password_rehash
        brief: Identity user password rehashed.
        stability: development
      - id: remove_password
        value: remove_password
        brief: Identity user password removed.
        stability: development
      - id: change_email
        value: change_email
        brief: Identity user email changed.
        stability: development
      - id: set_phone_number
        value: set_phone_number
        brief: Identity user phone number set.
        stability: development
      - id: change_phone_number
        value: change_phone_number
        brief: Identity user phone number changed.
        stability: development
      - id: set_two_factor_enabled
        value: set_two_factor_enabled
        brief: Identity user two-factor authentication enabled or disabled.
        stability: development
      - id: set_lockout_enabled
        value: set_lockout_enabled
        brief: Identity user lockout enabled or disabled.
        stability: development
      - id: set_lockout_end_date
        value: set_lockout_end_date
        brief: Identity user lockout end date set.
        stability: development
      - id: access_failed
        value: access_failed
        brief: Identity user access failure recorded.
        stability: development
      - id: reset_access_failed_count
        value: reset_access_failed_count
        brief: Identity user access failure count reset.
        stability: development
      - id: set_authentication_token
        value: set_authentication_token
        brief: Identity user authentication token set.
        stability: development
      - id: remove_authentication_token
        value: remove_authentication_token
        brief: Identity user authentication token removed.
        stability: development
      - id: reset_authenticator_key
        value: reset_authenticator_key
        brief: Identity user authenticator key reset.
        stability: development
      - id: generate_new_two_factor_recovery_codes
        value: generate_new_two_factor_recovery_codes
        brief: Identity user new two-factor recovery codes generated.
        stability: development
      - id: redeem_two_factor_recovery_code
        value: redeem_two_factor_recovery_code
        brief: Identity user two-factor recovery code redeemed.
        stability: development
      - id: set_passkey
        value: set_passkey
        brief: Identity user passkey set.
        stability: development
      - id: remove_passkey
        value: remove_passkey
        brief: Identity user passkey removed.
        stability: development
      - id: other
        value: _OTHER
        brief: Any update type that the instrumentation has no prior knowledge of.
        stability: development
    brief: The user update type.
    examples:
    - update
    - user_name
    - reset_password
    requirement_level: required
    stability: development
  metric_name: aspnetcore.identity.user.update.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.error_code:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user.update_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.user.delete.duration
  type: metric
  brief: The duration of user deletion operations.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.error_code
    type: string
    brief: The error code for a failed identity operation.
    examples:
    - DefaultError
    - PasswordMismatch
    requirement_level:
      conditionally_required: if an error was set on a failed identity result.
    stability: development
  - name: aspnetcore.identity.result
    type:
      members:
      - id: success
        value: success
        brief: Identity operation was successful.
        stability: development
      - id: failure
        value: failure
        brief: Identity operation failed.
        stability: development
    brief: The result of the identity operation.
    examples:
    - success
    - failure
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type or the identity error code.
    examples:
    - System.OperationCanceledException
    - PasswordMismatch
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  metric_name: aspnetcore.identity.user.delete.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.error_code:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.user.check_password_attempts
  type: metric
  brief: The number of check password attempts. Only checks whether the password is valid and not whether the user account is in a state that can log in.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.password_check_result
    type:
      members:
      - id: success
        value: success
        brief: Password check was successful.
        stability: development
      - id: success_rehash_needed
        value: success_rehash_needed
        brief: Password check was successful however the password was encoded using a deprecated algorithm and should be rehashed and updated.
        stability: development
      - id: failure
        value: failure
        brief: Password check failed.
        stability: development
      - id: password_missing
        value: password_missing
        brief: Password check couldn't proceed because the password was missing from the user.
        stability: development
      - id: user_missing
        value: user_missing
        brief: Password check couldn't proceed because the user was missing.
        stability: development
    brief: The result from checking the password.
    examples:
    - success
    - failure
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  metric_name: aspnetcore.identity.user.check_password_attempts
  instrument: counter
  unit: '{attempt}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.password_check_result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.user.verify_token_attempts
  type: metric
  brief: The total number of token verification attempts.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.token_purpose
    type:
      members:
      - id: reset_password
        value: reset_password
        brief: The token is for resetting a user password.
        stability: development
      - id: change_phone_number
        value: change_phone_number
        brief: The token is for changing a user phone number.
        stability: development
      - id: email_confirmation
        value: email_confirmation
        brief: The token is for confirming user email address.
        stability: development
      - id: change_email
        value: change_email
        brief: The token is for changing the user email address.
        stability: development
      - id: two_factor
        value: two_factor
        brief: The token is for changing user two factor settings.
        stability: development
      - id: other
        value: _OTHER
        brief: Any token purpose that the instrumentation has no prior knowledge of.
        stability: development
    brief: What the token will be used for.
    examples:
    - success
    - failure
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.token_verified
    type:
      members:
      - id: success
        value: success
        brief: Token verification was successful.
        stability: development
      - id: failure
        value: failure
        brief: Token verification failed.
        stability: development
    brief: The result of token verification.
    examples:
    - success
    - failure
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  metric_name: aspnetcore.identity.user.verify_token_attempts
  instrument: counter
  unit: '{attempt}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.token_purpose:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.token_verified:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.user.generated_tokens
  type: metric
  brief: The total number of token generations.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.token_purpose
    type:
      members:
      - id: reset_password
        value: reset_password
        brief: The token is for resetting a user password.
        stability: development
      - id: change_phone_number
        value: change_phone_number
        brief: The token is for changing a user phone number.
        stability: development
      - id: email_confirmation
        value: email_confirmation
        brief: The token is for confirming user email address.
        stability: development
      - id: change_email
        value: change_email
        brief: The token is for changing the user email address.
        stability: development
      - id: two_factor
        value: two_factor
        brief: The token is for changing user two factor settings.
        stability: development
      - id: other
        value: _OTHER
        brief: Any token purpose that the instrumentation has no prior knowledge of.
        stability: development
    brief: What the token will be used for.
    examples:
    - success
    - failure
    requirement_level: required
    stability: development
  metric_name: aspnetcore.identity.user.generated_tokens
  instrument: counter
  unit: '{count}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.token_purpose:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.sign_in.authenticate.duration
  type: metric
  brief: The duration of authenticate attempts. The authenticate metrics is recorded by sign in methods such as PasswordSignInAsync and TwoFactorSignInAsync.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.sign_in.result
    type:
      members:
      - id: success
        value: success
        brief: Sign in was successful.
        stability: development
      - id: locked_out
        value: locked_out
        brief: User is locked out.
        stability: development
      - id: not_allowed
        value: not_allowed
        brief: User is not allowed to sign in.
        stability: development
      - id: requires_two_factor
        value: requires_two_factor
        brief: User requires two factory authentication to sign in.
        stability: development
      - id: failure
        value: failure
        brief: Sign in failed.
        stability: development
    brief: Whether the sign in result was success or failure.
    examples:
    - password
    - two_factor
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  - name: aspnetcore.identity.sign_in.type
    type:
      members:
      - id: password
        value: password
        brief: Sign in with password.
        stability: development
      - id: two_factor_recovery_code
        value: two_factor_recovery_code
        brief: Sign in with two factory recovery code.
        stability: development
      - id: two_factor_authenticator
        value: two_factor_authenticator
        brief: Sign in with two factor authenticator app.
        stability: development
      - id: two_factor
        value: two_factor
        brief: Sign in with a two factor provider.
        stability: development
      - id: external
        value: external
        brief: Sign in with a previously registered third-party login.
        stability: development
      - id: passkey
        value: passkey
        brief: Sign in with passkey.
        stability: development
    brief: The authentication type.
    examples:
    - password
    - two_factor
    requirement_level: required
    stability: development
  - name: aspnetcore.sign_in.is_persistent
    type: boolean
    brief: A flag indicating whether the sign in is persistent.
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  metric_name: aspnetcore.identity.sign_in.authenticate.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.sign_in.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.sign_in.type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.sign_in.is_persistent:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.sign_in.two_factor_clients_remembered
  type: metric
  brief: The total number of two factor clients remembered.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level: required
    stability: development
  metric_name: aspnetcore.identity.sign_in.two_factor_clients_remembered
  instrument: counter
  unit: '{client}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.sign_in.two_factor_clients_forgotten
  type: metric
  brief: The total number of two factor clients forgotten.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level: required
    stability: development
  metric_name: aspnetcore.identity.sign_in.two_factor_clients_forgotten
  instrument: counter
  unit: '{client}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.sign_in.check_password_attempts
  type: metric
  brief: The total number of check password attempts. Checks that the account is in a state that can log in and that the password is valid using the UserManager.CheckPasswordAsync method.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.identity.sign_in.result
    type:
      members:
      - id: success
        value: success
        brief: Sign in was successful.
        stability: development
      - id: locked_out
        value: locked_out
        brief: User is locked out.
        stability: development
      - id: not_allowed
        value: not_allowed
        brief: User is not allowed to sign in.
        stability: development
      - id: requires_two_factor
        value: requires_two_factor
        brief: User requires two factory authentication to sign in.
        stability: development
      - id: failure
        value: failure
        brief: Sign in failed.
        stability: development
    brief: Whether the sign in result was success or failure.
    examples:
    - password
    - two_factor
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  metric_name: aspnetcore.identity.sign_in.check_password_attempts
  instrument: counter
  unit: '{attempt}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.identity.sign_in.result:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.sign_in.sign_ins
  type: metric
  brief: The total number of calls to sign in user principals.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level: required
    stability: development
  - name: aspnetcore.sign_in.is_persistent
    type: boolean
    brief: A flag indicating whether the sign in is persistent.
    requirement_level:
      conditionally_required: if no exception was thrown.
    stability: development
  metric_name: aspnetcore.identity.sign_in.sign_ins
  instrument: counter
  unit: '{sign_in}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.sign_in.is_persistent:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.aspnetcore.identity.sign_in.sign_outs
  type: metric
  brief: The total number of calls to sign out user principals.
  note: |
    Meter name: `Microsoft.AspNetCore.Identity`; Added in: ASP.NET Core 10.0
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: The full name of exception type.
    examples:
    - System.OperationCanceledException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    stability: stable
  - name: aspnetcore.identity.user_type
    type: string
    brief: The full name of the identity user type.
    examples:
    - Contoso.ContosoUser
    requirement_level: required
    stability: development
  - name: aspnetcore.authentication.scheme
    type: string
    brief: The identifier that names a particular authentication handler.
    examples:
    - Cookies
    - Bearer
    - Identity.Application
    requirement_level: required
    stability: development
  metric_name: aspnetcore.identity.sign_in.sign_outs
  instrument: counter
  unit: '{sign_out}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aspnetcore/metrics.yaml
    attributes:
      aspnetcore.authentication.scheme:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aspnetcore.identity.user_type:
        source_group: registry.aspnetcore
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: attributes.metrics.rpc
  type: attribute_group
  brief: Describes RPC metric attributes.
  attributes:
  - name: rpc.method
    type: string
    brief: The name of the (logical) method being called, must be equal to the $method part in the span name.
    examples: exampleMethod
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: rpc.service
    type: string
    brief: The full (logical) name of the service being called, including its package name, if applicable.
    examples: myservice.EchoService
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: A string identifying the remoting system. See below for a list of well-known identifiers.
    requirement_level: required
    stability: development
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
    attributes:
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.rpc.server.duration
  type: metric
  brief: Measures the duration of inbound RPC.
  note: |
    While streaming RPCs may record this metric as start-of-batch
    to end-of-batch, it's hard to interpret in practice.

    **Streaming**: N/A.
  stability: development
  metric_name: rpc.server.duration
  instrument: histogram
  unit: ms
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.rpc.server.request.size
  type: metric
  brief: Measures the size of RPC request messages (uncompressed).
  note: |
    **Streaming**: Recorded per message in a streaming batch
  stability: development
  metric_name: rpc.server.request.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.server.response.size
  type: metric
  brief: Measures the size of RPC response messages (uncompressed).
  note: |
    **Streaming**: Recorded per response in a streaming batch
  stability: development
  metric_name: rpc.server.response.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.server.requests_per_rpc
  type: metric
  brief: Measures the number of messages received per RPC.
  note: |
    Should be 1 for all non-streaming RPCs.

    **Streaming** : This metric is required for server and client streaming RPCs
  stability: development
  metric_name: rpc.server.requests_per_rpc
  instrument: histogram
  unit: '{count}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.server.responses_per_rpc
  type: metric
  brief: Measures the number of messages sent per RPC.
  note: |
    Should be 1 for all non-streaming RPCs.

    **Streaming**: This metric is required for server and client streaming RPCs
  stability: development
  metric_name: rpc.server.responses_per_rpc
  instrument: histogram
  unit: '{count}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.client.duration
  type: metric
  brief: Measures the duration of outbound RPC.
  note: |
    While streaming RPCs may record this metric as start-of-batch
    to end-of-batch, it's hard to interpret in practice.

    **Streaming**: N/A.
  stability: development
  metric_name: rpc.client.duration
  instrument: histogram
  unit: ms
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.rpc.client.request.size
  type: metric
  brief: Measures the size of RPC request messages (uncompressed).
  note: |
    **Streaming**: Recorded per message in a streaming batch
  stability: development
  metric_name: rpc.client.request.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.client.response.size
  type: metric
  brief: Measures the size of RPC response messages (uncompressed).
  note: |
    **Streaming**: Recorded per response in a streaming batch
  stability: development
  metric_name: rpc.client.response.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.client.requests_per_rpc
  type: metric
  brief: Measures the number of messages received per RPC.
  note: |
    Should be 1 for all non-streaming RPCs.

    **Streaming**: This metric is required for server and client streaming RPCs
  stability: development
  metric_name: rpc.client.requests_per_rpc
  instrument: histogram
  unit: '{count}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.rpc.client.responses_per_rpc
  type: metric
  brief: Measures the number of messages sent per RPC.
  note: |
    Should be 1 for all non-streaming RPCs.

    **Streaming**: This metric is required for server and client streaming RPCs
  stability: development
  metric_name: rpc.client.responses_per_rpc
  instrument: histogram
  unit: '{count}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.rpc.deprecated
  type: attribute_group
  brief: Deprecated rpc message attributes.
  attributes:
  - name: message.type
    type:
      members:
      - id: sent
        value: SENT
        stability: development
      - id: received
        value: RECEIVED
        stability: development
    brief: Deprecated, use `rpc.message.type` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: rpc.message.type
      note: Replaced by `rpc.message.type`.
  - name: message.id
    type: int
    brief: Deprecated, use `rpc.message.id` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: rpc.message.id
      note: Replaced by `rpc.message.id`.
  - name: message.compressed_size
    type: int
    brief: Deprecated, use `rpc.message.compressed_size` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: rpc.message.compressed_size
      note: Replaced by `rpc.message.compressed_size`.
  - name: message.uncompressed_size
    type: int
    brief: Deprecated, use `rpc.message.uncompressed_size` instead.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: rpc.message.uncompressed_size
      note: Replaced by `rpc.message.uncompressed_size`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/rpc/deprecated/registry-deprecated.yaml
  display_name: Deprecated RPC Attributes
- id: registry.source
  type: attribute_group
  brief: |
    These attributes may be used to describe the sender of a network exchange/packet. These should be used when there is no client/server relationship between the two sides, or when that relationship is unknown. This covers low-level network interactions (e.g. packet tracing) where you don't know if there was a connection or which side initiated it. This also covers unidirectional UDP flows and peer-to-peer communication where the "user-facing" surface of the protocol / API doesn't expose a clear notion of client and server.
  attributes:
  - name: source.address
    type: string
    brief: Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - source.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the destination side, and when communicating through an intermediary, `source.address` SHOULD represent the source address behind any intermediaries, for example proxies, if it's available.
    stability: development
  - name: source.port
    type: int
    brief: Source port number
    examples:
    - 3389
    - 2888
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/source/registry.yaml
  display_name: Source Attributes
- id: source
  type: attribute_group
  brief: |
    General source attributes.
  attributes:
  - name: source.address
    type: string
    brief: Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - source.example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the destination side, and when communicating through an intermediary, `source.address` SHOULD represent the source address behind any intermediaries, for example proxies, if it's available.
    stability: development
  - name: source.port
    type: int
    brief: Source port number
    examples:
    - 3389
    - 2888
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/source/common.yaml
    attributes:
      source.address:
        source_group: registry.source
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      source.port:
        source_group: registry.source
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.event
  type: attribute_group
  brief: |
    Attributes for Events represented using Log Records.
  attributes:
  - name: event.name
    type: string
    brief: |
      Identifies the class / type of event.
    examples:
    - browser.mouse.click
    - device.app.lifecycle
    requirement_level: recommended
    note: |
      This attribute SHOULD be used by non-OTLP exporters when destination does not support `EventName` or equivalent field. This attribute MAY be used by applications using existing logging libraries so that it can be used to set the `EventName` field by Collector or SDK components.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/event/registry.yaml
  display_name: Event Attributes
- id: registry.cpython
  type: attribute_group
  brief: |
    This document defines CPython related attributes.
  attributes:
  - name: cpython.gc.generation
    type:
      members:
      - id: generation_0
        value: 0
        brief: Generation 0
        stability: development
      - id: generation_1
        value: 1
        brief: Generation 1
        stability: development
      - id: generation_2
        value: 2
        brief: Generation 2
        stability: development
    brief: Value of the garbage collector collection generation.
    examples:
    - 0
    - 1
    - 2
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cpython/registry.yaml
  display_name: CPython attributes
- id: registry.mainframe.lpar
  type: attribute_group
  brief: This document defines attributes of a Mainframe Logical Partition (LPAR).
  attributes:
  - name: mainframe.lpar.name
    type: string
    brief: Name of the logical partition that hosts a systems with a mainframe operating system.
    examples:
    - LPAR01
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/mainframe/registry_lpar.yaml
  display_name: Mainframe LPAR attributes
- id: registry.log
  type: attribute_group
  brief: |
    This document defines log attributes
  attributes:
  - name: log.iostream
    type:
      members:
      - id: stdout
        value: stdout
        brief: Logs from stdout stream
        stability: development
      - id: stderr
        value: stderr
        brief: Events from stderr stream
        stability: development
    brief: |
      The stream associated with the log. See below for a list of well-known values.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/log/registry.yaml
  display_name: General Log Attributes
- id: registry.log.file
  type: attribute_group
  brief: |
    Attributes for a file to which log was emitted.
  attributes:
  - name: log.file.name
    type: string
    brief: |
      The basename of the file.
    examples:
    - audit.log
    requirement_level: recommended
    stability: development
  - name: log.file.path
    type: string
    brief: |
      The full path to the file.
    examples:
    - /var/log/mysql/audit.log
    requirement_level: recommended
    stability: development
  - name: log.file.name_resolved
    type: string
    brief: |
      The basename of the file, with symlinks resolved.
    examples:
    - uuid.log
    requirement_level: recommended
    stability: development
  - name: log.file.path_resolved
    type: string
    brief: |
      The full path to the file, with symlinks resolved.
    examples:
    - /var/lib/docker/uuid.log
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/log/registry.yaml
  display_name: Log File Attributes
- id: registry.log.record
  type: attribute_group
  brief: |
    This document defines the generic attributes that may be used in any Log Record.
  attributes:
  - name: log.record.uid
    type: string
    brief: |
      A unique identifier for the Log Record.
    examples:
    - 01ARZ3NDEKTSV4RRFFQ69G5FAV
    requirement_level: recommended
    note: |
      If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.
      The id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.
    stability: development
  - name: log.record.original
    type: string
    brief: |
      The complete original Log Record.
    examples:
    - 77 <86>1 2015-08-06T21:58:59.694Z 192.168.2.133 inactive - - - Something happened
    - '[INFO] 8/3/24 12:34:56 Something happened'
    requirement_level: recommended
    note: |
      This value MAY be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/log/registry.yaml
  display_name: Log Record Attributes
- id: registry.telemetry
  type: attribute_group
  brief: |
    This document defines attributes for telemetry SDK.
  attributes:
  - name: telemetry.sdk.name
    type: string
    brief: |
      The name of the telemetry SDK as defined above.
    examples:
    - opentelemetry
    requirement_level: recommended
    note: |
      The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.
      If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
      `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
      or another suitable identifier depending on the language.
      The identifier `opentelemetry` is reserved and MUST NOT be used in this case.
      All custom identifiers SHOULD be stable across different versions of an implementation.
    stability: stable
  - name: telemetry.sdk.language
    type:
      members:
      - id: cpp
        value: cpp
        stability: stable
      - id: dotnet
        value: dotnet
        stability: stable
      - id: erlang
        value: erlang
        stability: stable
      - id: go
        value: go
        stability: stable
      - id: java
        value: java
        stability: stable
      - id: nodejs
        value: nodejs
        stability: stable
      - id: php
        value: php
        stability: stable
      - id: python
        value: python
        stability: stable
      - id: ruby
        value: ruby
        stability: stable
      - id: rust
        value: rust
        stability: stable
      - id: swift
        value: swift
        stability: stable
      - id: webjs
        value: webjs
        stability: stable
    brief: |
      The language of the telemetry SDK.
    requirement_level: recommended
    stability: stable
  - name: telemetry.sdk.version
    type: string
    brief: |
      The version string of the telemetry SDK.
    examples:
    - 1.2.3
    requirement_level: recommended
    stability: stable
  - name: telemetry.distro.name
    type: string
    brief: |
      The name of the auto instrumentation agent or distribution, if used.
    examples:
    - parts-unlimited-java
    requirement_level: recommended
    note: |
      Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to
      a string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.
    stability: development
  - name: telemetry.distro.version
    type: string
    brief: |
      The version string of the auto instrumentation agent or distribution, if used.
    examples:
    - 1.2.3
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/telemetry/registry.yaml
  display_name: Telemetry Attributes
- id: profile.frame
  type: attribute_group
  brief: |
    Describes the origin of a single frame in a Profile.
  attributes:
  - name: profile.frame.type
    type:
      members:
      - id: dotnet
        value: dotnet
        brief: |
          [.NET](https://wikipedia.org/wiki/.NET)
        stability: development
      - id: jvm
        value: jvm
        brief: |
          [JVM](https://wikipedia.org/wiki/Java_virtual_machine)
        stability: development
      - id: kernel
        value: kernel
        brief: |
          [Kernel](https://wikipedia.org/wiki/Kernel_(operating_system))
        stability: development
      - id: native
        value: native
        brief: |
          Can be one of but not limited to [C](https://wikipedia.org/wiki/C_(programming_language)), [C++](https://wikipedia.org/wiki/C%2B%2B), [Go](https://wikipedia.org/wiki/Go_(programming_language)) or [Rust](https://wikipedia.org/wiki/Rust_(programming_language)). If possible, a more precise value MUST be used.
        stability: development
      - id: perl
        value: perl
        brief: |
          [Perl](https://wikipedia.org/wiki/Perl)
        stability: development
      - id: php
        value: php
        brief: |
          [PHP](https://wikipedia.org/wiki/PHP)
        stability: development
      - id: cpython
        value: cpython
        brief: |
          [Python](https://wikipedia.org/wiki/Python_(programming_language))
        stability: development
      - id: ruby
        value: ruby
        brief: |
          [Ruby](https://wikipedia.org/wiki/Ruby_(programming_language))
        stability: development
      - id: v8js
        value: v8js
        brief: |
          [V8JS](https://wikipedia.org/wiki/V8_(JavaScript_engine))
        stability: development
      - id: beam
        value: beam
        brief: |
          [Erlang](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))
        stability: development
      - id: go
        value: go
        brief: |
          [Go](https://wikipedia.org/wiki/Go_(programming_language)),
        stability: development
      - id: rust
        value: rust
        brief: |
          [Rust](https://wikipedia.org/wiki/Rust_(programming_language))
        stability: development
    brief: |
      Describes the interpreter or compiler of a single frame.
    examples:
    - cpython
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/profile/common.yaml
    attributes:
      profile.frame.type:
        source_group: registry.profile.frame
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.cassandra
  type: attribute_group
  brief: |
    This section defines attributes for Cassandra.
  attributes:
  - name: cassandra.coordinator.dc
    type: string
    brief: |
      The data center of the coordinating node for a query.
    examples: us-west-2
    requirement_level: recommended
    stability: development
  - name: cassandra.coordinator.id
    type: string
    brief: |
      The ID of the coordinating node for a query.
    examples: be13faa2-8574-4d71-926d-27f16cf8a7af
    requirement_level: recommended
    stability: development
  - name: cassandra.consistency.level
    type:
      members:
      - id: all
        value: all
        brief: All
        stability: development
      - id: each_quorum
        value: each_quorum
        brief: Each Quorum
        stability: development
      - id: quorum
        value: quorum
        brief: Quorum
        stability: development
      - id: local_quorum
        value: local_quorum
        brief: Local Quorum
        stability: development
      - id: one
        value: one
        brief: One
        stability: development
      - id: two
        value: two
        brief: Two
        stability: development
      - id: three
        value: three
        brief: Three
        stability: development
      - id: local_one
        value: local_one
        brief: Local One
        stability: development
      - id: any
        value: any
        brief: Any
        stability: development
      - id: serial
        value: serial
        brief: Serial
        stability: development
      - id: local_serial
        value: local_serial
        brief: Local Serial
        stability: development
    brief: |
      The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    requirement_level: recommended
    stability: development
  - name: cassandra.query.idempotent
    type: boolean
    brief: |
      Whether or not the query is idempotent.
    requirement_level: recommended
    stability: development
  - name: cassandra.page.size
    type: int
    brief: |
      The fetch size used for paging, i.e. how many rows will be returned at once.
    examples:
    - 5000
    requirement_level: recommended
    stability: development
  - name: cassandra.speculative_execution.count
    type: int
    brief: |
      The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.
    examples:
    - 0
    - 2
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cassandra/registry.yaml
  display_name: Cassandra Attributes
- id: span.aws.lambda.server
  type: span
  brief: |
    This span represents AWS Lambda invocation.
  note: |
    Consider setting other attributes of the [`faas` resource][faasres] and [trace][faas] conventions
    and the [cloud resource conventions][cloud].

    **Span name** MUST be set to the function name from the Lambda `Context`
    unless stated otherwise.

    **Span kind** MUST be set to `SERVER` unless stated otherwise.
  stability: development
  attributes:
  - name: aws.lambda.invoked_arn
    type: string
    brief: |
      The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).
    examples:
    - arn:aws:lambda:us-east-1:123456:function:myfunction:myalias
    requirement_level: recommended
    note: This may be different from `cloud.resource_id` if an alias is involved.
    stability: development
  - name: aws.lambda.resource_mapping.id
    type: string
    brief: |
      The UUID of the [AWS Lambda EvenSource Mapping](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html). An event source is mapped to a lambda function. It's contents are read by Lambda and used to trigger a function. This isn't available in the lambda execution context or the lambda runtime environtment. This is going to be populated by the AWS SDK for each language when that UUID is present. Some of these operations are Create/Delete/Get/List/Update EventSourceMapping.
    examples:
    - 587ad24b-03b9-4413-8202-bbd56b36e5b7
    requirement_level: recommended
    stability: development
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/lambda-spans.yaml
    attributes:
      aws.lambda.invoked_arn:
        source_group: registry.aws.lambda
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.lambda.resource_mapping.id:
        source_group: registry.aws.lambda
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: entity.aws.log
  type: entity
  brief: |
    Entities specific to Amazon Web Services.
  stability: development
  attributes:
  - name: aws.log.group.names
    type: string[]
    brief: |
      The name(s) of the AWS log group(s) an application is writing to.
    examples:
    - - /aws/lambda/my-function
      - opentelemetry-service
    requirement_level: recommended
    note: |
      Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
    stability: development
  - name: aws.log.group.arns
    type: string[]
    brief: |
      The Amazon Resource Name(s) (ARN) of the AWS log group(s).
    examples:
    - - arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*
    requirement_level: recommended
    note: |
      See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).
    stability: development
  - name: aws.log.stream.names
    type: string[]
    brief: |
      The name(s) of the AWS log stream(s) an application is writing to.
    examples:
    - - logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    requirement_level: recommended
    stability: development
  - name: aws.log.stream.arns
    type: string[]
    brief: |
      The ARN(s) of the AWS log stream(s).
    examples:
    - - arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    requirement_level: recommended
    note: |
      See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
    stability: development
  name: aws.log
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/logs-entities.yaml
    attributes:
      aws.log.group.arns:
        source_group: registry.aws.log
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.log.group.names:
        source_group: registry.aws.log
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.log.stream.arns:
        source_group: registry.aws.log
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.log.stream.names:
        source_group: registry.aws.log
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.aws.client
  type: span
  brief: |
    This span describes an AWS SDK client call.
  note: |
    **Span name** MUST be of the format `Service.Operation` as per the
    AWS HTTP API, e.g., `DynamoDB.GetItem`, `S3.ListBuckets`. This is
    equivalent to concatenating `rpc.service` and `rpc.method` with `.` and
    consistent with the naming guidelines for RPC client spans.

    AWS SDK span attributes are based on the request or response parameters
    in AWS SDK API calls. The conventions have been collected over time based
    on feedback from AWS users of tracing and will continue to increase as new
    interesting conventions are found.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.batchgetitem.client
  type: span
  brief: |
    This span represents a `DynamoDB.BatchGetItem` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: The keys in the `RequestItems` object field.
    examples:
    - - Users
      - Cats
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.batchwriteitem.client
  type: span
  brief: |
    This span represents a `DynamoDB.BatchWriteItem` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: The keys in the `RequestItems` object field.
    examples:
    - - Users
      - Cats
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.item_collection_metrics
    type: string
    brief: The JSON-serialized value of the `ItemCollectionMetrics` response field.
    examples:
    - '{ "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.item_collection_metrics:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.createtable.client
  type: span
  brief: |
    This span represents a `DynamoDB.CreateTable` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.item_collection_metrics
    type: string
    brief: The JSON-serialized value of the `ItemCollectionMetrics` response field.
    examples:
    - '{ "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.provisioned_read_capacity
    type: double
    brief: The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.
    examples:
    - 1.0
    - 2.0
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.provisioned_write_capacity
    type: double
    brief: The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.
    examples:
    - 1.0
    - 2.0
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.global_secondary_indexes
    type: string[]
    brief: The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field
    examples:
    - - '{ "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.local_secondary_indexes
    type: string[]
    brief: The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.
    examples:
    - - '{ "IndexArn": "string", "IndexName": "string", "IndexSizeBytes": number, "ItemCount": number, "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" } }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.global_secondary_indexes:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.item_collection_metrics:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.local_secondary_indexes:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.provisioned_read_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.provisioned_write_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.deleteitem.client
  type: span
  brief: |
    This span represents a `DynamoDB.DeleteItem` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.item_collection_metrics
    type: string
    brief: The JSON-serialized value of the `ItemCollectionMetrics` response field.
    examples:
    - '{ "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.item_collection_metrics:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.deletetable.client
  type: span
  brief: |
    This span represents a `DynamoDB.DeleteTable` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.describetable.client
  type: span
  brief: |
    This span represents a `DynamoDB.DescribeTable` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.getitem.client
  type: span
  brief: |
    This span represents a `DynamoDB.GetItem` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consistent_read
    type: boolean
    brief: The value of the `ConsistentRead` request parameter.
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.projection
    type: string
    brief: The value of the `ProjectionExpression` request parameter.
    examples:
    - Title
    - Title, Price, Color
    - Title, Description, RelatedItems, ProductReviews
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consistent_read:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.projection:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.listtables.client
  type: span
  brief: |
    This span represents a `DynamoDB.ListTables` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.limit
    type: int
    brief: The value of the `Limit` request parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.exclusive_start_table
    type: string
    brief: The value of the `ExclusiveStartTableName` request parameter.
    examples:
    - Users
    - CatsTable
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.table_count
    type: int
    brief: The number of items in the `TableNames` response parameter.
    examples:
    - 20
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.exclusive_start_table:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.limit:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_count:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.putitem.client
  type: span
  brief: |
    This span represents a `DynamoDB.PutItem` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: The keys in the `RequestItems` object field.
    examples:
    - - Users
      - Cats
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.item_collection_metrics
    type: string
    brief: The JSON-serialized value of the `ItemCollectionMetrics` response field.
    examples:
    - '{ "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.item_collection_metrics:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.query.client
  type: span
  brief: |
    This span represents a `DynamoDB.Query` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consistent_read
    type: boolean
    brief: The value of the `ConsistentRead` request parameter.
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.projection
    type: string
    brief: The value of the `ProjectionExpression` request parameter.
    examples:
    - Title
    - Title, Price, Color
    - Title, Description, RelatedItems, ProductReviews
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.limit
    type: int
    brief: The value of the `Limit` request parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.attributes_to_get
    type: string[]
    brief: The value of the `AttributesToGet` request parameter.
    examples:
    - - lives
      - id
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.index_name
    type: string
    brief: The value of the `IndexName` request parameter.
    examples:
    - name_to_group
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.select
    type: string
    brief: The value of the `Select` request parameter.
    examples:
    - ALL_ATTRIBUTES
    - COUNT
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.scan_forward
    type: boolean
    brief: The value of the `ScanIndexForward` request parameter.
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.attributes_to_get:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.consistent_read:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.index_name:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.limit:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.projection:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.scan_forward:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.select:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.scan.client
  type: span
  brief: |
    This span represents a `DynamoDB.Scan` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consistent_read
    type: boolean
    brief: The value of the `ConsistentRead` request parameter.
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.projection
    type: string
    brief: The value of the `ProjectionExpression` request parameter.
    examples:
    - Title
    - Title, Price, Color
    - Title, Description, RelatedItems, ProductReviews
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.limit
    type: int
    brief: The value of the `Limit` request parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.attributes_to_get
    type: string[]
    brief: The value of the `AttributesToGet` request parameter.
    examples:
    - - lives
      - id
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.index_name
    type: string
    brief: The value of the `IndexName` request parameter.
    examples:
    - name_to_group
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.select
    type: string
    brief: The value of the `Select` request parameter.
    examples:
    - ALL_ATTRIBUTES
    - COUNT
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.segment
    type: int
    brief: The value of the `Segment` request parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.total_segments
    type: int
    brief: The value of the `TotalSegments` request parameter.
    examples:
    - 100
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.count
    type: int
    brief: The value of the `Count` response parameter.
    examples:
    - 10
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.scanned_count
    type: int
    brief: The value of the `ScannedCount` response parameter.
    examples:
    - 50
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.attributes_to_get:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.consistent_read:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.count:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.index_name:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.limit:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.projection:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.scanned_count:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.segment:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.select:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.dynamodb.total_segments:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.updateitem.client
  type: span
  brief: |
    This span represents a `DynamoDB.UpdateItem` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.item_collection_metrics
    type: string
    brief: The JSON-serialized value of the `ItemCollectionMetrics` response field.
    examples:
    - '{ "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.item_collection_metrics:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.dynamodb.updatetable.client
  type: span
  brief: |
    This span represents a `DynamoDB.UpdateTable` call.
  note: |
    `db.system.name` MUST be set to `"aws.dynamodb"` and SHOULD be provided **at span creation time**.
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.consumed_capacity
    type: string[]
    brief: The JSON-serialized value of each item in the `ConsumedCapacity` response field.
    examples:
    - - '{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.provisioned_read_capacity
    type: double
    brief: The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.
    examples:
    - 1.0
    - 2.0
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.provisioned_write_capacity
    type: double
    brief: The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.
    examples:
    - 1.0
    - 2.0
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.attribute_definitions
    type: string[]
    brief: The JSON-serialized value of each item in the `AttributeDefinitions` request field.
    examples:
    - - '{ "AttributeName": "string", "AttributeType": "string" }'
    requirement_level: recommended
    stability: development
  - name: aws.dynamodb.global_secondary_index_updates
    type: string[]
    brief: The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.
    examples:
    - - '{ "Create": { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }'
    requirement_level: recommended
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  - name: aws.dynamodb.table_names
    type: string[]
    brief: A single-element array with the value of the TableName request parameter.
    examples:
    - Users
    requirement_level: recommended
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.dynamodb.attribute_definitions:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.consumed_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.global_secondary_index_updates:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.provisioned_read_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.provisioned_write_capacity:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.dynamodb.table_names:
        source_group: registry.aws.dynamodb
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: span.aws.s3.client
  type: span
  brief: |
    Semantic Conventions for AWS S3 client spans extend the general [AWS SDK Semantic Conventions](/docs/cloud-providers/aws-sdk.md)
  stability: development
  attributes:
  - name: aws.request_id
    type: string
    brief: The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
    examples:
    - 79b9da39-b7ae-508a-a6bc-864b2829c622
    - C9ER4AJX75574TDJ
    requirement_level: recommended
    stability: development
  - name: aws.s3.bucket
    type: string
    brief: The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.
    examples:
    - some-bucket-name
    requirement_level: recommended
    note: |
      The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.
      This applies to almost all S3 operations except `list-buckets`.
    stability: development
  - name: aws.s3.key
    type: string
    brief: The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.
    examples:
    - someFile.yml
    requirement_level: recommended
    note: |
      The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.
      This applies in particular to the following operations:

      - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
      - [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)
      - [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)
      - [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)
      - [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)
      - [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)
      - [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)
      - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
      - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
      - [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)
      - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
      - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
    stability: development
  - name: aws.s3.copy_source
    type: string
    brief: The source object (in the form `bucket`/`key`) for the copy operation.
    examples:
    - someFile.yml
    requirement_level: recommended
    note: |
      The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter
      of the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).
      This applies in particular to the following operations:

      - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
    stability: development
  - name: aws.s3.upload_id
    type: string
    brief: Upload ID that identifies the multipart upload.
    examples:
    - dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ
    requirement_level: recommended
    note: |
      The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter
      of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.
      This applies in particular to the following operations:

      - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
      - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
      - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
      - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
    stability: development
  - name: aws.s3.delete
    type: string
    brief: The delete request container that specifies the objects to be deleted.
    examples:
    - Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean
    requirement_level: recommended
    note: |
      The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.
      The `delete` attribute corresponds to the `--delete` parameter of the
      [delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).
    stability: development
  - name: aws.s3.part_number
    type: int
    brief: The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.
    examples:
    - 3456
    requirement_level: recommended
    note: |
      The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      and [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.
      The `part_number` attribute corresponds to the `--part-number` parameter of the
      [upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).
    stability: development
  - name: rpc.system
    type:
      members:
      - id: grpc
        value: grpc
        brief: gRPC
        stability: development
      - id: java_rmi
        value: java_rmi
        brief: Java RMI
        stability: development
      - id: dotnet_wcf
        value: dotnet_wcf
        brief: .NET WCF
        stability: development
      - id: apache_dubbo
        value: apache_dubbo
        brief: Apache Dubbo
        stability: development
      - id: connect_rpc
        value: connect_rpc
        brief: Connect RPC
        stability: development
    brief: The value `aws-api`.
    examples:
    - aws-api
    requirement_level: required
    stability: development
  - name: rpc.service
    type: string
    brief: The name of the service to which a request is made, as returned by the AWS SDK.
    examples:
    - DynamoDB
    - S3
    requirement_level: recommended
    note: |
      This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    stability: development
  - name: rpc.method
    type: string
    brief: The name of the operation corresponding to the request, as returned by the AWS SDK
    examples:
    - GetItem
    - PutItem
    requirement_level: recommended
    note: |
      This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    stability: development
  - name: aws.extended_request_id
    type: string
    brief: The AWS extended request ID as returned in the response header `x-amz-id-2`.
    examples:
    - wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The AWS Region where the requested service is being accessed.
    examples:
    - us-east-1
    - us-west-2
    requirement_level: recommended
    note: |
      Specifies the AWS Region that the SDK client targets for a given AWS service call. The attribute's value should adhere to the AWS Region codes outlined in the [AWS documentation](https://docs.aws.amazon.com/global-infrastructure/latest/regions/aws-regions.html#available-regions).
    stability: development
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/aws/sdk-spans.yaml
    attributes:
      aws.extended_request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.request_id:
        source_group: registry.aws
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.s3.bucket:
        source_group: registry.aws.s3
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.s3.copy_source:
        source_group: registry.aws.s3
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.s3.delete:
        source_group: registry.aws.s3
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.s3.key:
        source_group: registry.aws.s3
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.s3.part_number:
        source_group: registry.aws.s3
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      aws.s3.upload_id:
        source_group: registry.aws.s3
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
      rpc.method:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.service:
        source_group: registry.rpc
        inherited_fields:
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - examples
      rpc.system:
        source_group: registry.rpc
        inherited_fields:
        - note
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - requirement_level
- id: registry.linux.memory
  type: attribute_group
  brief: Describes Linux Memory attributes
  attributes:
  - name: linux.memory.slab.state
    type:
      members:
      - id: reclaimable
        value: reclaimable
        stability: development
      - id: unreclaimable
        value: unreclaimable
        stability: development
    brief: The Linux Slab memory state
    examples:
    - reclaimable
    - unreclaimable
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/linux/registry.yaml
  display_name: Linux Memory Attributes
- id: registry.user_agent
  type: attribute_group
  brief: Describes user-agent attributes.
  attributes:
  - name: user_agent.original
    type: string
    brief: |
      Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.
    examples:
    - CERN-LineMode/2.15 libwww/2.17b3
    - Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1
    - YourApp/1.0.0 grpc-java-okhttp/1.27.2
    requirement_level: recommended
    stability: stable
  - name: user_agent.name
    type: string
    brief: |
      Name of the user-agent extracted from original. Usually refers to the browser's name.
    examples:
    - Safari
    - YourApp
    requirement_level: recommended
    note: |
      [Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`
    stability: development
  - name: user_agent.version
    type: string
    brief: |
      Version of the user-agent extracted from original. Usually refers to the browser's version
    examples:
    - 14.1.2
    - 1.0.0
    requirement_level: recommended
    note: |
      [Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/user-agent/registry.yaml
  display_name: User-agent Attributes
- id: registry.user_agent.os
  type: attribute_group
  brief: Describes the OS user-agent attributes.
  attributes:
  - name: user_agent.os.name
    type: string
    brief: Human readable operating system name.
    examples:
    - iOS
    - Android
    - Ubuntu
    requirement_level: recommended
    note: |
      For mapping user agent strings to OS names, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.
    stability: development
  - name: user_agent.os.version
    type: string
    brief: |
      The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
    examples:
    - 14.2.1
    - 18.04.1
    requirement_level: recommended
    note: |
      For mapping user agent strings to OS versions, libraries such as [ua-parser](https://github.com/ua-parser) can be utilized.
    stability: development
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: recommended
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/user-agent/registry.yaml
  display_name: User-agent OS Attributes
- id: registry.os
  type: attribute_group
  brief: |
    The operating system (OS) on which the process represented by this resource is running.
  note: |
    In case of virtualized environments, this is the operating system as it is observed by the process, i.e., the virtualized guest rather than the underlying host.
  attributes:
  - name: os.type
    type:
      members:
      - id: windows
        value: windows
        brief: Microsoft Windows
        stability: development
      - id: linux
        value: linux
        brief: Linux
        stability: development
      - id: darwin
        value: darwin
        brief: Apple Darwin
        stability: development
      - id: freebsd
        value: freebsd
        brief: FreeBSD
        stability: development
      - id: netbsd
        value: netbsd
        brief: NetBSD
        stability: development
      - id: openbsd
        value: openbsd
        brief: OpenBSD
        stability: development
      - id: dragonflybsd
        value: dragonflybsd
        brief: DragonFly BSD
        stability: development
      - id: hpux
        value: hpux
        brief: HP-UX (Hewlett Packard Unix)
        stability: development
      - id: aix
        value: aix
        brief: AIX (Advanced Interactive eXecutive)
        stability: development
      - id: solaris
        value: solaris
        brief: SunOS, Oracle Solaris
        stability: development
      - id: z_os
        value: z_os
        brief: Deprecated. Use `zos` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: zos
          note: Replaced by `zos`.
      - id: zos
        value: zos
        brief: IBM z/OS
        stability: development
    brief: |
      The operating system type.
    requirement_level: recommended
    stability: development
  - name: os.description
    type: string
    brief: |
      Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.
    examples:
    - Microsoft Windows [Version 10.0.18363.778]
    - Ubuntu 18.04.1 LTS
    requirement_level: recommended
    stability: development
  - name: os.name
    type: string
    brief: Human readable operating system name.
    examples:
    - iOS
    - Android
    - Ubuntu
    requirement_level: recommended
    stability: development
  - name: os.version
    type: string
    brief: |
      The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
    examples:
    - 14.2.1
    - 18.04.1
    requirement_level: recommended
    stability: development
  - name: os.build_id
    type: string
    brief: Unique identifier for a particular build or compilation of the operating system.
    examples:
    - TQ3C.230805.001.B2
    - '20E247'
    - '22621'
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/os/registry.yaml
  display_name: Operating System Attributes
- id: registry.thread
  type: attribute_group
  brief: |
    These attributes may be used for any operation to store information about a thread that started a span.
  attributes:
  - name: thread.id
    type: int
    brief: |
      Current "managed" thread ID (as opposed to OS thread ID).
    examples: 42
    requirement_level: recommended
    stability: development
  - name: thread.name
    type: string
    brief: |
      Current thread name.
    examples: main
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/thread/registry.yaml
  display_name: Thread Attributes
- id: event.azure.resource.log
  type: event
  brief: |
    Describes Azure Resource Log event, see [Azure Resource Log Top-level Schema](https://learn.microsoft.com/azure/azure-monitor/essentials/resource-logs-schema#top-level-common-schema) for more details.
  stability: development
  attributes:
  - name: azure.service.request.id
    type: string
    brief: The unique identifier of the service request. It's generated by the Azure service and returned with the response.
    examples:
    - 00000000-0000-0000-0000-000000000000
    requirement_level: recommended
    stability: development
  - name: cloud.resource_id
    type: string
    brief: The [Fully Qualified Azure Resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) the log is emitted for.
    examples:
    - arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
    - //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
    - /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
    requirement_level: recommended
    stability: development
  name: azure.resource.log
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/events.yaml
    attributes:
      azure.service.request.id:
        source_group: registry.azure.client.sdk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloud.resource_id:
        source_group: registry.cloud
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
  body:
    type: map
    id: azure.resource.log
    stability: development
    requirement_level: recommended
    fields:
    - type: string
      id: category
      brief: The Azure category of the log entry.
      stability: development
      examples:
      - AuditEvent
      - GatewayLogs
      - ApplicationGatewayAccessLog
      requirement_level: recommended
    - type: string
      id: correlation.id
      brief: The correlation ID of the log entry.
      stability: development
      examples:
      - 607964b6-41a5-4e24-a5db-db7aab3b9b34
      requirement_level: recommended
    - type: int
      id: duration
      brief: The duration of the operations in milliseconds.
      stability: development
      examples:
      - 1000
      requirement_level: recommended
    - type: undefined
      id: identity
      brief: |
        "A JSON blob that describes the identity of the user or application that performed the operation."
      note: |
        Typically, this field includes the authorization and claims or JWT token from Active Directory.

        > [!Warning]
        > This field contains sensitive (PII) information.
      stability: development
      requirement_level: opt_in
    - type: string
      id: operation.name
      brief: The name of the operation.
      stability: development
      examples:
      - SecretGet
      - Microsoft.ApiManagement/GatewayLogs
      - ApplicationGatewayAccess
      requirement_level: recommended
    - type: string
      id: operation.version
      brief: The version of the operation.
      stability: development
      examples:
      - '1.0'
      requirement_level: recommended
    - type: undefined
      id: properties
      brief: The properties provided in the Azure Resource Log.
      stability: development
      requirement_level: recommended
    - type: string
      id: result.type
      brief: The status associated with the logged event.
      stability: development
      examples:
      - Succeeded
      - Failed
      - Started
      requirement_level: recommended
    - type: string
      id: result.signature
      brief: The substatus of associated with the logged event.
      stability: development
      examples:
      - OK
      requirement_level: recommended
    - type: string
      id: result.description
      brief: The description of the result.
      stability: development
      examples:
      - The operation was successful
      - The operation failed
      requirement_level: recommended
    - type: string
      id: tenant.id
      brief: The tenant ID of the Active Directory tenant that this event is tied to.
      stability: development
      examples:
      - 00000000-0000-0000-0000-000000000000
      requirement_level:
        conditionally_required: if the event is tied to an Active Directory tenant.
- id: metric.azure.cosmosdb.client.operation.request_charge
  type: metric
  brief: '[Request units](https://learn.microsoft.com/azure/cosmos-db/request-units) consumed by the operation.'
  stability: development
  attributes:
  - name: db.namespace
    type: string
    brief: |
      The name of the database, fully qualified within the server address and port.
    examples:
    - customers
    - test.users
    requirement_level:
      conditionally_required: If available.
    stability: stable
  - name: db.response.status_code
    type: string
    brief: Database response status code.
    examples:
    - '102'
    - ORA-17002
    - 08P01
    - '404'
    requirement_level:
      conditionally_required: If the operation failed and status code is available.
    note: |
      The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
      Semantic conventions for individual database systems SHOULD document what `db.response.status_code` means in the context of that system.
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If and only if the operation failed.
    note: |
      The `error.type` SHOULD match the `db.response.status_code` returned by the database or the client library, or the canonical name of exception that occurred.
      When using canonical exception type name, instrumentation SHOULD do the best effort to report the most relevant type. For example, if the original exception is wrapped into a generic one, the original exception SHOULD be preferred.
      Instrumentations SHOULD document how `error.type` is populated.
    stability: stable
  - name: azure.cosmosdb.consistency.level
    type:
      members:
      - id: strong
        value: Strong
        brief: Strong
        stability: development
      - id: bounded_staleness
        value: BoundedStaleness
        brief: Bounded Staleness
        stability: development
      - id: session
        value: Session
        brief: Session
        stability: development
      - id: eventual
        value: Eventual
        brief: Eventual
        stability: development
      - id: consistent_prefix
        value: ConsistentPrefix
        brief: Consistent Prefix
        stability: development
    brief: Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).
    examples:
    - Eventual
    - ConsistentPrefix
    - BoundedStaleness
    - Strong
    - Session
    requirement_level:
      conditionally_required: If available.
    stability: development
  - name: azure.cosmosdb.response.sub_status_code
    type: int
    brief: Cosmos DB sub status code.
    examples:
    - 1000
    - 1002
    requirement_level:
      conditionally_required: when response was received and contained sub-code.
    stability: development
  - name: azure.cosmosdb.operation.contacted_regions
    type: string[]
    brief: |
      List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.
    examples:
    - - North Central US
      - Australia East
      - Australia Southeast
    requirement_level:
      recommended: If available
    note: |
      Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)
    stability: development
  - name: db.collection.name
    type: string
    brief: |
      Cosmos DB container name.
    examples:
    - public.users
    - customers
    requirement_level:
      conditionally_required: If available.
    note: |
      It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    stability: stable
  - name: db.operation.name
    type: string
    brief: |
      The name of the operation or command being executed.
    examples:
    - findAndModify
    - HMSET
    - SELECT
    requirement_level: required
    note: |
      It is RECOMMENDED to capture the value as provided by the application
      without attempting to do any case normalization.

      The operation name SHOULD NOT be extracted from `db.query.text`,
      when the database system supports query text with multiple operations
      in non-batch operations.

      If spaces can occur in the operation name, multiple consecutive spaces
      SHOULD be normalized to a single space.

      For batch operations, if the individual operations are known to have the same operation name
      then that operation name SHOULD be used prepended by `BATCH `,
      otherwise `db.operation.name` SHOULD be `BATCH` or some other database
      system specific term if more applicable.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: azure.cosmosdb.client.operation.request_charge
  instrument: histogram
  unit: '{request_unit}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/cosmosdb-metrics.yaml
    attributes:
      azure.cosmosdb.consistency.level:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.operation.contacted_regions:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      azure.cosmosdb.response.sub_status_code:
        source_group: registry.azure.cosmosdb
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.collection.name:
        source_group: registry.db
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      db.namespace:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      db.operation.name:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      db.response.status_code:
        source_group: registry.db
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.azure.cosmosdb.client.active_instance.count
  type: metric
  brief: Number of active client instances.
  stability: development
  attributes:
  - name: server.address
    type: string
    brief: |
      Name of the database host.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If using a port other than the default port for this DBMS and if `server.address` is set.
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: azure.cosmosdb.client.active_instance.count
  instrument: updowncounter
  unit: '{instance}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/azure/cosmosdb-metrics.yaml
    attributes:
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.feature_flag
  type: attribute_group
  brief: |
    This document defines attributes for Feature Flags.
  stability: release_candidate
  attributes:
  - name: feature_flag.key
    type: string
    brief: The lookup key of the feature flag.
    examples:
    - logo-color
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.provider.name
    type: string
    brief: Identifies the feature flag provider.
    examples:
    - Flag Manager
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.result.variant
    type: string
    brief: |
      A semantic identifier for an evaluated flag value.
    examples:
    - red
    - 'true'
    - on
    requirement_level: recommended
    note: |-
      A semantic identifier, commonly referred to as a variant, provides a means
      for referring to a value without including the value itself. This can
      provide additional context for understanding the meaning behind a value.
      For example, the variant `red` maybe be used for the value `#c05543`.
    stability: release_candidate
  - name: feature_flag.context.id
    type: string
    brief: |
      The unique identifier for the flag evaluation context. For example, the targeting key.
    examples:
    - 5157782b-2203-4c80-a857-dbbd5e7761db
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.version
    type: string
    brief: |
      The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.
    examples:
    - '1'
    - 01ABCDEF
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.set.id
    type: string
    brief: |
      The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to which the feature flag belongs.
    examples:
    - proj-1
    - ab98sgs
    - service1/dev
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.result.reason
    type:
      members:
      - id: static
        value: static
        brief: The resolved value is static (no dynamic evaluation).
        stability: release_candidate
      - id: default
        value: default
        brief: The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).
        stability: release_candidate
      - id: targeting_match
        value: targeting_match
        brief: The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.
        stability: release_candidate
      - id: split
        value: split
        brief: The resolved value was the result of pseudorandom assignment.
        stability: release_candidate
      - id: cached
        value: cached
        brief: The resolved value was retrieved from cache.
        stability: release_candidate
      - id: disabled
        value: disabled
        brief: The resolved value was the result of the flag being disabled in the management system.
        stability: release_candidate
      - id: unknown
        value: unknown
        brief: The reason for the resolved value could not be determined.
        stability: release_candidate
      - id: stale
        value: stale
        brief: The resolved value is non-authoritative or possibly out of date
        stability: release_candidate
      - id: error
        value: error
        brief: The resolved value was the result of an error.
        stability: release_candidate
    brief: |
      The reason code which shows how a feature flag value was determined.
    examples:
    - static
    - targeting_match
    - error
    - default
    requirement_level: recommended
    stability: release_candidate
  - name: feature_flag.result.value
    type: any
    brief: The evaluated value of the feature flag.
    examples:
    - '#ff0000'
    - true
    - 3
    requirement_level: recommended
    note: |
      With some feature flag providers, feature flag results can be quite large or contain private or sensitive details.
      Because of this, `feature_flag.result.variant` is often the preferred attribute if it is available.

      It may be desirable to redact or otherwise limit the size and scope of `feature_flag.result.value` if possible.
      Because the evaluated flag value is unstructured and may be any type, it is left to the instrumentation author to determine how best to achieve this.
    stability: release_candidate
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/feature-flags/registry.yaml
  display_name: Feature Flag Attributes
- id: registry.dns
  type: attribute_group
  brief: |
    This document defines the shared attributes used to report a DNS query.
  attributes:
  - name: dns.question.name
    type: string
    brief: The name being queried.
    examples:
    - www.example.com
    - opentelemetry.io
    requirement_level: recommended
    note: |
      If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
    stability: development
  - name: dns.answers
    type: string[]
    brief: The list of IPv4 or IPv6 addresses resolved during DNS lookup.
    examples:
    - - 10.0.0.1
      - 2001:0db8:85a3:0000:0000:8a2e:0370:7334
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dns/registry.yaml
  display_name: DNS Attributes
- id: metric.dns.lookup.duration
  type: metric
  brief: Measures the time taken to perform a DNS lookup.
  stability: development
  attributes:
  - name: dns.question.name
    type: string
    brief: The name being queried.
    examples:
    - www.example.com
    - dot.net
    requirement_level: required
    note: |
      If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: Describes the error the DNS lookup failed with.
    examples:
    - host_not_found
    - no_recovery
    - java.net.UnknownHostException
    requirement_level:
      conditionally_required: if and only if an error has occurred.
    note: |
      Instrumentations SHOULD use error code such as one of errors reported by `getaddrinfo`([Linux or other POSIX systems](https://man7.org/linux/man-pages/man3/getaddrinfo.3.html) / [Windows](https://learn.microsoft.com/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo)) or one reported by the runtime or client library. If error code is not available, the full name of exception type SHOULD be used.
    stability: stable
  metric_name: dns.lookup.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/dns/metrics.yaml
    attributes:
      dns.question.name:
        source_group: registry.dns
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - stability
        locally_overridden_fields:
        - brief
        - examples
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: entity.k8s.cluster
  type: entity
  brief: |
    A Kubernetes Cluster.
  stability: development
  attributes:
  - name: k8s.cluster.name
    type: string
    brief: |
      The name of the cluster.
    examples:
    - opentelemetry-cluster
    requirement_level: recommended
    stability: development
  - name: k8s.cluster.uid
    type: string
    brief: |
      A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.
    examples:
    - 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
    requirement_level: recommended
    note: |
      K8s doesn't have support for obtaining a cluster ID. If this is ever
      added, we will recommend collecting the `k8s.cluster.uid` through the
      official APIs. In the meantime, we are able to use the `uid` of the
      `kube-system` namespace as a proxy for cluster ID. Read on for the
      rationale.

      Every object created in a K8s cluster is assigned a distinct UID. The
      `kube-system` namespace is used by Kubernetes itself and will exist
      for the lifetime of the cluster. Using the `uid` of the `kube-system`
      namespace is a reasonable proxy for the K8s ClusterID as it will only
      change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
      UUIDs as standardized by
      [ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).
      Which states:

      > If generated according to one of the mechanisms defined in Rec.
      > ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
      > different from all other UUIDs generated before 3603 A.D., or is
      > extremely likely to be different (depending on the mechanism chosen).

      Therefore, UIDs between clusters should be extremely unlikely to
      conflict.
    stability: development
  name: k8s.cluster
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.cluster.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.cluster.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.node
  type: entity
  brief: |
    A Kubernetes Node object.
  stability: development
  attributes:
  - name: k8s.node.name
    type: string
    brief: |
      The name of the Node.
    examples:
    - node-1
    requirement_level: recommended
    stability: development
  - name: k8s.node.uid
    type: string
    brief: |
      The UID of the Node.
    examples:
    - 1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2
    requirement_level: recommended
    stability: development
  - name: k8s.node.label
    type: template[string]
    brief: |
      The label placed on the Node, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - arm64
    - ''
    requirement_level: opt_in
    note: |
      Examples:

      - A label `kubernetes.io/arch` with value `arm64` SHOULD be recorded
        as the `k8s.node.label.kubernetes.io/arch` attribute with value `"arm64"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.node.label.data` attribute with value `""`.
    stability: development
  - name: k8s.node.annotation
    type: template[string]
    brief: |
      The annotation placed on the Node, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '0'
    - ''
    requirement_level: opt_in
    note: |
      Examples:

      - An annotation `node.alpha.kubernetes.io/ttl` with value `0` SHOULD be recorded as
        the `k8s.node.annotation.node.alpha.kubernetes.io/ttl` attribute with value `"0"`.
      - An annotation `data` with empty string value SHOULD be recorded as
        the `k8s.node.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.node
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.node.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.node.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.node.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.node.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.namespace
  type: entity
  brief: |
    A Kubernetes Namespace.
  stability: development
  attributes:
  - name: k8s.namespace.name
    type: string
    brief: |
      The name of the namespace that the pod is running in.
    examples:
    - default
    requirement_level: recommended
    stability: development
  - name: k8s.namespace.label
    type: template[string]
    brief: |
      The label placed on the Namespace, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - default
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `kubernetes.io/metadata.name` with value `default` SHOULD be recorded
        as the `k8s.namespace.label.kubernetes.io/metadata.name` attribute with value `"default"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.namespace.label.data` attribute with value `""`.
    stability: development
  - name: k8s.namespace.annotation
    type: template[string]
    brief: |
      The annotation placed on the Namespace, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '0'
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `ttl` with value `0` SHOULD be recorded
        as the `k8s.namespace.annotation.ttl` attribute with value `"0"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.namespace.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.namespace
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.namespace.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.namespace.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.namespace.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.pod
  type: entity
  brief: |
    A Kubernetes Pod object.
  stability: development
  attributes:
  - name: k8s.pod.uid
    type: string
    brief: |
      The UID of the Pod.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.pod.name
    type: string
    brief: |
      The name of the Pod.
    examples:
    - opentelemetry-pod-autoconf
    requirement_level: recommended
    stability: development
  - name: k8s.pod.label
    type: template[string]
    brief: |
      The label placed on the Pod, the `<key>` being the label name, the value being the label value.
    examples:
    - my-app
    - x64
    - ''
    requirement_level: opt_in
    note: |
      Examples:

      - A label `app` with value `my-app` SHOULD be recorded as
        the `k8s.pod.label.app` attribute with value `"my-app"`.
      - A label `mycompany.io/arch` with value `x64` SHOULD be recorded as
        the `k8s.pod.label.mycompany.io/arch` attribute with value `"x64"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.pod.label.data` attribute with value `""`.
    stability: development
  - name: k8s.pod.annotation
    type: template[string]
    brief: |
      The annotation placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.
    examples:
    - 'true'
    - x64
    - ''
    requirement_level: opt_in
    note: |
      Examples:

      - An annotation `kubernetes.io/enforce-mountable-secrets` with value `true` SHOULD be recorded as
        the `k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets` attribute with value `"true"`.
      - An annotation `mycompany.io/arch` with value `x64` SHOULD be recorded as
        the `k8s.pod.annotation.mycompany.io/arch` attribute with value `"x64"`.
      - An annotation `data` with empty string value SHOULD be recorded as
        the `k8s.pod.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.pod
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.pod.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.pod.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.pod.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.pod.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.container
  type: entity
  brief: |
    A container in a [PodTemplate](https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates).
  stability: development
  attributes:
  - name: k8s.container.name
    type: string
    brief: |
      The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
    examples:
    - redis
    requirement_level: recommended
    stability: development
  - name: k8s.container.restart_count
    type: int
    brief: |
      Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
    requirement_level: recommended
    stability: development
  - name: k8s.container.status.last_terminated_reason
    type: string
    brief: |
      Last terminated reason of the Container.
    examples:
    - Evicted
    - Error
    requirement_level: recommended
    stability: development
  name: k8s.container
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.container.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.container.restart_count:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      k8s.container.status.last_terminated_reason:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.replicaset
  type: entity
  brief: |
    A Kubernetes ReplicaSet object.
  stability: development
  attributes:
  - name: k8s.replicaset.uid
    type: string
    brief: |
      The UID of the ReplicaSet.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.replicaset.name
    type: string
    brief: |
      The name of the ReplicaSet.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.replicaset.label
    type: template[string]
    brief: |
      The label placed on the ReplicaSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `app` with value `guestbook` SHOULD be recorded
        as the `k8s.replicaset.label.app` attribute with value `"guestbook"`.
      - A label `injected` with empty string value SHOULD be recorded as
        the `k8s.replicaset.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.replicaset.annotation
    type: template[string]
    brief: |
      The annotation placed on the ReplicaSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '0'
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `replicas` with value `0` SHOULD be recorded
        as the `k8s.replicaset.annotation.replicas` attribute with value `"0"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.replicaset.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.replicaset
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.replicaset.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.replicaset.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.replicaset.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.replicaset.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.deployment
  type: entity
  brief: |
    A Kubernetes Deployment object.
  stability: development
  attributes:
  - name: k8s.deployment.uid
    type: string
    brief: |
      The UID of the Deployment.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.deployment.name
    type: string
    brief: |
      The name of the Deployment.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.deployment.label
    type: template[string]
    brief: |
      The label placed on the Deployment, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `replicas` with value `0` SHOULD be recorded
        as the `k8s.deployment.label.app` attribute with value `"guestbook"`.
      - A label `injected` with empty string value SHOULD be recorded as
        the `k8s.deployment.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.deployment.annotation
    type: template[string]
    brief: |
      The annotation placed on the Deployment, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `replicas` with value `1` SHOULD be recorded
        as the `k8s.deployment.annotation.replicas` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.deployment.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.deployment
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.deployment.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.deployment.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.deployment.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.deployment.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.statefulset
  type: entity
  brief: |
    A Kubernetes StatefulSet object.
  stability: development
  attributes:
  - name: k8s.statefulset.uid
    type: string
    brief: |
      The UID of the StatefulSet.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.statefulset.name
    type: string
    brief: |
      The name of the StatefulSet.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.statefulset.label
    type: template[string]
    brief: |
      The label placed on the StatefulSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `replicas` with value `0` SHOULD be recorded
        as the `k8s.statefulset.label.app` attribute with value `"guestbook"`.
      - A label `injected` with empty string value SHOULD be recorded as
        the `k8s.statefulset.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.statefulset.annotation
    type: template[string]
    brief: |
      The annotation placed on the StatefulSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `replicas` with value `1` SHOULD be recorded
        as the `k8s.statefulset.annotation.replicas` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.statefulset.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.statefulset
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.statefulset.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.statefulset.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.statefulset.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.statefulset.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.daemonset
  type: entity
  brief: |
    A Kubernetes DaemonSet object.
  stability: development
  attributes:
  - name: k8s.daemonset.uid
    type: string
    brief: |
      The UID of the DaemonSet.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.daemonset.name
    type: string
    brief: |
      The name of the DaemonSet.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.daemonset.label
    type: template[string]
    brief: |
      The label placed on the DaemonSet, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - guestbook
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `app` with value `guestbook` SHOULD be recorded
        as the `k8s.daemonset.label.app` attribute with value `"guestbook"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.daemonset.label.injected` attribute with value `""`.
    stability: development
  - name: k8s.daemonset.annotation
    type: template[string]
    brief: |
      The annotation placed on the DaemonSet, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `replicas` with value `1` SHOULD be recorded
        as the `k8s.daemonset.annotation.replicas` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.daemonset.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.daemonset
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.daemonset.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.daemonset.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.daemonset.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.daemonset.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.job
  type: entity
  brief: |
    A Kubernetes Job object.
  stability: development
  attributes:
  - name: k8s.job.uid
    type: string
    brief: |
      The UID of the Job.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.job.name
    type: string
    brief: |
      The name of the Job.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.job.label
    type: template[string]
    brief: |
      The label placed on the Job, the `<key>` being the label name, the value being the label value, even if the value is empty.
    examples:
    - ci
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `jobtype` with value `ci` SHOULD be recorded
        as the `k8s.job.label.jobtype` attribute with value `"ci"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.job.label.automated` attribute with value `""`.
    stability: development
  - name: k8s.job.annotation
    type: template[string]
    brief: |
      The annotation placed on the Job, the `<key>` being the annotation name, the value being the annotation value, even if the value is empty.
    examples:
    - '1'
    - ''
    requirement_level: opt_in
    note: |2

      Examples:

      - A label `number` with value `1` SHOULD be recorded
        as the `k8s.job.annotation.number` attribute with value `"1"`.
      - A label `data` with empty string value SHOULD be recorded as
        the `k8s.job.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.job
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.job.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.job.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.job.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.job.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.cronjob
  type: entity
  brief: |
    A Kubernetes CronJob object.
  stability: development
  attributes:
  - name: k8s.cronjob.uid
    type: string
    brief: |
      The UID of the CronJob.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.cronjob.name
    type: string
    brief: |
      The name of the CronJob.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.cronjob.label
    type: template[string]
    brief: |
      The label placed on the CronJob, the `<key>` being the label name, the value being the label value.
    examples:
    - weekly
    - ''
    requirement_level: opt_in
    note: |
      Examples:

      - A label `type` with value `weekly` SHOULD be recorded as the
        `k8s.cronjob.label.type` attribute with value `"weekly"`.
      - A label `automated` with empty string value SHOULD be recorded as
        the `k8s.cronjob.label.automated` attribute with value `""`.
    stability: development
  - name: k8s.cronjob.annotation
    type: template[string]
    brief: |
      The cronjob annotation placed on the CronJob, the `<key>` being the annotation name, the value being the annotation value.
    examples:
    - '4'
    - ''
    requirement_level: opt_in
    note: |
      Examples:

      - An annotation `retries` with value `4` SHOULD be recorded as the
        `k8s.cronjob.annotation.retries` attribute with value `"4"`.
      - An annotation `data` with empty string value SHOULD be recorded as
        the `k8s.cronjob.annotation.data` attribute with value `""`.
    stability: development
  name: k8s.cronjob
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.cronjob.annotation:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.cronjob.label:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.cronjob.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.cronjob.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.replicationcontroller
  type: entity
  brief: |
    A Kubernetes ReplicationController object.
  stability: development
  attributes:
  - name: k8s.replicationcontroller.uid
    type: string
    brief: |
      The UID of the replication controller.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.replicationcontroller.name
    type: string
    brief: |
      The name of the replication controller.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  name: k8s.replicationcontroller
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.replicationcontroller.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.replicationcontroller.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.hpa
  type: entity
  brief: |
    A Kubernetes HorizontalPodAutoscaler object.
  stability: development
  attributes:
  - name: k8s.hpa.uid
    type: string
    brief: |
      The UID of the horizontal pod autoscaler.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.hpa.name
    type: string
    brief: |
      The name of the horizontal pod autoscaler.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: k8s.hpa.scaletargetref.kind
    type: string
    brief: |
      The kind of the target resource to scale for the HorizontalPodAutoscaler.
    examples:
    - Deployment
    - StatefulSet
    requirement_level: recommended
    note: |
      This maps to the `kind` field in the `scaleTargetRef` of the HPA spec.
    stability: development
  - name: k8s.hpa.scaletargetref.name
    type: string
    brief: |
      The name of the target resource to scale for the HorizontalPodAutoscaler.
    examples:
    - my-deployment
    - my-statefulset
    requirement_level: recommended
    note: |
      This maps to the `name` field in the `scaleTargetRef` of the HPA spec.
    stability: development
  - name: k8s.hpa.scaletargetref.api_version
    type: string
    brief: |
      The API version of the target resource to scale for the HorizontalPodAutoscaler.
    examples:
    - apps/v1
    - autoscaling/v2
    requirement_level: recommended
    note: |
      This maps to the `apiVersion` field in the `scaleTargetRef` of the HPA spec.
    stability: development
  name: k8s.hpa
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.hpa.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.hpa.scaletargetref.api_version:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.hpa.scaletargetref.kind:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.hpa.scaletargetref.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.hpa.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.k8s.resourcequota
  type: entity
  brief: |
    A Kubernetes ResourceQuota object.
  stability: development
  attributes:
  - name: k8s.resourcequota.uid
    type: string
    brief: |
      The UID of the resource quota.
    examples:
    - 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
    requirement_level: recommended
    stability: development
  - name: k8s.resourcequota.name
    type: string
    brief: |
      The name of the resource quota.
    examples:
    - opentelemetry
    requirement_level: recommended
    stability: development
  name: k8s.resourcequota
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/entities.yaml
    attributes:
      k8s.resourcequota.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      k8s.resourcequota.uid:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.k8s.pod.uptime
  type: metric
  brief: The time the Pod has been running.
  note: |
    Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
    The actual accuracy would depend on the instrumentation and operating system.
  stability: development
  metric_name: k8s.pod.uptime
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.pod.cpu.time
  type: metric
  brief: Total CPU time consumed.
  note: |
    Total CPU time consumed by the specific Pod on all available CPU cores
  stability: development
  metric_name: k8s.pod.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.pod.cpu.usage
  type: metric
  brief: Pod's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs.
  note: |
    CPU usage of the specific Pod on all available CPU cores, averaged over the sample window
  stability: development
  metric_name: k8s.pod.cpu.usage
  instrument: gauge
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.pod.memory.usage
  type: metric
  brief: Memory usage of the Pod.
  note: |
    Total memory usage of the Pod
  stability: development
  metric_name: k8s.pod.memory.usage
  instrument: gauge
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.network.io
  type: metric
  brief: Network bytes for the Pod.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: k8s.pod.network.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.network.errors
  type: metric
  brief: Pod network errors.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: k8s.pod.network.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.filesystem.available
  type: metric
  brief: Pod filesystem available bytes.
  note: |
    This metric is derived from the
    [FsStats.AvailableBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [PodStats.EphemeralStorage](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: k8s.pod.filesystem.available
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.filesystem.capacity
  type: metric
  brief: Pod filesystem capacity.
  note: |
    This metric is derived from the
    [FsStats.CapacityBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [PodStats.EphemeralStorage](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: k8s.pod.filesystem.capacity
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.filesystem.usage
  type: metric
  brief: Pod filesystem usage.
  note: |
    This may not equal capacity - available.

    This metric is derived from the
    [FsStats.UsedBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [PodStats.EphemeralStorage](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: k8s.pod.filesystem.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.volume.available
  type: metric
  brief: Pod volume storage space available.
  note: |
    This metric is derived from the
    [VolumeStats.AvailableBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#VolumeStats) field
    of the [PodStats](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats) of the
    Kubelet's stats API.
  stability: development
  attributes:
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: required
    stability: development
  metric_name: k8s.pod.volume.available
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.volume.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.volume.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.volume.capacity
  type: metric
  brief: Pod volume total capacity.
  note: |
    This metric is derived from the
    [VolumeStats.CapacityBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#VolumeStats) field
    of the [PodStats](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats) of the
    Kubelet's stats API.
  stability: development
  attributes:
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: required
    stability: development
  metric_name: k8s.pod.volume.capacity
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.volume.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.volume.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.volume.usage
  type: metric
  brief: Pod volume usage.
  note: |
    This may not equal capacity - available.

    This metric is derived from the
    [VolumeStats.UsedBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#VolumeStats) field
    of the [PodStats](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats) of the
    Kubelet's stats API.
  stability: development
  attributes:
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: required
    stability: development
  metric_name: k8s.pod.volume.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.volume.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.volume.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.volume.inode.count
  type: metric
  brief: The total inodes in the filesystem of the Pod's volume.
  note: |
    This metric is derived from the
    [VolumeStats.Inodes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#VolumeStats) field
    of the [PodStats](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats) of the
    Kubelet's stats API.
  stability: development
  attributes:
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: required
    stability: development
  metric_name: k8s.pod.volume.inode.count
  instrument: updowncounter
  unit: '{inode}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.volume.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.volume.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.volume.inode.used
  type: metric
  brief: The inodes used by the filesystem of the Pod's volume.
  note: |
    This metric is derived from the
    [VolumeStats.InodesUsed](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#VolumeStats) field
    of the [PodStats](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats) of the
    Kubelet's stats API.

    This may not be equal to `inodes - free` because filesystem may share inodes with other filesystems.
  stability: development
  attributes:
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: required
    stability: development
  metric_name: k8s.pod.volume.inode.used
  instrument: updowncounter
  unit: '{inode}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.volume.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.volume.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.pod.volume.inode.free
  type: metric
  brief: The free inodes in the filesystem of the Pod's volume.
  note: |
    This metric is derived from the
    [VolumeStats.InodesFree](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#VolumeStats) field
    of the [PodStats](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#PodStats) of the
    Kubelet's stats API.
  stability: development
  attributes:
  - name: k8s.volume.type
    type:
      members:
      - id: persistent_volume_claim
        value: persistentVolumeClaim
        brief: A [persistentVolumeClaim](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim) volume
        stability: development
      - id: config_map
        value: configMap
        brief: A [configMap](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap) volume
        stability: development
      - id: downward_api
        value: downwardAPI
        brief: A [downwardAPI](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi) volume
        stability: development
      - id: empty_dir
        value: emptyDir
        brief: An [emptyDir](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume
        stability: development
      - id: secret
        value: secret
        brief: A [secret](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret) volume
        stability: development
      - id: local
        value: local
        brief: A [local](https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local) volume
        stability: development
    brief: |
      The type of the K8s volume.
    examples:
    - emptyDir
    - persistentVolumeClaim
    requirement_level: recommended
    stability: development
  - name: k8s.volume.name
    type: string
    brief: |
      The name of the K8s volume.
    examples:
    - volume0
    requirement_level: required
    stability: development
  metric_name: k8s.pod.volume.inode.free
  instrument: updowncounter
  unit: '{inode}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.volume.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.volume.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.pod
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.status.state
  type: metric
  brief: Describes the number of K8s containers that are currently in a given state.
  note: |
    All possible container states will be reported at each time interval to avoid missing metrics.
    Only the value corresponding to the current state will be non-zero.
  stability: development
  attributes:
  - name: k8s.container.status.state
    type:
      members:
      - id: terminated
        value: terminated
        brief: The container has terminated.
        stability: development
      - id: running
        value: running
        brief: The container is running.
        stability: development
      - id: waiting
        value: waiting
        brief: The container is waiting.
        stability: development
    brief: |
      The state of the container. [K8s ContainerState](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstate-v1-core)
    examples:
    - terminated
    - running
    - waiting
    requirement_level: required
    stability: development
  metric_name: k8s.container.status.state
  instrument: updowncounter
  unit: '{container}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.container.status.state:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.status.reason
  type: metric
  brief: Describes the number of K8s containers that are currently in a state for a given reason.
  note: |
    All possible container state reasons will be reported at each time interval to avoid missing metrics.
    Only the value corresponding to the current state reason will be non-zero.
  stability: development
  attributes:
  - name: k8s.container.status.reason
    type:
      members:
      - id: container_creating
        value: ContainerCreating
        brief: The container is being created.
        stability: development
      - id: crash_loop_back_off
        value: CrashLoopBackOff
        brief: The container is in a crash loop back off state.
        stability: development
      - id: create_container_config_error
        value: CreateContainerConfigError
        brief: There was an error creating the container configuration.
        stability: development
      - id: err_image_pull
        value: ErrImagePull
        brief: There was an error pulling the container image.
        stability: development
      - id: image_pull_back_off
        value: ImagePullBackOff
        brief: The container image pull is in back off state.
        stability: development
      - id: oom_killed
        value: OOMKilled
        brief: The container was killed due to out of memory.
        stability: development
      - id: completed
        value: Completed
        brief: The container has completed execution.
        stability: development
      - id: error
        value: Error
        brief: There was an error with the container.
        stability: development
      - id: container_cannot_run
        value: ContainerCannotRun
        brief: The container cannot run.
        stability: development
    brief: |
      The reason for the container state. Corresponds to the `reason` field of the: [K8s ContainerStateWaiting](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatewaiting-v1-core) or [K8s ContainerStateTerminated](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstateterminated-v1-core)
    examples:
    - ContainerCreating
    - CrashLoopBackOff
    - CreateContainerConfigError
    - ErrImagePull
    - ImagePullBackOff
    - OOMKilled
    - Completed
    - Error
    - ContainerCannotRun
    requirement_level: required
    stability: development
  metric_name: k8s.container.status.reason
  instrument: updowncounter
  unit: '{container}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.container.status.reason:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.uptime
  type: metric
  brief: The time the Node has been running.
  note: |
    Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
    The actual accuracy would depend on the instrumentation and operating system.
  stability: development
  metric_name: k8s.node.uptime
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.node.allocatable.cpu
  type: metric
  brief: Amount of cpu allocatable on the node.
  stability: development
  metric_name: k8s.node.allocatable.cpu
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.node.allocatable.ephemeral_storage
  type: metric
  brief: Amount of ephemeral-storage allocatable on the node.
  stability: development
  metric_name: k8s.node.allocatable.ephemeral_storage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.allocatable.memory
  type: metric
  brief: Amount of memory allocatable on the node.
  stability: development
  metric_name: k8s.node.allocatable.memory
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.allocatable.pods
  type: metric
  brief: Amount of pods allocatable on the node.
  stability: development
  metric_name: k8s.node.allocatable.pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.condition.status
  type: metric
  brief: Describes the condition of a particular Node.
  note: |
    All possible node condition pairs (type and status) will be reported at each time interval to avoid missing metrics. Condition pairs corresponding to the current conditions' statuses will be non-zero.
  stability: development
  attributes:
  - name: k8s.node.condition.type
    type:
      members:
      - id: ready
        value: Ready
        brief: The node is healthy and ready to accept pods
        stability: development
      - id: disk_pressure
        value: DiskPressure
        brief: Pressure exists on the disk size—that is, if the disk capacity is low
        stability: development
      - id: memory_pressure
        value: MemoryPressure
        brief: Pressure exists on the node memory—that is, if the node memory is low
        stability: development
      - id: pid_pressure
        value: PIDPressure
        brief: Pressure exists on the processes—that is, if there are too many processes on the node
        stability: development
      - id: network_unavailable
        value: NetworkUnavailable
        brief: The network for the node is not correctly configured
        stability: development
    brief: |
      The condition type of a K8s Node.
    examples:
    - Ready
    - DiskPressure
    requirement_level: required
    note: |
      K8s Node conditions as described
      by [K8s documentation](https://v1-32.docs.kubernetes.io/docs/reference/node/node-status/#condition).

      This attribute aligns with the `type` field of the
      [NodeCondition](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core)

      The set of possible values is not limited to those listed here. Managed Kubernetes environments,
      or custom controllers MAY introduce additional node condition types.
      When this occurs, the exact value as reported by the Kubernetes API SHOULD be used.
    stability: development
  - name: k8s.node.condition.status
    type:
      members:
      - id: condition_true
        value: 'true'
        stability: development
      - id: condition_false
        value: 'false'
        stability: development
      - id: condition_unknown
        value: unknown
        stability: development
    brief: |
      The status of the condition, one of True, False, Unknown.
    examples:
    - 'true'
    - 'false'
    - unknown
    requirement_level: required
    note: |
      This attribute aligns with the `status` field of the
      [NodeCondition](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core)
    stability: development
  metric_name: k8s.node.condition.status
  instrument: updowncounter
  unit: '{node}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.node.condition.status:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.node.condition.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.cpu.time
  type: metric
  brief: Total CPU time consumed.
  note: |
    Total CPU time consumed by the specific Node on all available CPU cores
  stability: development
  metric_name: k8s.node.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.node.cpu.usage
  type: metric
  brief: Node's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs.
  note: |
    CPU usage of the specific Node on all available CPU cores, averaged over the sample window
  stability: development
  metric_name: k8s.node.cpu.usage
  instrument: gauge
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.node.filesystem.available
  type: metric
  brief: Node filesystem available bytes.
  note: |
    This metric is derived from the
    [FsStats.AvailableBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [NodeStats.Fs](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#NodeStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: k8s.node.filesystem.available
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.filesystem.capacity
  type: metric
  brief: Node filesystem capacity.
  note: |
    This metric is derived from the
    [FsStats.CapacityBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [NodeStats.Fs](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#NodeStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: k8s.node.filesystem.capacity
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.filesystem.usage
  type: metric
  brief: Node filesystem usage.
  note: |
    This may not equal capacity - available.

    This metric is derived from the
    [FsStats.UsedBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [NodeStats.Fs](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#NodeStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: k8s.node.filesystem.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.memory.usage
  type: metric
  brief: Memory usage of the Node.
  note: |
    Total memory usage of the Node
  stability: development
  metric_name: k8s.node.memory.usage
  instrument: gauge
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.network.io
  type: metric
  brief: Network bytes for the Node.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: k8s.node.network.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.node.network.errors
  type: metric
  brief: Node network errors.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: k8s.node.network.errors
  instrument: counter
  unit: '{error}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.node
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.deployment.desired_pods
  type: metric
  brief: Number of desired replica pods in this deployment.
  note: |
    This metric aligns with the `replicas` field of the
    [K8s DeploymentSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#deploymentspec-v1-apps).
  stability: development
  metric_name: k8s.deployment.desired_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.deployment
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.deployment.available_pods
  type: metric
  brief: Total number of available replica pods (ready for at least minReadySeconds) targeted by this deployment.
  note: |
    This metric aligns with the `availableReplicas` field of the
    [K8s DeploymentStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#deploymentstatus-v1-apps).
  stability: development
  metric_name: k8s.deployment.available_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.deployment
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.replicaset.desired_pods
  type: metric
  brief: Number of desired replica pods in this replicaset.
  note: |
    This metric aligns with the `replicas` field of the
    [K8s ReplicaSetSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicasetspec-v1-apps).
  stability: development
  metric_name: k8s.replicaset.desired_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.replicaset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.replicaset.available_pods
  type: metric
  brief: Total number of available replica pods (ready for at least minReadySeconds) targeted by this replicaset.
  note: |
    This metric aligns with the `availableReplicas` field of the
    [K8s ReplicaSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicasetstatus-v1-apps).
  stability: development
  metric_name: k8s.replicaset.available_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.replicaset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.replicationcontroller.desired_pods
  type: metric
  brief: Number of desired replica pods in this replication controller.
  note: |
    This metric aligns with the `replicas` field of the
    [K8s ReplicationControllerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerspec-v1-core)
  stability: development
  metric_name: k8s.replicationcontroller.desired_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.replicationcontroller
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.replicationcontroller.available_pods
  type: metric
  brief: Total number of available replica pods (ready for at least minReadySeconds) targeted by this replication controller.
  note: |
    This metric aligns with the `availableReplicas` field of the
    [K8s ReplicationControllerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerstatus-v1-core)
  stability: development
  metric_name: k8s.replicationcontroller.available_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.replicationcontroller
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.statefulset.desired_pods
  type: metric
  brief: Number of desired replica pods in this statefulset.
  note: |
    This metric aligns with the `replicas` field of the
    [K8s StatefulSetSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetspec-v1-apps).
  stability: development
  metric_name: k8s.statefulset.desired_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.statefulset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.statefulset.ready_pods
  type: metric
  brief: The number of replica pods created for this statefulset with a Ready Condition.
  note: |
    This metric aligns with the `readyReplicas` field of the
    [K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).
  stability: development
  metric_name: k8s.statefulset.ready_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.statefulset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.statefulset.current_pods
  type: metric
  brief: The number of replica pods created by the statefulset controller from the statefulset version indicated by currentRevision.
  note: |
    This metric aligns with the `currentReplicas` field of the
    [K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).
  stability: development
  metric_name: k8s.statefulset.current_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.statefulset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.statefulset.updated_pods
  type: metric
  brief: Number of replica pods created by the statefulset controller from the statefulset version indicated by updateRevision.
  note: |
    This metric aligns with the `updatedReplicas` field of the
    [K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).
  stability: development
  metric_name: k8s.statefulset.updated_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.statefulset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.hpa.desired_pods
  type: metric
  brief: Desired number of replica pods managed by this horizontal pod autoscaler, as last calculated by the autoscaler.
  note: |
    This metric aligns with the `desiredReplicas` field of the
    [K8s HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerstatus-v2-autoscaling)
  stability: development
  metric_name: k8s.hpa.desired_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.hpa
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.hpa.current_pods
  type: metric
  brief: Current number of replica pods managed by this horizontal pod autoscaler, as last seen by the autoscaler.
  note: |
    This metric aligns with the `currentReplicas` field of the
    [K8s HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerstatus-v2-autoscaling)
  stability: development
  metric_name: k8s.hpa.current_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.hpa
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.hpa.max_pods
  type: metric
  brief: The upper limit for the number of replica pods to which the autoscaler can scale up.
  note: |
    This metric aligns with the `maxReplicas` field of the
    [K8s HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerspec-v2-autoscaling)
  stability: development
  metric_name: k8s.hpa.max_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.hpa
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.hpa.min_pods
  type: metric
  brief: The lower limit for the number of replica pods to which the autoscaler can scale down.
  note: |
    This metric aligns with the `minReplicas` field of the
    [K8s HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerspec-v2-autoscaling)
  stability: development
  metric_name: k8s.hpa.min_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.hpa
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.hpa.metric.target.cpu.value
  type: metric
  brief: Target value for CPU resource in HPA config.
  note: |
    This metric aligns with the `value` field of the
    [K8s HPA MetricTarget](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#metrictarget-v2-autoscaling).
    If the type of the metric is [`ContainerResource`](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-metrics-apis),
    the `k8s.container.name` attribute MUST be set to identify the specific container within the pod to which the metric applies.
  stability: development
  attributes:
  - name: k8s.hpa.metric.type
    type: string
    brief: |
      The type of metric source for the horizontal pod autoscaler.
    examples:
    - Resource
    - ContainerResource
    requirement_level: recommended
    note: |
      This attribute reflects the `type` field of spec.metrics[] in the HPA.
    stability: development
  - name: k8s.container.name
    type: string
    brief: |
      The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
    examples:
    - redis
    requirement_level:
      conditionally_required: if and only if k8s.hpa.metric.type is ContainerResource
    stability: development
  metric_name: k8s.hpa.metric.target.cpu.value
  instrument: gauge
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.container.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.hpa.metric.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.hpa
  - k8s.namespace
- id: metric.k8s.hpa.metric.target.cpu.average_value
  type: metric
  brief: Target average value for CPU resource in HPA config.
  note: |
    This metric aligns with the `averageValue` field of the
    [K8s HPA MetricTarget](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#metrictarget-v2-autoscaling).
    If the type of the metric is [`ContainerResource`](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-metrics-apis),
    the `k8s.container.name` attribute MUST be set to identify the specific container within the pod to which the metric applies.
  stability: development
  attributes:
  - name: k8s.hpa.metric.type
    type: string
    brief: |
      The type of metric source for the horizontal pod autoscaler.
    examples:
    - Resource
    - ContainerResource
    requirement_level: recommended
    note: |
      This attribute reflects the `type` field of spec.metrics[] in the HPA.
    stability: development
  - name: k8s.container.name
    type: string
    brief: |
      The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
    examples:
    - redis
    requirement_level:
      conditionally_required: if and only if k8s.hpa.metric.type is ContainerResource
    stability: development
  metric_name: k8s.hpa.metric.target.cpu.average_value
  instrument: gauge
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.container.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.hpa.metric.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.hpa
  - k8s.namespace
- id: metric.k8s.hpa.metric.target.cpu.average_utilization
  type: metric
  brief: Target average utilization, in percentage, for CPU resource in HPA config.
  note: |
    This metric aligns with the `averageUtilization` field of the
    [K8s HPA MetricTarget](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#metrictarget-v2-autoscaling).
    If the type of the metric is [`ContainerResource`](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-metrics-apis),
    the `k8s.container.name` attribute MUST be set to identify the specific container within the pod to which the metric applies.
  stability: development
  attributes:
  - name: k8s.hpa.metric.type
    type: string
    brief: |
      The type of metric source for the horizontal pod autoscaler.
    examples:
    - Resource
    - ContainerResource
    requirement_level: recommended
    note: |
      This attribute reflects the `type` field of spec.metrics[] in the HPA.
    stability: development
  - name: k8s.container.name
    type: string
    brief: |
      The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
    examples:
    - redis
    requirement_level:
      conditionally_required: if and only if k8s.hpa.metric.type is ContainerResource.
    stability: development
  metric_name: k8s.hpa.metric.target.cpu.average_utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.container.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      k8s.hpa.metric.type:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  entity_associations:
  - k8s.hpa
  - k8s.namespace
- id: metric.k8s.daemonset.current_scheduled_nodes
  type: metric
  brief: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod.
  note: |
    This metric aligns with the `currentNumberScheduled` field of the
    [K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).
  stability: development
  metric_name: k8s.daemonset.current_scheduled_nodes
  instrument: updowncounter
  unit: '{node}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.daemonset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.daemonset.desired_scheduled_nodes
  type: metric
  brief: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod).
  note: |
    This metric aligns with the `desiredNumberScheduled` field of the
    [K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).
  stability: development
  metric_name: k8s.daemonset.desired_scheduled_nodes
  instrument: updowncounter
  unit: '{node}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.daemonset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.daemonset.misscheduled_nodes
  type: metric
  brief: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod.
  note: |
    This metric aligns with the `numberMisscheduled` field of the
    [K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).
  stability: development
  metric_name: k8s.daemonset.misscheduled_nodes
  instrument: updowncounter
  unit: '{node}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.daemonset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.daemonset.ready_nodes
  type: metric
  brief: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
  note: |
    This metric aligns with the `numberReady` field of the
    [K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).
  stability: development
  metric_name: k8s.daemonset.ready_nodes
  instrument: updowncounter
  unit: '{node}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.daemonset
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.job.active_pods
  type: metric
  brief: The number of pending and actively running pods for a job.
  note: |
    This metric aligns with the `active` field of the
    [K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).
  stability: development
  metric_name: k8s.job.active_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.job
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.job.failed_pods
  type: metric
  brief: The number of pods which reached phase Failed for a job.
  note: |
    This metric aligns with the `failed` field of the
    [K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).
  stability: development
  metric_name: k8s.job.failed_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.job
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.job.successful_pods
  type: metric
  brief: The number of pods which reached phase Succeeded for a job.
  note: |
    This metric aligns with the `succeeded` field of the
    [K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).
  stability: development
  metric_name: k8s.job.successful_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.job
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.job.desired_successful_pods
  type: metric
  brief: The desired number of successfully finished pods the job should be run with.
  note: |
    This metric aligns with the `completions` field of the
    [K8s JobSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobspec-v1-batch)..
  stability: development
  metric_name: k8s.job.desired_successful_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.job
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.job.max_parallel_pods
  type: metric
  brief: The max desired number of pods the job should run at any given time.
  note: |
    This metric aligns with the `parallelism` field of the
    [K8s JobSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobspec-v1-batch).
  stability: development
  metric_name: k8s.job.max_parallel_pods
  instrument: updowncounter
  unit: '{pod}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.job
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.cronjob.active_jobs
  type: metric
  brief: The number of actively running jobs for a cronjob.
  note: |
    This metric aligns with the `active` field of the
    [K8s CronJobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#cronjobstatus-v1-batch).
  stability: development
  metric_name: k8s.cronjob.active_jobs
  instrument: updowncounter
  unit: '{job}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.cronjob
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.namespace.phase
  type: metric
  brief: Describes number of K8s namespaces that are currently in a given phase.
  stability: development
  attributes:
  - name: k8s.namespace.phase
    type:
      members:
      - id: active
        value: active
        brief: Active namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)
        stability: development
      - id: terminating
        value: terminating
        brief: Terminating namespace phase as described by [K8s API](https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase)
        stability: development
    brief: |
      The phase of the K8s namespace.
    examples:
    - active
    - terminating
    requirement_level: required
    note: |
      This attribute aligns with the `phase` field of the
      [K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)
    stability: development
  metric_name: k8s.namespace.phase
  instrument: updowncounter
  unit: '{namespace}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.namespace.phase:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.namespace
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.cpu.limit
  type: metric
  brief: Maximum CPU resource limit set for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.cpu.limit
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.container.cpu.request
  type: metric
  brief: CPU resource requested for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.cpu.request
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.container.memory.limit
  type: metric
  brief: Maximum memory resource limit set for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.memory.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.memory.request
  type: metric
  brief: Memory resource requested for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.memory.request
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.storage.limit
  type: metric
  brief: Maximum storage resource limit set for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.storage.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.storage.request
  type: metric
  brief: Storage resource requested for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.storage.request
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.ephemeral_storage.limit
  type: metric
  brief: Maximum ephemeral storage resource limit set for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.ephemeral_storage.limit
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.ephemeral_storage.request
  type: metric
  brief: Ephemeral storage resource requested for the container.
  note: |
    See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#resourcerequirements-v1-core for details.
  stability: development
  metric_name: k8s.container.ephemeral_storage.request
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.restart.count
  type: metric
  brief: Describes how many times the container has restarted (since the last counter reset).
  note: |
    This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0
    at any time depending on how your kubelet is configured to prune dead containers.
    It is best to not depend too much on the exact value but rather look at it as
    either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case
    you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
  stability: development
  metric_name: k8s.container.restart.count
  instrument: updowncounter
  unit: '{restart}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.ready
  type: metric
  brief: |
    Indicates whether the container is currently marked as ready to accept traffic, based on its readiness probe (1 = ready, 0 = not ready).
  note: |
    This metric SHOULD reflect the value of the `ready` field in the
    [K8s ContainerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatus-v1-core).
  stability: development
  metric_name: k8s.container.ready
  instrument: updowncounter
  unit: '{container}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.container.cpu.limit_utilization
  type: metric
  brief: The ratio of container CPU usage to its CPU limit.
  note: |
    The value range is [0.0,1.0]. A value of 1.0 means the container is using 100% of its CPU limit. If the CPU limit is not set, this metric SHOULD NOT be emitted for that container.
  stability: development
  metric_name: k8s.container.cpu.limit_utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.container.cpu.request_utilization
  type: metric
  brief: The ratio of container CPU usage to its CPU request.
  stability: development
  metric_name: k8s.container.cpu.request_utilization
  instrument: gauge
  unit: '1'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.container
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.resourcequota.cpu.limit.hard
  type: metric
  brief: |
    The CPU limits in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.cpu.limit.hard
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.resourcequota.cpu.limit.used
  type: metric
  brief: |
    The CPU limits in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.cpu.limit.used
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.resourcequota.cpu.request.hard
  type: metric
  brief: |
    The CPU requests in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.cpu.request.hard
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.resourcequota.cpu.request.used
  type: metric
  brief: |
    The CPU requests in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.cpu.request.used
  instrument: updowncounter
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.k8s.resourcequota.memory.limit.hard
  type: metric
  brief: |
    The memory limits in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.memory.limit.hard
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.memory.limit.used
  type: metric
  brief: |
    The memory limits in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.memory.limit.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.memory.request.hard
  type: metric
  brief: |
    The memory requests in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.memory.request.hard
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.memory.request.used
  type: metric
  brief: |
    The memory requests in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.memory.request.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.hugepage_count.request.hard
  type: metric
  brief: |
    The huge page requests in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  attributes:
  - name: k8s.hugepage.size
    type: string
    brief: |
      The size (identifier) of the K8s huge page.
    examples:
    - 2Mi
    requirement_level: required
    stability: development
  metric_name: k8s.resourcequota.hugepage_count.request.hard
  instrument: updowncounter
  unit: '{hugepage}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.hugepage.size:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.hugepage_count.request.used
  type: metric
  brief: |
    The huge page requests in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  attributes:
  - name: k8s.hugepage.size
    type: string
    brief: |
      The size (identifier) of the K8s huge page.
    examples:
    - 2Mi
    requirement_level: required
    stability: development
  metric_name: k8s.resourcequota.hugepage_count.request.used
  instrument: updowncounter
  unit: '{hugepage}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.hugepage.size:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.storage.request.hard
  type: metric
  brief: |
    The storage requests in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).

    The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
    storage class.
  stability: development
  attributes:
  - name: k8s.storageclass.name
    type: string
    brief: |
      The name of K8s [StorageClass](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io) object.
    examples:
    - gold.storageclass.storage.k8s.io
    requirement_level:
      conditionally_required: |
        The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
        storage class.
    stability: development
  metric_name: k8s.resourcequota.storage.request.hard
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.storageclass.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.storage.request.used
  type: metric
  brief: |
    The storage requests in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).

    The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
    storage class.
  stability: development
  attributes:
  - name: k8s.storageclass.name
    type: string
    brief: |
      The name of K8s [StorageClass](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io) object.
    examples:
    - gold.storageclass.storage.k8s.io
    requirement_level:
      conditionally_required: |
        The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
        storage class.
    stability: development
  metric_name: k8s.resourcequota.storage.request.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.storageclass.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.persistentvolumeclaim_count.hard
  type: metric
  brief: |
    The total number of PersistentVolumeClaims that can exist in the namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).

    The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
    storage class.
  stability: development
  attributes:
  - name: k8s.storageclass.name
    type: string
    brief: |
      The name of K8s [StorageClass](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io) object.
    examples:
    - gold.storageclass.storage.k8s.io
    requirement_level:
      conditionally_required: |
        The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
        storage class.
    stability: development
  metric_name: k8s.resourcequota.persistentvolumeclaim_count.hard
  instrument: updowncounter
  unit: '{persistentvolumeclaim}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.storageclass.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.persistentvolumeclaim_count.used
  type: metric
  brief: |
    The total number of PersistentVolumeClaims that can exist in the namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).

    The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
    storage class.
  stability: development
  attributes:
  - name: k8s.storageclass.name
    type: string
    brief: |
      The name of K8s [StorageClass](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io) object.
    examples:
    - gold.storageclass.storage.k8s.io
    requirement_level:
      conditionally_required: |
        The `k8s.storageclass.name` should be required when a resource quota is defined for a specific
        storage class.
    stability: development
  metric_name: k8s.resourcequota.persistentvolumeclaim_count.used
  instrument: updowncounter
  unit: '{persistentvolumeclaim}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.storageclass.name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.ephemeral_storage.request.hard
  type: metric
  brief: |
    The sum of local ephemeral storage requests in the namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.ephemeral_storage.request.hard
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.ephemeral_storage.request.used
  type: metric
  brief: |
    The sum of local ephemeral storage requests in the namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.ephemeral_storage.request.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.ephemeral_storage.limit.hard
  type: metric
  brief: |
    The sum of local ephemeral storage limits in the namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.ephemeral_storage.limit.hard
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.ephemeral_storage.limit.used
  type: metric
  brief: |
    The sum of local ephemeral storage limits in the namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  metric_name: k8s.resourcequota.ephemeral_storage.limit.used
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.object_count.hard
  type: metric
  brief: |
    The object count limits in a specific namespace.
    The value represents the configured quota limit of the resource in the namespace.
  note: |
    This metric is retrieved from the `hard` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  attributes:
  - name: k8s.resourcequota.resource_name
    type: string
    brief: |
      The name of the K8s resource a resource quota defines.
    examples:
    - count/replicationcontrollers
    requirement_level: required
    note: |
      The value for this attribute can be either the full `count/<resource>[.<group>]` string (e.g., count/deployments.apps, count/pods), or, for certain core Kubernetes resources, just the resource name (e.g., pods, services, configmaps). Both forms are supported by Kubernetes for object count quotas. See [Kubernetes Resource Quotas documentation](https://kubernetes.io/docs/concepts/policy/resource-quotas/#object-count-quota) for more details.
    stability: development
  metric_name: k8s.resourcequota.object_count.hard
  instrument: updowncounter
  unit: '{object}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.resourcequota.resource_name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.k8s.resourcequota.object_count.used
  type: metric
  brief: |
    The object count limits in a specific namespace.
    The value represents the current observed total usage of the resource in the namespace.
  note: |
    This metric is retrieved from the `used` field of the
    [K8s ResourceQuotaStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#resourcequotastatus-v1-core).
  stability: development
  attributes:
  - name: k8s.resourcequota.resource_name
    type: string
    brief: |
      The name of the K8s resource a resource quota defines.
    examples:
    - count/replicationcontrollers
    requirement_level: required
    note: |
      The value for this attribute can be either the full `count/<resource>[.<group>]` string (e.g., count/deployments.apps, count/pods), or, for certain core Kubernetes resources, just the resource name (e.g., pods, services, configmaps). Both forms are supported by Kubernetes for object count quotas. See [Kubernetes Resource Quotas documentation](https://kubernetes.io/docs/concepts/policy/resource-quotas/#object-count-quota) for more details.
    stability: development
  metric_name: k8s.resourcequota.object_count.used
  instrument: updowncounter
  unit: '{object}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/k8s/metrics.yaml
    attributes:
      k8s.resourcequota.resource_name:
        source_group: registry.k8s
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  entity_associations:
  - k8s.resourcequota
  annotations:
    code_generation:
      metric_value_type: int
- id: network-core
  type: attribute_group
  brief: |
    These attributes may be used for any network related operation.
  attributes:
  - name: network.local.address
    type: string
    brief: Local address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.local.port
    type: int
    brief: Local port number of the network connection.
    examples:
    - 65123
    requirement_level: recommended
    stability: stable
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level: recommended
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - amqp
    - http
    - mqtt
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.1'
    - '2'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: recommended
    note: |
      The value SHOULD be normalized to lowercase.

      Consider always setting the transport when setting a port number, since
      a port number is ambiguous without knowing the transport. For example
      different processes could be listening on TCP port 12345 and UDP port 12345.
    stability: stable
  - name: network.type
    type:
      members:
      - id: ipv4
        value: ipv4
        brief: IPv4
        stability: stable
      - id: ipv6
        value: ipv6
        brief: IPv6
        stability: stable
    brief: '[OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.'
    examples:
    - ipv4
    - ipv6
    requirement_level: recommended
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/network/common.yaml
    attributes:
      network.local.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.local.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: network-connection-and-carrier
  type: attribute_group
  brief: |
    These attributes may be used for any network related operation.
  attributes:
  - name: network.carrier.icc
    type: string
    brief: The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.
    examples: DE
    requirement_level: recommended
    stability: development
  - name: network.carrier.mcc
    type: string
    brief: The mobile carrier country code.
    examples: '310'
    requirement_level: recommended
    stability: development
  - name: network.carrier.mnc
    type: string
    brief: The mobile carrier network code.
    examples: '001'
    requirement_level: recommended
    stability: development
  - name: network.carrier.name
    type: string
    brief: The name of the mobile carrier.
    examples: sprint
    requirement_level: recommended
    stability: development
  - name: network.connection.subtype
    type:
      members:
      - id: gprs
        value: gprs
        brief: GPRS
        stability: development
      - id: edge
        value: edge
        brief: EDGE
        stability: development
      - id: umts
        value: umts
        brief: UMTS
        stability: development
      - id: cdma
        value: cdma
        brief: CDMA
        stability: development
      - id: evdo_0
        value: evdo_0
        brief: EVDO Rel. 0
        stability: development
      - id: evdo_a
        value: evdo_a
        brief: EVDO Rev. A
        stability: development
      - id: cdma2000_1xrtt
        value: cdma2000_1xrtt
        brief: CDMA2000 1XRTT
        stability: development
      - id: hsdpa
        value: hsdpa
        brief: HSDPA
        stability: development
      - id: hsupa
        value: hsupa
        brief: HSUPA
        stability: development
      - id: hspa
        value: hspa
        brief: HSPA
        stability: development
      - id: iden
        value: iden
        brief: IDEN
        stability: development
      - id: evdo_b
        value: evdo_b
        brief: EVDO Rev. B
        stability: development
      - id: lte
        value: lte
        brief: LTE
        stability: development
      - id: ehrpd
        value: ehrpd
        brief: EHRPD
        stability: development
      - id: hspap
        value: hspap
        brief: HSPAP
        stability: development
      - id: gsm
        value: gsm
        brief: GSM
        stability: development
      - id: td_scdma
        value: td_scdma
        brief: TD-SCDMA
        stability: development
      - id: iwlan
        value: iwlan
        brief: IWLAN
        stability: development
      - id: nr
        value: nr
        brief: 5G NR (New Radio)
        stability: development
      - id: nrnsa
        value: nrnsa
        brief: 5G NRNSA (New Radio Non-Standalone)
        stability: development
      - id: lte_ca
        value: lte_ca
        brief: LTE CA
        stability: development
    brief: This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
    examples: LTE
    requirement_level: recommended
    stability: development
  - name: network.connection.type
    type:
      members:
      - id: wifi
        value: wifi
        stability: development
      - id: wired
        value: wired
        stability: development
      - id: cell
        value: cell
        stability: development
      - id: unavailable
        value: unavailable
        stability: development
      - id: unknown
        value: unknown
        stability: development
    brief: The internet connection type.
    examples: wifi
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/network/common.yaml
    attributes:
      network.carrier.icc:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.carrier.mcc:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.carrier.mnc:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.carrier.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.connection.subtype:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.connection.type:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.network.deprecated
  type: attribute_group
  brief: |
    These attributes may be used for any network related operation.
  attributes:
  - name: net.sock.peer.name
    type: string
    brief: Deprecated, no replacement at this time.
    examples:
    - /var/my.sock
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed. No replacement at this time.
  - name: net.sock.peer.addr
    type: string
    brief: Deprecated, use `network.peer.address`.
    examples:
    - 192.168.0.1
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.peer.address
      note: Replaced by `network.peer.address`.
  - name: net.sock.peer.port
    type: int
    brief: Deprecated, use `network.peer.port`.
    examples:
    - 65531
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.peer.port
      note: Replaced by `network.peer.port`.
  - name: net.peer.name
    type: string
    brief: Deprecated, use `server.address` on client spans and `client.address` on server spans.
    examples:
    - example.com
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Replaced by `server.address` on client spans and `client.address` on server spans.
  - name: net.peer.port
    type: int
    brief: Deprecated, use `server.port` on client spans and `client.port` on server spans.
    examples:
    - 8080
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Replaced by `server.port` on client spans and `client.port` on server spans.
  - name: net.peer.ip
    type: string
    brief: Deprecated, use `network.peer.address`.
    examples: 127.0.0.1
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.peer.address
      note: Replaced by `network.peer.address`.
  - name: net.host.name
    type: string
    brief: Deprecated, use `server.address`.
    examples:
    - example.com
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: server.address
      note: Replaced by `server.address`.
  - name: net.host.ip
    type: string
    brief: Deprecated, use `network.local.address`.
    examples: 192.168.0.1
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.local.address
      note: Replaced by `network.local.address`.
  - name: net.host.port
    type: int
    brief: Deprecated, use `server.port`.
    examples:
    - 8080
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: server.port
      note: Replaced by `server.port`.
  - name: net.sock.host.addr
    type: string
    brief: Deprecated, use `network.local.address`.
    examples:
    - /var/my.sock
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.local.address
      note: Replaced by `network.local.address`.
  - name: net.sock.host.port
    type: int
    brief: Deprecated, use `network.local.port`.
    examples:
    - 8080
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.local.port
      note: Replaced by `network.local.port`.
  - name: net.transport
    type:
      members:
      - id: ip_tcp
        value: ip_tcp
        stability: development
      - id: ip_udp
        value: ip_udp
        stability: development
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: development
      - id: inproc
        value: inproc
        brief: In-process communication.
        note: |
          Signals that there is only in-process communication not using a "real" network protocol in cases where network attributes would normally be expected. Usually all other network attributes can be left out in that case.
        stability: development
      - id: other
        value: other
        brief: Something else (non IP-based).
        stability: development
    brief: Deprecated, use `network.transport`.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.transport
      note: Replaced by `network.transport`.
  - name: net.protocol.name
    type: string
    brief: Deprecated, use `network.protocol.name`.
    examples:
    - amqp
    - http
    - mqtt
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.protocol.name
      note: Replaced by `network.protocol.name`.
  - name: net.protocol.version
    type: string
    brief: Deprecated, use `network.protocol.version`.
    examples: 3.1.1
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: network.protocol.version
      note: Replaced by `network.protocol.version`.
  - name: net.sock.family
    type:
      members:
      - id: inet
        value: inet
        brief: IPv4 address
        stability: development
      - id: inet6
        value: inet6
        brief: IPv6 address
        stability: development
      - id: unix
        value: unix
        brief: Unix domain socket path
        stability: development
    brief: Deprecated, use `network.transport` and `network.type`.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Split to `network.transport` and `network.type`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/network/deprecated/registry-deprecated.yaml
  display_name: Deprecated Network Attributes
- id: registry.ios.deprecated
  type: attribute_group
  brief: |
    The iOS platform on which the iOS application is running.
  attributes:
  - name: ios.state
    type:
      members:
      - id: active
        value: active
        brief: |
          The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.
        stability: development
      - id: inactive
        value: inactive
        brief: |
          The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.
        stability: development
      - id: background
        value: background
        brief: |
          The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.
        stability: development
      - id: foreground
        value: foreground
        brief: |
          The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.
        stability: development
      - id: terminate
        value: terminate
        brief: |
          The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.
        stability: development
    brief: |
      Deprecated. Use the `ios.app.state` attribute.
    requirement_level: recommended
    note: |
      The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate), and from which the `OS terminology` column values are derived.
    stability: development
    deprecated:
      reason: renamed
      renamed_to: ios.app.state
      note: Replaced by `ios.app.state`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/ios/deprecated/registry-deprecated.yaml
  display_name: Deprecated iOS Attributes
- id: registry.file
  type: attribute_group
  brief: Describes file attributes.
  attributes:
  - name: file.accessed
    type: string
    brief: |
      Time when the file was last accessed, in ISO 8601 format.
    examples:
    - 2021-01-01T12:00:00Z
    requirement_level: recommended
    note: |
      This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.
    stability: development
  - name: file.attributes
    type: string[]
    brief: |
      Array of file attributes.
    examples:
    - - readonly
      - hidden
    requirement_level: recommended
    note: |
      Attributes names depend on the OS or file system. Here’s a non-exhaustive list of values expected for this attribute: `archive`, `compressed`, `directory`, `encrypted`, `execute`, `hidden`, `immutable`, `journaled`, `read`, `readonly`, `symbolic link`, `system`, `temporary`, `write`.
    stability: development
  - name: file.created
    type: string
    brief: |
      Time when the file was created, in ISO 8601 format.
    examples:
    - 2021-01-01T12:00:00Z
    requirement_level: recommended
    note: |
      This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.
    stability: development
  - name: file.changed
    type: string
    brief: |
      Time when the file attributes or metadata was last changed, in ISO 8601 format.
    examples:
    - 2021-01-01T12:00:00Z
    requirement_level: recommended
    note: |
      `file.changed` captures the time when any of the file's properties or attributes (including the content) are changed, while `file.modified` captures the timestamp when the file content is modified.
    stability: development
  - name: file.directory
    type: string
    brief: |
      Directory where the file is located. It should include the drive letter, when appropriate.
    examples:
    - /home/user
    - C:\Program Files\MyApp
    requirement_level: recommended
    stability: development
  - name: file.extension
    type: string
    brief: |
      File extension, excluding the leading dot.
    examples:
    - png
    - gz
    requirement_level: recommended
    note: |
      When the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
    stability: development
  - name: file.fork_name
    type: string
    brief: |
      Name of the fork. A fork is additional data associated with a filesystem object.
    examples:
    - Zone.Identifier
    requirement_level: recommended
    note: |
      On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
      On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: C:\path\to\filename.extension:some_fork_name, and some_fork_name is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.
    stability: development
  - name: file.group.id
    type: string
    brief: |
      Primary Group ID (GID) of the file.
    examples:
    - '1000'
    requirement_level: recommended
    stability: development
  - name: file.group.name
    type: string
    brief: |
      Primary group name of the file.
    examples:
    - users
    requirement_level: recommended
    stability: development
  - name: file.inode
    type: string
    brief: |
      Inode representing the file in the filesystem.
    examples:
    - '256383'
    requirement_level: recommended
    stability: development
  - name: file.mode
    type: string
    brief: |
      Mode of the file in octal representation.
    examples:
    - '0640'
    requirement_level: recommended
    stability: development
  - name: file.modified
    type: string
    brief: |
      Time when the file content was last modified, in ISO 8601 format.
    examples:
    - 2021-01-01T12:00:00Z
    requirement_level: recommended
    stability: development
  - name: file.name
    type: string
    brief: |
      Name of the file including the extension, without the directory.
    examples:
    - example.png
    requirement_level: recommended
    stability: development
  - name: file.owner.id
    type: string
    brief: |
      The user ID (UID) or security identifier (SID) of the file owner.
    examples:
    - '1000'
    requirement_level: recommended
    stability: development
  - name: file.owner.name
    type: string
    brief: |
      Username of the file owner.
    examples:
    - root
    requirement_level: recommended
    stability: development
  - name: file.path
    type: string
    brief: |
      Full path to the file, including the file name. It should include the drive letter, when appropriate.
    examples:
    - /home/alice/example.png
    - C:\Program Files\MyApp\myapp.exe
    requirement_level: recommended
    stability: development
  - name: file.size
    type: int
    brief: |
      File size in bytes.
    requirement_level: recommended
    stability: development
  - name: file.symbolic_link.target_path
    type: string
    brief: |
      Path to the target of a symbolic link.
    examples:
    - /usr/bin/python3
    requirement_level: recommended
    note: |
      This attribute is only applicable to symbolic links.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/file/registry.yaml
  display_name: File Attributes
- id: registry.tls.deprecated
  type: attribute_group
  brief: Describes deprecated `tls` attributes.
  attributes:
  - name: tls.client.server_name
    type: string
    brief: Deprecated, use `server.address` instead.
    examples:
    - opentelemetry.io
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: server.address
      note: Replaced by `server.address`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/tls/deprecated/registry-deprecated.yaml
- id: registry.exception
  type: attribute_group
  brief: |
    This document defines the shared attributes used to report a single exception associated with a span or log.
  attributes:
  - name: exception.type
    type: string
    brief: |
      The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
    examples:
    - java.net.ConnectException
    - OSError
    requirement_level: recommended
    stability: stable
  - name: exception.message
    type: string
    brief: The exception message.
    examples:
    - Division by zero
    - Can't convert 'int' object to str implicitly
    requirement_level: recommended
    stability: stable
  - name: exception.stacktrace
    type: string
    brief: |
      A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
    examples: |
      Exception in thread "main" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)
    requirement_level: recommended
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/exceptions/registry.yaml
  display_name: Exception Attributes
- id: event.exception
  type: event
  brief: |
    This event describes a single exception.
  stability: stable
  attributes:
  - name: exception.stacktrace
    type: string
    brief: |
      A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
    examples: |
      Exception in thread "main" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)
    requirement_level: recommended
    stability: stable
  - name: exception.type
    type: string
    brief: |
      The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
    examples:
    - java.net.ConnectException
    - OSError
    requirement_level:
      conditionally_required: Required if `exception.message` is not set, recommended otherwise.
    stability: stable
  - name: exception.message
    type: string
    brief: The exception message.
    examples:
    - Division by zero
    - Can't convert 'int' object to str implicitly
    requirement_level:
      conditionally_required: Required if `exception.type` is not set, recommended otherwise.
    stability: stable
  - name: exception.escaped
    type: boolean
    brief: |
      Indicates that the exception is escaping the scope of the span.
    requirement_level: recommended
    stability: stable
    deprecated:
      reason: obsoleted
      note: |
        It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.
  name: exception
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/exceptions/events.yaml
    attributes:
      exception.escaped:
        source_group: registry.exception.deprecated
        inherited_fields:
        - brief
        - deprecated
        - note
        - requirement_level
        - stability
      exception.message:
        source_group: registry.exception
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      exception.stacktrace:
        source_group: registry.exception
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      exception.type:
        source_group: registry.exception
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.exception.deprecated
  type: attribute_group
  brief: |
    Deprecated exception attributes.
  attributes:
  - name: exception.escaped
    type: boolean
    brief: |
      Indicates that the exception is escaping the scope of the span.
    requirement_level: recommended
    stability: stable
    deprecated:
      reason: obsoleted
      note: |
        It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/exceptions/deprecated/registry-deprecated.yaml
  display_name: Deprecated Exception Attributes
- id: log-exception
  type: attribute_group
  brief: |
    This document defines attributes for exceptions represented using Log Records.
  attributes:
  - name: exception.stacktrace
    type: string
    brief: |
      A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
    examples: |
      Exception in thread "main" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)
    requirement_level: recommended
    stability: stable
  - name: exception.type
    type: string
    brief: |
      The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
    examples:
    - java.net.ConnectException
    - OSError
    requirement_level:
      conditionally_required: Required if `exception.message` is not set, recommended otherwise.
    stability: stable
  - name: exception.message
    type: string
    brief: The exception message.
    examples:
    - Division by zero
    - Can't convert 'int' object to str implicitly
    requirement_level:
      conditionally_required: Required if `exception.type` is not set, recommended otherwise.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/exceptions/logs.yaml
    attributes:
      exception.message:
        source_group: registry.exception
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      exception.stacktrace:
        source_group: registry.exception
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      exception.type:
        source_group: registry.exception
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.url
  type: attribute_group
  brief: Attributes describing URL.
  attributes:
  - name: url.domain
    type: string
    brief: |
      Domain extracted from the `url.full`, such as "opentelemetry.io".
    examples:
    - www.foo.bar
    - opentelemetry.io
    - 3.12.167.2
    - '[1080:0:0:0:8:800:200C:417A]'
    requirement_level: recommended
    note: |
      In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the domain field. If the URL contains a [literal IPv6 address](https://www.rfc-editor.org/rfc/rfc2732#section-2) enclosed by `[` and `]`, the `[` and `]` characters should also be captured in the domain field.
    stability: development
  - name: url.extension
    type: string
    brief: |
      The file extension extracted from the `url.full`, excluding the leading dot.
    examples:
    - png
    - gz
    requirement_level: recommended
    note: |
      The file extension is only set if it exists, as not every url has a file extension. When the file name has multiple extensions `example.tar.gz`, only the last one should be captured `gz`, not `tar.gz`.
    stability: development
  - name: url.fragment
    type: string
    brief: |
      The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component
    examples:
    - SemConv
    requirement_level: recommended
    stability: stable
  - name: url.full
    type: string
    brief: Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)
    examples:
    - https://www.foo.bar/search?q=OpenTelemetry#SemConv
    - //localhost
    requirement_level: recommended
    note: |
      For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment
      is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.

      `url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.
      In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.

      `url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).

      Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the
      value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `https://www.example.com/path?color=blue&sig=REDACTED`.
    stability: stable
  - name: url.original
    type: string
    brief: |
      Unmodified original URL as seen in the event source.
    examples:
    - https://www.foo.bar/search?q=OpenTelemetry#SemConv
    - search?q=OpenTelemetry
    requirement_level: recommended
    note: |
      In network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.
      `url.original` might contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case password and username SHOULD NOT be redacted and attribute's value SHOULD remain the same.
    stability: development
  - name: url.path
    type: string
    brief: |
      The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component
    examples:
    - /search
    requirement_level: recommended
    note: |
      Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.
    stability: stable
  - name: url.port
    type: int
    brief: |
      Port extracted from the `url.full`
    examples:
    - 443
    requirement_level: recommended
    stability: development
  - name: url.query
    type: string
    brief: |
      The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component
    examples:
    - q=OpenTelemetry
    requirement_level: recommended
    note: |
      Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `q=OpenTelemetry&sig=REDACTED`.
    stability: stable
  - name: url.registered_domain
    type: string
    brief: |
      The highest registered url domain, stripped of the subdomain.
    examples:
    - example.com
    - foo.co.uk
    requirement_level: recommended
    note: |
      This value can be determined precisely with the [public suffix list](https://publicsuffix.org/). For example, the registered domain for `foo.example.com` is `example.com`. Trying to approximate this by simply taking the last two labels will not work well for TLDs such as `co.uk`.
    stability: development
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - https
    - ftp
    - telnet
    requirement_level: recommended
    stability: stable
  - name: url.subdomain
    type: string
    brief: |
      The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    examples:
    - east
    - sub2.sub1
    requirement_level: recommended
    note: |
      The subdomain portion of `www.east.mydomain.co.uk` is `east`. If the domain has multiple levels of subdomain, such as `sub2.sub1.example.com`, the subdomain field should contain `sub2.sub1`, with no trailing period.
    stability: development
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level: recommended
    stability: development
  - name: url.top_level_domain
    type: string
    brief: |
      The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is `com`.
    examples:
    - com
    - co.uk
    requirement_level: recommended
    note: |
      This value can be determined precisely with the [public suffix list](https://publicsuffix.org/).
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/url/registry.yaml
  display_name: URL Attributes
- id: metric.messaging.attributes
  type: attribute_group
  brief: Common messaging metrics attributes.
  stability: development
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.messaging.consumer.attributes
  type: attribute_group
  brief: Messaging consumer metrics attributes.
  stability: development
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: messaging.consumer.group.name
    type: string
    brief: |
      The name of the consumer group with which a consumer is associated.
    examples:
    - my-group
    - indexer
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: The name of the destination subscription from which a message is consumed.
    examples:
    - subscription-a
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: metric.messaging.client.operation.duration
  type: metric
  brief: Duration of messaging operation initiated by a producer or consumer client.
  note: |
    This metric SHOULD NOT be used to report processing duration - processing duration is reported in `messaging.process.duration` metric.
  stability: development
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: messaging.consumer.group.name
    type: string
    brief: |
      The name of the consumer group with which a consumer is associated.
    examples:
    - my-group
    - indexer
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: The name of the destination subscription from which a message is consumed.
    examples:
    - subscription-a
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - send
    - receive
    - ack
    requirement_level: required
    stability: development
  - name: messaging.operation.type
    type:
      members:
      - id: create
        value: create
        brief: |
          A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.
        stability: development
      - id: send
        value: send
        brief: |
          One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.
        stability: development
      - id: receive
        value: receive
        brief: |
          One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
        stability: development
      - id: process
        value: process
        brief: |
          One or more messages are processed by a consumer.
        stability: development
      - id: settle
        value: settle
        brief: |
          One or more messages are settled.
        stability: development
      - id: deliver
        value: deliver
        brief: Deprecated. Use `process` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: process
          note: Replaced by `process`.
      - id: publish
        value: publish
        brief: Deprecated. Use `send` instead.
        stability: development
        deprecated:
          reason: renamed
          renamed_to: send
          note: Replaced by `send`.
    brief: |
      A string identifying the type of the messaging operation.
    requirement_level:
      conditionally_required: If applicable.
    note: If a custom value is used, it MUST be of low cardinality.
    stability: development
  metric_name: messaging.client.operation.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.type:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.messaging.process.duration
  type: metric
  brief: Duration of processing operation.
  note: |
    This metric MUST be reported for operations with `messaging.operation.type` that matches `process`.
  stability: development
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: messaging.consumer.group.name
    type: string
    brief: |
      The name of the consumer group with which a consumer is associated.
    examples:
    - my-group
    - indexer
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: The name of the destination subscription from which a message is consumed.
    examples:
    - subscription-a
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - process
    - consume
    - handle
    requirement_level: required
    stability: development
  metric_name: messaging.process.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.messaging.client.sent.messages
  type: metric
  brief: Number of messages producer attempted to send to the broker.
  note: |
    This metric MUST NOT count messages that were created but haven't yet been sent.
  stability: development
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - send
    - schedule
    - enqueue
    requirement_level: required
    stability: development
  metric_name: messaging.client.sent.messages
  instrument: counter
  unit: '{message}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.messaging.client.consumed.messages
  type: metric
  brief: Number of messages that were delivered to the application.
  note: |
    Records the number of messages pulled from the broker or number of messages dispatched to the application in push-based scenarios.
    The metric SHOULD be reported once per message delivery. For example, if receiving and processing operations are both instrumented for a single message delivery, this counter is incremented when the message is received and not reported when it is processed.
  stability: development
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  - name: messaging.consumer.group.name
    type: string
    brief: |
      The name of the consumer group with which a consumer is associated.
    examples:
    - my-group
    - indexer
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.destination.subscription.name
    type: string
    brief: The name of the destination subscription from which a message is consumed.
    examples:
    - subscription-a
    requirement_level:
      conditionally_required: if applicable.
    note: |
      Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - receive
    - peek
    - poll
    - consume
    requirement_level: required
    stability: development
  metric_name: messaging.client.consumed.messages
  instrument: counter
  unit: '{message}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.consumer.group.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.subscription.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: attributes.messaging.common.minimal
  type: attribute_group
  brief: Common cross-signal messaging attributes.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/common.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: registry.messaging.deprecated
  type: attribute_group
  brief: Describes deprecated messaging attributes.
  stability: development
  attributes:
  - name: messaging.kafka.destination.partition
    type: int
    brief: |
      Deprecated, use `messaging.destination.partition.id` instead.
    examples: 2
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: Record string representation of the partition id in `messaging.destination.partition.id` attribute.
  - name: messaging.operation
    type: string
    brief: |
      Deprecated, use `messaging.operation.type` instead.
    examples:
    - publish
    - create
    - process
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: messaging.operation.type
      note: Replaced by `messaging.operation.type`.
  - name: messaging.client_id
    type: string
    brief: |
      Deprecated, use `messaging.client.id` instead.
    examples:
    - client-5
    - myhost@8742@s8083jm
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: messaging.client.id
      note: Replaced by `messaging.client.id`.
    annotations:
      code_generation:
        exclude: true
  - name: messaging.kafka.consumer.group
    type: string
    brief: |
      Deprecated, use `messaging.consumer.group.name` instead.
    examples: my-group
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: messaging.consumer.group.name
      note: Replaced by `messaging.consumer.group.name`.
  - name: messaging.rocketmq.client_group
    type: string
    brief: |
      Deprecated, use `messaging.consumer.group.name` instead.
    examples: myConsumerGroup
    requirement_level: recommended
    stability: development
    deprecated:
      reason: uncategorized
      note: |
        Replaced by `messaging.consumer.group.name` on the consumer spans. No replacement for producer spans.
  - name: messaging.eventhubs.consumer.group
    type: string
    brief: |
      Deprecated, use `messaging.consumer.group.name` instead.
    examples: $Default
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: messaging.consumer.group.name
      note: Replaced by `messaging.consumer.group.name`.
  - name: messaging.servicebus.destination.subscription_name
    type: string
    brief: |
      Deprecated, use `messaging.destination.subscription.name` instead.
    examples: subscription-a
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: messaging.destination.subscription.name
      note: Replaced by `messaging.destination.subscription.name`.
  - name: messaging.kafka.message.offset
    type: int
    brief: |
      Deprecated, use `messaging.kafka.offset` instead.
    examples: 42
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: messaging.kafka.offset
      note: Replaced by `messaging.kafka.offset`.
  - name: messaging.destination_publish.anonymous
    type: boolean
    brief: Deprecated, no replacement at this time.
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed. No replacement at this time.
  - name: messaging.destination_publish.name
    type: string
    brief: Deprecated, no replacement at this time.
    examples:
    - MyQueue
    - MyTopic
    requirement_level: recommended
    stability: development
    deprecated:
      reason: obsoleted
      note: Removed. No replacement at this time.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/registry-deprecated.yaml
  display_name: Deprecated Messaging Attributes
- id: metric.messaging.publish.duration
  type: metric
  brief: Deprecated. Use `messaging.client.operation.duration` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: messaging.client.operation.duration
    note: Replaced by `messaging.client.operation.duration`.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  metric_name: messaging.publish.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/metrics-deprecated.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.messaging.receive.duration
  type: metric
  brief: Deprecated. Use `messaging.client.operation.duration` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: messaging.client.operation.duration
    note: Replaced by `messaging.client.operation.duration`.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  metric_name: messaging.receive.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/metrics-deprecated.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.messaging.process.messages
  type: metric
  brief: Deprecated. Use `messaging.client.consumed.messages` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: messaging.client.consumed.messages
    note: Replaced by `messaging.client.consumed.messages`.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  metric_name: messaging.process.messages
  instrument: counter
  unit: '{message}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/metrics-deprecated.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.messaging.publish.messages
  type: metric
  brief: Deprecated. Use `messaging.client.sent.messages` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: messaging.client.sent.messages
    note: Replaced by `messaging.client.sent.messages`.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  metric_name: messaging.publish.messages
  instrument: counter
  unit: '{message}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/metrics-deprecated.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.messaging.receive.messages
  type: metric
  brief: Deprecated. Use `messaging.client.consumed.messages` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: messaging.client.consumed.messages
    note: Replaced by `messaging.client.consumed.messages`.
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  metric_name: messaging.receive.messages
  instrument: counter
  unit: '{message}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/metrics-deprecated.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.messaging.client.published.messages
  type: metric
  brief: Deprecated. Use `messaging.client.sent.messages` instead.
  stability: development
  deprecated:
    reason: renamed
    renamed_to: messaging.client.sent.messages
    note: Replaced by `messaging.client.sent.messages`.
  attributes:
  - name: messaging.destination.partition.id
    type: string
    brief: |
      The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
    examples: '1'
    requirement_level: recommended
    stability: development
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - amqp:decode-error
    - KAFKA_STORAGE_ERROR
    - channel-error
    requirement_level:
      conditionally_required: If and only if the messaging operation has failed.
    note: |
      The `error.type` SHOULD be predictable, and SHOULD have low cardinality.

      When `error.type` is set to a type (e.g., an exception type), its
      canonical class name identifying the type within the artifact SHOULD be used.

      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low.
      Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time when no
      additional filters are applied.

      If the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.

      If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
      it's RECOMMENDED to:

      - Use a domain-specific attribute
      - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: recommended
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: messaging.destination.name
    type: string
    brief: The message destination name
    examples:
    - MyQueue
    - MyTopic
    requirement_level:
      conditionally_required: if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated.
    note: |
      Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.
    stability: development
  - name: messaging.destination.template
    type: string
    brief: Low cardinality representation of the messaging destination name
    examples:
    - /customers/{customerId}
    requirement_level:
      conditionally_required: if available.
    note: |
      Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    stability: development
  - name: messaging.operation.name
    type: string
    brief: |
      The system-specific name of the messaging operation.
    examples:
    - ack
    - nack
    - send
    requirement_level: required
    stability: development
  - name: messaging.system
    type:
      members:
      - id: activemq
        value: activemq
        brief: Apache ActiveMQ
        stability: development
      - id: aws.sns
        value: aws.sns
        brief: Amazon Simple Notification Service (SNS)
        stability: development
      - id: aws_sqs
        value: aws_sqs
        brief: Amazon Simple Queue Service (SQS)
        stability: development
      - id: eventgrid
        value: eventgrid
        brief: Azure Event Grid
        stability: development
      - id: eventhubs
        value: eventhubs
        brief: Azure Event Hubs
        stability: development
      - id: servicebus
        value: servicebus
        brief: Azure Service Bus
        stability: development
      - id: gcp_pubsub
        value: gcp_pubsub
        brief: Google Cloud Pub/Sub
        stability: development
      - id: jms
        value: jms
        brief: Java Message Service
        stability: development
      - id: kafka
        value: kafka
        brief: Apache Kafka
        stability: development
      - id: rabbitmq
        value: rabbitmq
        brief: RabbitMQ
        stability: development
      - id: rocketmq
        value: rocketmq
        brief: Apache RocketMQ
        stability: development
      - id: pulsar
        value: pulsar
        brief: Apache Pulsar
        stability: development
    brief: The messaging system as identified by the client instrumentation.
    requirement_level: required
    note: |
      The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level:
      conditionally_required: If available.
    note: |
      Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    stability: stable
  metric_name: messaging.client.published.messages
  instrument: counter
  unit: '{message}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/messaging/deprecated/metrics-deprecated.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      messaging.destination.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.destination.partition.id:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      messaging.destination.template:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.operation.name:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      messaging.system:
        source_group: registry.messaging
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.http
  type: attribute_group
  brief: This document defines semantic convention attributes in the HTTP namespace.
  attributes:
  - name: http.request.body.size
    type: int
    brief: |
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
    examples: 3495
    requirement_level: recommended
    stability: development
  - name: http.request.header
    type: template[string[]]
    brief: |
      HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
    examples:
    - - application/json
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: recommended
    note: |
      Instrumentations SHOULD require an explicit configuration of which headers are to be captured.
      Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.

      The `User-Agent` header is already captured in the `user_agent.original` attribute.
      Users MAY explicitly configure instrumentations to capture them even though it is not recommended.

      The attribute value MUST consist of either multiple header values as an array of strings
      or a single-item array containing a possibly comma-concatenated string, depending on the way
      the HTTP library provides access to headers.

      Examples:

      - A header `Content-Type: application/json` SHOULD be recorded as the `http.request.header.content-type`
        attribute with value `["application/json"]`.
      - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` SHOULD be recorded as the `http.request.header.x-forwarded-for`
        attribute with value `["1.2.3.4", "1.2.3.5"]` or `["1.2.3.4, 1.2.3.5"]` depending on the HTTP library.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: recommended
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.request.method_original
    type: string
    brief: Original HTTP method sent by the client in the request line.
    examples:
    - GeT
    - ACL
    - foo
    requirement_level: recommended
    stability: stable
  - name: http.request.resend_count
    type: int
    brief: |
      The ordinal number of request resending attempt (for any reason, including redirects).
    examples: 3
    requirement_level: recommended
    note: |
      The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).
    stability: stable
  - name: http.request.size
    type: int
    brief: |
      The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.
    examples: 1437
    requirement_level: recommended
    stability: development
  - name: http.response.body.size
    type: int
    brief: |
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
    examples: 3495
    requirement_level: recommended
    stability: development
  - name: http.response.header
    type: template[string[]]
    brief: |
      HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
    examples:
    - - application/json
    - - abc
      - def
    requirement_level: recommended
    note: |
      Instrumentations SHOULD require an explicit configuration of which headers are to be captured.
      Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.

      Users MAY explicitly configure instrumentations to capture them even though it is not recommended.

      The attribute value MUST consist of either multiple header values as an array of strings
      or a single-item array containing a possibly comma-concatenated string, depending on the way
      the HTTP library provides access to headers.

      Examples:

      - A header `Content-Type: application/json` header SHOULD be recorded as the `http.request.response.content-type`
        attribute with value `["application/json"]`.
      - A header `My-custom-header: abc, def` header SHOULD be recorded as the `http.response.header.my-custom-header`
        attribute with value `["abc", "def"]` or `["abc, def"]` depending on the HTTP library.
    stability: stable
  - name: http.response.size
    type: int
    brief: |
      The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.
    examples: 1437
    requirement_level: recommended
    stability: development
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level: recommended
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level: recommended
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: http.connection.state
    type:
      members:
      - id: active
        value: active
        brief: active state.
        stability: development
      - id: idle
        value: idle
        brief: idle state.
        stability: development
    brief: State of the HTTP connection in the HTTP connection pool.
    examples:
    - active
    - idle
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/registry.yaml
  display_name: HTTP Attributes
- id: metric_attributes.http.server
  type: attribute_group
  brief: HTTP server attributes
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: If and only if it's available
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    note: |
      The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.
    stability: stable
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: opt_in
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      user_agent.synthetic.type:
        source_group: registry.user_agent.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: metric_attributes.http.client
  type: attribute_group
  brief: HTTP client attributes
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level: opt_in
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
- id: metric_attributes.http.client.experimental
  type: attribute_group
  brief: HTTP client experimental attributes
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level:
      conditionally_required: If available.
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
- id: metric.http.server.request.duration
  type: metric
  brief: Duration of HTTP server requests.
  stability: stable
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: If and only if it's available
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    note: |
      The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.
    stability: stable
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: opt_in
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  metric_name: http.server.request.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      user_agent.synthetic.type:
        source_group: registry.user_agent.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.http.server.active_requests
  type: metric
  brief: Number of active HTTP server requests.
  stability: development
  attributes:
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    stability: stable
  metric_name: http.server.active_requests
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.http.server.request.body.size
  type: metric
  brief: Size of HTTP server request bodies.
  note: |
    The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: If and only if it's available
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    note: |
      The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.
    stability: stable
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: opt_in
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  metric_name: http.server.request.body.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      user_agent.synthetic.type:
        source_group: registry.user_agent.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.http.server.response.body.size
  type: metric
  brief: Size of HTTP server response bodies.
  note: |
    The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: If and only if it's available
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: opt_in
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
      > **Warning**
      > Since this attribute is based on HTTP headers, opting in to it may allow an attacker
      > to trigger cardinality limits, degrading the usefulness of the metric.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    note: |
      The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.
    stability: stable
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: opt_in
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  metric_name: http.server.response.body.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      user_agent.synthetic.type:
        source_group: registry.user_agent.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.http.client.request.duration
  type: metric
  brief: Duration of HTTP client requests.
  stability: stable
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level: opt_in
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  metric_name: http.client.request.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.http.client.request.body.size
  type: metric
  brief: Size of HTTP client request bodies.
  note: |
    The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level:
      conditionally_required: If available.
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  metric_name: http.client.request.body.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.http.client.response.body.size
  type: metric
  brief: Size of HTTP client response bodies.
  note: |
    The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
  stability: development
  attributes:
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level:
      conditionally_required: If available.
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  metric_name: http.client.response.body.size
  instrument: histogram
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.http.client.open_connections
  type: metric
  brief: Number of outbound HTTP connections that are currently active or idle on the client.
  stability: development
  attributes:
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.1'
    - '2'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: http.connection.state
    type:
      members:
      - id: active
        value: active
        brief: active state.
        stability: development
      - id: idle
        value: idle
        brief: idle state.
        stability: development
    brief: State of the HTTP connection in the HTTP connection pool.
    examples:
    - active
    - idle
    requirement_level: required
    stability: development
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: http.client.open_connections
  instrument: updowncounter
  unit: '{connection}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      http.connection.state:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.http.client.connection.duration
  type: metric
  brief: The duration of the successfully established outbound HTTP connections.
  stability: development
  attributes:
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.1'
    - '2'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.
    stability: stable
  metric_name: http.client.connection.duration
  instrument: histogram
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.http.client.active_requests
  type: metric
  brief: Number of active HTTP requests.
  stability: development
  attributes:
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: recommended
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level:
      conditionally_required: If available.
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  metric_name: http.client.active_requests
  instrument: updowncounter
  unit: '{request}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/metrics.yaml
    attributes:
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: int
- id: span.http.client
  type: span
  brief: |
    This span represents an outbound HTTP request.
  note: |
    There are two ways HTTP client spans can be implemented in an instrumentation:

    1. Instrumentations SHOULD create an HTTP span for each attempt to send an HTTP request over the wire.
       In case the request is resent, the resend attempts MUST follow the [HTTP resend spec](#http-request-retries-and-redirects).
       In this case, instrumentations SHOULD NOT (also) emit a logical encompassing HTTP client span.

    2. If for some reason it is not possible to emit a span for each send attempt (because e.g. the instrumented library does not expose hooks that would allow this),
       instrumentations MAY create an HTTP span for the top-most operation of the HTTP client.
       In this case, the `url.full` MUST be the absolute URL that was originally requested, before any HTTP-redirects that may happen when executing the request.

    **Span name:** refer to the [Span Name](/docs/http/http-spans.md#name) section.

    **Span kind** MUST be `CLIENT`.

    **Span status:** refer to the [Span Status](/docs/http/http-spans.md#status) section.
  stability: stable
  attributes:
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: opt_in
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: opt_in
    stability: stable
  - name: url.template
    type: string
    brief: |
      The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
    examples:
    - /users/{id}
    - /users/:id
    - /users?id={id}
    requirement_level: opt_in
    note: |
      The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.
    stability: development
  - name: http.request.body.size
    type: int
    brief: |
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
    examples: 3495
    requirement_level: opt_in
    stability: development
  - name: http.request.header
    type: template[string[]]
    brief: |
      HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
    examples:
    - - application/json
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which headers are to be captured.
      Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.

      The `User-Agent` header is already captured in the `user_agent.original` attribute.
      Users MAY explicitly configure instrumentations to capture them even though it is not recommended.

      The attribute value MUST consist of either multiple header values as an array of strings
      or a single-item array containing a possibly comma-concatenated string, depending on the way
      the HTTP library provides access to headers.

      Examples:

      - A header `Content-Type: application/json` SHOULD be recorded as the `http.request.header.content-type`
        attribute with value `["application/json"]`.
      - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` SHOULD be recorded as the `http.request.header.x-forwarded-for`
        attribute with value `["1.2.3.4", "1.2.3.5"]` or `["1.2.3.4, 1.2.3.5"]` depending on the HTTP library.
    stability: stable
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    sampling_relevant: true
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.request.method_original
    type: string
    brief: Original HTTP method sent by the client in the request line.
    examples:
    - GeT
    - ACL
    - foo
    requirement_level:
      conditionally_required: If and only if it's different than `http.request.method`.
    stability: stable
  - name: http.request.resend_count
    type: int
    brief: |
      The ordinal number of request resending attempt (for any reason, including redirects).
    examples: 3
    requirement_level:
      recommended: if and only if request was retried.
    note: |
      The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).
    stability: stable
  - name: http.request.size
    type: int
    brief: |
      The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.
    examples: 1437
    requirement_level: opt_in
    stability: development
  - name: http.response.body.size
    type: int
    brief: |
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
    examples: 3495
    requirement_level: opt_in
    stability: development
  - name: http.response.header
    type: template[string[]]
    brief: |
      HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
    examples:
    - - application/json
    - - abc
      - def
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which headers are to be captured.
      Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.

      Users MAY explicitly configure instrumentations to capture them even though it is not recommended.

      The attribute value MUST consist of either multiple header values as an array of strings
      or a single-item array containing a possibly comma-concatenated string, depending on the way
      the HTTP library provides access to headers.

      Examples:

      - A header `Content-Type: application/json` header SHOULD be recorded as the `http.request.response.content-type`
        attribute with value `["application/json"]`.
      - A header `My-custom-header: abc, def` header SHOULD be recorded as the `http.response.header.my-custom-header`
        attribute with value `["abc", "def"]` or `["abc, def"]` depending on the HTTP library.
    stability: stable
  - name: http.response.size
    type: int
    brief: |
      The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.
    examples: 1437
    requirement_level: opt_in
    stability: development
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If `network.peer.address` is set.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: opt_in
    note: |
      Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.
    stability: stable
  - name: server.address
    type: string
    brief: Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: required
    sampling_relevant: true
    note: |
      In HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.address` SHOULD match the host component of the request target.

      In all other cases, `server.address` SHOULD match the host component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: server.port
    type: int
    brief: Server port number.
    examples:
    - 80
    - 8080
    - 443
    requirement_level: required
    sampling_relevant: true
    note: |
      In the case of HTTP/1.1, when the [request target](https://www.rfc-editor.org/rfc/rfc9112.html#name-request-target)
      is passed in its [absolute-form](https://www.rfc-editor.org/rfc/rfc9112.html#section-3.2.2),
      the `server.port` SHOULD match the port component of the request target.

      In all other cases, `server.port` SHOULD match the port component of the
      `Host` header in HTTP/1.1 or the `:authority` pseudo-header in HTTP/2 and HTTP/3.
    stability: stable
  - name: url.full
    type: string
    brief: Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)
    examples:
    - https://www.foo.bar/search?q=OpenTelemetry#SemConv
    - //localhost
    requirement_level: required
    sampling_relevant: true
    note: |
      For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment
      is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.

      `url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`.
      In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.

      `url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed).

      Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the
      value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `https://www.example.com/path?color=blue&sig=REDACTED`.
    stability: stable
  - name: user_agent.original
    type: string
    brief: |
      Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.
    examples:
    - CERN-LineMode/2.15 libwww/2.17b3
    - Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1
    - YourApp/1.0.0 grpc-java-okhttp/1.27.2
    requirement_level: opt_in
    stability: stable
  span_kind: client
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/spans.yaml
    attributes:
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.body.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.request.header:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      http.request.method_original:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.request.resend_count:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.request.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.body.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.header:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
        - sampling_relevant
      url.full:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      url.template:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      user_agent.original:
        source_group: registry.user_agent
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      user_agent.synthetic.type:
        source_group: registry.user_agent.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: span.http.server
  type: span
  brief: |
    This span represents an inbound HTTP request.
  note: |
    **Span name:** refer to the [Span Name](/docs/http/http-spans.md#name) section.

    **Span kind** MUST be `SERVER`.

    **Span status:** refer to the [Span Status](/docs/http/http-spans.md#status) section.
  stability: stable
  attributes:
  - name: network.peer.address
    type: string
    brief: Peer address of the network connection - IP address or Unix domain socket name.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    stability: stable
  - name: error.type
    type:
      members:
      - id: other
        value: _OTHER
        brief: |
          A fallback error value to be used when the instrumentation doesn't define a custom value.
        stability: stable
    brief: |
      Describes a class of error the operation ended with.
    examples:
    - timeout
    - java.net.UnknownHostException
    - server_certificate_invalid
    - '500'
    requirement_level:
      conditionally_required: If request has ended with an error.
    note: |
      If the request fails with an error before response status code was sent or received,
      `error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)
      or a component-specific low cardinality error identifier.

      If response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),
      `error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.

      The `error.type` value SHOULD be predictable and SHOULD have low cardinality.
      Instrumentations SHOULD document the list of errors they report.

      The cardinality of `error.type` within one instrumentation library SHOULD be low, but
      telemetry consumers that aggregate data from multiple instrumentation libraries and applications
      should be prepared for `error.type` to have high cardinality at query time, when no
      additional filters are applied.

      If the request has completed successfully, instrumentations SHOULD NOT set `error.type`.
    stability: stable
  - name: network.protocol.name
    type: string
    brief: '[OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.'
    examples:
    - http
    - spdy
    requirement_level:
      conditionally_required: If not `http` and `network.protocol.version` is set.
    note: The value SHOULD be normalized to lowercase.
    stability: stable
  - name: network.protocol.version
    type: string
    brief: The actual version of the protocol used for network communication.
    examples:
    - '1.0'
    - '1.1'
    - '2'
    - '3'
    requirement_level: recommended
    note: |
      If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
    stability: stable
  - name: http.response.status_code
    type: int
    brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
    examples:
    - 200
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    stability: stable
  - name: http.route
    type: string
    brief: |
      The matched route, that is, the path template in the format used by the respective server framework.
    examples:
    - /users/:userID?
    - '{controller}/{action}/{id?}'
    requirement_level:
      conditionally_required: If and only if it's available
    note: |
      MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    stability: stable
  - name: user_agent.synthetic.type
    type:
      members:
      - id: bot
        value: bot
        brief: Bot source.
        stability: development
      - id: test
        value: test
        brief: Synthetic test source.
        stability: development
    brief: |
      Specifies the category of synthetic traffic, such as tests or bots.
    requirement_level: opt_in
    note: |
      This attribute MAY be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
    stability: development
  - name: http.request.body.size
    type: int
    brief: |
      The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
    examples: 3495
    requirement_level: opt_in
    stability: development
  - name: http.request.method
    type:
      members:
      - id: connect
        value: CONNECT
        brief: CONNECT method.
        stability: stable
      - id: delete
        value: DELETE
        brief: DELETE method.
        stability: stable
      - id: get
        value: GET
        brief: GET method.
        stability: stable
      - id: head
        value: HEAD
        brief: HEAD method.
        stability: stable
      - id: options
        value: OPTIONS
        brief: OPTIONS method.
        stability: stable
      - id: patch
        value: PATCH
        brief: PATCH method.
        stability: stable
      - id: post
        value: POST
        brief: POST method.
        stability: stable
      - id: put
        value: PUT
        brief: PUT method.
        stability: stable
      - id: trace
        value: TRACE
        brief: TRACE method.
        stability: stable
      - id: query
        value: QUERY
        brief: QUERY method.
        stability: development
      - id: other
        value: _OTHER
        brief: Any HTTP method that the instrumentation has no prior knowledge of.
        stability: stable
    brief: HTTP request method.
    examples:
    - GET
    - POST
    - HEAD
    requirement_level: required
    sampling_relevant: true
    note: |
      HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods),
      the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html)
      and the QUERY method defined in [httpbis-safe-method-w-body](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    stability: stable
  - name: http.request.method_original
    type: string
    brief: Original HTTP method sent by the client in the request line.
    examples:
    - GeT
    - ACL
    - foo
    requirement_level:
      conditionally_required: If and only if it's different than `http.request.method`.
    stability: stable
  - name: http.request.size
    type: int
    brief: |
      The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.
    examples: 1437
    requirement_level: opt_in
    stability: development
  - name: http.response.body.size
    type: int
    brief: |
      The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
    examples: 3495
    requirement_level: opt_in
    stability: development
  - name: http.response.header
    type: template[string[]]
    brief: |
      HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
    examples:
    - - application/json
    - - abc
      - def
    requirement_level: opt_in
    note: |
      Instrumentations SHOULD require an explicit configuration of which headers are to be captured.
      Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.

      Users MAY explicitly configure instrumentations to capture them even though it is not recommended.

      The attribute value MUST consist of either multiple header values as an array of strings
      or a single-item array containing a possibly comma-concatenated string, depending on the way
      the HTTP library provides access to headers.

      Examples:

      - A header `Content-Type: application/json` header SHOULD be recorded as the `http.request.response.content-type`
        attribute with value `["application/json"]`.
      - A header `My-custom-header: abc, def` header SHOULD be recorded as the `http.response.header.my-custom-header`
        attribute with value `["abc", "def"]` or `["abc, def"]` depending on the HTTP library.
    stability: stable
  - name: http.response.size
    type: int
    brief: |
      The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.
    examples: 1437
    requirement_level: opt_in
    stability: development
  - name: network.peer.port
    type: int
    brief: Peer port number of the network connection.
    examples:
    - 65123
    requirement_level:
      recommended: If `network.peer.address` is set.
    stability: stable
  - name: network.transport
    type:
      members:
      - id: tcp
        value: tcp
        brief: TCP
        stability: stable
      - id: udp
        value: udp
        brief: UDP
        stability: stable
      - id: pipe
        value: pipe
        brief: Named or anonymous pipe.
        stability: stable
      - id: unix
        value: unix
        brief: Unix domain socket
        stability: stable
      - id: quic
        value: quic
        brief: QUIC
        stability: stable
    brief: |
      [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
    examples:
    - tcp
    - udp
    requirement_level: opt_in
    note: |
      Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.
    stability: stable
  - name: client.address
    type: string
    brief: Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
    examples:
    - 83.164.160.102
    requirement_level: recommended
    sampling_relevant: true
    note: |
      The IP address of the original client behind all proxies, if known (e.g. from [Forwarded#for](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#for), [X-Forwarded-For](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For), or a similar header). Otherwise, the immediate client peer address.
    stability: stable
  - name: client.port
    type: int
    brief: The port of whichever client was captured in `client.address`.
    examples:
    - 65123
    requirement_level: opt_in
    note: |
      When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.
    stability: stable
  - name: http.request.header
    type: template[string[]]
    brief: |
      HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
    examples:
    - - application/json
    - - 1.2.3.4
      - 1.2.3.5
    requirement_level: opt_in
    sampling_relevant: true
    note: |
      Instrumentations SHOULD require an explicit configuration of which headers are to be captured.
      Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.

      The `User-Agent` header is already captured in the `user_agent.original` attribute.
      Users MAY explicitly configure instrumentations to capture them even though it is not recommended.

      The attribute value MUST consist of either multiple header values as an array of strings
      or a single-item array containing a possibly comma-concatenated string, depending on the way
      the HTTP library provides access to headers.

      Examples:

      - A header `Content-Type: application/json` SHOULD be recorded as the `http.request.header.content-type`
        attribute with value `["application/json"]`.
      - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` SHOULD be recorded as the `http.request.header.x-forwarded-for`
        attribute with value `["1.2.3.4", "1.2.3.5"]` or `["1.2.3.4, 1.2.3.5"]` depending on the HTTP library.
    stability: stable
  - name: network.local.address
    type: string
    brief: Local socket address. Useful in case of a multi-IP host.
    examples:
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: opt_in
    stability: stable
  - name: network.local.port
    type: int
    brief: Local socket port. Useful in case of a multi-port host.
    examples:
    - 65123
    requirement_level: opt_in
    stability: stable
  - name: server.address
    type: string
    brief: |
      Name of the local HTTP server that received the request.
    examples:
    - example.com
    - 10.1.2.80
    - /tmp/my.sock
    requirement_level: recommended
    sampling_relevant: true
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
    stability: stable
  - name: server.port
    type: int
    brief: |
      Port of the local HTTP server that received the request.
    examples:
    - 80
    - 8080
    - 443
    requirement_level:
      conditionally_required: If available and `server.address` is set.
    sampling_relevant: true
    note: |
      See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).
    stability: stable
  - name: url.path
    type: string
    brief: |
      The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component
    examples:
    - /search
    requirement_level: required
    sampling_relevant: true
    note: |
      Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.
    stability: stable
  - name: url.query
    type: string
    brief: |
      The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component
    examples:
    - q=OpenTelemetry
    requirement_level:
      conditionally_required: If and only if one was received/sent.
    sampling_relevant: true
    note: |
      Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.

      ![Development](https://img.shields.io/badge/-development-blue)
      Query string values for the following keys SHOULD be redacted by default and replaced by the value `REDACTED`:

      * [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
      * [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
      * [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)

      This list is subject to change over time.

      When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
      `q=OpenTelemetry&sig=REDACTED`.
    stability: stable
  - name: url.scheme
    type: string
    brief: |
      The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
    examples:
    - http
    - https
    requirement_level: required
    sampling_relevant: true
    note: |
      The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.
    stability: stable
  - name: user_agent.original
    type: string
    brief: |
      Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.
    examples:
    - CERN-LineMode/2.15 libwww/2.17b3
    - Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1
    - YourApp/1.0.0 grpc-java-okhttp/1.27.2
    requirement_level: recommended
    sampling_relevant: true
    stability: stable
  span_kind: server
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/http/spans.yaml
    attributes:
      client.address:
        source_group: registry.client
        inherited_fields:
        - brief
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
        - note
        - sampling_relevant
      client.port:
        source_group: registry.client
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      error.type:
        source_group: registry.error
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
      http.request.body.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.request.header:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      http.request.method:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      http.request.method_original:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.request.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.body.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.header:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.size:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.response.status_code:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      http.route:
        source_group: registry.http
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.local.address:
        source_group: registry.network
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      network.local.port:
        source_group: registry.network
        inherited_fields:
        - examples
        - note
        - stability
        locally_overridden_fields:
        - brief
        - requirement_level
      network.peer.address:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.peer.port:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      network.protocol.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - examples
        - requirement_level
      network.protocol.version:
        source_group: registry.network
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - examples
      network.transport:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - stability
        locally_overridden_fields:
        - note
        - requirement_level
      server.address:
        source_group: registry.server
        inherited_fields:
        - examples
        - requirement_level
        - stability
        locally_overridden_fields:
        - brief
        - note
        - sampling_relevant
      server.port:
        source_group: registry.server
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
        - sampling_relevant
      url.path:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      url.query:
        source_group: registry.url
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
        - sampling_relevant
      url.scheme:
        source_group: registry.url
        inherited_fields:
        - brief
        - stability
        locally_overridden_fields:
        - examples
        - note
        - requirement_level
        - sampling_relevant
      user_agent.original:
        source_group: registry.user_agent
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - sampling_relevant
      user_agent.synthetic.type:
        source_group: registry.user_agent.os
        inherited_fields:
        - brief
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.device
  type: attribute_group
  brief: |
    Describes device attributes.
  attributes:
  - name: device.id
    type: string
    brief: |
      A unique identifier representing the device
    examples:
    - '123456789012345'
    - 01:23:45:67:89:AB
    requirement_level: recommended
    note: |
      Its value SHOULD be identical for all apps on a device and it SHOULD NOT change if an app is uninstalled and re-installed.
      However, it might be resettable by the user for all apps on a device.
      Hardware IDs (e.g. vendor-specific serial number, IMEI or MAC address) MAY be used as values.

      More information about Android identifier best practices can be found in the [Android user data IDs guide](https://developer.android.com/training/articles/user-data-ids).

      > [!WARNING]
      >
      > This attribute may contain sensitive (PII) information. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply,
      > ensure you do your own due diligence.
      >
      > Due to these reasons, this identifier is not recommended for consumer applications and will likely result in rejection from both Google Play and App Store.
      > However, it may be appropriate for specific enterprise scenarios, such as kiosk devices or enterprise-managed devices, with appropriate compliance clearance.
      > Any instrumentation providing this identifier MUST implement it as an opt-in feature.
      >
      > See [`app.installation.id`](/docs/registry/attributes/app.md#app-installation-id) for a more privacy-preserving alternative.
    stability: development
  - name: device.manufacturer
    type: string
    brief: |
      The name of the device manufacturer
    examples:
    - Apple
    - Samsung
    requirement_level: recommended
    note: |
      The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.
    stability: development
  - name: device.model.identifier
    type: string
    brief: |
      The model identifier for the device
    examples:
    - iPhone3,4
    - SM-G920F
    requirement_level: recommended
    note: |
      It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.
    stability: development
  - name: device.model.name
    type: string
    brief: |
      The marketing name for the device model
    examples:
    - iPhone 6s Plus
    - Samsung Galaxy S6
    requirement_level: recommended
    note: |
      It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/device/registry.yaml
  display_name: Device Attributes
- id: registry.cloudevents
  type: attribute_group
  brief: |
    This document defines attributes for CloudEvents.
  attributes:
  - name: cloudevents.event_id
    type: string
    brief: |
      The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.
    examples:
    - 123e4567-e89b-12d3-a456-426614174000
    - '0001'
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_source
    type: string
    brief: |
      The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.
    examples:
    - https://github.com/cloudevents
    - /cloudevents/spec/pull/123
    - my-service
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_spec_version
    type: string
    brief: |
      The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.
    examples: '1.0'
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_type
    type: string
    brief: |
      The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.
    examples:
    - com.github.pull_request.opened
    - com.example.object.deleted.v2
    requirement_level: recommended
    stability: development
  - name: cloudevents.event_subject
    type: string
    brief: |
      The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).
    examples: mynewfile.jpg
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloudevents/registry.yaml
  display_name: CloudEvents Attributes
- id: entity.container
  type: entity
  brief: |
    A container instance.
  stability: development
  attributes:
  - name: container.name
    type: string
    brief: |
      Container name used by container runtime.
    examples:
    - opentelemetry-autoconf
    requirement_level: recommended
    stability: development
  - name: container.id
    type: string
    brief: |
      Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.
    examples:
    - a3bf90e006b2
    requirement_level: recommended
    stability: development
  - name: container.label
    type: template[string]
    brief: |
      Container labels, `<key>` being the label name, the value being the label value.
    examples:
    - nginx
    requirement_level: recommended
    note: |
      For example, a docker container label `app` with value `nginx` SHOULD be recorded as the `container.label.app` attribute with value `"nginx"`.
    stability: development
  - name: oci.manifest.digest
    type: string
    brief: |
      The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.
    examples:
    - sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4
    requirement_level: recommended
    note: |
      Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).
      An example can be found in [Example Image Manifest](https://github.com/opencontainers/image-spec/blob/main/manifest.md#example-image-manifest).
    stability: development
  - name: container.command
    type: string
    brief: |
      The command used to run the container (i.e. the command name).
    examples:
    - otelcontribcol
    requirement_level: opt_in
    note: |
      If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.
    stability: development
  - name: container.command_line
    type: string
    brief: |
      The full command run by the container as a single string representing the full command.
    examples:
    - otelcontribcol --config config.yaml
    requirement_level: opt_in
    stability: development
  - name: container.command_args
    type: string[]
    brief: |
      All the command arguments (including the command/executable itself) run by the container.
    examples:
    - - otelcontribcol
      - --config
      - config.yaml
    requirement_level: opt_in
    stability: development
  name: container
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/entities.yaml
    attributes:
      container.command:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      container.command_args:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      container.command_line:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
      container.id:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      container.label:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      container.name:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      oci.manifest.digest:
        source_group: registry.oci.manifest
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.container.image
  type: entity
  brief: |
    The image used for the container.
  stability: development
  attributes:
  - name: container.image.name
    type: string
    brief: |
      Name of the image the container was built on.
    examples:
    - gcr.io/opentelemetry/operator
    requirement_level: recommended
    stability: development
  - name: container.image.tags
    type: string[]
    brief: |
      Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.
    examples:
    - - v1.27.1
      - 3.5.7-0
    requirement_level: recommended
    stability: development
  - name: container.image.id
    type: string
    brief: |
      Runtime specific image identifier. Usually a hash algorithm followed by a UUID.
    examples:
    - sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f
    requirement_level: recommended
    note: |
      Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.
      K8s defines a link to the container registry repository with digest `"imageID": "registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625"`.
      The ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.
    stability: development
  - name: container.image.repo_digests
    type: string[]
    brief: |
      Repo digests of the container image as provided by the container runtime.
    examples:
    - - example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb
      - internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578
    requirement_level: recommended
    note: |
      [Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.
    stability: development
  name: container.image
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/entities.yaml
    attributes:
      container.image.id:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      container.image.name:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      container.image.repo_digests:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      container.image.tags:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
- id: entity.container.runtime
  type: entity
  brief: |
    The runtime being used to run the container
  stability: development
  attributes:
  - name: container.runtime.description
    type: string
    brief: |
      A description about the runtime which could include, for example details about the CRI/API version being used or other customisations.
    examples:
    - 'docker://19.3.1 - CRI: 1.22.0'
    requirement_level: recommended
    stability: development
    role: descriptive
  - name: container.runtime.name
    type: string
    brief: |
      The container runtime managing this container.
    examples:
    - docker
    - containerd
    - rkt
    requirement_level: recommended
    stability: development
    role: identifying
  - name: container.runtime.version
    type: string
    brief: |
      The version of the runtime of this process, as returned by the runtime without modification.
    examples: 1.0.0
    requirement_level: recommended
    stability: development
    role: identifying
  name: container.runtime
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/entities.yaml
    attributes:
      container.runtime.description:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
      container.runtime.name:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
      container.runtime.version:
        source_group: registry.container
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
        locally_overridden_fields:
        - role
- id: metric.container.uptime
  type: metric
  brief: The time the container has been running.
  note: |
    Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
    The actual accuracy would depend on the instrumentation and operating system.
  stability: development
  metric_name: container.uptime
  instrument: gauge
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.container.cpu.time
  type: metric
  brief: Total CPU time consumed.
  note: |
    Total CPU time consumed by the specific container on all available CPU cores
  stability: development
  attributes:
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The CPU mode for this data point. A container's CPU metric SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.
    examples:
    - user
    - system
    requirement_level:
      conditionally_required: Required if mode is available, i.e. metrics coming from the Docker Stats API.
    note: 'Following states SHOULD be used: `user`, `system`, `kernel`'
    stability: development
  metric_name: container.cpu.time
  instrument: counter
  unit: s
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
    attributes:
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.container.cpu.usage
  type: metric
  brief: Container's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs.
  note: |
    CPU usage of the specific container on all available CPU cores, averaged over the sample window
  stability: development
  attributes:
  - name: cpu.mode
    type:
      members:
      - id: user
        value: user
        brief: User
        stability: development
      - id: system
        value: system
        brief: System
        stability: development
      - id: nice
        value: nice
        brief: Nice
        stability: development
      - id: idle
        value: idle
        brief: Idle
        stability: development
      - id: iowait
        value: iowait
        brief: IO Wait
        stability: development
      - id: interrupt
        value: interrupt
        brief: Interrupt
        stability: development
      - id: steal
        value: steal
        brief: Steal
        stability: development
      - id: kernel
        value: kernel
        brief: Kernel
        stability: development
    brief: The CPU mode for this data point. A container's CPU metric SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.
    examples:
    - user
    - system
    requirement_level:
      conditionally_required: Required if mode is available, i.e. metrics coming from the Docker Stats API.
    note: 'Following states SHOULD be used: `user`, `system`, `kernel`'
    stability: development
  metric_name: container.cpu.usage
  instrument: gauge
  unit: '{cpu}'
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
    attributes:
      cpu.mode:
        source_group: registry.cpu
        inherited_fields:
        - examples
        - stability
        locally_overridden_fields:
        - brief
        - note
        - requirement_level
  annotations:
    code_generation:
      metric_value_type: double
- id: metric.container.memory.usage
  type: metric
  brief: Memory usage of the container.
  note: |
    Memory usage of the container.
  stability: development
  metric_name: container.memory.usage
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.container.disk.io
  type: metric
  brief: Disk bytes for the container.
  note: |
    The total number of bytes read/written successfully (aggregated from all disks).
  stability: development
  attributes:
  - name: system.device
    type: string
    brief: The device identifier
    examples:
    - (identifier)
    requirement_level: recommended
    stability: development
  - name: disk.io.direction
    type:
      members:
      - id: read
        value: read
        stability: development
      - id: write
        value: write
        stability: development
    brief: The disk IO operation direction.
    examples:
    - read
    requirement_level: recommended
    stability: development
  metric_name: container.disk.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
    attributes:
      disk.io.direction:
        source_group: registry.disk
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      system.device:
        source_group: registry.system
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.container.network.io
  type: metric
  brief: Network bytes for the container.
  note: |
    The number of bytes sent/received on all network interfaces by the container.
  stability: development
  attributes:
  - name: network.io.direction
    type:
      members:
      - id: transmit
        value: transmit
        stability: development
      - id: receive
        value: receive
        stability: development
    brief: The network IO operation direction.
    examples:
    - transmit
    requirement_level: recommended
    stability: development
  - name: network.interface.name
    type: string
    brief: The network interface name.
    examples:
    - lo
    - eth0
    requirement_level: recommended
    stability: development
  metric_name: container.network.io
  instrument: counter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
    attributes:
      network.interface.name:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      network.io.direction:
        source_group: registry.network
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.container.filesystem.available
  type: metric
  brief: Container filesystem available bytes.
  note: |
    In K8s, this metric is derived from the
    [FsStats.AvailableBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [ContainerStats.Rootfs](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#ContainerStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: container.filesystem.available
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
  entity_associations:
  - container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.container.filesystem.capacity
  type: metric
  brief: Container filesystem capacity.
  note: |
    In K8s, this metric is derived from the
    [FsStats.CapacityBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [ContainerStats.Rootfs](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#ContainerStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: container.filesystem.capacity
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
  entity_associations:
  - container
  annotations:
    code_generation:
      metric_value_type: int
- id: metric.container.filesystem.usage
  type: metric
  brief: Container filesystem usage.
  note: |
    This may not equal capacity - available.

    In K8s, this metric is derived from the
    [FsStats.UsedBytes](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#FsStats) field
    of the [ContainerStats.Rootfs](https://pkg.go.dev/k8s.io/kubelet@v0.33.0/pkg/apis/stats/v1alpha1#ContainerStats)
    of the Kubelet's stats API.
  stability: development
  metric_name: container.filesystem.usage
  instrument: updowncounter
  unit: By
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/container/metrics.yaml
  entity_associations:
  - container
  annotations:
    code_generation:
      metric_value_type: int
- id: registry.android
  type: attribute_group
  brief: |
    The Android platform on which the Android application is running.
  attributes:
  - name: android.os.api_level
    type: string
    brief: |
      Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found in the [Android API levels documentation](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).
    examples:
    - '33'
    - '32'
    requirement_level: recommended
    stability: development
  - name: android.app.state
    type:
      members:
      - id: created
        value: created
        brief: |
          Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.
        stability: development
      - id: background
        value: background
        brief: |
          Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.
        stability: development
      - id: foreground
        value: foreground
        brief: |
          Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.
        stability: development
    brief: |
      This attribute represents the state of the application.
    examples:
    - created
    requirement_level: recommended
    note: |
      The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/android/registry.yaml
  display_name: Android Attributes
- id: registry.cicd.pipeline
  type: attribute_group
  brief: |
    This group describes attributes specific to pipelines within a Continuous Integration and Continuous Deployment (CI/CD) system. A [pipeline](https://wikipedia.org/wiki/Pipeline_(computing)) in this case is a series of steps that are performed in order to deliver a new version of software. This aligns with the [Britannica](https://www.britannica.com/dictionary/pipeline) definition of a pipeline where a **pipeline** is the system for developing and producing something. In the context of CI/CD, a pipeline produces or delivers software.
  attributes:
  - name: cicd.pipeline.name
    type: string
    brief: |
      The human readable name of the pipeline within a CI/CD system.
    examples:
    - Build and Test
    - Lint
    - Deploy Go Project
    - deploy_to_environment
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.run.id
    type: string
    brief: |
      The unique identifier of a pipeline run within a CI/CD system.
    examples:
    - '120912'
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.run.url.full
    type: string
    brief: |
      The [URL](https://wikipedia.org/wiki/URL) of the pipeline run, providing the complete address in order to locate and identify the pipeline run.
    examples:
    - https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763?pr=1075
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.run.state
    type:
      members:
      - id: pending
        value: pending
        brief: |
          The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).
        stability: development
      - id: executing
        value: executing
        brief: The executing state spans the execution of any run tasks (eg. build, test).
        stability: development
      - id: finalizing
        value: finalizing
        brief: The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).
        stability: development
    brief: |
      The pipeline run goes through these states during its lifecycle.
    examples:
    - pending
    - executing
    - finalizing
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.task.name
    type: string
    brief: |
      The human readable name of a task within a pipeline. Task here most closely aligns with a [computing process](https://wikipedia.org/wiki/Pipeline_(computing)) in a pipeline. Other terms for tasks include commands, steps, and procedures.
    examples:
    - Run GoLang Linter
    - Go Build
    - go-test
    - deploy_binary
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.task.run.id
    type: string
    brief: |
      The unique identifier of a task run within a pipeline.
    examples:
    - '12097'
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.task.run.url.full
    type: string
    brief: |
      The [URL](https://wikipedia.org/wiki/URL) of the pipeline task run, providing the complete address in order to locate and identify the pipeline task run.
    examples:
    - https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763/job/26920038674?pr=1075
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.task.run.result
    type:
      members:
      - id: success
        value: success
        brief: The task run finished successfully.
        stability: development
      - id: failure
        value: failure
        brief: The task run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the task run.
        stability: development
      - id: error
        value: error
        brief: The task run failed due to an error in the CICD system, eg. due to the worker being killed.
        stability: development
      - id: timeout
        value: timeout
        brief: A timeout caused the task run to be interrupted.
        stability: development
      - id: cancellation
        value: cancellation
        brief: The task run was cancelled, eg. by a user manually cancelling the task run.
        stability: development
      - id: skip
        value: skip
        brief: The task run was skipped, eg. due to a precondition not being met.
        stability: development
    brief: |
      The result of a task run.
    examples:
    - success
    - failure
    - timeout
    - skipped
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.task.type
    type:
      members:
      - id: build
        value: build
        brief: build
        stability: development
      - id: test
        value: test
        brief: test
        stability: development
      - id: deploy
        value: deploy
        brief: deploy
        stability: development
    brief: |
      The type of the task within a pipeline.
    examples:
    - build
    - test
    - deploy
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.result
    type:
      members:
      - id: success
        value: success
        brief: The pipeline run finished successfully.
        stability: development
      - id: failure
        value: failure
        brief: The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.
        stability: development
      - id: error
        value: error
        brief: The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.
        stability: development
      - id: timeout
        value: timeout
        brief: A timeout caused the pipeline run to be interrupted.
        stability: development
      - id: cancellation
        value: cancellation
        brief: The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.
        stability: development
      - id: skip
        value: skip
        brief: The pipeline run was skipped, eg. due to a precondition not being met.
        stability: development
    brief: |
      The result of a pipeline run.
    examples:
    - success
    - failure
    - timeout
    - skipped
    requirement_level: recommended
    stability: development
  - name: cicd.pipeline.action.name
    type:
      members:
      - id: build
        value: BUILD
        brief: The pipeline run is executing a build.
        stability: development
      - id: run
        value: RUN
        brief: The pipeline run is executing.
        stability: development
      - id: sync
        value: SYNC
        brief: The pipeline run is executing a sync.
        stability: development
    brief: |
      The kind of action a pipeline run is performing.
    examples:
    - BUILD
    - RUN
    - SYNC
    requirement_level: recommended
    stability: development
  - name: cicd.worker.id
    type: string
    brief: The unique identifier of a worker within a CICD system.
    examples:
    - abc123
    - 10.0.1.2
    - controller
    requirement_level: recommended
    stability: development
  - name: cicd.worker.name
    type: string
    brief: The name of a worker within a CICD system.
    examples:
    - agent-abc
    - controller
    - Ubuntu LTS
    requirement_level: recommended
    stability: development
  - name: cicd.worker.url.full
    type: string
    brief: The [URL](https://wikipedia.org/wiki/URL) of the worker, providing the complete address in order to locate and identify the worker.
    examples:
    - https://cicd.example.org/worker/abc123
    requirement_level: recommended
    stability: development
  - name: cicd.worker.state
    type:
      members:
      - id: available
        value: available
        brief: The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).
        note: Pipelines might have conditions on which workers they are able to run so not every worker might be available to every pipeline.
        stability: development
      - id: busy
        value: busy
        brief: The worker is performing work for the CICD system.
        stability: development
      - id: offline
        value: offline
        brief: The worker is not available to the CICD system (disconnected / down).
        stability: development
    brief: |
      The state of a CICD worker / agent.
    examples:
    - idle
    - busy
    - down
    requirement_level: recommended
    stability: development
  - name: cicd.system.component
    type: string
    brief: The name of a component of the CICD system.
    examples:
    - controller
    - scheduler
    - agent
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cicd/registry.yaml
  display_name: CI/CD Pipeline Attributes
- id: registry.nodejs
  type: attribute_group
  brief: Describes Node.js related attributes.
  attributes:
  - name: nodejs.eventloop.state
    type:
      members:
      - id: active
        value: active
        brief: Active time.
        stability: development
      - id: idle
        value: idle
        brief: Idle time.
        stability: development
    brief: The state of event loop time.
    requirement_level: recommended
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/nodejs/registry.yaml
  display_name: Node.js Attributes
- id: registry.deployment
  type: attribute_group
  brief: |
    This document defines attributes for software deployments.
  attributes:
  - name: deployment.name
    type: string
    brief: |
      The name of the deployment.
    examples:
    - deploy my app
    - deploy-frontend
    requirement_level: recommended
    stability: development
  - name: deployment.id
    type: string
    brief: |
      The id of the deployment.
    examples:
    - '1208'
    requirement_level: recommended
    stability: development
  - name: deployment.status
    type:
      members:
      - id: failed
        value: failed
        brief: failed
        stability: development
      - id: succeeded
        value: succeeded
        brief: succeeded
        stability: development
    brief: |
      The status of the deployment.
    requirement_level: recommended
    stability: development
  - name: deployment.environment.name
    type: string
    brief: |
      Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).
    examples:
    - staging
    - production
    requirement_level: recommended
    note: |
      `deployment.environment.name` does not affect the uniqueness constraints defined through
      the `service.namespace`, `service.name` and `service.instance.id` resource attributes.
      This implies that resources carrying the following attribute combinations MUST be
      considered to be identifying the same service:

      - `service.name=frontend`, `deployment.environment.name=production`
      - `service.name=frontend`, `deployment.environment.name=staging`.
    stability: development
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/deployment/registry.yaml
  display_name: Deployment Attributes
- id: entity.deployment
  type: entity
  brief: |
    The software deployment.
  stability: development
  attributes:
  - name: deployment.environment.name
    type: string
    brief: |
      Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).
    examples:
    - staging
    - production
    requirement_level: recommended
    note: |
      `deployment.environment.name` does not affect the uniqueness constraints defined through
      the `service.namespace`, `service.name` and `service.instance.id` resource attributes.
      This implies that resources carrying the following attribute combinations MUST be
      considered to be identifying the same service:

      - `service.name=frontend`, `deployment.environment.name=production`
      - `service.name=frontend`, `deployment.environment.name=staging`.
    stability: development
  name: deployment
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/deployment/entities.yaml
    attributes:
      deployment.environment.name:
        source_group: registry.deployment
        inherited_fields:
        - brief
        - examples
        - note
        - stability
        locally_overridden_fields:
        - requirement_level
- id: registry.deployment.deprecated
  type: attribute_group
  brief: |
    Describes deprecated deployment attributes.
  attributes:
  - name: deployment.environment
    type: string
    brief: |
      Deprecated, use `deployment.environment.name` instead.
    examples:
    - staging
    - production
    requirement_level: recommended
    stability: development
    deprecated:
      reason: renamed
      renamed_to: deployment.environment.name
      note: Replaced by `deployment.environment.name`.
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/deployment/deprecated/registry-deprecated.yaml
- id: entity.cloud
  type: entity
  brief: |
    A cloud environment (e.g. GCP, Azure, AWS)
  stability: development
  attributes:
  - name: cloud.provider
    type:
      members:
      - id: alibaba_cloud
        value: alibaba_cloud
        brief: Alibaba Cloud
        stability: development
      - id: aws
        value: aws
        brief: Amazon Web Services
        stability: development
      - id: azure
        value: azure
        brief: Microsoft Azure
        stability: development
      - id: gcp
        value: gcp
        brief: Google Cloud Platform
        stability: development
      - id: heroku
        value: heroku
        brief: Heroku Platform as a Service
        stability: development
      - id: ibm_cloud
        value: ibm_cloud
        brief: IBM Cloud
        stability: development
      - id: oracle_cloud
        value: oracle_cloud
        brief: Oracle Cloud Infrastructure (OCI)
        stability: development
      - id: tencent_cloud
        value: tencent_cloud
        brief: Tencent Cloud
        stability: development
    brief: |
      Name of the cloud provider.
    requirement_level: recommended
    stability: development
  - name: cloud.account.id
    type: string
    brief: |
      The cloud account ID the resource is assigned to.
    examples:
    - '111111111111'
    - opentelemetry
    requirement_level: recommended
    stability: development
  - name: cloud.region
    type: string
    brief: |
      The geographical region within a cloud provider. When associated with a resource, this attribute specifies the region where the resource operates. When calling services or APIs deployed on a cloud, this attribute identifies the region where the called destination is deployed.
    examples:
    - us-central1
    - us-east-1
    requirement_level: recommended
    note: |
      Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).
    stability: development
  - name: cloud.resource_id
    type: string
    brief: |
      Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://google.aip.dev/122#full-resource-names) on GCP)
    examples:
    - arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
    - //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
    - /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
    requirement_level: recommended
    note: |
      On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      - **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invocable with
        multiple different aliases.
      - **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      - **Azure:** The [Fully Qualified Resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    stability: development
  - name: cloud.availability_zone
    type: string
    brief: |
      Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
    examples:
    - us-east-1c
    requirement_level: recommended
    note: |
      Availability zones are called "zones" on Alibaba Cloud and Google Cloud.
    stability: development
  - name: cloud.platform
    type:
      members:
      - id: alibaba_cloud_ecs
        value: alibaba_cloud_ecs
        brief: Alibaba Cloud Elastic Compute Service
        stability: development
      - id: alibaba_cloud_fc
        value: alibaba_cloud_fc
        brief: Alibaba Cloud Function Compute
        stability: development
      - id: alibaba_cloud_openshift
        value: alibaba_cloud_openshift
        brief: Red Hat OpenShift on Alibaba Cloud
        stability: development
      - id: aws_ec2
        value: aws_ec2
        brief: AWS Elastic Compute Cloud
        stability: development
      - id: aws_ecs
        value: aws_ecs
        brief: AWS Elastic Container Service
        stability: development
      - id: aws_eks
        value: aws_eks
        brief: AWS Elastic Kubernetes Service
        stability: development
      - id: aws_lambda
        value: aws_lambda
        brief: AWS Lambda
        stability: development
      - id: aws_elastic_beanstalk
        value: aws_elastic_beanstalk
        brief: AWS Elastic Beanstalk
        stability: development
      - id: aws_app_runner
        value: aws_app_runner
        brief: AWS App Runner
        stability: development
      - id: aws_openshift
        value: aws_openshift
        brief: Red Hat OpenShift on AWS (ROSA)
        stability: development
      - id: azure.vm
        value: azure.vm
        brief: Azure Virtual Machines
        stability: development
      - id: azure.container_apps
        value: azure.container_apps
        brief: Azure Container Apps
        stability: development
      - id: azure.container_instances
        value: azure.container_instances
        brief: Azure Container Instances
        stability: development
      - id: azure.aks
        value: azure.aks
        brief: Azure Kubernetes Service
        stability: development
      - id: azure.functions
        value: azure.functions
        brief: Azure Functions
        stability: development
      - id: azure.app_service
        value: azure.app_service
        brief: Azure App Service
        stability: development
      - id: azure.openshift
        value: azure.openshift
        brief: Azure Red Hat OpenShift
        stability: development
      - id: azure_vm
        value: azure_vm
        brief: Azure Virtual Machines
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.vm
          note: Replaced by `azure.vm`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_container_apps
        value: azure_container_apps
        brief: Azure Container Apps
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.container_apps
          note: Replaced by `azure.container_apps`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_container_instances
        value: azure_container_instances
        brief: Azure Container Instances
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.container_instances
          note: Replaced by `azure.container_instances`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_aks
        value: azure_aks
        brief: Azure Kubernetes Service
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.aks
          note: Replaced by `azure.aks`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_functions
        value: azure_functions
        brief: Azure Functions
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.functions
          note: Replaced by `azure.functions`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_app_service
        value: azure_app_service
        brief: Azure App Service
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.app_service
          note: Replaced by `azure.app_service`.
        annotations:
          code_generation:
            exclude: true
      - id: azure_openshift
        value: azure_openshift
        brief: Azure Red Hat OpenShift
        stability: development
        deprecated:
          reason: renamed
          renamed_to: azure.openshift
          note: Replaced by `azure.openshift`.
        annotations:
          code_generation:
            exclude: true
      - id: gcp_bare_metal_solution
        value: gcp_bare_metal_solution
        brief: Google Bare Metal Solution (BMS)
        stability: development
      - id: gcp_compute_engine
        value: gcp_compute_engine
        brief: Google Cloud Compute Engine (GCE)
        stability: development
      - id: gcp_cloud_run
        value: gcp_cloud_run
        brief: Google Cloud Run
        stability: development
      - id: gcp_kubernetes_engine
        value: gcp_kubernetes_engine
        brief: Google Cloud Kubernetes Engine (GKE)
        stability: development
      - id: gcp_cloud_functions
        value: gcp_cloud_functions
        brief: Google Cloud Functions (GCF)
        stability: development
      - id: gcp_app_engine
        value: gcp_app_engine
        brief: Google Cloud App Engine (GAE)
        stability: development
      - id: gcp_openshift
        value: gcp_openshift
        brief: Red Hat OpenShift on Google Cloud
        stability: development
      - id: ibm_cloud_openshift
        value: ibm_cloud_openshift
        brief: Red Hat OpenShift on IBM Cloud
        stability: development
      - id: oracle_cloud_compute
        value: oracle_cloud_compute
        brief: Compute on Oracle Cloud Infrastructure (OCI)
        stability: development
      - id: oracle_cloud_oke
        value: oracle_cloud_oke
        brief: Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI)
        stability: development
      - id: tencent_cloud_cvm
        value: tencent_cloud_cvm
        brief: Tencent Cloud Cloud Virtual Machine (CVM)
        stability: development
      - id: tencent_cloud_eks
        value: tencent_cloud_eks
        brief: Tencent Cloud Elastic Kubernetes Service (EKS)
        stability: development
      - id: tencent_cloud_scf
        value: tencent_cloud_scf
        brief: Tencent Cloud Serverless Cloud Function (SCF)
        stability: development
    brief: |
      The cloud platform in use.
    requirement_level: recommended
    note: |
      The prefix of the service SHOULD match the one specified in `cloud.provider`.
    stability: development
  name: cloud
  lineage:
    provenance:
      registry_id: main
      path: /home/weaver/source/cloud/entities.yaml
    attributes:
      cloud.account.id:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloud.availability_zone:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloud.platform:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      cloud.provider:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - note
        - requirement_level
        - stability
      cloud.region:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
      cloud.resource_id:
        source_group: registry.cloud
        inherited_fields:
        - brief
        - examples
        - note
        - requirement_level
        - stability
