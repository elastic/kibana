/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */
import React from 'react';
import { i18n } from '@kbn/i18n';
import { Markdown } from '@kbn/shared-ux-markdown';

// DO NOT RENAME!
export const functions = {
  label: i18n.translate('languageDocumentation.documentationESQL.functions', {
    defaultMessage: 'Functions',
  }),
  description: i18n.translate(
    'languageDocumentation.documentationESQL.functionsDocumentationESQLDescription',
    {
      defaultMessage: `Functions are supported by ROW, EVAL and WHERE.`,
    }
  ),
  // items are managed by scripts/generate_esql_docs.ts
  items: [
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.abs', {
        defaultMessage: 'ABS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.abs.markdown', {
            defaultMessage: `
  ### ABS
  Returns the absolute value.

  \`\`\`esql
  ROW number = -1.0
  | EVAL abs_number = ABS(number)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.acos', {
        defaultMessage: 'ACOS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.acos.markdown', {
            defaultMessage: `
  ### ACOS
  Returns the [arccosine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of \`n\` as an angle, expressed in radians.

  \`\`\`esql
  ROW a=.9
  | EVAL acos=ACOS(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.asin', {
        defaultMessage: 'ASIN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.asin.markdown', {
            defaultMessage: `
  ### ASIN
  Returns the [arcsine](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of the input
  numeric expression as an angle, expressed in radians.

  \`\`\`esql
  ROW a=.9
  | EVAL asin=ASIN(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.atan', {
        defaultMessage: 'ATAN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.atan.markdown', {
            defaultMessage: `
  ### ATAN
  Returns the [arctangent](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) of the input
  numeric expression as an angle, expressed in radians.

  \`\`\`esql
  ROW a=12.9
  | EVAL atan=ATAN(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.atan2', {
        defaultMessage: 'ATAN2',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.atan2.markdown',
            {
              defaultMessage: `
  ### ATAN2
  The [angle](https://en.wikipedia.org/wiki/Atan2) between the positive x-axis and the ray from the
  origin to the point (x , y) in the Cartesian plane, expressed in radians.

  \`\`\`esql
  ROW y=12.9, x=.6
  | EVAL atan2=ATAN2(y, x)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.bit_length', {
        defaultMessage: 'BIT_LENGTH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.bit_length.markdown',
            {
              defaultMessage: `
  ### BIT LENGTH
  Returns the bit length of a string.

  \`\`\`esql
  FROM airports
  | WHERE country == "India"
  | KEEP city
  | EVAL fn_length = LENGTH(city), fn_bit_length = BIT_LENGTH(city)
  \`\`\`
  Note: All strings are in UTF-8, so a single character can use multiple bytes.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.byte_length', {
        defaultMessage: 'BYTE_LENGTH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.byte_length.markdown',
            {
              defaultMessage: `
  ### BYTE LENGTH
  Returns the byte length of a string.

  \`\`\`esql
  FROM airports
  | WHERE country == "India"
  | KEEP city
  | EVAL fn_length = LENGTH(city), fn_byte_length = BYTE_LENGTH(city)
  \`\`\`
  Note: All strings are in UTF-8, so a single character can use multiple bytes.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.case', {
        defaultMessage: 'CASE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.case.markdown', {
            defaultMessage: `
  ### CASE
  Accepts pairs of conditions and values. The function returns the value that
  belongs to the first condition that evaluates to \`true\`.

  If the number of arguments is odd, the last argument is the default value which
  is returned when no condition matches. If the number of arguments is even, and
  no condition matches, the function returns \`null\`.

  \`\`\`esql
  FROM employees
  | EVAL type = CASE(
      languages <= 1, "monolingual",
      languages <= 2, "bilingual",
       "polyglot")
  | KEEP emp_no, languages, type
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.cbrt', {
        defaultMessage: 'CBRT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.cbrt.markdown', {
            defaultMessage: `
  ### CBRT
  Returns the cube root of a number. The input can be any numeric value, the return value is always a double.
  Cube roots of infinities are null.

  \`\`\`esql
  ROW d = 1000.0
  | EVAL c = CBRT(d)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.ceil', {
        defaultMessage: 'CEIL',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.ceil.markdown', {
            defaultMessage: `
  ### CEIL
  Round a number up to the nearest integer.

  \`\`\`esql
  ROW a=1.8
  | EVAL a=CEIL(a)
  \`\`\`
  Note: This is a noop for \`long\` (including unsigned) and \`integer\`. For \`double\` this picks the closest \`double\` value to the integer similar to [Math.ceil](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#ceil(double)).
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.cidr_match', {
        defaultMessage: 'CIDR_MATCH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.cidr_match.markdown',
            {
              defaultMessage: `
  ### CIDR MATCH
  Returns true if the provided IP is contained in one of the provided CIDR blocks.

  \`\`\`esql
  FROM hosts
  | WHERE CIDR_MATCH(ip1, "127.0.0.2/32", "127.0.0.3/32")
  | KEEP card, host, ip0, ip1
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.coalesce', {
        defaultMessage: 'COALESCE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.coalesce.markdown',
            {
              defaultMessage: `
  ### COALESCE
  Returns the first of its arguments that is not null. If all arguments are null, it returns \`null\`.

  \`\`\`esql
  ROW a=null, b="b"
  | EVAL COALESCE(a, b)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.concat', {
        defaultMessage: 'CONCAT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.concat.markdown',
            {
              defaultMessage: `
  ### CONCAT
  Concatenates two or more strings.

  \`\`\`esql
  FROM employees
  | KEEP first_name, last_name
  | EVAL fullname = CONCAT(first_name, " ", last_name)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.cos', {
        defaultMessage: 'COS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.cos.markdown', {
            defaultMessage: `
  ### COS
  Returns the [cosine](https://en.wikipedia.org/wiki/Sine_and_cosine) of an angle.

  \`\`\`esql
  ROW a=1.8
  | EVAL cos=COS(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.cosh', {
        defaultMessage: 'COSH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.cosh.markdown', {
            defaultMessage: `
  ### COSH
  Returns the [hyperbolic cosine](https://en.wikipedia.org/wiki/Hyperbolic_functions) of a number.

  \`\`\`esql
  ROW a=1.8
  | EVAL cosh=COSH(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.date_diff', {
        defaultMessage: 'DATE_DIFF',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.date_diff.markdown',
            {
              defaultMessage: `
  ### DATE DIFF
  Subtracts the \`startTimestamp\` from the \`endTimestamp\` and returns the difference in multiples of \`unit\`.
  If \`startTimestamp\` is later than the \`endTimestamp\`, negative values are returned.

  \`\`\`esql
  ROW date1 = TO_DATETIME("2023-12-02T11:00:00.000Z"),
      date2 = TO_DATETIME("2023-12-02T11:00:00.001Z")
  | EVAL dd_ms = DATE_DIFF("microseconds", date1, date2)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.date_extract', {
        defaultMessage: 'DATE_EXTRACT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.date_extract.markdown',
            {
              defaultMessage: `
  ### DATE EXTRACT
  Extracts parts of a date, like year, month, day, hour.

  \`\`\`esql
  ROW date = DATE_PARSE("yyyy-MM-dd", "2022-05-06")
  | EVAL year = DATE_EXTRACT("year", date)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.date_format', {
        defaultMessage: 'DATE_FORMAT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.date_format.markdown',
            {
              defaultMessage: `
  ### DATE FORMAT
  Returns a string representation of a date, in the provided format.

  \`\`\`esql
  FROM employees
  | KEEP first_name, last_name, hire_date
  | EVAL hired = DATE_FORMAT("yyyy-MM-dd", hire_date)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.date_parse', {
        defaultMessage: 'DATE_PARSE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.date_parse.markdown',
            {
              defaultMessage: `
  ### DATE PARSE
  Returns a date by parsing the second argument using the format specified in the first argument.

  \`\`\`esql
  ROW date_string = "2022-05-06"
  | EVAL date = DATE_PARSE("yyyy-MM-dd", date_string)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.date_trunc', {
        defaultMessage: 'DATE_TRUNC',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.date_trunc.markdown',
            {
              defaultMessage: `
  ### DATE TRUNC
  Rounds down a date to the closest interval since epoch, which starts at \`0001-01-01T00:00:00Z\`.

  \`\`\`esql
  FROM employees
  | KEEP first_name, last_name, hire_date
  | EVAL year_hired = DATE_TRUNC(1 year, hire_date)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.e', {
        defaultMessage: 'E',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.e.markdown', {
            defaultMessage: `
  ### E
  Returns [Euler’s number](https://en.wikipedia.org/wiki/E_(mathematical_constant)).

  \`\`\`esql
  ROW E()
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.ends_with', {
        defaultMessage: 'ENDS_WITH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.ends_with.markdown',
            {
              defaultMessage: `
  ### ENDS WITH
  Returns a boolean that indicates whether a keyword string ends with another string.

  \`\`\`esql
  FROM employees
  | KEEP last_name
  | EVAL ln_E = ENDS_WITH(last_name, "d")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.exp', {
        defaultMessage: 'EXP',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.exp.markdown', {
            defaultMessage: `
  ### EXP
  Returns the value of e raised to the power of the given number.

  \`\`\`esql
  ROW d = 5.0
  | EVAL s = EXP(d)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.floor', {
        defaultMessage: 'FLOOR',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.floor.markdown',
            {
              defaultMessage: `
  ### FLOOR
  Round a number down to the nearest integer.

  \`\`\`esql
  ROW a=1.8
  | EVAL a=FLOOR(a)
  \`\`\`
  Note: This is a noop for \`long\` (including unsigned) and \`integer\`.
  For \`double\` this picks the closest \`double\` value to the integer
  similar to [Math.floor](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#floor(double)).
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.from_base64', {
        defaultMessage: 'FROM_BASE64',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.from_base64.markdown',
            {
              defaultMessage: `
  ### FROM BASE64
  Decode a base64 string.

  \`\`\`esql
  ROW a = "ZWxhc3RpYw=="
  | EVAL d = FROM_BASE64(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.greatest', {
        defaultMessage: 'GREATEST',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.greatest.markdown',
            {
              defaultMessage: `
  ### GREATEST
  Returns the maximum value from multiple columns. This is similar to [\`MV_MAX\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/mv-functions#esql-mv_max)
  except it is intended to run on multiple columns at once.

  \`\`\`esql
  ROW a = 10, b = 20
  | EVAL g = GREATEST(a, b)
  \`\`\`
  Note: When run on \`keyword\` or \`text\` fields, this returns the last string in alphabetical order. When run on \`boolean\` columns this will return \`true\` if any values are \`true\`.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.hash', {
        defaultMessage: 'HASH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.hash.markdown', {
            defaultMessage: `
  ### HASH
  Computes the hash of the input using various algorithms such as MD5, SHA, SHA-224, SHA-256, SHA-384, SHA-512.

  \`\`\`esql
  FROM sample_data
  | WHERE message != "Connection error"
  | EVAL md5 = hash("md5", message), sha256 = hash("sha256", message)
  | KEEP message, md5, sha256
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.hypot', {
        defaultMessage: 'HYPOT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.hypot.markdown',
            {
              defaultMessage: `
  ### HYPOT
  Returns the hypotenuse of two numbers. The input can be any numeric values, the return value is always a double.
  Hypotenuses of infinities are null.

  \`\`\`esql
  ROW a = 3.0, b = 4.0
  | EVAL c = HYPOT(a, b)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.ip_prefix', {
        defaultMessage: 'IP_PREFIX',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.ip_prefix.markdown',
            {
              defaultMessage: `
  ### IP PREFIX
  Truncates an IP to a given prefix length.

  \`\`\`esql
  ROW ip4 = to_ip("1.2.3.4"), ip6 = TO_IP("fe80::cae2:65ff:fece:feb9")
  | EVAL ip4_prefix = IP_PREFIX(ip4, 24, 0), ip6_prefix = IP_PREFIX(ip6, 0, 112);
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.kql', {
        defaultMessage: 'KQL',
      }),
      preview: true,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.kql.markdown', {
            defaultMessage: `
  ### KQL
  Performs a KQL query. Returns true if the provided KQL query string matches the row.

  \`\`\`esql
  FROM books
  | WHERE KQL("author: Faulkner")
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.least', {
        defaultMessage: 'LEAST',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.least.markdown',
            {
              defaultMessage: `
  ### LEAST
  Returns the minimum value from multiple columns. This is similar to [\`MV_MIN\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/mv-functions#esql-mv_min) except it is intended to run on multiple columns at once.

  \`\`\`esql
  ROW a = 10, b = 20
  | EVAL l = LEAST(a, b)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.left', {
        defaultMessage: 'LEFT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.left.markdown', {
            defaultMessage: `
  ### LEFT
  Returns the substring that extracts *length* chars from *string* starting from the left.

  \`\`\`esql
  FROM employees
  | KEEP last_name
  | EVAL left = LEFT(last_name, 3)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.length', {
        defaultMessage: 'LENGTH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.length.markdown',
            {
              defaultMessage: `
  ### LENGTH
  Returns the character length of a string.

  \`\`\`esql
  FROM airports
  | WHERE country == "India"
  | KEEP city
  | EVAL fn_length = LENGTH(city)
  \`\`\`
  Note: All strings are in UTF-8, so a single character can use multiple bytes.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.locate', {
        defaultMessage: 'LOCATE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.locate.markdown',
            {
              defaultMessage: `
  ### LOCATE
  Returns an integer that indicates the position of a keyword substring within another string.
  Returns \`0\` if the substring cannot be found.
  Note that string positions start from \`1\`.

  \`\`\`esql
  ROW a = "hello"
  | EVAL a_ll = LOCATE(a, "ll")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.log', {
        defaultMessage: 'LOG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.log.markdown', {
            defaultMessage: `
  ### LOG
  Returns the logarithm of a value to a base. The input can be any numeric value, the return value is always a double.

  Logs of zero, negative numbers, and base of one return \`null\` as well as a warning.

  \`\`\`esql
  ROW base = 2.0, value = 8.0
  | EVAL s = LOG(base, value)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.log10', {
        defaultMessage: 'LOG10',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.log10.markdown',
            {
              defaultMessage: `
  ### LOG10
  Returns the logarithm of a value to base 10. The input can be any numeric value, the return value is always a double.

  Logs of 0 and negative numbers return \`null\` as well as a warning.

  \`\`\`esql
  ROW d = 1000.0
  | EVAL s = LOG10(d)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.ltrim', {
        defaultMessage: 'LTRIM',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.ltrim.markdown',
            {
              defaultMessage: `
  ### LTRIM
  Removes leading whitespaces from a string.

  \`\`\`esql
  ROW message = "   some text  ",  color = " red "
  | EVAL message = LTRIM(message)
  | EVAL color = LTRIM(color)
  | EVAL message = CONCAT("'", message, "'")
  | EVAL color = CONCAT("'", color, "'")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.match', {
        defaultMessage: 'MATCH',
      }),
      preview: true,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.match.markdown',
            {
              defaultMessage: `
  ### MATCH
  Use \`MATCH\` to perform a [match query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-match-query) on the specified field.
  Using \`MATCH\` is equivalent to using the \`match\` query in the Elasticsearch Query DSL.

  Match can be used on fields from the text family like [text](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/text) and [semantic_text](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/semantic-text),
  as well as other field types like keyword, boolean, dates, and numeric types.
  When Match is used on a [semantic_text](https://www.elastic.co/docs/reference/elasticsearch/mapping-reference/semantic-text) field, it will perform a semantic query on the field.

  Match can use [function named parameters](https://www.elastic.co/docs/reference/query-languages/esql/esql-syntax#esql-function-named-params) to specify additional options for the match query.
  All [match query parameters](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-match-query#match-field-params) are supported.

  For a simplified syntax, you can use the [match operator](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/operators#esql-match-operator) \`:\` operator instead of \`MATCH\`.

  \`MATCH\` returns true if the provided query matches the row.

  \`\`\`esql
  FROM books
  | WHERE MATCH(author, "Faulkner")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.md5', {
        defaultMessage: 'MD5',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.md5.markdown', {
            defaultMessage: `
  ### MD5
  Computes the MD5 hash of the input.

  \`\`\`esql
  FROM sample_data
  | WHERE message != "Connection error"
  | EVAL md5 = md5(message)
  | KEEP message, md5
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.multi_match', {
        defaultMessage: 'MULTI_MATCH',
      }),
      preview: true,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.multi_match.markdown',
            {
              defaultMessage: `
  ### MULTI MATCH
  Use \`MULTI_MATCH\` to perform a [multi-match query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-match-query#query-dsl-multi-match-query) on the specified field.
  The multi_match query builds on the match query to allow multi-field queries.

  \`\`\`esql
  FROM books
  | WHERE MULTI_MATCH("Faulkner", author, description)
  | KEEP book_no, author
  | SORT book_no
  | LIMIT 5
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_append', {
        defaultMessage: 'MV_APPEND',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_append.markdown',
            {
              defaultMessage: `
  ### MV APPEND
  Concatenates values of two multi-value fields.

  \`\`\`esql
  FROM employees
  | WHERE emp_no == 10039 OR emp_no == 10040
  | SORT emp_no
  | EVAL dates = MV_APPEND(birth_date, hire_date)
  | KEEP emp_no, birth_date, hire_date, dates
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_avg', {
        defaultMessage: 'MV_AVG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_avg.markdown',
            {
              defaultMessage: `
  ### MV AVG
  Converts a multivalued field into a single valued field containing the average of all of the values.

  \`\`\`esql
  ROW a=[3, 5, 1, 6]
  | EVAL avg_a = MV_AVG(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_concat', {
        defaultMessage: 'MV_CONCAT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_concat.markdown',
            {
              defaultMessage: `
  ### MV CONCAT
  Converts a multivalued string expression into a single valued column containing the concatenation of all values separated by a delimiter.

  \`\`\`esql
  ROW a=["foo", "zoo", "bar"]
  | EVAL j = MV_CONCAT(a, ", ")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_count', {
        defaultMessage: 'MV_COUNT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_count.markdown',
            {
              defaultMessage: `
  ### MV COUNT
  Converts a multivalued expression into a single valued column containing a count of the number of values.

  \`\`\`esql
  ROW a=["foo", "zoo", "bar"]
  | EVAL count_a = MV_COUNT(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_dedupe', {
        defaultMessage: 'MV_DEDUPE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_dedupe.markdown',
            {
              defaultMessage: `
  ### MV DEDUPE
  Remove duplicate values from a multivalued field.

  \`\`\`esql
  ROW a=["foo", "foo", "bar", "foo"]
  | EVAL dedupe_a = MV_DEDUPE(a)
  \`\`\`
  Note: \`MV_DEDUPE\` may, but won’t always, sort the values in the column.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_first', {
        defaultMessage: 'MV_FIRST',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_first.markdown',
            {
              defaultMessage: `
  ### MV FIRST
  Converts a multivalued expression into a single valued column containing the
  first value. This is most useful when reading from a function that emits
  multivalued columns in a known order like [\`SPLIT\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/string-functions#esql-split).

  \`\`\`esql
  ROW a="foo;bar;baz"
  | EVAL first_a = MV_FIRST(SPLIT(a, ";"))
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_last', {
        defaultMessage: 'MV_LAST',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_last.markdown',
            {
              defaultMessage: `
  ### MV LAST
  Converts a multivalue expression into a single valued column containing the last
  value. This is most useful when reading from a function that emits multivalued
  columns in a known order like [\`SPLIT\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/string-functions#esql-split).

  \`\`\`esql
  ROW a="foo;bar;baz"
  | EVAL last_a = MV_LAST(SPLIT(a, ";"))
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_max', {
        defaultMessage: 'MV_MAX',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_max.markdown',
            {
              defaultMessage: `
  ### MV MAX
  Converts a multivalued expression into a single valued column containing the maximum value.

  \`\`\`esql
  ROW a=[3, 5, 1]
  | EVAL max_a = MV_MAX(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_median', {
        defaultMessage: 'MV_MEDIAN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_median.markdown',
            {
              defaultMessage: `
  ### MV MEDIAN
  Converts a multivalued field into a single valued field containing the median value.

  \`\`\`esql
  ROW a=[3, 5, 1]
  | EVAL median_a = MV_MEDIAN(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate(
        'languageDocumentation.documentationESQL.mv_median_absolute_deviation',
        {
          defaultMessage: 'MV_MEDIAN_ABSOLUTE_DEVIATION',
        }
      ),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_median_absolute_deviation.markdown',
            {
              defaultMessage: `
  ### MV MEDIAN ABSOLUTE DEVIATION
  Converts a multivalued field into a single valued field containing the median absolute deviation.

  It is calculated as the median of each data point’s deviation from the median of the entire sample. That is, for a random variable \`X\`, the median absolute deviation is \`median(|median(X) - X|)\`.

  \`\`\`esql
  ROW values = [0, 2, 5, 6]
  | EVAL median_absolute_deviation = MV_MEDIAN_ABSOLUTE_DEVIATION(values), median = MV_MEDIAN(values)
  \`\`\`
  Note: If the field has an even number of values, the medians will be calculated as the average of the middle two values. If the value is not a floating point number, the averages are rounded towards 0.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_min', {
        defaultMessage: 'MV_MIN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_min.markdown',
            {
              defaultMessage: `
  ### MV MIN
  Converts a multivalued expression into a single valued column containing the minimum value.

  \`\`\`esql
  ROW a=[2, 1]
  | EVAL min_a = MV_MIN(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_percentile', {
        defaultMessage: 'MV_PERCENTILE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_percentile.markdown',
            {
              defaultMessage: `
  ### MV PERCENTILE
  Converts a multivalued field into a single valued field containing the value at which a certain percentage of observed values occur.

  \`\`\`esql
  ROW values = [5, 5, 10, 12, 5000]
  | EVAL p50 = MV_PERCENTILE(values, 50), median = MV_MEDIAN(values)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_pseries_weighted_sum', {
        defaultMessage: 'MV_PSERIES_WEIGHTED_SUM',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_pseries_weighted_sum.markdown',
            {
              defaultMessage: `
  ### MV PSERIES WEIGHTED SUM
  Converts a multivalued expression into a single-valued column by multiplying every element on the input list by its corresponding term in P-Series and computing the sum.

  \`\`\`esql
  ROW a = [70.0, 45.0, 21.0, 21.0, 21.0]
  | EVAL sum = MV_PSERIES_WEIGHTED_SUM(a, 1.5)
  | KEEP sum
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_slice', {
        defaultMessage: 'MV_SLICE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_slice.markdown',
            {
              defaultMessage: `
  ### MV SLICE
  Returns a subset of the multivalued field using the start and end index values.
  This is most useful when reading from a function that emits multivalued columns
  in a known order like [\`SPLIT\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/string-functions#esql-split) or [\`MV_SORT\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/mv-functions#esql-mv_sort).

  \`\`\`esql
  row a = [1, 2, 2, 3]
  | eval a1 = mv_slice(a, 1), a2 = mv_slice(a, 2, 3)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_sort', {
        defaultMessage: 'MV_SORT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_sort.markdown',
            {
              defaultMessage: `
  ### MV SORT
  Sorts a multivalued field in lexicographical order.

  \`\`\`esql
  ROW a = [4, 2, -3, 2]
  | EVAL sa = mv_sort(a), sd = mv_sort(a, "DESC")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_sum', {
        defaultMessage: 'MV_SUM',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_sum.markdown',
            {
              defaultMessage: `
  ### MV SUM
  Converts a multivalued field into a single valued field containing the sum of all of the values.

  \`\`\`esql
  ROW a=[3, 5, 6]
  | EVAL sum_a = MV_SUM(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.mv_zip', {
        defaultMessage: 'MV_ZIP',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.mv_zip.markdown',
            {
              defaultMessage: `
  ### MV ZIP
  Combines the values from two multivalued fields with a delimiter that joins them together.

  \`\`\`esql
  ROW a = ["x", "y", "z"], b = ["1", "2"]
  | EVAL c = mv_zip(a, b, "-")
  | KEEP a, b, c
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.now', {
        defaultMessage: 'NOW',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.now.markdown', {
            defaultMessage: `
  ### NOW
  Returns current date and time.

  \`\`\`esql
  ROW current_date = NOW()
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.pi', {
        defaultMessage: 'PI',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.pi.markdown', {
            defaultMessage: `
  ### PI
  Returns [Pi](https://en.wikipedia.org/wiki/Pi), the ratio of a circle’s circumference to its diameter.

  \`\`\`esql
  ROW PI()
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.pow', {
        defaultMessage: 'POW',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.pow.markdown', {
            defaultMessage: `
  ### POW
  Returns the value of \`base\` raised to the power of \`exponent\`.

  \`\`\`esql
  ROW base = 2.0, exponent = 2
  | EVAL result = POW(base, exponent)
  \`\`\`
  Note: It is still possible to overflow a double result here; in that case, null will be returned.
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.qstr', {
        defaultMessage: 'QSTR',
      }),
      preview: true,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.qstr.markdown', {
            defaultMessage: `
  ### QSTR
  Performs a [query string query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-query-string-query). Returns true if the provided query string matches the row.

  \`\`\`esql
  FROM books
  | WHERE QSTR("author: Faulkner")
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.repeat', {
        defaultMessage: 'REPEAT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.repeat.markdown',
            {
              defaultMessage: `
  ### REPEAT
  Returns a string constructed by concatenating \`string\` with itself the specified \`number\` of times.

  \`\`\`esql
  ROW a = "Hello!"
  | EVAL triple_a = REPEAT(a, 3)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.replace', {
        defaultMessage: 'REPLACE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.replace.markdown',
            {
              defaultMessage: `
  ### REPLACE
  The function substitutes in the string \`str\` any match of the regular expression \`regex\`
  with the replacement string \`newStr\`.

  \`\`\`esql
  ROW str = "Hello World"
  | EVAL str = REPLACE(str, "World", "Universe")
  | KEEP str
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.reverse', {
        defaultMessage: 'REVERSE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.reverse.markdown',
            {
              defaultMessage: `
  ### REVERSE
  Returns a new string representing the input string in reverse order.

  \`\`\`esql
  ROW message = "Some Text" | EVAL message_reversed = REVERSE(message);
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.right', {
        defaultMessage: 'RIGHT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.right.markdown',
            {
              defaultMessage: `
  ### RIGHT
  Return the substring that extracts *length* chars from *str* starting from the right.

  \`\`\`esql
  FROM employees
  | KEEP last_name
  | EVAL right = RIGHT(last_name, 3)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.round', {
        defaultMessage: 'ROUND',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.round.markdown',
            {
              defaultMessage: `
  ### ROUND
  Rounds a number to the specified number of decimal places.
  Defaults to 0, which returns the nearest integer. If the
  precision is a negative number, rounds to the number of digits left
  of the decimal point.

  \`\`\`esql
  FROM employees
  | KEEP first_name, last_name, height
  | EVAL height_ft = ROUND(height * 3.281, 1)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.round_to', {
        defaultMessage: 'ROUND_TO',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.round_to.markdown',
            {
              defaultMessage: `
  ### ROUND TO
  Rounds down to one of a list of fixed points.

  \`\`\`esql
  FROM employees
  | STATS COUNT(*) BY birth_window=ROUND_TO(
      birth_date,
      "1900-01-01T00:00:00Z"::DATETIME,
      "1950-01-01T00:00:00Z"::DATETIME,
      "1955-01-01T00:00:00Z"::DATETIME,
      "1960-01-01T00:00:00Z"::DATETIME,
      "1965-01-01T00:00:00Z"::DATETIME,
      "1970-01-01T00:00:00Z"::DATETIME,
      "1975-01-01T00:00:00Z"::DATETIME
  )
  | SORT birth_window ASC
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.rtrim', {
        defaultMessage: 'RTRIM',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.rtrim.markdown',
            {
              defaultMessage: `
  ### RTRIM
  Removes trailing whitespaces from a string.

  \`\`\`esql
  ROW message = "   some text  ",  color = " red "
  | EVAL message = RTRIM(message)
  | EVAL color = RTRIM(color)
  | EVAL message = CONCAT("'", message, "'")
  | EVAL color = CONCAT("'", color, "'")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.scalb', {
        defaultMessage: 'SCALB',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.scalb.markdown',
            {
              defaultMessage: `
  ### SCALB
  Returns the result of \`d * 2 ^ scaleFactor\`,
  Similar to Java's \`scalb\` function. Result is rounded as if
  performed by a single correctly rounded floating-point multiply
  to a member of the double value set.

  \`\`\`esql
  row x = 3.0, y = 10 | eval z = scalb(x, y)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.sha1', {
        defaultMessage: 'SHA1',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.sha1.markdown', {
            defaultMessage: `
  ### SHA1
  Computes the SHA1 hash of the input.

  \`\`\`esql
  FROM sample_data
  | WHERE message != "Connection error"
  | EVAL sha1 = sha1(message)
  | KEEP message, sha1
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.sha256', {
        defaultMessage: 'SHA256',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.sha256.markdown',
            {
              defaultMessage: `
  ### SHA256
  Computes the SHA256 hash of the input.

  \`\`\`esql
  FROM sample_data
  | WHERE message != "Connection error"
  | EVAL sha256 = sha256(message)
  | KEEP message, sha256
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.signum', {
        defaultMessage: 'SIGNUM',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.signum.markdown',
            {
              defaultMessage: `
  ### SIGNUM
  Returns the sign of the given number.
  It returns \`-1\` for negative numbers, \`0\` for \`0\` and \`1\` for positive numbers.

  \`\`\`esql
  ROW d = 100.0
  | EVAL s = SIGNUM(d)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.sin', {
        defaultMessage: 'SIN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.sin.markdown', {
            defaultMessage: `
  ### SIN
  Returns the [sine](https://en.wikipedia.org/wiki/Sine_and_cosine) of an angle.

  \`\`\`esql
  ROW a=1.8
  | EVAL sin=SIN(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.sinh', {
        defaultMessage: 'SINH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.sinh.markdown', {
            defaultMessage: `
  ### SINH
  Returns the [hyperbolic sine](https://en.wikipedia.org/wiki/Hyperbolic_functions) of a number.

  \`\`\`esql
  ROW a=1.8
  | EVAL sinh=SINH(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.space', {
        defaultMessage: 'SPACE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.space.markdown',
            {
              defaultMessage: `
  ### SPACE
  Returns a string made of \`number\` spaces.

  \`\`\`esql
  ROW message = CONCAT("Hello", SPACE(1), "World!");
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.split', {
        defaultMessage: 'SPLIT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.split.markdown',
            {
              defaultMessage: `
  ### SPLIT
  Split a single valued string into multiple strings.

  \`\`\`esql
  ROW words="foo;bar;baz;qux;quux;corge"
  | EVAL word = SPLIT(words, ";")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.sqrt', {
        defaultMessage: 'SQRT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.sqrt.markdown', {
            defaultMessage: `
  ### SQRT
  Returns the square root of a number. The input can be any numeric value, the return value is always a double.
  Square roots of negative numbers and infinities are null.

  \`\`\`esql
  ROW d = 100.0
  | EVAL s = SQRT(d)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_contains', {
        defaultMessage: 'ST_CONTAINS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_contains.markdown',
            {
              defaultMessage: `
  ### ST CONTAINS
  Returns whether the first geometry contains the second geometry.
  This is the inverse of the [ST_WITHIN](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/spatial-functions#esql-st_within) function.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE ST_CONTAINS(city_boundary, TO_GEOSHAPE("POLYGON((109.35 18.3, 109.45 18.3, 109.45 18.4, 109.35 18.4, 109.35 18.3))"))
  | KEEP abbrev, airport, region, city, city_location
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_disjoint', {
        defaultMessage: 'ST_DISJOINT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_disjoint.markdown',
            {
              defaultMessage: `
  ### ST DISJOINT
  Returns whether the two geometries or geometry columns are disjoint.
  This is the inverse of the [ST_INTERSECTS](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/spatial-functions#esql-st_intersects) function.
  In mathematical terms: ST_Disjoint(A, B) ⇔ A ⋂ B = ∅

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE ST_DISJOINT(city_boundary, TO_GEOSHAPE("POLYGON((-10 -60, 120 -60, 120 60, -10 60, -10 -60))"))
  | KEEP abbrev, airport, region, city, city_location
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_distance', {
        defaultMessage: 'ST_DISTANCE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_distance.markdown',
            {
              defaultMessage: `
  ### ST DISTANCE
  Computes the distance between two points.
  For cartesian geometries, this is the pythagorean distance in the same units as the original coordinates.
  For geographic geometries, this is the circular distance along the great circle in meters.

  \`\`\`esql
  FROM airports
  | WHERE abbrev == "CPH"
  | EVAL distance = ST_DISTANCE(location, city_location)
  | KEEP abbrev, name, location, city_location, distance
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_envelope', {
        defaultMessage: 'ST_ENVELOPE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_envelope.markdown',
            {
              defaultMessage: `
  ### ST ENVELOPE
  Determines the minimum bounding box of the supplied geometry.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE abbrev == "CPH"
  | EVAL envelope = ST_ENVELOPE(city_boundary)
  | KEEP abbrev, airport, envelope
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geohash', {
        defaultMessage: 'ST_GEOHASH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geohash.markdown',
            {
              defaultMessage: `
  ### ST GEOHASH
  Calculates the \`geohash\` of the supplied geo_point at the specified precision.
  The result is long encoded. Use [ST_GEOHASH_TO_STRING](#esql-st_geohash_to_string) to convert the result to a string.

  These functions are related to the [\`geo_grid\` query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query)
  and the [\`geohash_grid\` aggregation](https://www.elastic.co/docs/reference/aggregations/search-aggregations-bucket-geohashgrid-aggregation).

  \`\`\`esql
  FROM airports
  | EVAL geohash = ST_GEOHASH(location, 1)
  | STATS
      count = COUNT(*),
      centroid = ST_CENTROID_AGG(location)
        BY geohash
  | WHERE count >= 10
  | EVAL geohashString = ST_GEOHASH_TO_STRING(geohash)
  | KEEP count, centroid, geohashString
  | SORT count DESC, geohashString ASC
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geohash_to_long', {
        defaultMessage: 'ST_GEOHASH_TO_LONG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geohash_to_long.markdown',
            {
              defaultMessage: `
  ### ST GEOHASH TO LONG
  Converts an input value representing a geohash grid-ID in string format into a long.

  \`\`\`esql
  ROW geohash = "u3bu"
  | EVAL geohashLong = ST_GEOHASH_TO_LONG(geohash)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geohash_to_string', {
        defaultMessage: 'ST_GEOHASH_TO_STRING',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geohash_to_string.markdown',
            {
              defaultMessage: `
  ### ST GEOHASH TO STRING
  Converts an input value representing a geohash grid-ID in long format into a string.

  \`\`\`esql
  ROW geohash = TO_LONG(13686180)
  | EVAL geohashString = ST_GEOHASH_TO_STRING(geohash)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geohex', {
        defaultMessage: 'ST_GEOHEX',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geohex.markdown',
            {
              defaultMessage: `
  ### ST GEOHEX
  Calculates the \`geohex\`, the H3 cell-id, of the supplied geo_point at the specified precision.
  The result is long encoded. Use [ST_GEOHEX_TO_STRING](#esql-st_geohex_to_string) to convert the result to a string.

  These functions are related to the [\`geo_grid\` query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query)
  and the [\`geohex_grid\` aggregation](https://www.elastic.co/docs/reference/aggregations/search-aggregations-bucket-geohexgrid-aggregation).

  \`\`\`esql
  FROM airports
  | EVAL geohex = ST_GEOHEX(location, 1)
  | STATS
      count = COUNT(*),
      centroid = ST_CENTROID_AGG(location)
        BY geohex
  | WHERE count >= 10
  | EVAL geohexString = ST_GEOHEX_TO_STRING(geohex)
  | KEEP count, centroid, geohexString
  | SORT count DESC, geohexString ASC
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geohex_to_long', {
        defaultMessage: 'ST_GEOHEX_TO_LONG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geohex_to_long.markdown',
            {
              defaultMessage: `
  ### ST GEOHEX TO LONG
  Converts an input value representing a geohex grid-ID in string format into a long.

  \`\`\`esql
  ROW geohex = "841f059ffffffff"
  | EVAL geohexLong = ST_GEOHEX_TO_LONG(geohex)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geohex_to_string', {
        defaultMessage: 'ST_GEOHEX_TO_STRING',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geohex_to_string.markdown',
            {
              defaultMessage: `
  ### ST GEOHEX TO STRING
  Converts an input value representing a Geohex grid-ID in long format into a string.

  \`\`\`esql
  ROW geohex = 595020895127339007
  | EVAL geohexString = ST_GEOHEX_TO_STRING(geohex)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geotile', {
        defaultMessage: 'ST_GEOTILE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geotile.markdown',
            {
              defaultMessage: `
  ### ST GEOTILE
  Calculates the \`geotile\` of the supplied geo_point at the specified precision.
  The result is long encoded. Use [ST_GEOTILE_TO_STRING](#esql-st_geotile_to_string) to convert the result to a string.

  These functions are related to the [\`geo_grid\` query](https://www.elastic.co/docs/reference/query-languages/query-dsl/query-dsl-geo-grid-query)
  and the [\`geotile_grid\` aggregation](https://www.elastic.co/docs/reference/aggregations/search-aggregations-bucket-geotilegrid-aggregation).

  \`\`\`esql
  FROM airports
  | EVAL geotile = ST_GEOTILE(location, 2)
  | STATS
      count = COUNT(*),
      centroid = ST_CENTROID_AGG(location)
        BY geotile
  | EVAL geotileString = ST_GEOTILE_TO_STRING(geotile)
  | SORT count DESC, geotileString ASC
  | KEEP count, centroid, geotileString
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geotile_to_long', {
        defaultMessage: 'ST_GEOTILE_TO_LONG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geotile_to_long.markdown',
            {
              defaultMessage: `
  ### ST GEOTILE TO LONG
  Converts an input value representing a geotile grid-ID in string format into a long.

  \`\`\`esql
  ROW geotile = "4/8/5"
  | EVAL geotileLong = ST_GEOTILE_TO_LONG(geotile)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_geotile_to_string', {
        defaultMessage: 'ST_GEOTILE_TO_STRING',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_geotile_to_string.markdown',
            {
              defaultMessage: `
  ### ST GEOTILE TO STRING
  Converts an input value representing a geotile grid-ID in long format into a string.

  \`\`\`esql
  ROW geotile = 1152921508901814277
  | EVAL geotileString = ST_GEOTILE_TO_STRING(geotile)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_intersects', {
        defaultMessage: 'ST_INTERSECTS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_intersects.markdown',
            {
              defaultMessage: `
  ### ST INTERSECTS
  Returns true if two geometries intersect.
  They intersect if they have any point in common, including their interior points
  (points along lines or within polygons).
  This is the inverse of the [ST_DISJOINT](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/spatial-functions#esql-st_disjoint) function.
  In mathematical terms: ST_Intersects(A, B) ⇔ A ⋂ B ≠ ∅

  \`\`\`esql
  FROM airports
  | WHERE ST_INTERSECTS(location, TO_GEOSHAPE("POLYGON((42 14, 43 14, 43 15, 42 15, 42 14))"))
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_within', {
        defaultMessage: 'ST_WITHIN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_within.markdown',
            {
              defaultMessage: `
  ### ST WITHIN
  Returns whether the first geometry is within the second geometry.
  This is the inverse of the [ST_CONTAINS](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/spatial-functions#esql-st_contains) function.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE ST_WITHIN(city_boundary, TO_GEOSHAPE("POLYGON((109.1 18.15, 109.6 18.15, 109.6 18.65, 109.1 18.65, 109.1 18.15))"))
  | KEEP abbrev, airport, region, city, city_location
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_x', {
        defaultMessage: 'ST_X',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.st_x.markdown', {
            defaultMessage: `
  ### ST X
  Extracts the \`x\` coordinate from the supplied point.
  If the points is of type \`geo_point\` this is equivalent to extracting the \`longitude\` value.

  \`\`\`esql
  ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")
  | EVAL x =  ST_X(point), y = ST_Y(point)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_xmax', {
        defaultMessage: 'ST_XMAX',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_xmax.markdown',
            {
              defaultMessage: `
  ### ST XMAX
  Extracts the maximum value of the \`x\` coordinates from the supplied geometry.
  If the geometry is of type \`geo_point\` or \`geo_shape\` this is equivalent to extracting the maximum \`longitude\` value.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE abbrev == "CPH"
  | EVAL envelope = ST_ENVELOPE(city_boundary)
  | EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
  | KEEP abbrev, airport, xmin, xmax, ymin, ymax
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_xmin', {
        defaultMessage: 'ST_XMIN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_xmin.markdown',
            {
              defaultMessage: `
  ### ST XMIN
  Extracts the minimum value of the \`x\` coordinates from the supplied geometry.
  If the geometry is of type \`geo_point\` or \`geo_shape\` this is equivalent to extracting the minimum \`longitude\` value.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE abbrev == "CPH"
  | EVAL envelope = ST_ENVELOPE(city_boundary)
  | EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
  | KEEP abbrev, airport, xmin, xmax, ymin, ymax
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_y', {
        defaultMessage: 'ST_Y',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.st_y.markdown', {
            defaultMessage: `
  ### ST Y
  Extracts the \`y\` coordinate from the supplied point.
  If the points is of type \`geo_point\` this is equivalent to extracting the \`latitude\` value.

  \`\`\`esql
  ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")
  | EVAL x =  ST_X(point), y = ST_Y(point)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_ymax', {
        defaultMessage: 'ST_YMAX',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_ymax.markdown',
            {
              defaultMessage: `
  ### ST YMAX
  Extracts the maximum value of the \`y\` coordinates from the supplied geometry.
  If the geometry is of type \`geo_point\` or \`geo_shape\` this is equivalent to extracting the maximum \`latitude\` value.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE abbrev == "CPH"
  | EVAL envelope = ST_ENVELOPE(city_boundary)
  | EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
  | KEEP abbrev, airport, xmin, xmax, ymin, ymax
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.st_ymin', {
        defaultMessage: 'ST_YMIN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.st_ymin.markdown',
            {
              defaultMessage: `
  ### ST YMIN
  Extracts the minimum value of the \`y\` coordinates from the supplied geometry.
  If the geometry is of type \`geo_point\` or \`geo_shape\` this is equivalent to extracting the minimum \`latitude\` value.

  \`\`\`esql
  FROM airport_city_boundaries
  | WHERE abbrev == "CPH"
  | EVAL envelope = ST_ENVELOPE(city_boundary)
  | EVAL xmin = ST_XMIN(envelope), xmax = ST_XMAX(envelope), ymin = ST_YMIN(envelope), ymax = ST_YMAX(envelope)
  | KEEP abbrev, airport, xmin, xmax, ymin, ymax
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.starts_with', {
        defaultMessage: 'STARTS_WITH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.starts_with.markdown',
            {
              defaultMessage: `
  ### STARTS WITH
  Returns a boolean that indicates whether a keyword string starts with another string.

  \`\`\`esql
  FROM employees
  | KEEP last_name
  | EVAL ln_S = STARTS_WITH(last_name, "B")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.substring', {
        defaultMessage: 'SUBSTRING',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.substring.markdown',
            {
              defaultMessage: `
  ### SUBSTRING
  Returns a substring of a string, specified by a start position and an optional length.

  \`\`\`esql
  FROM employees
  | KEEP last_name
  | EVAL ln_sub = SUBSTRING(last_name, 1, 3)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.tan', {
        defaultMessage: 'TAN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.tan.markdown', {
            defaultMessage: `
  ### TAN
  Returns the [tangent](https://en.wikipedia.org/wiki/Sine_and_cosine) of an angle.

  \`\`\`esql
  ROW a=1.8
  | EVAL tan=TAN(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.tanh', {
        defaultMessage: 'TANH',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.tanh.markdown', {
            defaultMessage: `
  ### TANH
  Returns the [hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_functions) of a number.

  \`\`\`esql
  ROW a=1.8
  | EVAL tanh=TANH(a)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.tau', {
        defaultMessage: 'TAU',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.tau.markdown', {
            defaultMessage: `
  ### TAU
  Returns the [ratio](https://tauday.com/tau-manifesto) of a circle’s circumference to its radius.

  \`\`\`esql
  ROW TAU()
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_aggregate_metric_double', {
        defaultMessage: 'TO_AGGREGATE_METRIC_DOUBLE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_aggregate_metric_double.markdown',
            {
              defaultMessage: `
  ### TO AGGREGATE METRIC DOUBLE
  Encode a numeric to an aggregate_metric_double.

  \`\`\`esql
  ROW x = 3892095203
  | EVAL agg_metric = TO_AGGREGATE_METRIC_DOUBLE(x)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_base64', {
        defaultMessage: 'TO_BASE64',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_base64.markdown',
            {
              defaultMessage: `
  ### TO BASE64
  Encode a string to a base64 string.

  \`\`\`esql
  ROW a = "elastic"
  | EVAL e = TO_BASE64(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_boolean', {
        defaultMessage: 'TO_BOOLEAN',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_boolean.markdown',
            {
              defaultMessage: `
  ### TO BOOLEAN
  Converts an input value to a boolean value.
  A string value of \`true\` will be case-insensitive converted to the Boolean \`true\`.
  For anything else, including the empty string, the function will return \`false\`.
  The numerical value of \`0\` will be converted to \`false\`, anything else will be converted to \`true\`.

  \`\`\`esql
  ROW str = ["true", "TRuE", "false", "", "yes", "1"]
  | EVAL bool = TO_BOOLEAN(str)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_cartesianpoint', {
        defaultMessage: 'TO_CARTESIANPOINT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_cartesianpoint.markdown',
            {
              defaultMessage: `
  ### TO CARTESIANPOINT
  Converts an input value to a \`cartesian_point\` value.
  A string will only be successfully converted if it respects the
  [WKT Point](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) format.

  \`\`\`esql
  ROW wkt = ["POINT(4297.11 -1475.53)", "POINT(7580.93 2272.77)"]
  | MV_EXPAND wkt
  | EVAL pt = TO_CARTESIANPOINT(wkt)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_cartesianshape', {
        defaultMessage: 'TO_CARTESIANSHAPE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_cartesianshape.markdown',
            {
              defaultMessage: `
  ### TO CARTESIANSHAPE
  Converts an input value to a \`cartesian_shape\` value.
  A string will only be successfully converted if it respects the
  [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) format.

  \`\`\`esql
  ROW wkt = ["POINT(4297.11 -1475.53)", "POLYGON ((3339584.72 1118889.97, 4452779.63 4865942.27, 2226389.81 4865942.27, 1113194.90 2273030.92, 3339584.72 1118889.97))"]
  | MV_EXPAND wkt
  | EVAL geom = TO_CARTESIANSHAPE(wkt)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_date_nanos', {
        defaultMessage: 'TO_DATE_NANOS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_date_nanos.markdown',
            {
              defaultMessage: `
  ### TO DATE NANOS
  Converts an input to a nanosecond-resolution date value (aka date_nanos).

  \`\`\`esql
  FROM date_nanos
  | WHERE MV_MIN(nanos) < TO_DATE_NANOS("2023-10-23T12:27:28.948Z")
      AND millis > "2000-01-01"
  | SORT nanos DESC
  \`\`\`
  Note: The range for date nanos is 1970-01-01T00:00:00.000000000Z to 2262-04-11T23:47:16.854775807Z, attempting to convert values outside of that range will result in null with a warning.  Additionally, integers cannot be converted into date nanos, as the range of integer nanoseconds only covers about 2 seconds after epoch.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_dateperiod', {
        defaultMessage: 'TO_DATEPERIOD',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_dateperiod.markdown',
            {
              defaultMessage: `
  ### TO DATEPERIOD
  Converts an input value into a \`date_period\` value.

  \`\`\`esql
  ROW x = "2024-01-01"::datetime
  | EVAL y = x + "3 DAYS"::date_period, z = x - TO_DATEPERIOD("3 days");
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_datetime', {
        defaultMessage: 'TO_DATETIME',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_datetime.markdown',
            {
              defaultMessage: `
  ### TO DATETIME
  Converts an input value to a date value.
  A string will only be successfully converted if it’s respecting the format \`yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\`.
  To convert dates in other formats, use [\`DATE_PARSE\`](https://www.elastic.co/docs/reference/query-languages/esql/functions-operators/date-time-functions#esql-date_parse).

  \`\`\`esql
  ROW string = ["1953-09-02T00:00:00.000Z", "1964-06-02T00:00:00.000Z", "1964-06-02 00:00:00"]
  | EVAL datetime = TO_DATETIME(string)
  \`\`\`
  Note: Note that when converting from nanosecond resolution to millisecond resolution with this function, the nanosecond date is truncated, not rounded.
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_degrees', {
        defaultMessage: 'TO_DEGREES',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_degrees.markdown',
            {
              defaultMessage: `
  ### TO DEGREES
  Converts a number in [radians](https://en.wikipedia.org/wiki/Radian) to [degrees](https://en.wikipedia.org/wiki/Degree_(angle)).

  \`\`\`esql
  ROW rad = [1.57, 3.14, 4.71]
  | EVAL deg = TO_DEGREES(rad)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_double', {
        defaultMessage: 'TO_DOUBLE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_double.markdown',
            {
              defaultMessage: `
  ### TO DOUBLE
  Converts an input value to a double value. If the input parameter is of a date type,
  its value will be interpreted as milliseconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time),
  converted to double. Boolean \`true\` will be converted to double \`1.0\`, \`false\` to \`0.0\`.

  \`\`\`esql
  ROW str1 = "5.20128E11", str2 = "foo"
  | EVAL dbl = TO_DOUBLE("520128000000"), dbl1 = TO_DOUBLE(str1), dbl2 = TO_DOUBLE(str2)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_geopoint', {
        defaultMessage: 'TO_GEOPOINT',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_geopoint.markdown',
            {
              defaultMessage: `
  ### TO GEOPOINT
  Converts an input value to a \`geo_point\` value.
  A string will only be successfully converted if it respects the
  [WKT Point](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) format.

  \`\`\`esql
  ROW wkt = "POINT(42.97109630194 14.7552534413725)"
  | EVAL pt = TO_GEOPOINT(wkt)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_geoshape', {
        defaultMessage: 'TO_GEOSHAPE',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_geoshape.markdown',
            {
              defaultMessage: `
  ### TO GEOSHAPE
  Converts an input value to a \`geo_shape\` value.
  A string will only be successfully converted if it respects the
  [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) format.

  \`\`\`esql
  ROW wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"
  | EVAL geom = TO_GEOSHAPE(wkt)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_integer', {
        defaultMessage: 'TO_INTEGER',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_integer.markdown',
            {
              defaultMessage: `
  ### TO INTEGER
  Converts an input value to an integer value.
  If the input parameter is of a date type, its value will be interpreted as milliseconds
  since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time), converted to integer.
  Boolean \`true\` will be converted to integer \`1\`, \`false\` to \`0\`.

  \`\`\`esql
  ROW long = [5013792, 2147483647, 501379200000]
  | EVAL int = TO_INTEGER(long)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_ip', {
        defaultMessage: 'TO_IP',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_ip.markdown',
            {
              defaultMessage: `
  ### TO IP
  Converts an input string to an IP value.

  \`\`\`esql
  ROW str1 = "1.1.1.1", str2 = "foo"
  | EVAL ip1 = TO_IP(str1), ip2 = TO_IP(str2)
  | WHERE CIDR_MATCH(ip1, "1.0.0.0/8")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_long', {
        defaultMessage: 'TO_LONG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_long.markdown',
            {
              defaultMessage: `
  ### TO LONG
  Converts an input value to a long value. If the input parameter is of a date type,
  its value will be interpreted as milliseconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time), converted to long.
  Boolean \`true\` will be converted to long \`1\`, \`false\` to \`0\`.

  \`\`\`esql
  ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"
  | EVAL long1 = TO_LONG(str1), long2 = TO_LONG(str2), long3 = TO_LONG(str3)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_lower', {
        defaultMessage: 'TO_LOWER',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_lower.markdown',
            {
              defaultMessage: `
  ### TO LOWER
  Returns a new string representing the input string converted to lower case.

  \`\`\`esql
  ROW message = "Some Text"
  | EVAL message_lower = TO_LOWER(message)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_radians', {
        defaultMessage: 'TO_RADIANS',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_radians.markdown',
            {
              defaultMessage: `
  ### TO RADIANS
  Converts a number in [degrees](https://en.wikipedia.org/wiki/Degree_(angle)) to [radians](https://en.wikipedia.org/wiki/Radian).

  \`\`\`esql
  ROW deg = [90.0, 180.0, 270.0]
  | EVAL rad = TO_RADIANS(deg)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_string', {
        defaultMessage: 'TO_STRING',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_string.markdown',
            {
              defaultMessage: `
  ### TO STRING
  Converts an input value into a string.

  \`\`\`esql
  ROW a=10
  | EVAL j = TO_STRING(a)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_timeduration', {
        defaultMessage: 'TO_TIMEDURATION',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_timeduration.markdown',
            {
              defaultMessage: `
  ### TO TIMEDURATION
  Converts an input value into a \`time_duration\` value.

  \`\`\`esql
  ROW x = "2024-01-01"::datetime
  | EVAL y = x + "3 hours"::time_duration, z = x - TO_TIMEDURATION("3 hours");
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_unsigned_long', {
        defaultMessage: 'TO_UNSIGNED_LONG',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_unsigned_long.markdown',
            {
              defaultMessage: `
  ### TO UNSIGNED LONG
  Converts an input value to an unsigned long value. If the input parameter is of a date type,
  its value will be interpreted as milliseconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time), converted to unsigned long.
  Boolean \`true\` will be converted to unsigned long \`1\`, \`false\` to \`0\`.

  \`\`\`esql
  ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"
  | EVAL long1 = TO_UNSIGNED_LONG(str1), long2 = TO_ULONG(str2), long3 = TO_UL(str3)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_upper', {
        defaultMessage: 'TO_UPPER',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_upper.markdown',
            {
              defaultMessage: `
  ### TO UPPER
  Returns a new string representing the input string converted to upper case.

  \`\`\`esql
  ROW message = "Some Text"
  | EVAL message_upper = TO_UPPER(message)
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.to_version', {
        defaultMessage: 'TO_VERSION',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate(
            'languageDocumentation.documentationESQL.to_version.markdown',
            {
              defaultMessage: `
  ### TO VERSION
  Converts an input string to a version value.

  \`\`\`esql
  ROW v = TO_VERSION("1.2.3")
  \`\`\`
  `,
              description:
                'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
              ignoreTag: true,
            }
          )}
        />
      ),
    },
    // Do not edit manually... automatically generated by scripts/generate_esql_docs.ts
    {
      label: i18n.translate('languageDocumentation.documentationESQL.trim', {
        defaultMessage: 'TRIM',
      }),
      preview: false,
      description: (
        <Markdown
          openLinksInNewTab
          readOnly
          enableSoftLineBreaks
          markdownContent={i18n.translate('languageDocumentation.documentationESQL.trim.markdown', {
            defaultMessage: `
  ### TRIM
  Removes leading and trailing whitespaces from a string.

  \`\`\`esql
  ROW message = "   some text  ",  color = " red "
  | EVAL message = TRIM(message)
  | EVAL color = TRIM(color)
  \`\`\`
  `,
            description:
              'Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)',
            ignoreTag: true,
          })}
        />
      ),
    },
  ],
};
