/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import del from 'del';
import globby from 'globby';
import { resolve } from 'path';
import { generateStaticFsVolume } from '@elastic/static-fs';

async function deletePathsList(list) {
  for (const path of list) {
    await del(path);
  }
}

async function getTopLevelNodeModulesFolders(rootDir) {
  const nodeModulesFoldersForCwd = await globby(['**/node_modules', '!**/node_modules/**/*'], {
    cwd: rootDir,
    onlyDirectories: true,
  });

  return nodeModulesFoldersForCwd.map(folder => resolve(rootDir, folder));
}

export const CreateStaticFsWithNodeModulesTask = {
  description:
    'Creating static filesystem with node_modules, patching entryPoints and deleting node_modules folder',

  async run(config, log, build) {
    const rootDir = build.resolvePath('.');

    // Get all the top node_modules folders
    const nodeModulesFolders = await getTopLevelNodeModulesFolders(rootDir);

    // Define root entry points
    const rootEntryPoints = [build.resolvePath('src/setup_node_env/index.js')];

    // Creates the static filesystem with
    // every node_module we have
    const staticFsAddedPaths = await generateStaticFsVolume(
      rootDir,
      nodeModulesFolders,
      rootEntryPoints
    );

    // Delete node_modules folder
    await deletePathsList(staticFsAddedPaths);
  },
};
