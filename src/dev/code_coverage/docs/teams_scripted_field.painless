String path = doc['coveredFilePath.keyword'].value;
if (path.contains('/apm'))  return "APM";
 else if (path.contains('/canvas')) return "Canvas";
 else if (path.contains('/maps')) return "Maps";
 else if (path.contains('map_')) return "Maps";
 else if (path.contains('/ml')) return "ML";
 else if (path.contains('/transform')) return "ML";
 else if (path.contains('/infra')) return "Infra";
 else if (path.contains('/siem')) return "SIEM";
 else if (path.contains('/endpoint')) return "Endpoint";
 else if (path.contains('logstash'))   return "Logstash";
 else if (path.contains('beat'))   return "Beats";
 else if (path.contains('uptime'))   return "Observability";
 else if (path.contains('observability'))   return "Observability";
 else if (path.contains('tutorials'))   return "Observability";
 else if (path.contains('/code'))   return "Code";
 else if (path.contains('/cross_cluster_replication')) return "Elasticsearch UI";
 else if (path.contains('/index_lifecycle_management')) return "Elasticsearch UI";
 else if (path.contains('/index_management')) return "Elasticsearch UI";
 else if (path.contains('/license_management')) return "Elasticsearch UI";
 else if (path.contains('/management')) return "Elasticsearch UI";
 else if (path.contains('/licensing')) return "Elasticsearch UI";
 else if (path.contains('/public/management'))return "Elasticsearch UI";
 else if (path.contains('/remote_clusters')) return "Elasticsearch UI";
 else if (path.contains('/searchprofiler')) return "Elasticsearch UI";
 else if (path.contains('/searchprofiler')) return "Elasticsearch UI";
 else if (path.contains('/snapshot_restore')) return "Elasticsearch UI";
 else if (path.contains('/rollup')) return "Elasticsearch UI";
 else if (path.contains('/watcher')) return "Elasticsearch UI";
 else if (path.contains('/watcher')) return "Elasticsearch UI";
 else if (path.contains('/file_upload')) return "Elasticsearch UI";
 else if (path.contains('grokdebugger')) return "Elasticsearch UI";
 else if (path.contains('es_ui_shared')) return "Elasticsearch UI";
 else if (path.contains('kibana/x-pack/legacy/server/lib')) return "Elasticsearch UI";
 else if (path.contains('/public/field_editor')) return "Kibana App";
 else if (path.contains('dashboard')) return "Kibana App";
 else if (path.contains('discover')) return "Kibana App";
 else if (path.contains('graph')) return "Kibana App";
 else if (path.contains('timelion')) return "Kibana App";
 else if (path.contains('/lens/')) return "Kibana App";
 else if (path.contains('/core_plugins')) return "Kibana App";
 else if (path.contains('/vislib')) return "Kibana App";
 else if (path.contains('/visualize')) return "Kibana App";
 else if (path.contains('/public/vis/')) return "Kibana App";
 else if (path.contains('/kbn-es')) return "Kibana App";
 else if (path.contains('kuery')) return "Kibana App";
 else if (path.contains('url_shortening')) return "Kibana App";
 else if (path.contains('sample_data')) return "Kibana App";
 else if (path.contains('/home')) return "Kibana App";
 else if (path.contains('/accessibility')) return "Kibana App";
 else if (path.contains('/timeseries')) return "Kibana App";
 else if (path.contains('/point_series')) return "Kibana App";
 else if (path.contains('security')) return "Kibana Security";
 else if (path.contains('privilege')) return "Kibana Security";
 else if (path.contains('/spaces')) return "Kibana Security";
 else if (path.contains('monitoring')) return "Stack Monitoring";
 else if (path.contains('/es_archiver')) return "Kibana Operations";
 else if (path.contains('/dev/build'))   return "Kibana Operations";
 else if (path.contains('/kbn-test'))    return "Kibana Operations";
 else if (path.contains('upgrade'))    return "Kibana Operations";
 else if (path.contains('/kbn-dev-utils')) return "Kibana Operations";
 else if (path.contains('optimize')) return "Kibana Operations";
 else if (path.contains('test_utils')) return "Kibana Operations";
 else if (path.contains('kbn-babel-preset')) return "Kibana Operations";
 else if (path.contains('kibana/server/routes')) return "Kibana Operations";
 else if (path.contains('kibana/src/legacy/server/')) return "Kibana Operations";
 else if (path.contains('kibana/scripts/')) return "Kibana Operations";
 else if (path.contains('kibana/packages/')) return "Kibana Operations";
 else if (path.contains('kibana/src/setup_node_env')) return "Kibana Operations";
 else if (path.contains('/kbn-ui-framework')) return "Kibana Design";
 else if (path.contains('/ui/ui')) return "Kibana Design";
 else if (path.contains('/eui')) return "Kibana Design";
 else if (path.contains('/kbn-es-query')) return "Kibana App Arch";
 else if (path.contains('/kbn-ui-framework')) return "Kibana App Arch";
 else if (path.contains('/kbn-interpreter')) return "Kibana App Arch";
 else if (path.contains('courier')) return "Kibana App Arch";
 else if (path.contains('kbn-config-schema')) return "Kibana Platform";
 else if (path.contains('kibana/src/legacy/utils')) return "Kibana Platform";
 else if (path.contains('saved_objects')) return "Kibana Platform";
 else if (path.contains('/reporting')) return "Kibana Stack Services";
 else if (path.contains('telemetry')) return "Kibana Stack Services";
 else if (path.contains('/kbn-i18n')) return "Kibana Stack Services";
 else if (path.contains('/kbn-analytics'))   return "Kibana Stack Services";
 else if (path.contains('/task_manager'))   return "Kibana Stack Services";
 else if (path.contains('alert'))   return "Kibana Stack Services";
 else if (path.contains('actions'))   return "Kibana Stack Services";
 else return "unknown";
