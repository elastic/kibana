/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import chalk from 'chalk';
import { chmod, lstat, stat, symlink, unlink, writeFile } from 'fs';
import { trim } from 'lodash';
import { resolve } from 'path';
import { promisify } from 'util';
import { REPO_ROOT } from '../constants';

const chmodAsync = promisify(chmod);
const lstatAsync = promisify(lstat);
const statAsync = promisify(stat);
const symlinkAsync = promisify(symlink);
const unlinkAsync = promisify(unlink);
const writeFileAsync = promisify(writeFile);

const KBN_PRECOMMIT_GIT_HOOK_SCRIPT_PATH = resolve(REPO_ROOT, '.git/hooks/kbn_precommit_hook');
const PRECOMMIT_GIT_HOOK_SCRIPT_PATH = resolve(REPO_ROOT, '.git/hooks/pre-commit');

function getKbnPrecommitGitHookScript(rootPath, kbnPrecommitGitHookScriptPath) {
  return trim(`
  #!/usr/bin/env bash
  #
  # ** THIS IS AN AUTO-GENERATED FILE **
  # ** PLEASE DO NOT CHANGE IT MANUALLY **
  # 
  # GENERATED BY ${__dirname}
  # IF YOU WANNA CHANGE SOMETHING INTO THIS SCRIPT
  # PLEASE DELETE ${kbnPrecommitGitHookScriptPath}
  # AND RE-RUN 'yarn kbn bootstrap' or 'node scripts/register_git_hook' IN THE ROOT
  # OF THE CURRENT PROJECT ${rootPath}
  
  set -euo pipefail
  
  # Export Git hook params
  export GIT_PARAMS="$*"
  
  has_node() {
    command -v node >/dev/null 2>&1
  }
  
  has_precommit_script () {
    [ -f package.json ] && cat package.json | grep -q "\\"precommit\\"[[:space:]]*:"
  }
  
  cd "${rootPath}"
  
  # Check if precommit script is defined into the package.json
  has_precommit_script || { echo "Can't found precommit script into package.json"; exit 1; }
  
  # Check if we have node js bin in path
  has_node || { echo "Can't found node bin in the PATH. Please update the PATH to proceed"; exit 1; }
  
  npm run precommit
  
  exit 0`, '\n');
}

async function isKbnGitHookRegistered(kbnGitHookScriptPath, gitHookScriptPath) {
  try {
    await statAsync(kbnGitHookScriptPath);
    await lstatAsync(gitHookScriptPath);
    return true;
  } catch (e) {
    return false;
  }
}

export async function registerPrecommitGitHook(log) {
  log.write(
    chalk.bold(
      `Registering Kibana pre-commit git hook:\n`
    )
  );

  if (await isKbnGitHookRegistered(KBN_PRECOMMIT_GIT_HOOK_SCRIPT_PATH, PRECOMMIT_GIT_HOOK_SCRIPT_PATH)) {
    log.write(`${chalk.green('success')} Kibana pre-commit git hook was already registered.\n`);
    return;
  }

  await writeGitHook(
    KBN_PRECOMMIT_GIT_HOOK_SCRIPT_PATH,
    PRECOMMIT_GIT_HOOK_SCRIPT_PATH,
    getKbnPrecommitGitHookScript(REPO_ROOT, KBN_PRECOMMIT_GIT_HOOK_SCRIPT_PATH)
  );

  log.write(`${chalk.green('success')} Kibana pre-commit git hook was installed successfully.\n`);
}

async function writeGitHook(kbnGitHookScriptPath, gitHookScriptPath, kbnHookScript) {
  try {
    await unlinkAsync(kbnGitHookScriptPath);
  } catch (e) { /* no-op */ }

  await writeExecutableKbnGitHookScript(kbnGitHookScriptPath, kbnHookScript);
  await writeGitHookSymlink(kbnGitHookScriptPath, gitHookScriptPath);
}

async function writeExecutableKbnGitHookScript(kbnGitHookScriptPath, kbnHookScript) {
  await writeFileAsync(kbnGitHookScriptPath, kbnHookScript);
  await chmodAsync(kbnGitHookScriptPath, 0o755);
}

async function writeGitHookSymlink(kbnGitHookScriptPath, gitHookScriptPath) {
  try {
    await unlinkAsync(gitHookScriptPath);
  } catch (e) { /* no-op */ }

  await symlinkAsync(
    kbnGitHookScriptPath,
    gitHookScriptPath
  );
}
