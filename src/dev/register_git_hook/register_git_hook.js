/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import chalk from 'chalk';
import { chmod, unlink, writeFile } from 'fs';
import dedent from 'dedent';
import { resolve } from 'path';
import { promisify } from 'util';
import SimpleGit from 'simple-git';
import { REPO_ROOT } from '../constants';

const simpleGit = new SimpleGit(REPO_ROOT);

const chmodAsync = promisify(chmod);
const gitRevParseAsync = promisify(simpleGit.revparse.bind(simpleGit));
const unlinkAsync = promisify(unlink);
const writeFileAsync = promisify(writeFile);

async function getPrecommitGitHookScriptPath(rootPath) {
  // Retrieves the correct location for the .git dir for
  // every git setup (including git worktree)
  const gitDirPath = (await gitRevParseAsync(['--git-dir'])).trim();

  return resolve(rootPath, gitDirPath, 'hooks/pre-commit');
}

function getKbnPrecommitGitHookScript(rootPath) {
  return dedent(`
  #!/usr/bin/env bash
  #
  # ** THIS IS AN AUTO-GENERATED FILE **
  # ** PLEASE DO NOT CHANGE IT MANUALLY **
  # 
  # GENERATED BY ${__dirname}
  # IF YOU WANNA CHANGE SOMETHING INTO THIS SCRIPT
  # PLEASE RE-RUN 'yarn kbn bootstrap' or 'node scripts/register_git_hook' IN THE ROOT
  # OF THE CURRENT PROJECT ${rootPath}
  
  set -euo pipefail
  
  # Export Git hook params
  export GIT_PARAMS="$*"
  
  has_node() {
    command -v node >/dev/null 2>&1
  }
  
  # Check if we have node js bin in path
  has_node || { echo "Can't found node bin in the PATH. Please update the PATH to proceed"; exit 1; }
  
  npm run --silent precommit || { echo "Pre-commit hook failed (add --no-verify to bypass)"; exit 1; }
  
  exit 0
  `);
}

export async function registerPrecommitGitHook(log) {
  log.write(
    chalk.bold(
      `Registering Kibana pre-commit git hook...\n`
    )
  );

  try {
    await writeGitHook(
      await getPrecommitGitHookScriptPath(REPO_ROOT),
      getKbnPrecommitGitHookScript(REPO_ROOT)
    );
  } catch (e) {
    log.write(`${chalk.red('fail')} Kibana pre-commit git hook was not installed as an error occur.\n`);
    throw e;
  }

  log.write(`${chalk.green('success')} Kibana pre-commit git hook was installed successfully.\n`);
}

async function writeGitHook(gitHookScriptPath, kbnHookScriptSource) {
  try {
    await unlinkAsync(gitHookScriptPath);
  } catch (e) { /* no-op */ }

  await writeFileAsync(gitHookScriptPath, kbnHookScriptSource);
  await chmodAsync(gitHookScriptPath, 0o755);
}
