FROM kibana_sample_data_logs
  | LIMIT 100

function(props) {
  const [response, setResponse] = React.useState('');
  const [error, setError] = React.useState(null);

  const logs = React.useMemo(() => props.crossfilter.map(d => d.message).join('\n'), [props.crossfilter]);

  // Function to call the OpenAI API
    const apiKey = 'API-KEY'; // Replace with your actual OpenAI API key
  const getGenAIResponse = async () => {
    const prompt = `
    You are an SRE. Your response will render inside a crossfilter dashboard panel, output maximum length 1000 characters. Analyse the following logs for observability or security related issues:\n\n
    ${logs}`;

    try {
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Api-Key': apiKey,
          'anthropic-version': '2023-06-01',
          'anthropic-dangerous-direct-browser-access': 'true'
        },
        body: JSON.stringify({
          model: 'claude-3-opus-20240229',
          messages: [{ role: 'user', content: prompt }],
          max_tokens: 1000,
          stream: true
        })
      });

      if (!response.ok) {
        const errorBody = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, body: ${errorBody}`);
      }

      // Check if the response body is readable
      if (!response.body) {
        throw new Error('Readable stream not supported.');
      }

      const reader = response.body?.getReader();
      const decoder = new TextDecoder();

      if (!reader) {
        throw new Error('No reader available');
      }

      setResponse('');

      // Process the stream
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        // Decode the stream chunk
        const chunk = decoder.decode(value);

        // Split the chunk into lines and process each event
        const lines = chunk.split('\n');
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6); // Remove 'data: ' prefix

            if (data === '[DONE]') {
              return;
            }

          try {
              const parsed = JSON.parse(data);
              // Get the delta content from the message
              const content = parsed.delta?.text || '';

              // Do something with the content, e.g.:
              setResponse((prev) => prev + content); // Append the content
            } catch (e) {
              console.error('Error parsing JSON:', e);
            }
            }
          }
      }
    } catch (error) {
      setError('Error fetching gen-ai API: ' + error.message);
      console.error('Detailed error:', error);
      throw error;
    }
  };

  // Fetch the OpenAI response when the component mounts
  React.useEffect(() => {
   // getGenAIResponse();
  }, [logs]); // Empty dependency array to run once on mount

  return (
    <div style={{fontSize:'12px'}}>
      <button onClick={() => getGenAIResponse()}>Analyse</button>
      {error ? <p style={{ color: 'red' }}>{error}</p> : <div style={{ fontFamily: 'sans-serif' }}
      dangerouslySetInnerHTML={{__html: marked.parse(response)}}
    />}
    </div>
  );
};
