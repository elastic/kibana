@import '@elastic/eui/src/components/collapsible_nav/variables';
// Forms

// Angular form states
input.ng-invalid,
textarea.ng-invalid,
select.ng-invalid {
  &.ng-dirty,
  &.ng-touched {
    border-color: $euiColorDanger !important;
  }
}
input[type='radio'],
input[type='checkbox'],
.radio,
.radio-inline,
.checkbox,
.checkbox-inline {
  &[disabled],
  fieldset[disabled] & {
    cursor: default;
    opacity: 0.8;
  }
}

.checkbox label {
  display: flex;
  align-items: center;
  padding-left: 0 !important;

  input[type='checkbox'] {
    float: none;
    margin: 0 $euiSizeXS;
    position: static;
  }
}

// Application Layout

// chrome-context
// TODO #64541
// Delete this block
.chrHeaderWrapper:not(.headerWrapper) .content {
  display: flex;
  flex-flow: row nowrap;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.app-container {
  > * {
    position: relative;
  }
}

// We apply brute force focus states to anything not coming from Eui
// which has focus states designed at the component level.
// You can also use "kbn-resetFocusState" to not apply the default focus
// state. This is useful when you've already hand crafted your own
// focus states in Kibana.
:focus {
  &:not([class^='eui']):not(.kbn-resetFocusState) {
    @include euiFocusRing;
  }
}

// A necessary hack so that the above focus policy doesn't pollute some EUI
// entrenched inputs.
.euiComboBox {
  // :not() specificity needed to override the above
  input:not([class^='eui']):focus {
    animation: none !important;
  }
}

.euiBody--collapsibleNavIsDocked .euiBottomBar {
  margin-left: $euiCollapsibleNavWidth;
}

// Utility classes

.fullWidth {
  width: 100% !important;
}

.small {
  font-size: 0.9em !important;
}
.smaller {
  font-size: 0.8em !important;
}
.smallest {
  font-size: 0.7em !important;
}
select {
  color: $euiTextColor;
  background-color: $euiColorEmptyShade;
}

