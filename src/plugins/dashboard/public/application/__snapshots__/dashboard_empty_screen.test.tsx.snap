// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DashboardEmptyScreen renders correctly with readonly mode 1`] = `
<DashboardEmptyScreen
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "get": [Function],
        "prepend": [Function],
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isReadonlyMode={true}
  onLinkClick={[MockFunction]}
  showLinkToVisualize={true}
  uiSettings={
    Object {
      "get": [MockFunction] {
        "calls": Array [
          Array [
            "theme:darkMode",
          ],
          Array [
            "theme:darkMode",
          ],
          Array [
            "theme:darkMode",
          ],
          Array [
            "theme:darkMode",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get$": [MockFunction],
      "getAll": [MockFunction],
      "getSaved$": [MockFunction],
      "getUpdate$": [MockFunction],
      "getUpdateErrors$": [MockFunction],
      "isCustom": [MockFunction],
      "isDeclared": [MockFunction],
      "isDefault": [MockFunction],
      "isOverridden": [MockFunction],
      "overrideLocalDefault": [MockFunction],
      "remove": [MockFunction],
      "set": [MockFunction],
    }
  }
>
  <I18nProvider>
    <IntlProvider
      defaultLocale="en"
      formats={
        Object {
          "date": Object {
            "full": Object {
              "day": "numeric",
              "month": "long",
              "weekday": "long",
              "year": "numeric",
            },
            "long": Object {
              "day": "numeric",
              "month": "long",
              "year": "numeric",
            },
            "medium": Object {
              "day": "numeric",
              "month": "short",
              "year": "numeric",
            },
            "short": Object {
              "day": "numeric",
              "month": "numeric",
              "year": "2-digit",
            },
          },
          "number": Object {
            "currency": Object {
              "style": "currency",
            },
            "percent": Object {
              "style": "percent",
            },
          },
          "relative": Object {
            "days": Object {
              "units": "day",
            },
            "hours": Object {
              "units": "hour",
            },
            "minutes": Object {
              "units": "minute",
            },
            "months": Object {
              "units": "month",
            },
            "seconds": Object {
              "units": "second",
            },
            "years": Object {
              "units": "year",
            },
          },
          "time": Object {
            "full": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "long": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "medium": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
            },
            "short": Object {
              "hour": "numeric",
              "minute": "numeric",
            },
          },
        }
      }
      locale="en"
      messages={Object {}}
      textComponent={Symbol(react.fragment)}
    >
      <PseudoLocaleWrapper>
        <EuiPage
          className="dshStartScreen"
          restrictWidth="500px"
        >
          <div
            className="euiPage euiPage--restrictWidth-custom dshStartScreen"
            style={
              Object {
                "maxWidth": "500px",
              }
            }
          >
            <EuiPageBody>
              <main
                className="euiPageBody"
              >
                <EuiPageContent
                  className="dshStartScreen__pageContent"
                  horizontalPosition="center"
                  paddingSize="none"
                  verticalPosition="center"
                >
                  <EuiPanel
                    className="euiPageContent euiPageContent--verticalCenter euiPageContent--horizontalCenter dshStartScreen__pageContent"
                    paddingSize="none"
                  >
                    <div
                      className="euiPanel euiPageContent euiPageContent--verticalCenter euiPageContent--horizontalCenter dshStartScreen__pageContent"
                    >
                      <EuiImage
                        alt=""
                        url="/plugins/kibana/home/assets/welcome_graphic_light_2x.png"
                      >
                        <figure
                          className="euiImage"
                          role="figure"
                        >
                          <img
                            alt=""
                            className="euiImage__img"
                            src="/plugins/kibana/home/assets/welcome_graphic_light_2x.png"
                          />
                        </figure>
                      </EuiImage>
                      <EuiText
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <p
                            style={
                              Object {
                                "fontWeight": "bold",
                              }
                            }
                          >
                            This dashboard is empty.
                          </p>
                        </div>
                      </EuiText>
                      <EuiText
                        color="subdued"
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <EuiTextColor
                            color="subdued"
                            component="div"
                          >
                            <div
                              className="euiTextColor euiTextColor--subdued"
                            >
                              You need additional privileges to edit this dashboard.
                            </div>
                          </EuiTextColor>
                        </div>
                      </EuiText>
                    </div>
                  </EuiPanel>
                </EuiPageContent>
              </main>
            </EuiPageBody>
          </div>
        </EuiPage>
      </PseudoLocaleWrapper>
    </IntlProvider>
  </I18nProvider>
</DashboardEmptyScreen>
`;

exports[`DashboardEmptyScreen renders correctly with visualize paragraph 1`] = `
<DashboardEmptyScreen
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "get": [Function],
        "prepend": [Function],
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  onLinkClick={[MockFunction]}
  showLinkToVisualize={true}
  uiSettings={
    Object {
      "get": [MockFunction] {
        "calls": Array [
          Array [
            "theme:darkMode",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get$": [MockFunction],
      "getAll": [MockFunction],
      "getSaved$": [MockFunction],
      "getUpdate$": [MockFunction],
      "getUpdateErrors$": [MockFunction],
      "isCustom": [MockFunction],
      "isDeclared": [MockFunction],
      "isDefault": [MockFunction],
      "isOverridden": [MockFunction],
      "overrideLocalDefault": [MockFunction],
      "remove": [MockFunction],
      "set": [MockFunction],
    }
  }
>
  <I18nProvider>
    <IntlProvider
      defaultLocale="en"
      formats={
        Object {
          "date": Object {
            "full": Object {
              "day": "numeric",
              "month": "long",
              "weekday": "long",
              "year": "numeric",
            },
            "long": Object {
              "day": "numeric",
              "month": "long",
              "year": "numeric",
            },
            "medium": Object {
              "day": "numeric",
              "month": "short",
              "year": "numeric",
            },
            "short": Object {
              "day": "numeric",
              "month": "numeric",
              "year": "2-digit",
            },
          },
          "number": Object {
            "currency": Object {
              "style": "currency",
            },
            "percent": Object {
              "style": "percent",
            },
          },
          "relative": Object {
            "days": Object {
              "units": "day",
            },
            "hours": Object {
              "units": "hour",
            },
            "minutes": Object {
              "units": "minute",
            },
            "months": Object {
              "units": "month",
            },
            "seconds": Object {
              "units": "second",
            },
            "years": Object {
              "units": "year",
            },
          },
          "time": Object {
            "full": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "long": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "medium": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
            },
            "short": Object {
              "hour": "numeric",
              "minute": "numeric",
            },
          },
        }
      }
      locale="en"
      messages={Object {}}
      textComponent={Symbol(react.fragment)}
    >
      <PseudoLocaleWrapper>
        <div
          className="dshEmptyWidget"
          data-test-subj="emptyDashboardWidget"
        >
          <EuiText
            color="subdued"
            size="m"
          >
            <div
              className="euiText euiText--medium"
            >
              <EuiTextColor
                color="subdued"
                component="div"
              >
                <div
                  className="euiTextColor euiTextColor--subdued"
                >
                  <p>
                    <EuiLink
                      aria-label="Add an existing visualization"
                      data-test-subj=""
                      onClick={[MockFunction]}
                    >
                      <button
                        aria-label="Add an existing visualization"
                        className="euiLink euiLink--primary"
                        data-test-subj=""
                        onClick={[MockFunction]}
                        type="button"
                      >
                        Add an existing
                      </button>
                    </EuiLink>
                    <span>
                       
                    </span>
                    or new object to this dashboard
                  </p>
                </div>
              </EuiTextColor>
            </div>
          </EuiText>
          <EuiSpacer
            size="l"
          >
            <div
              className="euiSpacer euiSpacer--l"
            />
          </EuiSpacer>
          <p
            data-test-subj="linkToVisualizeParagraph"
          >
            <EuiButton
              aria-label="Create new visualization button"
              data-test-subj="addVisualizationButton"
              iconSide="left"
              iconType="plusInCircle"
              size="s"
            >
              <button
                aria-label="Create new visualization button"
                className="euiButton euiButton--primary euiButton--small"
                data-test-subj="addVisualizationButton"
                type="button"
              >
                <span
                  className="euiButton__content"
                >
                  <EuiIcon
                    aria-hidden="true"
                    className="euiButton__icon"
                    size="m"
                    type="plusInCircle"
                  >
                    <div
                      aria-hidden="true"
                      className="euiButton__icon"
                      data-euiicon-type="plusInCircle"
                      size="m"
                    />
                  </EuiIcon>
                  <span
                    className="euiButton__text"
                  >
                    Create new
                  </span>
                </span>
              </button>
            </EuiButton>
          </p>
        </div>
      </PseudoLocaleWrapper>
    </IntlProvider>
  </I18nProvider>
</DashboardEmptyScreen>
`;

exports[`DashboardEmptyScreen renders correctly without visualize paragraph 1`] = `
<DashboardEmptyScreen
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "get": [Function],
        "prepend": [Function],
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  onLinkClick={[MockFunction]}
  showLinkToVisualize={false}
  uiSettings={
    Object {
      "get": [MockFunction] {
        "calls": Array [
          Array [
            "theme:darkMode",
          ],
          Array [
            "theme:darkMode",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get$": [MockFunction],
      "getAll": [MockFunction],
      "getSaved$": [MockFunction],
      "getUpdate$": [MockFunction],
      "getUpdateErrors$": [MockFunction],
      "isCustom": [MockFunction],
      "isDeclared": [MockFunction],
      "isDefault": [MockFunction],
      "isOverridden": [MockFunction],
      "overrideLocalDefault": [MockFunction],
      "remove": [MockFunction],
      "set": [MockFunction],
    }
  }
>
  <I18nProvider>
    <IntlProvider
      defaultLocale="en"
      formats={
        Object {
          "date": Object {
            "full": Object {
              "day": "numeric",
              "month": "long",
              "weekday": "long",
              "year": "numeric",
            },
            "long": Object {
              "day": "numeric",
              "month": "long",
              "year": "numeric",
            },
            "medium": Object {
              "day": "numeric",
              "month": "short",
              "year": "numeric",
            },
            "short": Object {
              "day": "numeric",
              "month": "numeric",
              "year": "2-digit",
            },
          },
          "number": Object {
            "currency": Object {
              "style": "currency",
            },
            "percent": Object {
              "style": "percent",
            },
          },
          "relative": Object {
            "days": Object {
              "units": "day",
            },
            "hours": Object {
              "units": "hour",
            },
            "minutes": Object {
              "units": "minute",
            },
            "months": Object {
              "units": "month",
            },
            "seconds": Object {
              "units": "second",
            },
            "years": Object {
              "units": "year",
            },
          },
          "time": Object {
            "full": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "long": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "medium": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
            },
            "short": Object {
              "hour": "numeric",
              "minute": "numeric",
            },
          },
        }
      }
      locale="en"
      messages={Object {}}
      textComponent={Symbol(react.fragment)}
    >
      <PseudoLocaleWrapper>
        <EuiPage
          className="dshStartScreen"
          restrictWidth="500px"
        >
          <div
            className="euiPage euiPage--restrictWidth-custom dshStartScreen"
            style={
              Object {
                "maxWidth": "500px",
              }
            }
          >
            <EuiPageBody>
              <main
                className="euiPageBody"
              >
                <EuiPageContent
                  className="dshStartScreen__pageContent"
                  horizontalPosition="center"
                  paddingSize="none"
                  verticalPosition="center"
                >
                  <EuiPanel
                    className="euiPageContent euiPageContent--verticalCenter euiPageContent--horizontalCenter dshStartScreen__pageContent"
                    paddingSize="none"
                  >
                    <div
                      className="euiPanel euiPageContent euiPageContent--verticalCenter euiPageContent--horizontalCenter dshStartScreen__pageContent"
                    >
                      <EuiImage
                        alt=""
                        url="/plugins/kibana/home/assets/welcome_graphic_light_2x.png"
                      >
                        <figure
                          className="euiImage"
                          role="figure"
                        >
                          <img
                            alt=""
                            className="euiImage__img"
                            src="/plugins/kibana/home/assets/welcome_graphic_light_2x.png"
                          />
                        </figure>
                      </EuiImage>
                      <EuiText
                        size="m"
                      >
                        <div
                          className="euiText euiText--medium"
                        >
                          <p
                            style={
                              Object {
                                "fontWeight": "bold",
                              }
                            }
                          >
                            This dashboard is empty. Let’s fill it up!
                          </p>
                        </div>
                      </EuiText>
                      <EuiSpacer
                        size="m"
                      >
                        <div
                          className="euiSpacer euiSpacer--m"
                        />
                      </EuiSpacer>
                      <div
                        className="dshStartScreen__panelDesc"
                      >
                        <EuiText
                          color="subdued"
                          size="m"
                        >
                          <div
                            className="euiText euiText--medium"
                          >
                            <EuiTextColor
                              color="subdued"
                              component="div"
                            >
                              <div
                                className="euiTextColor euiTextColor--subdued"
                              >
                                <p>
                                  Click
                                  <span>
                                     
                                  </span>
                                  <EuiLink
                                    aria-label="Edit dashboard"
                                    data-test-subj=""
                                    onClick={[MockFunction]}
                                  >
                                    <button
                                      aria-label="Edit dashboard"
                                      className="euiLink euiLink--primary"
                                      data-test-subj=""
                                      onClick={[MockFunction]}
                                      type="button"
                                    >
                                      Edit
                                    </button>
                                  </EuiLink>
                                  <span>
                                     
                                  </span>
                                  in the menu bar above to start adding panels.
                                </p>
                              </div>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </EuiPanel>
                </EuiPageContent>
              </main>
            </EuiPageBody>
          </div>
        </EuiPage>
      </PseudoLocaleWrapper>
    </IntlProvider>
  </I18nProvider>
</DashboardEmptyScreen>
`;
