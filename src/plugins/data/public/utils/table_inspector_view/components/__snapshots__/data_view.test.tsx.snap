// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Inspector Data View component should render empty state 1`] = `
<Component
  adapters={
    Object {
      "tables": TablesAdapter {
        "_events": Object {
          "change": [Function],
        },
        "_eventsCount": 1,
        "_maxListeners": undefined,
        "_tables": Object {
          "[object Object]": undefined,
        },
        Symbol(kCapture): false,
      },
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  title="Test Data"
>
  <DataViewComponent
    adapters={
      Object {
        "tables": TablesAdapter {
          "_events": Object {
            "change": [Function],
          },
          "_eventsCount": 1,
          "_maxListeners": undefined,
          "_tables": Object {
            "[object Object]": undefined,
          },
          Symbol(kCapture): false,
        },
      }
    }
    fieldFormats={Object {}}
    isFilterable={[MockFunction]}
    title="Test Data"
    uiActions={Object {}}
    uiSettings={Object {}}
  >
    <EuiEmptyPrompt
      body={
        <React.Fragment>
          <p>
            <FormattedMessage
              defaultMessage="The element did not provide any data."
              id="data.inspector.table.noDataAvailableDescription"
              values={Object {}}
            />
          </p>
        </React.Fragment>
      }
      title={
        <h2>
          <FormattedMessage
            defaultMessage="No data available"
            id="data.inspector.table.noDataAvailableTitle"
            values={Object {}}
          />
        </h2>
      }
    >
      <div
        className="euiEmptyPrompt"
      >
        <EuiTextColor
          color="subdued"
        >
          <span
            className="euiTextColor euiTextColor--subdued"
          >
            <EuiTitle
              size="m"
            >
              <h2
                className="euiTitle euiTitle--medium"
              >
                <FormattedMessage
                  defaultMessage="No data available"
                  id="data.inspector.table.noDataAvailableTitle"
                  values={Object {}}
                >
                  No data available
                </FormattedMessage>
              </h2>
            </EuiTitle>
            <EuiSpacer
              size="m"
            >
              <div
                className="euiSpacer euiSpacer--m"
              />
            </EuiSpacer>
            <EuiText>
              <div
                className="euiText euiText--medium"
              >
                <p>
                  <FormattedMessage
                    defaultMessage="The element did not provide any data."
                    id="data.inspector.table.noDataAvailableDescription"
                    values={Object {}}
                  >
                    The element did not provide any data.
                  </FormattedMessage>
                </p>
              </div>
            </EuiText>
          </span>
        </EuiTextColor>
      </div>
    </EuiEmptyPrompt>
  </DataViewComponent>
</Component>
`;

exports[`Inspector Data View component should render loading state 1`] = `
<Suspense
  fallback={
    <div>
      loading
    </div>
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <Component
    adapters={
      Object {
        "tables": TablesAdapter {
          "_events": Object {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          "_tables": Object {},
          Symbol(kCapture): false,
        },
      }
    }
    title="Test Data"
  />
  <div>
    loading
  </div>
</Suspense>
`;
