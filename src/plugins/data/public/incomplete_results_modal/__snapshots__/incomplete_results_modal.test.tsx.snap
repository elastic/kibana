// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IncompleteResultsModal should render shard failures 1`] = `
<Fragment>
  <EuiModalHeader>
    <EuiModalHeaderTitle
      size="xs"
    >
      <FormattedMessage
        defaultMessage="Response contains incomplete results"
        id="data.search.searchSource.fetch.incompleteResultsModal.headerTitle"
        values={Object {}}
      />
    </EuiModalHeaderTitle>
  </EuiModalHeader>
  <EuiModalBody>
    <EuiTabbedContent
      autoFocus="selected"
      initialSelectedTab={
        Object {
          "content": <React.Fragment>
            <ShardFailureTable
              failures={
                Array [
                  Object {
                    "index": "sample-01-rollup",
                    "node": "VFTFJxpHSdaoiGxJFLSExQ",
                    "reason": Object {
                      "reason": "Field [kubernetes.container.memory.available.bytes] of type [aggregate_metric_double] is not supported for aggregation [percentiles]",
                      "type": "illegal_argument_exception",
                    },
                    "shard": 0,
                  },
                ]
              }
            />
          </React.Fragment>,
          "data-test-subj": "showClusterDetailsButton",
          "id": "table",
          "name": "Cluster details",
        }
      }
      tabs={
        Array [
          Object {
            "content": <React.Fragment>
              <ShardFailureTable
                failures={
                  Array [
                    Object {
                      "index": "sample-01-rollup",
                      "node": "VFTFJxpHSdaoiGxJFLSExQ",
                      "reason": Object {
                        "reason": "Field [kubernetes.container.memory.available.bytes] of type [aggregate_metric_double] is not supported for aggregation [percentiles]",
                        "type": "illegal_argument_exception",
                      },
                      "shard": 0,
                    },
                  ]
                }
              />
            </React.Fragment>,
            "data-test-subj": "showClusterDetailsButton",
            "id": "table",
            "name": "Cluster details",
          },
          Object {
            "content": <EuiCodeBlock
              data-test-subj="incompleteResultsModalRequestBlock"
              isCopyable={true}
              language="json"
            >
              {}
            </EuiCodeBlock>,
            "data-test-subj": "showRequestButton",
            "id": "json-request",
            "name": "Request",
          },
          Object {
            "content": <EuiCodeBlock
              data-test-subj="incompleteResultsModalResponseBlock"
              isCopyable={true}
              language="json"
            >
              {
  "_shards": {
    "total": 4,
    "successful": 3,
    "skipped": 0,
    "failed": 1,
    "failures": [
      {
        "shard": 0,
        "index": "sample-01-rollup",
        "node": "VFTFJxpHSdaoiGxJFLSExQ",
        "reason": {
          "type": "illegal_argument_exception",
          "reason": "Field [kubernetes.container.memory.available.bytes] of type [aggregate_metric_double] is not supported for aggregation [percentiles]"
        }
      }
    ]
  }
}
            </EuiCodeBlock>,
            "data-test-subj": "showResponseButton",
            "id": "json-response",
            "name": "Response",
          },
        ]
      }
    />
  </EuiModalBody>
  <EuiModalFooter>
    <EuiCopy
      afterMessage="Copied"
      textToCopy="{
  \\"_shards\\": {
    \\"total\\": 4,
    \\"successful\\": 3,
    \\"skipped\\": 0,
    \\"failed\\": 1,
    \\"failures\\": [
      {
        \\"shard\\": 0,
        \\"index\\": \\"sample-01-rollup\\",
        \\"node\\": \\"VFTFJxpHSdaoiGxJFLSExQ\\",
        \\"reason\\": {
          \\"type\\": \\"illegal_argument_exception\\",
          \\"reason\\": \\"Field [kubernetes.container.memory.available.bytes] of type [aggregate_metric_double] is not supported for aggregation [percentiles]\\"
        }
      }
    ]
  }
}"
    >
      <Component />
    </EuiCopy>
    <EuiButton
      color="primary"
      data-test-subj="closeIncompleteResultsModal"
      fill={true}
      onClick={[Function]}
      size="m"
    >
      <FormattedMessage
        defaultMessage="Close"
        description="Closing the Modal"
        id="data.search.searchSource.fetch.incompleteResultsModal.close"
        values={Object {}}
      />
    </EuiButton>
  </EuiModalFooter>
</Fragment>
`;

exports[`IncompleteResultsModal should render time out 1`] = `
<Fragment>
  <EuiModalHeader>
    <EuiModalHeaderTitle
      size="xs"
    >
      <FormattedMessage
        defaultMessage="Response contains incomplete results"
        id="data.search.searchSource.fetch.incompleteResultsModal.headerTitle"
        values={Object {}}
      />
    </EuiModalHeaderTitle>
  </EuiModalHeader>
  <EuiModalBody>
    <EuiTabbedContent
      autoFocus="selected"
      initialSelectedTab={
        Object {
          "content": <React.Fragment>
            <EuiCallOut
              color="warning"
            >
              <p>
                Request timed out
              </p>
            </EuiCallOut>
          </React.Fragment>,
          "data-test-subj": "showClusterDetailsButton",
          "id": "table",
          "name": "Cluster details",
        }
      }
      tabs={
        Array [
          Object {
            "content": <React.Fragment>
              <EuiCallOut
                color="warning"
              >
                <p>
                  Request timed out
                </p>
              </EuiCallOut>
            </React.Fragment>,
            "data-test-subj": "showClusterDetailsButton",
            "id": "table",
            "name": "Cluster details",
          },
          Object {
            "content": <EuiCodeBlock
              data-test-subj="incompleteResultsModalRequestBlock"
              isCopyable={true}
              language="json"
            >
              {}
            </EuiCodeBlock>,
            "data-test-subj": "showRequestButton",
            "id": "json-request",
            "name": "Request",
          },
          Object {
            "content": <EuiCodeBlock
              data-test-subj="incompleteResultsModalResponseBlock"
              isCopyable={true}
              language="json"
            >
              {
  "timed_out": true,
  "_shards": {
    "total": 4,
    "successful": 4,
    "skipped": 0,
    "failed": 0
  }
}
            </EuiCodeBlock>,
            "data-test-subj": "showResponseButton",
            "id": "json-response",
            "name": "Response",
          },
        ]
      }
    />
  </EuiModalBody>
  <EuiModalFooter>
    <EuiCopy
      afterMessage="Copied"
      textToCopy="{
  \\"timed_out\\": true,
  \\"_shards\\": {
    \\"total\\": 4,
    \\"successful\\": 4,
    \\"skipped\\": 0,
    \\"failed\\": 0
  }
}"
    >
      <Component />
    </EuiCopy>
    <EuiButton
      color="primary"
      data-test-subj="closeIncompleteResultsModal"
      fill={true}
      onClick={[Function]}
      size="m"
    >
      <FormattedMessage
        defaultMessage="Close"
        description="Closing the Modal"
        id="data.search.searchSource.fetch.incompleteResultsModal.close"
        values={Object {}}
      />
    </EuiButton>
  </EuiModalFooter>
</Fragment>
`;
