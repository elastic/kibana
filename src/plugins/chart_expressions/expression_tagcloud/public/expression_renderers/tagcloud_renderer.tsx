/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { lazy } from 'react';
import { render, unmountComponentAtNode } from 'react-dom';
import { I18nProvider } from '@kbn/i18n-react';
import { ClassNames } from '@emotion/react';
import { i18n } from '@kbn/i18n';
import { KibanaThemeProvider } from '@kbn/kibana-react-plugin/public';
import { VisualizationContainer } from '@kbn/visualizations-plugin/public';
import { ExpressionRenderDefinition } from '@kbn/expressions-plugin/common/expression_renderers';
import { METRIC_TYPE } from '@kbn/analytics';
import { extractContainerType, extractVisualizationType } from '@kbn/chart-expressions-common';

import { ExpressionTagcloudRendererDependencies } from '../plugin';
import { TagcloudRendererConfig } from '../../common/types';
import { EXPRESSION_NAME } from '../../common';

export const strings = {
  getDisplayName: () =>
    i18n.translate('expressionTagcloud.renderer.tagcloud.displayName', {
      defaultMessage: 'Tag Cloud visualization',
    }),
  getHelpDescription: () =>
    i18n.translate('expressionTagcloud.renderer.tagcloud.helpDescription', {
      defaultMessage: 'Render a tag cloud',
    }),
};

const tagCloudVisClass = {
  height: '100%',
};

const TagCloudChart = lazy(() => import('../components/tagcloud_component'));

export const tagcloudRenderer: (
  deps: ExpressionTagcloudRendererDependencies
) => ExpressionRenderDefinition<TagcloudRendererConfig> = ({ getStartDeps }) => ({
  name: EXPRESSION_NAME,
  displayName: strings.getDisplayName(),
  help: strings.getHelpDescription(),
  reuseDomNode: true,
  render: async (domNode, config, handlers) => {
    const { core, plugins } = getStartDeps();

    handlers.onDestroy(() => {
      unmountComponentAtNode(domNode);
    });

    const renderComplete = () => {
      const executionContext = handlers.getExecutionContext();
      const containerType = extractContainerType(executionContext);
      const visualizationType = extractVisualizationType(executionContext);

      if (containerType && visualizationType) {
        plugins.usageCollection?.reportUiCounter(containerType, METRIC_TYPE.COUNT, [
          `render_${visualizationType}_${EXPRESSION_NAME}`,
        ]);
      }

      handlers.done();
    };

    const palettesRegistry = await plugins.charts.palettes.getPalettes();

    const showNoResult = config.visData.rows.length === 0;

    render(
      <KibanaThemeProvider theme$={core.theme.theme$}>
        <I18nProvider>
          <ClassNames>
            {({ css, cx }) => (
              <VisualizationContainer
                handlers={handlers}
                // Class `tagCloudContainer` is generated by `@emotion/react` and passed as a defined class to `VisualizationContainer`.
                // It is used for rendering at `Canvas`.
                className={cx('tagCloudContainer', css(tagCloudVisClass))}
                renderComplete={renderComplete}
                showNoResult={showNoResult}
              >
                <TagCloudChart
                  {...config}
                  palettesRegistry={palettesRegistry}
                  renderComplete={renderComplete}
                  fireEvent={handlers.event}
                  syncColors={config.syncColors}
                />
              </VisualizationContainer>
            )}
          </ClassNames>
        </I18nProvider>
      </KibanaThemeProvider>,
      domNode
    );
  },
});
