// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`XYChart component annotations should render basic annotation 1`] = `
<LineAnnotation
  dataValues={
    Array [
      Object {
        "dataValue": 1647591917125,
        "details": "Annotation",
        "header": "2022-03-18T08:25:17.140Z",
      },
    ]
  }
  domainType="xDomain"
  id="annotation"
  key="annotation"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "label": "Annotation",
          "roundedTimestamp": 1647591917100,
          "time": "2022-03-18T08:25:17.140Z",
          "type": "manual_event_annotation",
        }
      }
      hasReducedPadding={false}
      isHorizontal={true}
      label="Annotation"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": undefined,
        "opacity": 1,
        "stroke": "#f04e98",
        "strokeWidth": 1,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render grouped annotations preserving the shared styles 1`] = `
<LineAnnotation
  customTooltipDetails={[Function]}
  dataValues={
    Array [
      Object {
        "dataValue": 1647591900025,
        "details": "Event 1",
        "header": 1647591900000,
      },
    ]
  }
  domainType="xDomain"
  id="event_1"
  key="event_1"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "color": "red",
          "customTooltipDetails": [Function],
          "icon": "3",
          "label": "Event 1",
          "lineStyle": "dashed",
          "lineWidth": 3,
          "roundedTimestamp": 1647591900000,
          "textVisibility": undefined,
          "time": "2022-03-18T08:25:00.000Z",
          "type": "manual_event_annotation",
        }
      }
      hasReducedPadding={true}
      isHorizontal={true}
      label="Event 1"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": Array [
          9,
          3,
        ],
        "opacity": 1,
        "stroke": "red",
        "strokeWidth": 3,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render grouped annotations with default styles 1`] = `
<LineAnnotation
  customTooltipDetails={[Function]}
  dataValues={
    Array [
      Object {
        "dataValue": 1647591900025,
        "details": "Event 1",
        "header": 1647591900000,
      },
    ]
  }
  domainType="xDomain"
  id="event_1"
  key="event_1"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "color": "#f04e98",
          "customTooltipDetails": [Function],
          "icon": "2",
          "label": "Event 1",
          "lineStyle": "solid",
          "lineWidth": 1,
          "roundedTimestamp": 1647591900000,
          "textVisibility": undefined,
          "time": "2022-03-18T08:25:00.000Z",
          "type": "manual_event_annotation",
        }
      }
      hasReducedPadding={true}
      isHorizontal={true}
      label="Event 1"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": undefined,
        "opacity": 1,
        "stroke": "#f04e98",
        "strokeWidth": 1,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render simplified annotation when hide is true 1`] = `
<LineAnnotation
  dataValues={
    Array [
      Object {
        "dataValue": 1647591917125,
        "details": "Annotation",
        "header": "2022-03-18T08:25:17.140Z",
      },
    ]
  }
  domainType="xDomain"
  id="annotation"
  key="annotation"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "label": "Annotation",
          "roundedTimestamp": 1647591917100,
          "time": "2022-03-18T08:25:17.140Z",
          "type": "manual_event_annotation",
        }
      }
      hasReducedPadding={false}
      isHorizontal={true}
      label="Annotation"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": undefined,
        "opacity": 1,
        "stroke": "#f04e98",
        "strokeWidth": 1,
      },
    }
  }
/>
`;

exports[`XYChart component it renders area 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <AreaSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "endValue": undefined,
        "type": "none",
      }
    }
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <AreaSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "endValue": undefined,
        "type": "none",
      }
    }
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;

exports[`XYChart component it renders bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;

exports[`XYChart component it renders horizontal bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={90}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;

exports[`XYChart component it renders line 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <LineSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "endValue": undefined,
        "type": "none",
      }
    }
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <LineSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "endValue": undefined,
        "type": "none",
      }
    }
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;

exports[`XYChart component it renders stacked area 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <AreaSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "endValue": undefined,
        "type": "none",
      }
    }
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <AreaSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "endValue": undefined,
        "type": "none",
      }
    }
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;

exports[`XYChart component it renders stacked bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;

exports[`XYChart component it renders stacked horizontal bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={90}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <BarSeries
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
</Chart>
`;
