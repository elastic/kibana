// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`XYChart component annotations should render basic line annotation 1`] = `
<LineAnnotation
  dataValues={
    Array [
      Object {
        "dataValue": 1647591917140,
        "details": "Annotation",
        "header": "2022-03-18T08:25:17.140Z",
      },
    ]
  }
  domainType="xDomain"
  id="annotation"
  key="annotation"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "label": "Annotation",
          "roundedTimestamp": 1647591917100,
          "time": "2022-03-18T08:25:17.140Z",
          "type": "manual_point_event_annotation",
        }
      }
      hasReducedPadding={false}
      isHorizontal={true}
      label="Annotation"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": undefined,
        "opacity": 1,
        "stroke": "#f04e98",
        "strokeWidth": 1,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render basic range annotation 1`] = `
Array [
  <RectAnnotation
    customTooltipDetails={[Function]}
    dataValues={Array []}
    hideTooltips={false}
    id="__endzones__"
    style={
      Object {
        "fill": "#69707d",
        "opacity": 0.2,
        "stroke": "#69707d",
        "strokeWidth": 0,
      }
    }
    zIndex={2}
  />,
  <RectAnnotation
    customTooltip={[Function]}
    dataValues={
      Array [
        Object {
          "coordinates": Object {
            "x0": 1647591917140,
            "x1": 1648715117140,
          },
          "details": "Event range",
        },
      ]
    }
    id="event_range"
    key="event_range"
    outside={false}
    outsideDimension={4}
    style={
      Object {
        "fill": "#F04E981A",
        "opacity": 1,
      }
    }
  />,
]
`;

exports[`XYChart component annotations should render grouped line annotations preserving the shared styles 1`] = `
<LineAnnotation
  customTooltipDetails={[Function]}
  dataValues={
    Array [
      Object {
        "dataValue": 1647591900025,
        "details": "Event 1",
        "header": 1647591900000,
      },
    ]
  }
  domainType="xDomain"
  id="event_1"
  key="event_1"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "color": "red",
          "customTooltipDetails": [Function],
          "icon": "3",
          "label": "Event 1",
          "lineStyle": "dashed",
          "lineWidth": 3,
          "roundedTimestamp": 1647591900000,
          "textVisibility": undefined,
          "time": "2022-03-18T08:25:00.000Z",
          "type": "manual_point_event_annotation",
        }
      }
      hasReducedPadding={true}
      isHorizontal={true}
      label="Event 1"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": Array [
          9,
          3,
        ],
        "opacity": 1,
        "stroke": "red",
        "strokeWidth": 3,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render grouped line annotations with default styles 1`] = `
<LineAnnotation
  customTooltipDetails={[Function]}
  dataValues={
    Array [
      Object {
        "dataValue": 1647591900025,
        "details": "Event 1",
        "header": 1647591900000,
      },
    ]
  }
  domainType="xDomain"
  id="event_1"
  key="event_1"
  marker={
    <Marker
      config={
        Object {
          "axisMode": "bottom",
          "color": "#f04e98",
          "customTooltipDetails": [Function],
          "icon": "2",
          "label": "Event 1",
          "lineStyle": "solid",
          "lineWidth": 1,
          "roundedTimestamp": 1647591900000,
          "textVisibility": undefined,
          "time": "2022-03-18T08:25:00.000Z",
          "type": "manual_point_event_annotation",
        }
      }
      hasReducedPadding={true}
      isHorizontal={true}
      label="Event 1"
    />
  }
  markerBody={
    <MarkerBody
      isHorizontal={true}
    />
  }
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": undefined,
        "opacity": 1,
        "stroke": "#f04e98",
        "strokeWidth": 1,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render simplified annotations when hide is true 1`] = `
<LineAnnotation
  dataValues={
    Array [
      Object {
        "dataValue": 1647591917140,
        "details": "Annotation",
        "header": "2022-03-18T08:25:17.140Z",
      },
    ]
  }
  domainType="xDomain"
  id="annotation"
  key="annotation"
  markerPosition="top"
  style={
    Object {
      "line": Object {
        "dash": undefined,
        "opacity": 1,
        "stroke": "#f04e98",
        "strokeWidth": 1,
      },
    }
  }
/>
`;

exports[`XYChart component annotations should render simplified annotations when hide is true 2`] = `
Array [
  <RectAnnotation
    customTooltipDetails={[Function]}
    dataValues={Array []}
    hideTooltips={false}
    id="__endzones__"
    style={
      Object {
        "fill": "#69707d",
        "opacity": 0.2,
        "stroke": "#69707d",
        "strokeWidth": 0,
      }
    }
    zIndex={2}
  />,
  <RectAnnotation
    customTooltip={[Function]}
    dataValues={
      Array [
        Object {
          "coordinates": Object {
            "x0": 1647591917140,
            "x1": 1648715117140,
          },
          "details": "Event range",
        },
      ]
    }
    id="event_range"
    key="event_range"
    outside={false}
    outsideDimension={2}
    style={
      Object {
        "fill": "#F04E981A",
        "opacity": 1,
      }
    }
  />,
]
`;

exports[`XYChart component it renders area 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={false}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "area",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={true}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "left",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;

exports[`XYChart component it renders bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={true}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "bar",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={true}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "left",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;

exports[`XYChart component it renders horizontal bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={90}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={true}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "bar_horizontal",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={true}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "bottom",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;

exports[`XYChart component it renders line 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={false}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "line",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={true}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "left",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;

exports[`XYChart component it renders stacked area 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={false}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "area_stacked",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={false}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "left",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;

exports[`XYChart component it renders stacked bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={true}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "bar_stacked",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={false}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "left",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;

exports[`XYChart component it renders stacked horizontal bar 1`] = `
<Chart
  renderer="canvas"
>
  <Settings
    allowBrushingLastHistogramBin={false}
    ariaUseDefaultSummary={true}
    baseTheme={Object {}}
    debugState={false}
    externalPointerEvents={
      Object {
        "tooltip": Object {
          "placement": "right",
          "visible": false,
        },
      }
    }
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={90}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "chartMargins": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Component
    gridLine={
      Object {
        "strokeWidth": 1,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    timeAxisLayerCount={0}
    title="c"
  />
  <Component
    domain={
      Object {
        "fit": false,
        "includeDataFromIds": Array [],
        "max": NaN,
        "min": NaN,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "padding": undefined,
          "visible": true,
        },
        "tickLabel": Object {
          "padding": undefined,
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    ticks={5}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <DataLayers
    chartHasMoreThanOneBarSeries={true}
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "000,0",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            undefined,
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    formattedDatatables={
      Object {
        "first": Object {
          "formattedColumns": Object {
            "c": true,
          },
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
      }
    }
    layers={
      Array [
        Object {
          "accessors": Array [
            "a",
            "b",
          ],
          "columnToLabel": "{\\"a\\": \\"Label A\\", \\"b\\": \\"Label B\\", \\"d\\": \\"Label D\\"}",
          "isHistogram": false,
          "layerId": "first",
          "layerType": "data",
          "palette": Object {
            "name": "mock",
            "params": Object {},
            "type": "palette",
          },
          "seriesType": "bar_horizontal_stacked",
          "splitAccessor": "d",
          "table": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
          "type": "dataLayer",
          "xAccessor": "c",
          "xScaleType": "ordinal",
          "yScaleType": "linear",
        },
      ]
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    shouldShowValueLabels={false}
    syncColors={false}
    timeZone="UTC"
    valueLabels="hide"
    yAxesConfiguration={
      Array [
        Object {
          "formatter": Object {
            "convert": [MockFunction] {
              "calls": Array [
                Array [
                  "I",
                ],
                Array [
                  "J",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": "I",
                },
                Object {
                  "type": "return",
                  "value": "J",
                },
              ],
            },
          },
          "groupId": "left",
          "position": "bottom",
          "series": Array [
            Object {
              "accessor": "a",
              "layer": "first",
            },
            Object {
              "accessor": "b",
              "layer": "first",
            },
          ],
        },
      ]
    }
  />
</Chart>
`;
