/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import type { SearchHit } from '@elastic/elasticsearch/lib/api/types';
import { DataView, DataViewField } from '@kbn/data-views-plugin/common';
import { DataPublicPluginStart } from '@kbn/data-plugin/public';
import { FieldFormatsStart } from '@kbn/field-formats-plugin/public';
import { IUiSettingsClient } from '@kbn/core-ui-settings-browser';
import { Storage } from '@kbn/kibana-utils-plugin/public';
import { IgnoredReason } from './utils';

export { IgnoredReason };

export enum ElasticRequestState {
  Loading,
  NotFound,
  Found,
  Error,
  NotFoundDataView,
}

export interface DocProps {
  /**
   * ID of the doc in ES
   */
  id: string;
  /**
   * Index in ES to query
   */
  index: string;
  /**
   * DataView entity
   */
  dataView: DataView;
  /**
   * If set, will always request source, regardless of the global `fieldsFromSource` setting
   */
  requestSource?: boolean;
  /**
   * Discover main view url
   */
  referrer?: string;
}

export interface UnifiedDocViewerServices {
  /**
   * Used for querying documents from ES
   */
  data: DataPublicPluginStart;
  /**
   * Used for formatting field values
   */
  fieldFormats: FieldFormatsStart;
  /**
   * Used for pinned fields & page size
   */
  storage: Storage;
  /**
   * Used for settings-based customizations (fields from source, legacy doc table)
   */
  uiSettings: IUiSettingsClient;
}

export interface FieldRecordLegacy {
  action: {
    isActive: boolean;
    onFilter?: DocViewFilterFn;
    onToggleColumn: (field: string) => void;
    flattenedField: unknown;
  };
  field: {
    displayName: string;
    field: string;
    scripted: boolean;
    fieldType?: string;
    fieldMapping?: DataViewField;
  };
  value: {
    formattedValue: string;
    ignored?: IgnoredReason;
  };
}

export interface FieldMapping {
  filterable?: boolean;
  scripted?: boolean;
  rowCount?: number;
  type: string;
  name: string;
  displayName?: string;
}

export type DocViewFilterFn = (
  mapping: FieldMapping | string | undefined,
  value: unknown,
  mode: '+' | '-'
) => void;

/**
 * This is the record/row of data provided to our Data Table
 */
export interface DataTableRecord<T = Record<string, unknown>> {
  /**
   * A unique id generated by index, id and routing of a record
   */
  id: string;
  /**
   * The document returned by Elasticsearch for search queries
   */
  raw: SearchHit<T>;
  /**
   * A flattened version of the ES doc or data provided by SQL, aggregations ...
   */
  flattened: T;
  /**
   * Determines that the given doc is the anchor doc when rendering view surrounding docs
   */
  isAnchor?: boolean;
}

export interface DocViewRenderProps {
  hit: DataTableRecord;
  dataView: DataView;
  columns?: string[];
  filter?: DocViewFilterFn;
  onAddColumn?: (columnName: string) => void;
  onRemoveColumn?: (columnName: string) => void;
}

export type DocViewRenderFn = (
  domNode: HTMLDivElement,
  renderProps: DocViewRenderProps
) => () => void;

export type DocViewerComponent = React.FC<DocViewRenderProps>;

export interface BaseDocViewInput {
  order: number;
  shouldShow?: (hit: DataTableRecord) => boolean;
  title: string;
}

export interface RenderDocViewInput extends BaseDocViewInput {
  render: DocViewRenderFn;
  component?: undefined;
  directive?: undefined;
}

interface ComponentDocViewInput extends BaseDocViewInput {
  component: DocViewerComponent;
  render?: undefined;
  directive?: undefined;
}

export type DocViewInput = ComponentDocViewInput | RenderDocViewInput;

export type DocView = DocViewInput & {
  shouldShow: NonNullable<DocViewInput['shouldShow']>;
};

export type DocViewInputFn = () => DocViewInput;
