// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TelemetryManagementSectionComponent renders as expected 1`] = `
<Fragment>
  <_EuiSplitPanelOuter
    hasBorder={true}
  >
    <EuiForm>
      <_EuiSplitPanelInner
        color="subdued"
      >
        <EuiTitle>
          <h2>
            <FormattedMessage
              defaultMessage="Usage collection"
              id="telemetry.usageDataTitle"
              values={Object {}}
            />
          </h2>
        </EuiTitle>
      </_EuiSplitPanelInner>
      <_EuiSplitPanelInner>
        <EuiCallOut
          color="primary"
          iconType="spacesApp"
          title={
            <FormattedMessage
              defaultMessage="Changes to this setting apply to {allOfKibanaText} and are saved automatically."
              id="telemetry.callout.appliesSettingTitle"
              values={
                Object {
                  "allOfKibanaText": <strong>
                    <FormattedMessage
                      defaultMessage="all of Kibana"
                      id="telemetry.callout.appliesSettingTitle.allOfKibanaText"
                      values={Object {}}
                    />
                  </strong>,
                }
              }
            />
          }
        />
        <EuiSpacer
          size="s"
        />
        <lazy
          docLinks={
            Object {
              "legal": Object {
                "privacyStatement": "https://some-host/some-url",
              },
            }
          }
          enableSaving={true}
          handleChange={[Function]}
          loading={false}
          setting={
            Object {
              "ariaName": "Share usage with Elastic",
              "category": Array [],
              "defVal": true,
              "description": <React.Fragment>
                <p>
                  <FormattedMessage
                    defaultMessage="Enabling usage collection allows us to learn what our users are most interested in, so we can improve our products and services. Refer to our {privacyStatementLink}."
                    id="telemetry.telemetryConfigAndLinkDescription"
                    values={
                      Object {
                        "privacyStatementLink": <EuiLink
                          href="https://some-host/some-url"
                          target="_blank"
                        >
                          <FormattedMessage
                            defaultMessage="Privacy Statement"
                            id="telemetry.readOurUsageDataPrivacyStatementLinkText"
                            values={Object {}}
                          />
                        </EuiLink>,
                      }
                    }
                  />
                </p>
                <p>
                  <FormattedMessage
                    defaultMessage="See examples of the {clusterData} and {securityData} that we collect."
                    id="telemetry.seeExampleOfClusterDataAndEndpointSecuity"
                    values={
                      Object {
                        "clusterData": <EuiLink
                          data-test-id="cluster_data_example"
                          onClick={[Function]}
                        >
                          <FormattedMessage
                            defaultMessage="cluster data"
                            id="telemetry.clusterData"
                            values={Object {}}
                          />
                        </EuiLink>,
                        "securityData": <EuiLink
                          data-test-id="endpoint_security_example"
                          href="https://www.elastic.co/guide/en/security/current/advanced-settings.html#telemetry-settings"
                          target="_blank"
                        >
                          <FormattedMessage
                            defaultMessage="security data"
                            id="telemetry.securityData"
                            values={Object {}}
                          />
                        </EuiLink>,
                      }
                    }
                  />
                </p>
              </React.Fragment>,
              "displayName": "Share usage with Elastic",
              "isCustom": true,
              "isOverridden": false,
              "name": "Usage collection",
              "requiresPageReload": false,
              "type": "boolean",
              "value": true,
            }
          }
          toasts={
            Object {
              "add": [MockFunction],
              "addDanger": [MockFunction],
              "addError": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
              "get$": [MockFunction],
              "remove": [MockFunction],
            }
          }
        />
      </_EuiSplitPanelInner>
    </EuiForm>
  </_EuiSplitPanelOuter>
</Fragment>
`;

exports[`TelemetryManagementSectionComponent renders null because allowChangingOptInStatus is false 1`] = `
<TelemetryManagementSection
  docLinks={
    Object {
      "legal": Object {
        "privacyStatement": "https://some-host/some-url",
      },
    }
  }
  enableSaving={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en-US",
      "formatDate": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatHTMLMessage": [Function],
      "formatList": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en-US",
      "messages": Object {},
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": undefined,
    }
  }
  onQueryMatchChange={[MockFunction]}
  showAppliesSettingMessage={true}
  telemetryService={
    TelemetryService {
      "canSendTelemetry": [Function],
      "currentKibanaVersion": "mock_kibana_version",
      "defaultConfig": Object {
        "allowChangingOptInStatus": false,
        "banner": true,
        "labels": Object {},
        "optIn": true,
        "sendUsageFrom": "browser",
        "sendUsageTo": "staging",
      },
      "fetchExample": [Function],
      "fetchLastReported": [Function],
      "fetchTelemetry": [Function],
      "getCanChangeOptInStatus": [Function],
      "getIsOptedIn": [Function],
      "getOptInStatusUrl": [Function],
      "getTelemetryUrl": [Function],
      "http": Object {
        "addLoadingCountSource": [MockFunction],
        "anonymousPaths": Object {
          "isAnonymous": [MockFunction],
          "register": [MockFunction],
        },
        "basePath": BasePath {
          "basePath": "",
          "get": [Function],
          "prepend": [Function],
          "publicBaseUrl": undefined,
          "remove": [Function],
          "serverBasePath": "",
        },
        "delete": [MockFunction],
        "externalUrl": Object {
          "isInternalUrl": [MockFunction],
          "validateUrl": [MockFunction],
        },
        "fetch": [MockFunction],
        "get": [MockFunction],
        "getLoadingCount$": [MockFunction],
        "head": [MockFunction],
        "intercept": [MockFunction],
        "options": [MockFunction],
        "patch": [MockFunction],
        "post": [MockFunction],
        "put": [MockFunction],
      },
      "isScreenshotMode": false,
      "notifications": Object {
        "showErrorDialog": [MockFunction],
        "toasts": Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        },
      },
      "reportOptInStatus": [Function],
      "reportOptInStatusChange": false,
      "setOptIn": [Function],
      "setUserHasSeenNotice": [Function],
      "updateLastReported": [Function],
      "updatedConfig": undefined,
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
/>
`;

exports[`TelemetryManagementSectionComponent test the wrapper (for coverage purposes) 1`] = `null`;
