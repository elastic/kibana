// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TelemetryManagementSectionComponent renders as expected 1`] = `
<Fragment>
  <EuiPanel
    paddingSize="l"
  >
    <EuiForm>
      <EuiText>
        <EuiFlexGroup
          alignItems="baseline"
        >
          <EuiFlexItem
            grow={false}
          >
            <h2>
              <FormattedMessage
                defaultMessage="Usage Data"
                id="telemetry.usageDataTitle"
                values={Object {}}
              />
            </h2>
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiText>
      <EuiCallOut
        color="primary"
        iconType="spacesApp"
        title={
          <p>
            <FormattedMessage
              defaultMessage="Changes to this setting apply to {allOfKibanaText} and are saved automatically."
              id="telemetry.callout.appliesSettingTitle"
              values={
                Object {
                  "allOfKibanaText": <strong>
                    <FormattedMessage
                      defaultMessage="all of Kibana"
                      id="telemetry.callout.appliesSettingTitle.allOfKibanaText"
                      values={Object {}}
                    />
                  </strong>,
                }
              }
            />
          </p>
        }
      />
      <EuiSpacer
        size="s"
      />
      <Field
        dockLinks={null}
        enableSaving={true}
        handleChange={[Function]}
        loading={false}
        setting={
          Object {
            "ariaName": "Provide usage statistics",
            "defVal": true,
            "description": <React.Fragment>
              <p>
                <FormattedMessage
                  defaultMessage="Enabling data usage collection helps us manage and improve our products and services. See our {privacyStatementLink} for more details."
                  id="telemetry.telemetryConfigAndLinkDescription"
                  values={
                    Object {
                      "privacyStatementLink": <EuiLink
                        href="https://www.elastic.co/legal/privacy-statement"
                        target="_blank"
                      >
                        <FormattedMessage
                          defaultMessage="Privacy Statement"
                          id="telemetry.readOurUsageDataPrivacyStatementLinkText"
                          values={Object {}}
                        />
                      </EuiLink>,
                    }
                  }
                />
              </p>
              <p>
                <EuiLink
                  onClick={[Function]}
                >
                  <FormattedMessage
                    defaultMessage="See an example of what we collect"
                    id="telemetry.seeExampleOfWhatWeCollectLinkText"
                    values={Object {}}
                  />
                </EuiLink>
              </p>
            </React.Fragment>,
            "displayName": "Provide usage statistics",
            "name": "telemetry:enabled",
            "type": "boolean",
            "value": true,
          }
        }
        toasts={null}
      />
    </EuiForm>
  </EuiPanel>
</Fragment>
`;

exports[`TelemetryManagementSectionComponent renders null because allowChangingOptInStatus is false 1`] = `
<TelemetryManagementSection
  enableSaving={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  onQueryMatchChange={[MockFunction]}
  showAppliesSettingMessage={true}
  telemetryService={
    TelemetryService {
      "defaultConfig": Object {
        "allowChangingOptInStatus": false,
        "banner": true,
        "enabled": true,
        "optIn": true,
        "optInStatusUrl": "",
        "sendUsageFrom": "browser",
        "url": "",
      },
      "fetchExample": [Function],
      "fetchTelemetry": [Function],
      "getCanChangeOptInStatus": [Function],
      "getIsOptedIn": [Function],
      "getOptInStatusUrl": [Function],
      "getTelemetryUrl": [Function],
      "getUserHasSeenOptedInNotice": [Function],
      "http": Object {
        "addLoadingCountSource": [MockFunction],
        "anonymousPaths": Object {
          "isAnonymous": [MockFunction],
          "register": [MockFunction],
        },
        "basePath": BasePath {
          "basePath": "",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "",
        },
        "delete": [MockFunction],
        "fetch": [MockFunction],
        "get": [MockFunction],
        "getLoadingCount$": [MockFunction],
        "head": [MockFunction],
        "intercept": [MockFunction],
        "options": [MockFunction],
        "patch": [MockFunction],
        "post": [MockFunction],
        "put": [MockFunction],
      },
      "notifications": Object {
        "toasts": Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        },
      },
      "reportOptInStatus": [Function],
      "reportOptInStatusChange": false,
      "setOptIn": [Function],
      "setUserHasSeenNotice": [Function],
      "updatedConfig": undefined,
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
/>
`;

exports[`TelemetryManagementSectionComponent renders null because query does not match the SEARCH_TERMS 1`] = `
<TelemetryManagementSection
  enableSaving={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  onQueryMatchChange={
    [MockFunction] {
      "calls": Array [
        Array [
          false,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  query={
    Object {
      "text": "asssdasdsad",
    }
  }
  showAppliesSettingMessage={false}
  telemetryService={
    TelemetryService {
      "defaultConfig": Object {
        "allowChangingOptInStatus": true,
        "banner": true,
        "enabled": true,
        "optIn": false,
        "optInStatusUrl": "",
        "sendUsageFrom": "browser",
        "url": "",
      },
      "fetchExample": [Function],
      "fetchTelemetry": [Function],
      "getCanChangeOptInStatus": [Function],
      "getIsOptedIn": [Function],
      "getOptInStatusUrl": [Function],
      "getTelemetryUrl": [Function],
      "getUserHasSeenOptedInNotice": [Function],
      "http": Object {
        "addLoadingCountSource": [MockFunction],
        "anonymousPaths": Object {
          "isAnonymous": [MockFunction],
          "register": [MockFunction],
        },
        "basePath": BasePath {
          "basePath": "",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "",
        },
        "delete": [MockFunction],
        "fetch": [MockFunction],
        "get": [MockFunction],
        "getLoadingCount$": [MockFunction],
        "head": [MockFunction],
        "intercept": [MockFunction],
        "options": [MockFunction],
        "patch": [MockFunction],
        "post": [MockFunction],
        "put": [MockFunction],
      },
      "notifications": Object {
        "toasts": Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        },
      },
      "reportOptInStatus": [Function],
      "reportOptInStatusChange": false,
      "setOptIn": [Function],
      "setUserHasSeenNotice": [Function],
      "updatedConfig": undefined,
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
/>
`;

exports[`TelemetryManagementSectionComponent test the wrapper (for coverage purposes) 1`] = `null`;
