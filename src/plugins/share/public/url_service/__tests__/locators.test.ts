/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { browserTestLocator, BrowserTestLocatorState, urlServiceTestSetup } from './setup';

describe('locators', () => {
  test('can start locators service', () => {
    const { locators } = urlServiceTestSetup();

    expect(typeof locators).toBe('object');
    expect(typeof locators.create).toBe('function');
    expect(typeof locators.get).toBe('function');
  });

  test('returns "undefined" for unregistered locator', () => {
    const { locators } = urlServiceTestSetup();

    expect(locators.get(browserTestLocator.id)).toBe(undefined);
  });

  test('can register a locator', () => {
    const { locators } = urlServiceTestSetup();

    locators.create(browserTestLocator);
    expect(typeof locators.get(browserTestLocator.id)).toBe('object');
  });

  test('getLocation() returns KibanaLocation generated by the locator', () => {
    const { locators } = urlServiceTestSetup();

    locators.create(browserTestLocator);

    const locator = locators.get<BrowserTestLocatorState>(browserTestLocator.id);
    const location = locator?.getLocation({
      savedObjectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
      pageNumber: 21,
      showFlyout: true,
    });

    expect(location).toEqual({
      app: 'test_app',
      route: '/my-object/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx?page=21',
      state: { isFlyoutOpen: true },
    });
  });
});
