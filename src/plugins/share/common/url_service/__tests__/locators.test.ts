/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { of } from 'src/plugins/kibana_utils/common';
import { testLocator, TestLocatorState, urlServiceTestSetup } from './setup';

describe('locators', () => {
  test('can start locators service', () => {
    const {
      service: { locators },
    } = urlServiceTestSetup();

    expect(typeof locators).toBe('object');
    expect(typeof locators.create).toBe('function');
    expect(typeof locators.get).toBe('function');
  });

  test('returns "undefined" for unregistered locator', () => {
    const {
      service: { locators },
    } = urlServiceTestSetup();

    expect(locators.get(testLocator.id)).toBe(undefined);
  });

  test('can register a locator', () => {
    const {
      service: { locators },
    } = urlServiceTestSetup();

    locators.create(testLocator);
    expect(typeof locators.get(testLocator.id)).toBe('object');
  });

  test('getLocation() returns KibanaLocation generated by the locator', async () => {
    const {
      service: { locators },
    } = urlServiceTestSetup();

    locators.create(testLocator);

    const locator = locators.get<TestLocatorState>(testLocator.id);
    const location = await locator?.getLocation({
      savedObjectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
      pageNumber: 21,
      showFlyout: true,
    });

    expect(location).toEqual({
      app: 'test_app',
      path: '/my-object/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx?page=21',
      state: { isFlyoutOpen: true },
    });
  });

  describe('.navigate()', () => {
    test('throws if navigation method is not implemented', async () => {
      const {
        service: { locators },
      } = urlServiceTestSetup();
      const locator = locators.create(testLocator);
      const [, error] = await of(
        locator.navigate({
          pageNumber: 1,
          savedObjectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
          showFlyout: false,
        })
      );

      expect(error).toBeInstanceOf(Error);
      expect(error.message).toBe('not implemented');
    });

    test('navigates user when .navigate() method is called', async () => {
      const {
        service: { locators },
        deps,
      } = urlServiceTestSetup({
        navigate: jest.fn(async () => {}),
      });
      const locator = locators.create(testLocator);
      const [, error] = await of(
        locator.navigate({
          pageNumber: 1,
          savedObjectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
          showFlyout: false,
        })
      );

      expect(error).toBe(undefined);
      expect(deps.navigate).toHaveBeenCalledTimes(1);
      expect(deps.navigate).toHaveBeenCalledWith(
        {
          app: 'test_app',
          path: '/my-object/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx?page=1',
          state: {
            isFlyoutOpen: false,
          },
        },
        { replace: false }
      );
    });

    test('can specify "replace" navigation parameter', async () => {
      const {
        service: { locators },
        deps,
      } = urlServiceTestSetup({
        navigate: jest.fn(async () => {}),
      });
      const locator = locators.create(testLocator);

      await locator.navigate(
        {
          pageNumber: 1,
          savedObjectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
          showFlyout: false,
        },
        {
          replace: false,
        }
      );

      expect(deps.navigate).toHaveBeenCalledTimes(1);
      expect(deps.navigate).toHaveBeenCalledWith(
        {
          app: 'test_app',
          path: '/my-object/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx?page=1',
          state: {
            isFlyoutOpen: false,
          },
        },
        { replace: false }
      );

      await locator.navigate(
        {
          pageNumber: 2,
          savedObjectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
          showFlyout: false,
        },
        {
          replace: true,
        }
      );

      expect(deps.navigate).toHaveBeenCalledTimes(2);
      expect(deps.navigate).toHaveBeenCalledWith(
        {
          app: 'test_app',
          path: '/my-object/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx?page=2',
          state: {
            isFlyoutOpen: false,
          },
        },
        { replace: true }
      );
    });
  });
});
