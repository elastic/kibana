/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { DataView } from '@kbn/data-views-plugin/public';
import { buildDataViewMock } from './data_view';

const fields = [
  {
    count: 0,
    name: '_id',
    type: 'string',
    esTypes: ['_id'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: '_index',
    type: 'string',
    esTypes: ['_index'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: '_score',
    type: 'number',
    scripted: false,
    searchable: false,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: '_source',
    type: '_source',
    esTypes: ['_source'],
    scripted: false,
    searchable: false,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: '_type',
    type: 'string',
    scripted: false,
    searchable: false,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 2,
    name: 'array_objects.description',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'array_objects.description.keyword',
    type: 'string',
    esTypes: ['keyword'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
    subType: {
      multi: {
        parent: 'array_objects.description',
      },
    },
  },
  {
    count: 0,
    name: 'array_objects.name',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'array_objects.name.keyword',
    type: 'string',
    esTypes: ['keyword'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
    subType: {
      multi: {
        parent: 'array_objects.name',
      },
    },
  },
  {
    count: 0,
    name: 'array_tags',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'array_tags.keyword',
    type: 'string',
    esTypes: ['keyword'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
    subType: {
      multi: {
        parent: 'array_tags',
      },
    },
  },
  {
    count: 0,
    name: 'binary_blob',
    type: 'unknown',
    esTypes: ['binary'],
    scripted: false,
    searchable: false,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'bool_enabled',
    type: 'boolean',
    esTypes: ['boolean'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 0,
    name: 'date',
    type: 'date',
    esTypes: ['date'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 1,
    name: 'date_nanos',
    type: 'date',
    esTypes: ['date_nanos'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 0,
    name: 'flattened_labels',
    type: 'unknown',
    esTypes: ['flattened'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 0,
    name: 'geo_point',
    type: 'geo_point',
    esTypes: ['geo_point'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 1,
    name: 'geometry',
    type: 'unknown',
    esTypes: ['shape'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 1,
    name: 'histogram',
    type: 'histogram',
    esTypes: ['histogram'],
    scripted: false,
    searchable: false,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 0,
    name: 'ip_addr',
    type: 'ip',
    esTypes: ['ip'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 4,
    name: 'keyword_key',
    type: 'string',
    esTypes: ['keyword'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 0,
    name: 'nested_user.first',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
    subType: {
      nested: {
        path: 'nested_user',
      },
    },
  },
  {
    count: 0,
    name: 'nested_user.first.keyword',
    type: 'string',
    esTypes: ['keyword'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
    subType: {
      multi: {
        parent: 'nested_user.first',
      },
      nested: {
        path: 'nested_user',
      },
    },
  },
  {
    count: 0,
    name: 'nested_user.last',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
    subType: {
      nested: {
        path: 'nested_user',
      },
    },
  },
  {
    count: 0,
    name: 'nested_user.last.keyword',
    type: 'string',
    esTypes: ['keyword'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
    subType: {
      multi: {
        parent: 'nested_user.last',
      },
      nested: {
        path: 'nested_user',
      },
    },
  },
  {
    count: 3,
    name: 'number_amount',
    type: 'number',
    esTypes: ['long'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 3,
    name: 'number_price',
    type: 'number',
    esTypes: ['float'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 0,
    name: 'object_user.first',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'object_user.last',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'range_time_frame',
    type: 'date_range',
    esTypes: ['date_range'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 1,
    name: 'rank_features',
    type: 'unknown',
    esTypes: ['rank_features'],
    scripted: false,
    searchable: false,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 5,
    name: 'text_message',
    type: 'string',
    esTypes: ['text'],
    scripted: false,
    searchable: true,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'vector',
    type: 'unknown',
    esTypes: ['dense_vector'],
    scripted: false,
    searchable: false,
    aggregatable: false,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'version',
    type: 'string',
    esTypes: ['version'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: true,
  },
  {
    count: 1,
    script: 'return "hi there"',
    lang: 'painless',
    name: 'scripted_string',
    type: 'string',
    scripted: true,
    searchable: true,
    aggregatable: true,
    readFromDocValues: false,
  },
  {
    count: 0,
    name: 'runtime_number',
    type: 'number',
    esTypes: ['double'],
    scripted: false,
    searchable: true,
    aggregatable: true,
    readFromDocValues: false,
  },
] as DataView['fields'];

export const dataViewComplexMock = buildDataViewMock({
  name: 'data-view-with-various-field-types',
  fields,
  timeFieldName: 'data',
});
