// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FieldFormatEditor should render normally 1`] = `
<Fragment>
  <Suspense
    fallback={
      <div
        style={
          Object {
            "marginTop": 8,
            "minHeight": 430,
          }
        }
      >
        <EuiDelayRender
          delay={500}
        >
          <EuiSkeletonText
            lines={4}
          />
        </EuiDelayRender>
      </div>
    }
  >
    <lazy
      fieldFormats={
        Object {
          "deserialize": [MockFunction],
          "getByFieldType": [MockFunction],
          "getDefaultConfig": [MockFunction],
          "getDefaultInstance": [MockFunction],
          "getDefaultInstanceCacheResolver": [MockFunction],
          "getDefaultInstancePlain": [MockFunction],
          "getDefaultType": [MockFunction],
          "getDefaultTypeName": [MockFunction],
          "getInstance": [MockFunction],
          "getType": [MockFunction],
          "getTypeNameByEsTypes": [MockFunction],
          "getTypeWithoutMetaParams": [MockFunction],
          "has": [MockFunction],
          "init": [MockFunction],
          "parseDefaultTypeMap": [MockFunction],
          "register": [MockFunction],
        }
      }
      fieldType="number"
      format={Object {}}
      formatParams={Object {}}
      onChange={[Function]}
      onError={[Function]}
    />
  </Suspense>
</Fragment>
`;

exports[`FieldFormatEditor should render nothing if there is no editor for the format 1`] = `
<Fragment>
  <Suspense
    fallback={
      <div
        style={
          Object {
            "marginTop": 8,
            "minHeight": 430,
          }
        }
      >
        <EuiDelayRender
          delay={500}
        >
          <EuiSkeletonText
            lines={4}
          />
        </EuiDelayRender>
      </div>
    }
  >
    <lazy
      fieldFormats={
        Object {
          "deserialize": [MockFunction],
          "getByFieldType": [MockFunction],
          "getDefaultConfig": [MockFunction],
          "getDefaultInstance": [MockFunction],
          "getDefaultInstanceCacheResolver": [MockFunction],
          "getDefaultInstancePlain": [MockFunction],
          "getDefaultType": [MockFunction],
          "getDefaultTypeName": [MockFunction],
          "getInstance": [MockFunction],
          "getType": [MockFunction],
          "getTypeNameByEsTypes": [MockFunction],
          "getTypeWithoutMetaParams": [MockFunction],
          "has": [MockFunction],
          "init": [MockFunction],
          "parseDefaultTypeMap": [MockFunction],
          "register": [MockFunction],
        }
      }
      fieldType="number"
      format={Object {}}
      formatParams={Object {}}
      onChange={[Function]}
      onError={[Function]}
    />
  </Suspense>
</Fragment>
`;
