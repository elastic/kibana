@import (reference) "~ui/styles/variables";
@import (reference) "~ui/styles/mixins";
@import "~ui/styles/local_search.less";
@import "~react-grid-layout/css/styles.css";
@import "~react-resizable/css/styles.css";

.fullScreenModePlaceholder {
  text-align: center;
  width: 100%;
  height: 0;
  bottom: 0;
  position: absolute;
}

.layout-edit {
  /**
   * 1. If we don't give the resizable handler a larger z index value the spy toggle will take over the mouse hover.
   */
  .react-resizable-handle {
    z-index: 10; /* 1 */
  }
}

.layout-view {
  /**
   * 1. Due to https://github.com/STRML/react-grid-layout/issues/240 we have to manually hide the resizable
   * element.
   */
  .react-resizable-handle {
    display: none; /* 1. */
  }
}

.exitFullScreenMode {
  height: 40px;
  left: 0px;
  bottom: 0px;
  position: fixed;
  display: block;
  padding: 0;
  border: none;
  background: none;
  z-index: 5;
}


.exitFullScreenMode:hover,
.exitFullScreenMode:focus {
  transition: all .5s ease;

  .exitFullScreenModeText {
    visibility: visible;
    opacity: 1;
    transition: all .2s ease;
    transform: translateX(-14px);
  }
}

.exitFullScreenModeLogo {
  display: block;
  background-color: #005571;
  width: 92px;
  height: 40px;
  background-image: url("~ui/images/kibana.svg");
  background-position: 8px 5px;
  background-size: 72px 30px;
  background-repeat: no-repeat;
  z-index: 50;
}

/**
 * 1. Calc made to allow caret in text to peek out / animate.
 */

.exitFullScreenModeText {
  background: @globalColorBlue;
  color: tint(@globalColorBlue, 70%);
  line-height: 40px;
  display: inline-block;
  height: 40px;
  position: absolute;
  left: calc(100% + 14px);  // 1
  top: 0px;
  bottom: 0px;
  white-space: nowrap;
  padding: 0px 4px 0px 10px;
  transition: all .2s ease;
  transform: translateX(-100%);
  z-index: -1;
}

.tab-dashboard {
  background-color: @dashboard-bg;
}

.dashboardCloneModal {
  width: 450px;
}

.dashboard-grid {
  display: block;
  margin: 0;
  padding: 5px;
  z-index: @dashboardGridDepth;
}

.start-screen {
  margin: 20px auto;
  background-color: @dashboard-bg;
  max-width: 800px;
  background: tint(@globalColorBlue, 90%);
  padding: 40px;
  border-radius: 4px;
}

/**
 * 1. Not entirely sure why but when the panel is within the grid, it requires height 100%. When it's an expanded
 * panel, however, outside the grid, height: 100% will cause the panel not to expand properly.
 * 2. We need this so the panel menu pop up shows up outside the boundaries of a panel.
 */
.react-grid-layout {
  background-color: @dashboard-bg;

  .dashboard-panel {
    height: 100%; /* 1. */
    overflow: visible; /* 2. */
  }

  .gs-w {
    z-index: auto;
  }
}

.panel {
  border: 2px dashed transparent;
}

.panel--edit-mode {
  border-color: @kibanaGray4;
  .visualize-show-spy {
    visibility: visible;
  }

  .panel-heading {
    cursor: pointer;
  }
}

.dashboard-container {
  flex: 1;
  display: flex;
  flex-direction: column;
}

dashboard-panel {
  flex: 1;
  display: flex;
}

/**
 * 1. Fix Firefox bug where a value of overflow: hidden will prevent scrolling in a panel where the spy panel does
 * not have enough room.
 * 2. react-select used in input control vis needs `visible` overflow to avoid clipping selection list
 */
.dashboard-panel {
  z-index: auto;
  flex: 1;
  display: flex;
  flex-direction: column;

  background: @dashboard-panel-bg;
  color: @dashboard-panel-color;
  padding: 0;
  overflow: visible; /* 1, 2 */

  position: relative;

  .panel {
    margin: 0;
    // maintain the 100% height of the panel
    height: 100%;
    flex: 1;

    // flex layout allows us to define the visualize element as "fill available space"
    display: flex;
    flex-direction: column;
    justify-content: flex-start;

    .panel-heading {
      padding: 2px 10px 2px 5px;
      flex: 0 0 auto;
      white-space: nowrap;
      display: flex;
      border-top-right-radius: 0;
      border-top-left-radius: 0;
      background-color: @white;
      border: none;

      /**
       * 1. The popover aligns with the right side of this icon, so we want the right edge as far so the right as
       * possible to make the arrows line up.
       */
      .dashboardPanelPopOver {
        margin-right: -10px; /* 1. */
      }

      /**
       * 1. Required to get the pop up component arrow to line up with the menu icon.
       */
      .panel-dropdown {
        padding: 0 20px; /* 1. */
      }

      .kuiPopover__body {
        z-index: 25;
      }

      .dashboardPanelMenuItem {
        padding: 10px;
        color: @text-color;

        p {
          display: inline;
          padding: 0 0 0 5px;
        }

        &:hover {
          color: @link-hover-color;
        }

      }

      .panel-title {
        font-size: inherit;

        // flexbox fix for IE10
        // http://stackoverflow.com/questions/22008135/internet-explorer-10-does-not-apply-flexbox-on-inline-elements
        display: inline-block;

        .ellipsis();
        flex: 1 1 auto;

        i {
          opacity: 0.3;
          font-size: 1.2em;
          margin-right: 4px;
        }
      }

      .panel-move:hover {
        cursor: move;
      }
    }

    .visualize-show-spy {
      visibility: hidden;
    }

    &:hover {
      .visualize-show-spy {
        visibility: visible;
      }
    }

    .load-error {
      text-align: center;
      font-size: 1em;
      display: flex;
      flex: 1 0 auto;
      justify-content: center;
      flex-direction: column;

      .fa-exclamation-triangle {
        font-size: 2em;
        color: @dashboard-panel-load-error-color;
      }
    }

    /**
     * 1. For tile maps, this is necessary to get the panel pop over to show up. Otherwise the tilemap ends up having
     * a bigger z-index than the pop over.
     */
    .panel-content {
      display: flex;
      flex: 1 1 100%;
      height: auto;
      z-index: 1; /* 1. */
    }
  }

  /**
   * 1. We want the doc-table-container to scroll only when embedded in a dashboard panel
   */
  .doc-table-container {
    flex: 1 1 0; /* 1 */
    overflow: auto; /* 1 */
  }
}
