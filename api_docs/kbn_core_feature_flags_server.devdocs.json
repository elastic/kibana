{
  "id": "@kbn/core-feature-flags-server",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.FeatureFlagDefinition",
        "type": "Interface",
        "tags": [],
        "label": "FeatureFlagDefinition",
        "description": [
          "\nDefinition of a feature flag"
        ],
        "signature": [
          {
            "pluginId": "@kbn/core-feature-flags-server",
            "scope": "server",
            "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
            "section": "def-server.FeatureFlagDefinition",
            "text": "FeatureFlagDefinition"
          },
          "<ValueType>"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagDefinition.key",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [
              "\nThe ID of the feature flag. Used to reference it when evaluating the flag."
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagDefinition.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nHuman friendly name."
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagDefinition.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "\nDescription of the purpose of the feature flag."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagDefinition.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [
              "\nTags to apply to the feature flag for easier categorizing. It may include the plugin, the solution, the team."
            ],
            "signature": [
              "string[]"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagDefinition.variationType",
            "type": "Uncategorized",
            "tags": [],
            "label": "variationType",
            "description": [
              "\nThe type of the values returned by the feature flag (\"string\", \"boolean\", or \"number\")."
            ],
            "signature": [
              "ValueType"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagDefinition.variations",
            "type": "Array",
            "tags": [],
            "label": "variations",
            "description": [
              "\nList of variations of the feature flags."
            ],
            "signature": [
              "{ name: string; description?: string | undefined; value: ValueType extends \"string\" ? string : ValueType extends \"boolean\" ? boolean : number; }[]"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.FeatureFlagsSetup",
        "type": "Interface",
        "tags": [],
        "label": "FeatureFlagsSetup",
        "description": [
          "\nSetup contract of the Feature Flags Service"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsSetup.setProvider",
            "type": "Function",
            "tags": [],
            "label": "setProvider",
            "description": [
              "\nRegisters an OpenFeature provider to talk to the\n3rd-party service that manages the Feature Flags."
            ],
            "signature": [
              "(provider: ",
              "Provider",
              ") => void"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsSetup.setProvider.$1",
                "type": "Object",
                "tags": [],
                "label": "provider",
                "description": [
                  "The {@link Provider | OpenFeature Provider} to handle the communication with the feature flags management system."
                ],
                "signature": [
                  "Provider"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsSetup.appendContext",
            "type": "Function",
            "tags": [],
            "label": "appendContext",
            "description": [
              "\nAppends new keys to the evaluation context."
            ],
            "signature": [
              "(contextToAppend: ",
              {
                "pluginId": "@kbn/core-feature-flags-server",
                "scope": "server",
                "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
                "section": "def-server.EvaluationContext",
                "text": "EvaluationContext"
              },
              ") => void"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsSetup.appendContext.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "contextToAppend",
                "description": [
                  "The additional keys that should be appended/modified in the evaluation context."
                ],
                "signature": [
                  {
                    "pluginId": "@kbn/core-feature-flags-server",
                    "scope": "server",
                    "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
                    "section": "def-server.EvaluationContext",
                    "text": "EvaluationContext"
                  }
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.FeatureFlagsStart",
        "type": "Interface",
        "tags": [],
        "label": "FeatureFlagsStart",
        "description": [
          "\nSetup contract of the Feature Flags Service"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.appendContext",
            "type": "Function",
            "tags": [],
            "label": "appendContext",
            "description": [
              "\nAppends new keys to the evaluation context."
            ],
            "signature": [
              "(contextToAppend: ",
              {
                "pluginId": "@kbn/core-feature-flags-server",
                "scope": "server",
                "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
                "section": "def-server.EvaluationContext",
                "text": "EvaluationContext"
              },
              ") => void"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.appendContext.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "contextToAppend",
                "description": [
                  "The additional keys that should be appended/modified in the evaluation context."
                ],
                "signature": [
                  {
                    "pluginId": "@kbn/core-feature-flags-server",
                    "scope": "server",
                    "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
                    "section": "def-server.EvaluationContext",
                    "text": "EvaluationContext"
                  }
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.getBooleanValue",
            "type": "Function",
            "tags": [],
            "label": "getBooleanValue",
            "description": [
              "\nEvaluates a boolean flag"
            ],
            "signature": [
              "(flagName: string, fallbackValue: boolean) => Promise<boolean>"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getBooleanValue.$1",
                "type": "string",
                "tags": [],
                "label": "flagName",
                "description": [
                  "The flag ID to evaluate"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getBooleanValue.$2",
                "type": "boolean",
                "tags": [],
                "label": "fallbackValue",
                "description": [
                  "If the flag cannot be evaluated for whatever reason, the fallback value is provided."
                ],
                "signature": [
                  "boolean"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.getStringValue",
            "type": "Function",
            "tags": [],
            "label": "getStringValue",
            "description": [
              "\nEvaluates a string flag"
            ],
            "signature": [
              "<Value extends string>(flagName: string, fallbackValue: Value) => Promise<Value>"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getStringValue.$1",
                "type": "string",
                "tags": [],
                "label": "flagName",
                "description": [
                  "The flag ID to evaluate"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getStringValue.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "fallbackValue",
                "description": [
                  "If the flag cannot be evaluated for whatever reason, the fallback value is provided."
                ],
                "signature": [
                  "Value"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.getNumberValue",
            "type": "Function",
            "tags": [],
            "label": "getNumberValue",
            "description": [
              "\nEvaluates a number flag"
            ],
            "signature": [
              "<Value extends number>(flagName: string, fallbackValue: Value) => Promise<Value>"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getNumberValue.$1",
                "type": "string",
                "tags": [],
                "label": "flagName",
                "description": [
                  "The flag ID to evaluate"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getNumberValue.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "fallbackValue",
                "description": [
                  "If the flag cannot be evaluated for whatever reason, the fallback value is provided."
                ],
                "signature": [
                  "Value"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.getBooleanValue$",
            "type": "Function",
            "tags": [],
            "label": "getBooleanValue$",
            "description": [
              "\nReturns an observable of a boolean flag"
            ],
            "signature": [
              "(flagName: string, fallbackValue: boolean) => ",
              "Observable",
              "<boolean>"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getBooleanValue$.$1",
                "type": "string",
                "tags": [],
                "label": "flagName",
                "description": [
                  "The flag ID to evaluate"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getBooleanValue$.$2",
                "type": "boolean",
                "tags": [],
                "label": "fallbackValue",
                "description": [
                  "If the flag cannot be evaluated for whatever reason, the fallback value is provided."
                ],
                "signature": [
                  "boolean"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.getStringValue$",
            "type": "Function",
            "tags": [],
            "label": "getStringValue$",
            "description": [
              "\nReturns an observable of a string flag"
            ],
            "signature": [
              "<Value extends string>(flagName: string, fallbackValue: Value) => ",
              "Observable",
              "<Value>"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getStringValue$.$1",
                "type": "string",
                "tags": [],
                "label": "flagName",
                "description": [
                  "The flag ID to evaluate"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getStringValue$.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "fallbackValue",
                "description": [
                  "If the flag cannot be evaluated for whatever reason, the fallback value is provided."
                ],
                "signature": [
                  "Value"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-feature-flags-server",
            "id": "def-server.FeatureFlagsStart.getNumberValue$",
            "type": "Function",
            "tags": [],
            "label": "getNumberValue$",
            "description": [
              "\nReturns an observable of a number flag"
            ],
            "signature": [
              "<Value extends number>(flagName: string, fallbackValue: Value) => ",
              "Observable",
              "<Value>"
            ],
            "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getNumberValue$.$1",
                "type": "string",
                "tags": [],
                "label": "flagName",
                "description": [
                  "The flag ID to evaluate"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-feature-flags-server",
                "id": "def-server.FeatureFlagsStart.getNumberValue$.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "fallbackValue",
                "description": [
                  "If the flag cannot be evaluated for whatever reason, the fallback value is provided."
                ],
                "signature": [
                  "Value"
                ],
                "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.EvaluationContext",
        "type": "Type",
        "tags": [],
        "label": "EvaluationContext",
        "description": [
          "\nThe evaluation context to use when retrieving the flags.\n\nWe use multi-context so that we can apply segmentation rules at different levels (`organization`/`kibana`).\n* `organization` includes any information that is common to all the projects/deployments in an organization. An example is the in_trial status.\n* The `kibana` context includes all the information that identifies a project/deployment. Examples are version, offering, and has_data.\nKind helps us specify which sub-context should receive the new attributes.\nIf no `kind` is provided, it defaults to `kibana`.\n"
        ],
        "signature": [
          {
            "pluginId": "@kbn/core-feature-flags-server",
            "scope": "server",
            "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
            "section": "def-server.MultiContextEvaluationContext",
            "text": "MultiContextEvaluationContext"
          },
          " | ",
          {
            "pluginId": "@kbn/core-feature-flags-server",
            "scope": "server",
            "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
            "section": "def-server.SingleContextEvaluationContext",
            "text": "SingleContextEvaluationContext"
          }
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.FeatureFlagDefinitions",
        "type": "Type",
        "tags": [],
        "label": "FeatureFlagDefinitions",
        "description": [
          "\nList of {@link FeatureFlagDefinition}"
        ],
        "signature": [
          "(",
          {
            "pluginId": "@kbn/core-feature-flags-server",
            "scope": "server",
            "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
            "section": "def-server.FeatureFlagDefinition",
            "text": "FeatureFlagDefinition"
          },
          "<\"boolean\"> | ",
          {
            "pluginId": "@kbn/core-feature-flags-server",
            "scope": "server",
            "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
            "section": "def-server.FeatureFlagDefinition",
            "text": "FeatureFlagDefinition"
          },
          "<\"string\"> | ",
          {
            "pluginId": "@kbn/core-feature-flags-server",
            "scope": "server",
            "docId": "kibKbnCoreFeatureFlagsServerPluginApi",
            "section": "def-server.FeatureFlagDefinition",
            "text": "FeatureFlagDefinition"
          },
          "<\"number\">)[]"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/feature_flag_definition.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.FeatureFlagsRequestHandlerContext",
        "type": "Type",
        "tags": [],
        "label": "FeatureFlagsRequestHandlerContext",
        "description": [
          "\nThe HTTP request handler context for evaluating feature flags"
        ],
        "signature": [
          "{ getBooleanValue: (flagName: string, fallbackValue: boolean) => Promise<boolean>; getStringValue: <Value extends string>(flagName: string, fallbackValue: Value) => Promise<Value>; getNumberValue: <Value extends number>(flagName: string, fallbackValue: Value) => Promise<Value>; }"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/request_handler_context.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.MultiContextEvaluationContext",
        "type": "Type",
        "tags": [],
        "label": "MultiContextEvaluationContext",
        "description": [
          "\nMulti-context format. The sub-contexts are provided in their nested properties."
        ],
        "signature": [
          "{ targetingKey?: string | undefined; } & Record<string, ",
          "EvaluationContextValue",
          "> & { kind: \"multi\"; organization?: ",
          "EvaluationContext",
          " | undefined; kibana?: ",
          "EvaluationContext",
          " | undefined; }"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-feature-flags-server",
        "id": "def-server.SingleContextEvaluationContext",
        "type": "Type",
        "tags": [],
        "label": "SingleContextEvaluationContext",
        "description": [
          "\nSingle Context format. If `kind` is not specified, it applies to the `kibana` sub-context."
        ],
        "signature": [
          "{ targetingKey?: string | undefined; } & Record<string, ",
          "EvaluationContextValue",
          "> & { kind?: \"kibana\" | \"organization\" | undefined; }"
        ],
        "path": "packages/core/feature-flags/core-feature-flags-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}