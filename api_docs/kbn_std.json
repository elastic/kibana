{
  "id": "@kbn/std",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.assertNever",
        "type": "Function",
        "tags": [],
        "label": "assertNever",
        "description": [
          "\nCan be used in switch statements to ensure we perform exhaustive checks, see\nhttps://www.typescriptlang.org/docs/handbook/advanced-types.html#exhaustiveness-checking\n"
        ],
        "signature": [
          "(x: never) => never"
        ],
        "path": "packages/kbn-std/src/assert_never.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.assertNever.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "x",
            "description": [],
            "signature": [
              "never"
            ],
            "path": "packages/kbn-std/src/assert_never.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.asyncForEach",
        "type": "Function",
        "tags": [],
        "label": "asyncForEach",
        "description": [
          "\nCreates a promise which resolves with `undefined` after calling `fn` for each\nitem in `iterable`. `fn` can return either a Promise or Observable. If `fn`\nreturns observables then they will properly abort if an error occurs.\n"
        ],
        "signature": [
          "(iterable: ",
          "IterableInput",
          "<T>, fn: ",
          "AsyncMapFn",
          "<T, any>) => Promise<void>"
        ],
        "path": "packages/kbn-std/src/iteration/for_each.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncForEach.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "iterable",
            "description": [
              "Items to iterate"
            ],
            "signature": [
              "IterableInput",
              "<T>"
            ],
            "path": "packages/kbn-std/src/iteration/for_each.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncForEach.$2",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [
              "Function to call for each item"
            ],
            "signature": [
              "AsyncMapFn",
              "<T, any>"
            ],
            "path": "packages/kbn-std/src/iteration/for_each.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.asyncForEachWithLimit",
        "type": "Function",
        "tags": [],
        "label": "asyncForEachWithLimit",
        "description": [
          "\nCreates a promise which resolves with `undefined` after calling `fn` for each\nitem in `iterable`. `fn` can return either a Promise or Observable. If `fn`\nreturns observables then they will properly abort if an error occurs.\n\nThe number of concurrent executions of `fn` is limited by `limit`.\n"
        ],
        "signature": [
          "(iterable: ",
          "IterableInput",
          "<T>, limit: number, fn: ",
          "AsyncMapFn",
          "<T, any>) => Promise<void>"
        ],
        "path": "packages/kbn-std/src/iteration/for_each.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncForEachWithLimit.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "iterable",
            "description": [
              "Items to iterate"
            ],
            "signature": [
              "IterableInput",
              "<T>"
            ],
            "path": "packages/kbn-std/src/iteration/for_each.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncForEachWithLimit.$2",
            "type": "number",
            "tags": [],
            "label": "limit",
            "description": [
              "Maximum number of operations to run in parallel"
            ],
            "signature": [
              "number"
            ],
            "path": "packages/kbn-std/src/iteration/for_each.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncForEachWithLimit.$3",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [
              "Function to call for each item"
            ],
            "signature": [
              "AsyncMapFn",
              "<T, any>"
            ],
            "path": "packages/kbn-std/src/iteration/for_each.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.asyncMap",
        "type": "Function",
        "tags": [],
        "label": "asyncMap",
        "description": [
          "\nCreates a promise whose values is the array of results produced by calling `fn` for\neach item in `iterable`. `fn` can return either a Promise or Observable. If `fn`\nreturns observables then they will properly abort if an error occurs.\n\nThe result array follows the order of the input iterable, even though the calls\nto `fn` may not. (so avoid side effects)\n"
        ],
        "signature": [
          "(iterable: ",
          "IterableInput",
          "<T1>, fn: ",
          "AsyncMapFn",
          "<T1, T2>) => Promise<T2[]>"
        ],
        "path": "packages/kbn-std/src/iteration/map.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncMap.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "iterable",
            "description": [
              "Items to iterate"
            ],
            "signature": [
              "IterableInput",
              "<T1>"
            ],
            "path": "packages/kbn-std/src/iteration/map.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncMap.$2",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [
              "Function to call for each item. Result is added/concatenated into the result array in place of the input value"
            ],
            "signature": [
              "AsyncMapFn",
              "<T1, T2>"
            ],
            "path": "packages/kbn-std/src/iteration/map.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.asyncMapWithLimit",
        "type": "Function",
        "tags": [],
        "label": "asyncMapWithLimit",
        "description": [
          "\nCreates a promise whose values is the array of results produced by calling `fn` for\neach item in `iterable`. `fn` can return either a Promise or Observable. If `fn`\nreturns observables then they will properly abort if an error occurs.\n\nThe number of concurrent executions of `fn` is limited by `limit`.\n\nThe result array follows the order of the input iterable, even though the calls\nto `fn` may not. (so avoid side effects)\n"
        ],
        "signature": [
          "(iterable: ",
          "IterableInput",
          "<T1>, limit: number, fn: ",
          "AsyncMapFn",
          "<T1, T2>) => Promise<T2[]>"
        ],
        "path": "packages/kbn-std/src/iteration/map.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncMapWithLimit.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "iterable",
            "description": [
              "Items to iterate"
            ],
            "signature": [
              "IterableInput",
              "<T1>"
            ],
            "path": "packages/kbn-std/src/iteration/map.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncMapWithLimit.$2",
            "type": "number",
            "tags": [],
            "label": "limit",
            "description": [
              "Maximum number of operations to run in parallel"
            ],
            "signature": [
              "number"
            ],
            "path": "packages/kbn-std/src/iteration/map.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.asyncMapWithLimit.$3",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [
              "Function to call for each item. Result is added/concatenated into the result array in place of the input value"
            ],
            "signature": [
              "AsyncMapFn",
              "<T1, T2>"
            ],
            "path": "packages/kbn-std/src/iteration/map.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.deepFreeze",
        "type": "Function",
        "tags": [],
        "label": "deepFreeze",
        "description": [
          "\nApply Object.freeze to a value recursively and convert the return type to\nReadonly variant recursively\n"
        ],
        "signature": [
          "(object: T) => ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.RecursiveReadonly",
            "text": "RecursiveReadonly"
          },
          "<T>"
        ],
        "path": "packages/kbn-std/src/deep_freeze.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.deepFreeze.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "object",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "packages/kbn-std/src/deep_freeze.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.ensureNoUnsafeProperties",
        "type": "Function",
        "tags": [],
        "label": "ensureNoUnsafeProperties",
        "description": [],
        "signature": [
          "(obj: any) => void"
        ],
        "path": "packages/kbn-std/src/ensure_no_unsafe_properties.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.ensureNoUnsafeProperties.$1",
            "type": "Any",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "packages/kbn-std/src/ensure_no_unsafe_properties.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.firstValueFrom",
        "type": "Function",
        "tags": [],
        "label": "firstValueFrom",
        "description": [],
        "signature": [
          "(source: ",
          "Observable",
          "<T>) => Promise<T>"
        ],
        "path": "packages/kbn-std/src/rxjs_7.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.firstValueFrom.$1",
            "type": "Object",
            "tags": [],
            "label": "source",
            "description": [],
            "signature": [
              "Observable",
              "<T>"
            ],
            "path": "packages/kbn-std/src/rxjs_7.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.get",
        "type": "Function",
        "tags": [],
        "label": "get",
        "description": [
          "\nRetrieve the value for the specified path\n\nNote that dot is _not_ allowed to specify a deeper key, it will assume that\nthe dot is part of the key itself."
        ],
        "signature": [
          "(obj: CFG, path: [A, B, C, D, E]) => CFG[A][B][C][D][E]"
        ],
        "path": "packages/kbn-std/src/get.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "CFG"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$2",
            "type": "Object",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "[A, B, C, D, E]"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.get",
        "type": "Function",
        "tags": [],
        "label": "get",
        "description": [],
        "signature": [
          "(obj: CFG, path: [A, B, C, D]) => CFG[A][B][C][D]"
        ],
        "path": "packages/kbn-std/src/get.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "CFG"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$2",
            "type": "Object",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "[A, B, C, D]"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.get",
        "type": "Function",
        "tags": [],
        "label": "get",
        "description": [],
        "signature": [
          "(obj: CFG, path: [A, B, C]) => CFG[A][B][C]"
        ],
        "path": "packages/kbn-std/src/get.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "CFG"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$2",
            "type": "Object",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "[A, B, C]"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.get",
        "type": "Function",
        "tags": [],
        "label": "get",
        "description": [],
        "signature": [
          "(obj: CFG, path: [A, B]) => CFG[A][B]"
        ],
        "path": "packages/kbn-std/src/get.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "CFG"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$2",
            "type": "Object",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "[A, B]"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.get",
        "type": "Function",
        "tags": [],
        "label": "get",
        "description": [],
        "signature": [
          "(obj: CFG, path: A | [A]) => CFG[A]"
        ],
        "path": "packages/kbn-std/src/get.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "CFG"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "A | [A]"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.get",
        "type": "Function",
        "tags": [],
        "label": "get",
        "description": [],
        "signature": [
          "(obj: CFG, path: string | string[]) => any"
        ],
        "path": "packages/kbn-std/src/get.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "CFG"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.get.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "string | string[]"
            ],
            "path": "packages/kbn-std/src/get.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.getFlattenedObject",
        "type": "Function",
        "tags": [],
        "label": "getFlattenedObject",
        "description": [
          "\n Flattens a deeply nested object to a map of dot-separated\n paths pointing to all primitive values **and arrays**\n from `rootValue`.\n\n example:\n   getFlattenedObject({ a: { b: 1, c: [2,3] } })\n   // => { 'a.b': 1, 'a.c': [2,3] }\n"
        ],
        "signature": [
          "(rootValue: Record<string, any>) => { [key: string]: any; }"
        ],
        "path": "packages/kbn-std/src/get_flattened_object.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.getFlattenedObject.$1",
            "type": "Object",
            "tags": [],
            "label": "rootValue",
            "description": [],
            "signature": [
              "Record<string, any>"
            ],
            "path": "packages/kbn-std/src/get_flattened_object.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.getUrlOrigin",
        "type": "Function",
        "tags": [],
        "label": "getUrlOrigin",
        "description": [
          "\nReturns the origin (protocol + host + port) from given `url` if `url` is a valid absolute url, or null otherwise"
        ],
        "signature": [
          "(url: string) => string | null"
        ],
        "path": "packages/kbn-std/src/url.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.getUrlOrigin.$1",
            "type": "string",
            "tags": [],
            "label": "url",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.isPromise",
        "type": "Function",
        "tags": [],
        "label": "isPromise",
        "description": [],
        "signature": [
          "(maybePromise: T | Promise<T>) => boolean"
        ],
        "path": "packages/kbn-std/src/promise.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.isPromise.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "maybePromise",
            "description": [],
            "signature": [
              "T | Promise<T>"
            ],
            "path": "packages/kbn-std/src/promise.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.isRelativeUrl",
        "type": "Function",
        "tags": [],
        "label": "isRelativeUrl",
        "description": [
          "\nDetermine if a url is relative. Any url including a protocol, hostname, or\nport is not considered relative. This means that absolute *paths* are considered\nto be relative *urls*"
        ],
        "signature": [
          "(candidatePath: string) => boolean"
        ],
        "path": "packages/kbn-std/src/url.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.isRelativeUrl.$1",
            "type": "string",
            "tags": [],
            "label": "candidatePath",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.lastValueFrom",
        "type": "Function",
        "tags": [],
        "label": "lastValueFrom",
        "description": [],
        "signature": [
          "(source: ",
          "Observable",
          "<T>) => Promise<T>"
        ],
        "path": "packages/kbn-std/src/rxjs_7.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.lastValueFrom.$1",
            "type": "Object",
            "tags": [],
            "label": "source",
            "description": [],
            "signature": [
              "Observable",
              "<T>"
            ],
            "path": "packages/kbn-std/src/rxjs_7.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.map$",
        "type": "Function",
        "tags": [],
        "label": "map$",
        "description": [
          "\nCreates an observable whose values are the result of calling `fn` for each\nitem in `iterable`. `fn` can return either a Promise or an Observable. If\n`fn` returns observables then they will properly abort if an error occurs.\n\nResults are emitted as soon as they are available so their order is very\nlikely to not match their order in the input `array`.\n"
        ],
        "signature": [
          "(iterable: ",
          "IterableInput",
          "<T1>, fn: ",
          "AsyncMapFn",
          "<T1, T2>) => ",
          "Observable",
          "<T2>"
        ],
        "path": "packages/kbn-std/src/iteration/observable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.map$.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "iterable",
            "description": [
              "Items to iterate"
            ],
            "signature": [
              "IterableInput",
              "<T1>"
            ],
            "path": "packages/kbn-std/src/iteration/observable.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.map$.$2",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [
              "Function to call for each item. Result is added/concatenated into the result array in place of the input value"
            ],
            "signature": [
              "AsyncMapFn",
              "<T1, T2>"
            ],
            "path": "packages/kbn-std/src/iteration/observable.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.mapToObject",
        "type": "Function",
        "tags": [],
        "label": "mapToObject",
        "description": [],
        "signature": [
          "(map: ReadonlyMap<string, V>) => Record<string, V>"
        ],
        "path": "packages/kbn-std/src/map_to_object.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.mapToObject.$1",
            "type": "Object",
            "tags": [],
            "label": "map",
            "description": [],
            "signature": [
              "ReadonlyMap<string, V>"
            ],
            "path": "packages/kbn-std/src/map_to_object.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.mapWithLimit$",
        "type": "Function",
        "tags": [],
        "label": "mapWithLimit$",
        "description": [
          "\nCreates an observable whose values are the result of calling `fn` for each\nitem in `iterable`. `fn` can return either a Promise or an Observable. If\n`fn` returns observables then they will properly abort if an error occurs.\n\nThe number of concurrent executions of `fn` is limited by `limit`.\n\nResults are emitted as soon as they are available so their order is very\nlikely to not match their order in the input `array`.\n"
        ],
        "signature": [
          "(iterable: ",
          "IterableInput",
          "<T1>, limit: number, fn: ",
          "AsyncMapFn",
          "<T1, T2>) => ",
          "Observable",
          "<T2>"
        ],
        "path": "packages/kbn-std/src/iteration/observable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.mapWithLimit$.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "iterable",
            "description": [
              "Items to iterate"
            ],
            "signature": [
              "IterableInput",
              "<T1>"
            ],
            "path": "packages/kbn-std/src/iteration/observable.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.mapWithLimit$.$2",
            "type": "number",
            "tags": [],
            "label": "limit",
            "description": [
              "Maximum number of operations to run in parallel"
            ],
            "signature": [
              "number"
            ],
            "path": "packages/kbn-std/src/iteration/observable.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.mapWithLimit$.$3",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [
              "Function to call for each item. Result is added/concatenated into the result array in place of the input value"
            ],
            "signature": [
              "AsyncMapFn",
              "<T1, T2>"
            ],
            "path": "packages/kbn-std/src/iteration/observable.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.merge",
        "type": "Function",
        "tags": [],
        "label": "merge",
        "description": [
          "\nDeeply merges two objects, omitting undefined values, and not deeply merging Arrays.\n"
        ],
        "signature": [
          "(baseObj: TBase, source1: TSource1) => TBase & TSource1"
        ],
        "path": "packages/kbn-std/src/merge.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "baseObj",
            "description": [],
            "signature": [
              "TBase"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "source1",
            "description": [],
            "signature": [
              "TSource1"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.merge",
        "type": "Function",
        "tags": [],
        "label": "merge",
        "description": [],
        "signature": [
          "(baseObj: TBase, overrideObj: TSource1, overrideObj2: TSource2) => TBase & TSource1 & TSource2"
        ],
        "path": "packages/kbn-std/src/merge.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "baseObj",
            "description": [],
            "signature": [
              "TBase"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "overrideObj",
            "description": [],
            "signature": [
              "TSource1"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$3",
            "type": "Uncategorized",
            "tags": [],
            "label": "overrideObj2",
            "description": [],
            "signature": [
              "TSource2"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.merge",
        "type": "Function",
        "tags": [],
        "label": "merge",
        "description": [],
        "signature": [
          "(baseObj: TBase, overrideObj: TSource1, overrideObj2: TSource2) => TBase & TSource1 & TSource2 & TSource3"
        ],
        "path": "packages/kbn-std/src/merge.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "baseObj",
            "description": [],
            "signature": [
              "TBase"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "overrideObj",
            "description": [],
            "signature": [
              "TSource1"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$3",
            "type": "Uncategorized",
            "tags": [],
            "label": "overrideObj2",
            "description": [],
            "signature": [
              "TSource2"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.merge",
        "type": "Function",
        "tags": [],
        "label": "merge",
        "description": [],
        "signature": [
          "(baseObj: Record<string, any>, sources: Record<string, any>[]) => TReturn"
        ],
        "path": "packages/kbn-std/src/merge.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$1",
            "type": "Object",
            "tags": [],
            "label": "baseObj",
            "description": [],
            "signature": [
              "Record<string, any>"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.merge.$2",
            "type": "Array",
            "tags": [],
            "label": "sources",
            "description": [],
            "signature": [
              "Record<string, any>[]"
            ],
            "path": "packages/kbn-std/src/merge.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.modifyUrl",
        "type": "Function",
        "tags": [],
        "label": "modifyUrl",
        "description": [
          "\n Takes a URL and a function that takes the meaningful parts\n of the URL as a key-value object, modifies some or all of\n the parts, and returns the modified parts formatted again\n as a url.\n\n Url Parts sent:\n   - protocol\n   - slashes (does the url have the //)\n   - auth\n   - hostname (just the name of the host, no port or auth information)\n   - port\n   - pathname (the path after the hostname, no query or hash, starts\n       with a slash if there was a path)\n   - query (always an object, even when no query on original url)\n   - hash\n\n Why?\n   - The default url library in node produces several conflicting\n     properties on the \"parsed\" output. Modifying any of these might\n     lead to the modifications being ignored (depending on which\n     property was modified)\n   - It's not always clear whether to use path/pathname, host/hostname,\n     so this tries to add helpful constraints\n"
        ],
        "signature": [
          "(url: string, urlModifier: (urlParts: ",
          {
            "pluginId": "@kbn/std",
            "scope": "server",
            "docId": "kibKbnStdPluginApi",
            "section": "def-server.URLMeaningfulParts",
            "text": "URLMeaningfulParts"
          },
          ") => void | Partial<",
          {
            "pluginId": "@kbn/std",
            "scope": "server",
            "docId": "kibKbnStdPluginApi",
            "section": "def-server.URLMeaningfulParts",
            "text": "URLMeaningfulParts"
          },
          ">) => string"
        ],
        "path": "packages/kbn-std/src/url.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.modifyUrl.$1",
            "type": "string",
            "tags": [],
            "label": "url",
            "description": [
              "The string url to parse."
            ],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.modifyUrl.$2",
            "type": "Function",
            "tags": [],
            "label": "urlModifier",
            "description": [
              "A function that will modify the parsed url, or return a new one."
            ],
            "signature": [
              "(urlParts: ",
              {
                "pluginId": "@kbn/std",
                "scope": "server",
                "docId": "kibKbnStdPluginApi",
                "section": "def-server.URLMeaningfulParts",
                "text": "URLMeaningfulParts"
              },
              ") => void | Partial<",
              {
                "pluginId": "@kbn/std",
                "scope": "server",
                "docId": "kibKbnStdPluginApi",
                "section": "def-server.URLMeaningfulParts",
                "text": "URLMeaningfulParts"
              },
              ">"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "The modified and reformatted url"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.pick",
        "type": "Function",
        "tags": [],
        "label": "pick",
        "description": [],
        "signature": [
          "(obj: T, keys: readonly K[]) => Pick<T, K>"
        ],
        "path": "packages/kbn-std/src/pick.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.pick.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "packages/kbn-std/src/pick.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.pick.$2",
            "type": "Object",
            "tags": [],
            "label": "keys",
            "description": [],
            "signature": [
              "readonly K[]"
            ],
            "path": "packages/kbn-std/src/pick.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.unset",
        "type": "Function",
        "tags": [],
        "label": "unset",
        "description": [
          "\nUnset a (potentially nested) key from given object.\nThis mutates the original object.\n"
        ],
        "signature": [
          "(obj: OBJ, atPath: string) => void"
        ],
        "path": "packages/kbn-std/src/unset.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.unset.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "obj",
            "description": [],
            "signature": [
              "OBJ"
            ],
            "path": "packages/kbn-std/src/unset.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.unset.$2",
            "type": "string",
            "tags": [],
            "label": "atPath",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-std/src/unset.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.withTimeout",
        "type": "Function",
        "tags": [],
        "label": "withTimeout",
        "description": [],
        "signature": [
          "({\n  promise,\n  timeoutMs,\n}: { promise: Promise<T>; timeoutMs: number; }) => Promise<{ timedout: true; } | { timedout: false; value: T; }>"
        ],
        "path": "packages/kbn-std/src/promise.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.withTimeout.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  promise,\n  timeoutMs,\n}",
            "description": [],
            "path": "packages/kbn-std/src/promise.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "@kbn/std",
                "id": "def-server.withTimeout.$1.promise",
                "type": "Object",
                "tags": [],
                "label": "promise",
                "description": [],
                "signature": [
                  "Promise<T>"
                ],
                "path": "packages/kbn-std/src/promise.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "@kbn/std",
                "id": "def-server.withTimeout.$1.timeoutMs",
                "type": "number",
                "tags": [],
                "label": "timeoutMs",
                "description": [],
                "path": "packages/kbn-std/src/promise.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.URLMeaningfulParts",
        "type": "Interface",
        "tags": [],
        "label": "URLMeaningfulParts",
        "description": [
          "\nWe define our own typings because the current version of @types/node\ndeclares properties to be optional \"hostname?: string\".\nAlthough, parse call returns \"hostname: null | string\".\n"
        ],
        "path": "packages/kbn-std/src/url.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.auth",
            "type": "CompoundType",
            "tags": [],
            "label": "auth",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.hash",
            "type": "CompoundType",
            "tags": [],
            "label": "hash",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.hostname",
            "type": "CompoundType",
            "tags": [],
            "label": "hostname",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.pathname",
            "type": "CompoundType",
            "tags": [],
            "label": "pathname",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.protocol",
            "type": "CompoundType",
            "tags": [],
            "label": "protocol",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.slashes",
            "type": "CompoundType",
            "tags": [],
            "label": "slashes",
            "description": [],
            "signature": [
              "boolean | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.port",
            "type": "CompoundType",
            "tags": [],
            "label": "port",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/std",
            "id": "def-server.URLMeaningfulParts.query",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "ParsedQuery",
              "<string>"
            ],
            "path": "packages/kbn-std/src/url.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/std",
        "id": "def-server.Freezable",
        "type": "Type",
        "tags": [],
        "label": "Freezable",
        "description": [],
        "signature": [
          "any[] | { [k: string]: any; }"
        ],
        "path": "packages/kbn-std/src/deep_freeze.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}