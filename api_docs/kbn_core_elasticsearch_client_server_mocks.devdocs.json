{
  "id": "@kbn/core-elasticsearch-client-server-mocks",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.createAgentStatsProviderMock",
        "type": "Function",
        "tags": [],
        "label": "createAgentStatsProviderMock",
        "description": [],
        "signature": [
          "() => jest.Mocked<",
          "AgentStatsProvider",
          ">"
        ],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/agent_manager.mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.ClientApiMockInstance",
        "type": "Interface",
        "tags": [],
        "label": "ClientApiMockInstance",
        "description": [],
        "signature": [
          "ClientApiMockInstance",
          "<T, Y> extends jest.MockInstance<T, Y, any>"
        ],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ClientApiMockInstance.mockResponse",
            "type": "Function",
            "tags": [],
            "label": "mockResponse",
            "description": [
              "\nHelper API around `mockReturnValue` returning either the body or the whole TransportResult\ndepending on the `meta` parameter used during the call"
            ],
            "signature": [
              "(value: Awaited<T>, opts?: Partial<Omit<",
              "TransportResult",
              "<T, unknown>, \"body\">> | undefined) => this"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.ClientApiMockInstance.mockResponse.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "Awaited<T>"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.ClientApiMockInstance.mockResponse.$2",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [],
                "signature": [
                  "Partial<Omit<",
                  "TransportResult",
                  "<T, unknown>, \"body\">> | undefined"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ClientApiMockInstance.mockResponseOnce",
            "type": "Function",
            "tags": [],
            "label": "mockResponseOnce",
            "description": [
              "\nHelper API around `mockReturnValueOnce` returning either the body or the whole TransportResult\ndepending on the `meta` parameter used during the call"
            ],
            "signature": [
              "(value: Awaited<T>, opts?: Partial<Omit<",
              "TransportResult",
              "<T, unknown>, \"body\">> | undefined) => this"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.ClientApiMockInstance.mockResponseOnce.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "Awaited<T>"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.ClientApiMockInstance.mockResponseOnce.$2",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [],
                "signature": [
                  "Partial<Omit<",
                  "TransportResult",
                  "<T, unknown>, \"body\">> | undefined"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ClientApiMockInstance.mockResponseImplementation",
            "type": "Function",
            "tags": [],
            "label": "mockResponseImplementation",
            "description": [
              "\nHelper API around `mockImplementation` returning either the body or the whole TransportResult\ndepending on the `meta` parameter used during the call"
            ],
            "signature": [
              "(handler: (...args: Y) => Partial<",
              "TransportResult",
              "<Awaited<T>, unknown>>) => this"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.ClientApiMockInstance.mockResponseImplementation.$1",
                "type": "Function",
                "tags": [],
                "label": "handler",
                "description": [],
                "signature": [
                  "(...args: Y) => Partial<",
                  "TransportResult",
                  "<Awaited<T>, unknown>>"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ClientApiMockInstance.mockResponseImplementationOnce",
            "type": "Function",
            "tags": [],
            "label": "mockResponseImplementationOnce",
            "description": [
              "\nHelper API around `mockImplementationOnce` returning either the body or the whole TransportResult\ndepending on the `meta` parameter used during the call"
            ],
            "signature": [
              "(handler: (...args: Y) => Partial<",
              "TransportResult",
              "<Awaited<T>, unknown>>) => this"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.ClientApiMockInstance.mockResponseImplementationOnce.$1",
                "type": "Function",
                "tags": [],
                "label": "handler",
                "description": [],
                "signature": [
                  "(...args: Y) => Partial<",
                  "TransportResult",
                  "<Awaited<T>, unknown>>"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.ClusterClientMock",
        "type": "Interface",
        "tags": [],
        "label": "ClusterClientMock",
        "description": [],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ClusterClientMock.asInternalUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asInternalUser",
            "description": [],
            "signature": [
              "{ create: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "CreateRequest",
              "<unknown> | ",
              "CreateRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; update: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateResponse",
              "<unknown>>, [params: ",
              "UpdateRequest",
              "<unknown, unknown> | ",
              "UpdateRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; get: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetResponse",
              "<unknown>>, [params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; delete: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; helpers: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; search: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchResponse",
              "<unknown, unknown>>, [params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; child: ",
              "ClientApiMockInstance",
              "<",
              "default",
              ", [opts: ",
              "ClientOptions",
              "]>; asyncSearch: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; autoscaling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; bulk: ",
              "ClientApiMockInstance",
              "<Promise<",
              "BulkResponse",
              ">, [params: ",
              "BulkRequest",
              "<unknown, unknown> | ",
              "BulkRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; capabilities: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TODO",
              ">, [params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; cat: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ccr: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; clearScroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClearScrollResponse",
              ">, [params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; closePointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClosePointInTimeResponse",
              ">, [params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; cluster: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; connector: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; count: ",
              "ClientApiMockInstance",
              "<Promise<",
              "CountResponse",
              ">, [params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; danglingIndices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; deleteByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "DeleteByQueryResponse",
              ">, [params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TasksTaskListResponseBase",
              ">, [params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; enrich: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; eql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; esql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; exists: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; existsSource: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; explain: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ExplainResponse",
              "<unknown>>, [params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; features: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; fieldCaps: ",
              "ClientApiMockInstance",
              "<Promise<",
              "FieldCapsResponse",
              ">, [params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; fleet: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; getScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptResponse",
              ">, [params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptContext: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptContextResponse",
              ">, [params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptLanguages: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptLanguagesResponse",
              ">, [params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getSource: ",
              "ClientApiMockInstance",
              "<Promise<unknown>, [params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; graph: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; healthReport: ",
              "ClientApiMockInstance",
              "<Promise<",
              "HealthReportResponse",
              ">, [params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ilm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; index: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "IndexRequest",
              "<unknown> | ",
              "IndexRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; indices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; inference: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; info: ",
              "ClientApiMockInstance",
              "<Promise<",
              "InfoResponse",
              ">, [params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ingest: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; knnSearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "KnnSearchResponse",
              "<unknown>>, [params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; license: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; logstash: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; mget: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MgetResponse",
              "<unknown>>, [params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; migration: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ml: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; monitoring: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; msearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; msearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchTemplateResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; mtermvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MtermvectorsResponse",
              ">, [params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; nodes: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; openPointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "OpenPointInTimeResponse",
              ">, [params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; ping: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; profiling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; putScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; queryRules: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; rankEval: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RankEvalResponse",
              ">, [params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindex: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexResponse",
              ">, [params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindexRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexRethrottleResponse",
              ">, [params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; renderSearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RenderSearchTemplateResponse",
              ">, [params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; rollup: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; scriptsPainlessExecute: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScriptsPainlessExecuteResponse",
              "<unknown>>, [params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; scroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScrollResponse",
              "<unknown, unknown>>, [params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchApplication: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; searchMvt: ",
              "ClientApiMockInstance",
              "<Promise<ArrayBuffer>, [params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchShards: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchShardsResponse",
              ">, [params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchTemplateResponse",
              "<unknown>>, [params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchableSnapshots: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; security: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; shutdown: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; simulate: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; slm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; snapshot: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; sql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ssl: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; synonyms: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; tasks: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; termsEnum: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermsEnumResponse",
              ">, [params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; termvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermvectorsResponse",
              ">, [params: ",
              "TermvectorsRequest",
              "<unknown> | ",
              "TermvectorsRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; textStructure: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; transform: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; updateByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryResponse",
              ">, [params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; updateByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryRethrottleResponse",
              ">, [params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; watcher: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; xpack: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; } & ",
              "ElasticsearchClient"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ClusterClientMock.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [],
            "signature": [
              "jest.MockInstance<",
              "ScopedClusterClientMock",
              ", [], unknown> & (() => ",
              "ScopedClusterClientMock",
              ")"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.ScopedClusterClientMock",
        "type": "Interface",
        "tags": [],
        "label": "ScopedClusterClientMock",
        "description": [],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ScopedClusterClientMock.asInternalUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asInternalUser",
            "description": [],
            "signature": [
              "{ create: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "CreateRequest",
              "<unknown> | ",
              "CreateRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; update: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateResponse",
              "<unknown>>, [params: ",
              "UpdateRequest",
              "<unknown, unknown> | ",
              "UpdateRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; get: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetResponse",
              "<unknown>>, [params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; delete: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; helpers: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; search: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchResponse",
              "<unknown, unknown>>, [params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; child: ",
              "ClientApiMockInstance",
              "<",
              "default",
              ", [opts: ",
              "ClientOptions",
              "]>; asyncSearch: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; autoscaling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; bulk: ",
              "ClientApiMockInstance",
              "<Promise<",
              "BulkResponse",
              ">, [params: ",
              "BulkRequest",
              "<unknown, unknown> | ",
              "BulkRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; capabilities: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TODO",
              ">, [params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; cat: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ccr: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; clearScroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClearScrollResponse",
              ">, [params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; closePointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClosePointInTimeResponse",
              ">, [params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; cluster: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; connector: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; count: ",
              "ClientApiMockInstance",
              "<Promise<",
              "CountResponse",
              ">, [params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; danglingIndices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; deleteByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "DeleteByQueryResponse",
              ">, [params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TasksTaskListResponseBase",
              ">, [params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; enrich: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; eql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; esql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; exists: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; existsSource: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; explain: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ExplainResponse",
              "<unknown>>, [params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; features: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; fieldCaps: ",
              "ClientApiMockInstance",
              "<Promise<",
              "FieldCapsResponse",
              ">, [params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; fleet: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; getScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptResponse",
              ">, [params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptContext: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptContextResponse",
              ">, [params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptLanguages: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptLanguagesResponse",
              ">, [params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getSource: ",
              "ClientApiMockInstance",
              "<Promise<unknown>, [params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; graph: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; healthReport: ",
              "ClientApiMockInstance",
              "<Promise<",
              "HealthReportResponse",
              ">, [params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ilm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; index: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "IndexRequest",
              "<unknown> | ",
              "IndexRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; indices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; inference: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; info: ",
              "ClientApiMockInstance",
              "<Promise<",
              "InfoResponse",
              ">, [params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ingest: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; knnSearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "KnnSearchResponse",
              "<unknown>>, [params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; license: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; logstash: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; mget: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MgetResponse",
              "<unknown>>, [params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; migration: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ml: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; monitoring: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; msearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; msearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchTemplateResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; mtermvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MtermvectorsResponse",
              ">, [params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; nodes: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; openPointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "OpenPointInTimeResponse",
              ">, [params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; ping: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; profiling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; putScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; queryRules: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; rankEval: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RankEvalResponse",
              ">, [params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindex: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexResponse",
              ">, [params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindexRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexRethrottleResponse",
              ">, [params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; renderSearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RenderSearchTemplateResponse",
              ">, [params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; rollup: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; scriptsPainlessExecute: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScriptsPainlessExecuteResponse",
              "<unknown>>, [params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; scroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScrollResponse",
              "<unknown, unknown>>, [params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchApplication: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; searchMvt: ",
              "ClientApiMockInstance",
              "<Promise<ArrayBuffer>, [params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchShards: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchShardsResponse",
              ">, [params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchTemplateResponse",
              "<unknown>>, [params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchableSnapshots: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; security: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; shutdown: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; simulate: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; slm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; snapshot: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; sql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ssl: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; synonyms: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; tasks: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; termsEnum: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermsEnumResponse",
              ">, [params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; termvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermvectorsResponse",
              ">, [params: ",
              "TermvectorsRequest",
              "<unknown> | ",
              "TermvectorsRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; textStructure: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; transform: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; updateByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryResponse",
              ">, [params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; updateByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryRethrottleResponse",
              ">, [params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; watcher: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; xpack: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; } & ",
              "ElasticsearchClient"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ScopedClusterClientMock.asCurrentUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asCurrentUser",
            "description": [],
            "signature": [
              "{ create: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "CreateRequest",
              "<unknown> | ",
              "CreateRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; update: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateResponse",
              "<unknown>>, [params: ",
              "UpdateRequest",
              "<unknown, unknown> | ",
              "UpdateRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; get: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetResponse",
              "<unknown>>, [params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; delete: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; helpers: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; search: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchResponse",
              "<unknown, unknown>>, [params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; child: ",
              "ClientApiMockInstance",
              "<",
              "default",
              ", [opts: ",
              "ClientOptions",
              "]>; asyncSearch: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; autoscaling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; bulk: ",
              "ClientApiMockInstance",
              "<Promise<",
              "BulkResponse",
              ">, [params: ",
              "BulkRequest",
              "<unknown, unknown> | ",
              "BulkRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; capabilities: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TODO",
              ">, [params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; cat: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ccr: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; clearScroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClearScrollResponse",
              ">, [params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; closePointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClosePointInTimeResponse",
              ">, [params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; cluster: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; connector: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; count: ",
              "ClientApiMockInstance",
              "<Promise<",
              "CountResponse",
              ">, [params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; danglingIndices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; deleteByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "DeleteByQueryResponse",
              ">, [params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TasksTaskListResponseBase",
              ">, [params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; enrich: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; eql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; esql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; exists: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; existsSource: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; explain: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ExplainResponse",
              "<unknown>>, [params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; features: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; fieldCaps: ",
              "ClientApiMockInstance",
              "<Promise<",
              "FieldCapsResponse",
              ">, [params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; fleet: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; getScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptResponse",
              ">, [params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptContext: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptContextResponse",
              ">, [params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptLanguages: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptLanguagesResponse",
              ">, [params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getSource: ",
              "ClientApiMockInstance",
              "<Promise<unknown>, [params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; graph: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; healthReport: ",
              "ClientApiMockInstance",
              "<Promise<",
              "HealthReportResponse",
              ">, [params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ilm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; index: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "IndexRequest",
              "<unknown> | ",
              "IndexRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; indices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; inference: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; info: ",
              "ClientApiMockInstance",
              "<Promise<",
              "InfoResponse",
              ">, [params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ingest: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; knnSearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "KnnSearchResponse",
              "<unknown>>, [params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; license: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; logstash: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; mget: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MgetResponse",
              "<unknown>>, [params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; migration: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ml: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; monitoring: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; msearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; msearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchTemplateResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; mtermvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MtermvectorsResponse",
              ">, [params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; nodes: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; openPointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "OpenPointInTimeResponse",
              ">, [params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; ping: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; profiling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; putScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; queryRules: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; rankEval: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RankEvalResponse",
              ">, [params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindex: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexResponse",
              ">, [params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindexRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexRethrottleResponse",
              ">, [params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; renderSearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RenderSearchTemplateResponse",
              ">, [params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; rollup: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; scriptsPainlessExecute: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScriptsPainlessExecuteResponse",
              "<unknown>>, [params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; scroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScrollResponse",
              "<unknown, unknown>>, [params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchApplication: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; searchMvt: ",
              "ClientApiMockInstance",
              "<Promise<ArrayBuffer>, [params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchShards: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchShardsResponse",
              ">, [params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchTemplateResponse",
              "<unknown>>, [params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchableSnapshots: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; security: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; shutdown: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; simulate: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; slm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; snapshot: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; sql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ssl: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; synonyms: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; tasks: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; termsEnum: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermsEnumResponse",
              ">, [params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; termvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermvectorsResponse",
              ">, [params: ",
              "TermvectorsRequest",
              "<unknown> | ",
              "TermvectorsRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; textStructure: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; transform: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; updateByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryResponse",
              ">, [params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; updateByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryRethrottleResponse",
              ">, [params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; watcher: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; xpack: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; } & ",
              "ElasticsearchClient"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.ScopedClusterClientMock.asSecondaryAuthUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asSecondaryAuthUser",
            "description": [],
            "signature": [
              "{ create: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "CreateRequest",
              "<unknown> | ",
              "CreateRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; update: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateResponse",
              "<unknown>>, [params: ",
              "UpdateRequest",
              "<unknown, unknown> | ",
              "UpdateRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; get: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetResponse",
              "<unknown>>, [params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; delete: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; helpers: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; search: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchResponse",
              "<unknown, unknown>>, [params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; child: ",
              "ClientApiMockInstance",
              "<",
              "default",
              ", [opts: ",
              "ClientOptions",
              "]>; asyncSearch: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; autoscaling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; bulk: ",
              "ClientApiMockInstance",
              "<Promise<",
              "BulkResponse",
              ">, [params: ",
              "BulkRequest",
              "<unknown, unknown> | ",
              "BulkRequest",
              "<unknown, unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; capabilities: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TODO",
              ">, [params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; cat: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ccr: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; clearScroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClearScrollResponse",
              ">, [params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; closePointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ClosePointInTimeResponse",
              ">, [params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; cluster: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; connector: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; count: ",
              "ClientApiMockInstance",
              "<Promise<",
              "CountResponse",
              ">, [params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; danglingIndices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; deleteByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "DeleteByQueryResponse",
              ">, [params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TasksTaskListResponseBase",
              ">, [params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; deleteScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; enrich: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; eql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; esql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; exists: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; existsSource: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; explain: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ExplainResponse",
              "<unknown>>, [params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; features: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; fieldCaps: ",
              "ClientApiMockInstance",
              "<Promise<",
              "FieldCapsResponse",
              ">, [params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; fleet: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; getScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptResponse",
              ">, [params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptContext: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptContextResponse",
              ">, [params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getScriptLanguages: ",
              "ClientApiMockInstance",
              "<Promise<",
              "GetScriptLanguagesResponse",
              ">, [params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; getSource: ",
              "ClientApiMockInstance",
              "<Promise<unknown>, [params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; graph: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; healthReport: ",
              "ClientApiMockInstance",
              "<Promise<",
              "HealthReportResponse",
              ">, [params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ilm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; index: ",
              "ClientApiMockInstance",
              "<Promise<",
              "WriteResponseBase",
              ">, [params: ",
              "IndexRequest",
              "<unknown> | ",
              "IndexRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; indices: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; inference: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; info: ",
              "ClientApiMockInstance",
              "<Promise<",
              "InfoResponse",
              ">, [params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; ingest: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; knnSearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "KnnSearchResponse",
              "<unknown>>, [params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; license: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; logstash: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; mget: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MgetResponse",
              "<unknown>>, [params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; migration: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ml: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; monitoring: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; msearch: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; msearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MsearchTemplateResponse",
              "<unknown, unknown>>, [params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; mtermvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "MtermvectorsResponse",
              ">, [params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; nodes: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; openPointInTime: ",
              "ClientApiMockInstance",
              "<Promise<",
              "OpenPointInTimeResponse",
              ">, [params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; ping: ",
              "ClientApiMockInstance",
              "<Promise<boolean>, [params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; profiling: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; putScript: ",
              "ClientApiMockInstance",
              "<Promise<",
              "AcknowledgedResponseBase",
              ">, [params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; queryRules: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; rankEval: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RankEvalResponse",
              ">, [params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindex: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexResponse",
              ">, [params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; reindexRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ReindexRethrottleResponse",
              ">, [params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; renderSearchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "RenderSearchTemplateResponse",
              ">, [params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; rollup: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; scriptsPainlessExecute: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScriptsPainlessExecuteResponse",
              "<unknown>>, [params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; scroll: ",
              "ClientApiMockInstance",
              "<Promise<",
              "ScrollResponse",
              "<unknown, unknown>>, [params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchApplication: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; searchMvt: ",
              "ClientApiMockInstance",
              "<Promise<ArrayBuffer>, [params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchShards: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchShardsResponse",
              ">, [params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchTemplate: ",
              "ClientApiMockInstance",
              "<Promise<",
              "SearchTemplateResponse",
              "<unknown>>, [params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined]>; searchableSnapshots: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; security: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; shutdown: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; simulate: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; slm: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; snapshot: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; sql: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; ssl: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; synonyms: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; tasks: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; termsEnum: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermsEnumResponse",
              ">, [params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; termvectors: ",
              "ClientApiMockInstance",
              "<Promise<",
              "TermvectorsResponse",
              ">, [params: ",
              "TermvectorsRequest",
              "<unknown> | ",
              "TermvectorsRequest",
              "<unknown>, options?: ",
              "TransportRequestOptions",
              " | undefined]>; textStructure: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; transform: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; updateByQuery: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryResponse",
              ">, [params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; updateByQueryRethrottle: ",
              "ClientApiMockInstance",
              "<Promise<",
              "UpdateByQueryRethrottleResponse",
              ">, [params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined]>; watcher: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; xpack: ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">; } & ",
              "ElasticsearchClient"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.CustomClusterClientMock",
        "type": "Type",
        "tags": [],
        "label": "CustomClusterClientMock",
        "description": [],
        "signature": [
          "{ close: jest.MockInstance<Promise<void>, [], unknown>; readonly asInternalUser: ",
          "ElasticsearchClient",
          "; asScoped: jest.MockInstance<",
          "IScopedClusterClient",
          ", [request: ",
          "ScopeableRequest",
          "], unknown>; } & ",
          "ICustomClusterClient",
          " & ",
          "ClusterClientMock"
        ],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.DeeplyMockedApi",
        "type": "Type",
        "tags": [],
        "label": "DeeplyMockedApi",
        "description": [],
        "signature": [
          "{ [P in keyof T]: T[P] extends (...args: any[]) => any ? ",
          "ClientApiMockInstance",
          "<ReturnType<T[P]>, Parameters<T[P]>> : ",
          "DeeplyMockedApi",
          "<T[P]>; } & T"
        ],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.ElasticsearchClientMock",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchClientMock",
        "description": [],
        "signature": [
          "{ create: ",
          "ClientApiMockInstance",
          "<Promise<",
          "WriteResponseBase",
          ">, [params: ",
          "CreateRequest",
          "<unknown> | ",
          "CreateRequest",
          "<unknown>, options?: ",
          "TransportRequestOptions",
          " | undefined]>; update: ",
          "ClientApiMockInstance",
          "<Promise<",
          "UpdateResponse",
          "<unknown>>, [params: ",
          "UpdateRequest",
          "<unknown, unknown> | ",
          "UpdateRequest",
          "<unknown, unknown>, options?: ",
          "TransportRequestOptions",
          " | undefined]>; get: ",
          "ClientApiMockInstance",
          "<Promise<",
          "GetResponse",
          "<unknown>>, [params: ",
          "GetRequest",
          " | ",
          "GetRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; delete: ",
          "ClientApiMockInstance",
          "<Promise<",
          "WriteResponseBase",
          ">, [params: ",
          "DeleteRequest",
          " | ",
          "DeleteRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; helpers: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; search: ",
          "ClientApiMockInstance",
          "<Promise<",
          "SearchResponse",
          "<unknown, unknown>>, [params?: ",
          "SearchRequest",
          " | ",
          "SearchRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; child: ",
          "ClientApiMockInstance",
          "<",
          "default",
          ", [opts: ",
          "ClientOptions",
          "]>; asyncSearch: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; autoscaling: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; bulk: ",
          "ClientApiMockInstance",
          "<Promise<",
          "BulkResponse",
          ">, [params: ",
          "BulkRequest",
          "<unknown, unknown> | ",
          "BulkRequest",
          "<unknown, unknown>, options?: ",
          "TransportRequestOptions",
          " | undefined]>; capabilities: ",
          "ClientApiMockInstance",
          "<Promise<",
          "TODO",
          ">, [params?: ",
          "TODO",
          " | ",
          "TODO",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; cat: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; ccr: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; clearScroll: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ClearScrollResponse",
          ">, [params?: ",
          "ClearScrollRequest",
          " | ",
          "ClearScrollRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; closePointInTime: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ClosePointInTimeResponse",
          ">, [params: ",
          "ClosePointInTimeRequest",
          " | ",
          "ClosePointInTimeRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; cluster: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; connector: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; count: ",
          "ClientApiMockInstance",
          "<Promise<",
          "CountResponse",
          ">, [params?: ",
          "CountRequest",
          " | ",
          "CountRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; danglingIndices: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; deleteByQuery: ",
          "ClientApiMockInstance",
          "<Promise<",
          "DeleteByQueryResponse",
          ">, [params: ",
          "DeleteByQueryRequest",
          " | ",
          "DeleteByQueryRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; deleteByQueryRethrottle: ",
          "ClientApiMockInstance",
          "<Promise<",
          "TasksTaskListResponseBase",
          ">, [params: ",
          "DeleteByQueryRethrottleRequest",
          " | ",
          "DeleteByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; deleteScript: ",
          "ClientApiMockInstance",
          "<Promise<",
          "AcknowledgedResponseBase",
          ">, [params: ",
          "DeleteScriptRequest",
          " | ",
          "DeleteScriptRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; enrich: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; eql: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; esql: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; exists: ",
          "ClientApiMockInstance",
          "<Promise<boolean>, [params: ",
          "ExistsRequest",
          " | ",
          "ExistsRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; existsSource: ",
          "ClientApiMockInstance",
          "<Promise<boolean>, [params: ",
          "ExistsSourceRequest",
          " | ",
          "ExistsSourceRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; explain: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ExplainResponse",
          "<unknown>>, [params: ",
          "ExplainRequest",
          " | ",
          "ExplainRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; features: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; fieldCaps: ",
          "ClientApiMockInstance",
          "<Promise<",
          "FieldCapsResponse",
          ">, [params?: ",
          "FieldCapsRequest",
          " | ",
          "FieldCapsRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; fleet: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; getScript: ",
          "ClientApiMockInstance",
          "<Promise<",
          "GetScriptResponse",
          ">, [params: ",
          "GetScriptRequest",
          " | ",
          "GetScriptRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; getScriptContext: ",
          "ClientApiMockInstance",
          "<Promise<",
          "GetScriptContextResponse",
          ">, [params?: ",
          "GetScriptContextRequest",
          " | ",
          "GetScriptContextRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; getScriptLanguages: ",
          "ClientApiMockInstance",
          "<Promise<",
          "GetScriptLanguagesResponse",
          ">, [params?: ",
          "GetScriptLanguagesRequest",
          " | ",
          "GetScriptLanguagesRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; getSource: ",
          "ClientApiMockInstance",
          "<Promise<unknown>, [params: ",
          "GetSourceRequest",
          " | ",
          "GetSourceRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; graph: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; healthReport: ",
          "ClientApiMockInstance",
          "<Promise<",
          "HealthReportResponse",
          ">, [params?: ",
          "HealthReportRequest",
          " | ",
          "HealthReportRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; ilm: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; index: ",
          "ClientApiMockInstance",
          "<Promise<",
          "WriteResponseBase",
          ">, [params: ",
          "IndexRequest",
          "<unknown> | ",
          "IndexRequest",
          "<unknown>, options?: ",
          "TransportRequestOptions",
          " | undefined]>; indices: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; inference: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; info: ",
          "ClientApiMockInstance",
          "<Promise<",
          "InfoResponse",
          ">, [params?: ",
          "InfoRequest",
          " | ",
          "InfoRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; ingest: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; knnSearch: ",
          "ClientApiMockInstance",
          "<Promise<",
          "KnnSearchResponse",
          "<unknown>>, [params: ",
          "KnnSearchRequest",
          " | ",
          "KnnSearchRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; license: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; logstash: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; mget: ",
          "ClientApiMockInstance",
          "<Promise<",
          "MgetResponse",
          "<unknown>>, [params?: ",
          "MgetRequest",
          " | ",
          "MgetRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; migration: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; ml: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; monitoring: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; msearch: ",
          "ClientApiMockInstance",
          "<Promise<",
          "MsearchResponse",
          "<unknown, unknown>>, [params: ",
          "MsearchRequest",
          " | ",
          "MsearchRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; msearchTemplate: ",
          "ClientApiMockInstance",
          "<Promise<",
          "MsearchTemplateResponse",
          "<unknown, unknown>>, [params: ",
          "MsearchTemplateRequest",
          " | ",
          "MsearchTemplateRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; mtermvectors: ",
          "ClientApiMockInstance",
          "<Promise<",
          "MtermvectorsResponse",
          ">, [params?: ",
          "MtermvectorsRequest",
          " | ",
          "MtermvectorsRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; nodes: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; openPointInTime: ",
          "ClientApiMockInstance",
          "<Promise<",
          "OpenPointInTimeResponse",
          ">, [params: ",
          "OpenPointInTimeRequest",
          " | ",
          "OpenPointInTimeRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; ping: ",
          "ClientApiMockInstance",
          "<Promise<boolean>, [params?: ",
          "PingRequest",
          " | ",
          "PingRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; profiling: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; putScript: ",
          "ClientApiMockInstance",
          "<Promise<",
          "AcknowledgedResponseBase",
          ">, [params: ",
          "PutScriptRequest",
          " | ",
          "PutScriptRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; queryRules: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; rankEval: ",
          "ClientApiMockInstance",
          "<Promise<",
          "RankEvalResponse",
          ">, [params: ",
          "RankEvalRequest",
          " | ",
          "RankEvalRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; reindex: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ReindexResponse",
          ">, [params: ",
          "ReindexRequest",
          " | ",
          "ReindexRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; reindexRethrottle: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ReindexRethrottleResponse",
          ">, [params: ",
          "ReindexRethrottleRequest",
          " | ",
          "ReindexRethrottleRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; renderSearchTemplate: ",
          "ClientApiMockInstance",
          "<Promise<",
          "RenderSearchTemplateResponse",
          ">, [params?: ",
          "RenderSearchTemplateRequest",
          " | ",
          "RenderSearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; rollup: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; scriptsPainlessExecute: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ScriptsPainlessExecuteResponse",
          "<unknown>>, [params?: ",
          "ScriptsPainlessExecuteRequest",
          " | ",
          "ScriptsPainlessExecuteRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; scroll: ",
          "ClientApiMockInstance",
          "<Promise<",
          "ScrollResponse",
          "<unknown, unknown>>, [params: ",
          "ScrollRequest",
          " | ",
          "ScrollRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; searchApplication: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; searchMvt: ",
          "ClientApiMockInstance",
          "<Promise<ArrayBuffer>, [params: ",
          "SearchMvtRequest",
          " | ",
          "SearchMvtRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; searchShards: ",
          "ClientApiMockInstance",
          "<Promise<",
          "SearchShardsResponse",
          ">, [params?: ",
          "SearchShardsRequest",
          " | ",
          "SearchShardsRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; searchTemplate: ",
          "ClientApiMockInstance",
          "<Promise<",
          "SearchTemplateResponse",
          "<unknown>>, [params?: ",
          "SearchTemplateRequest",
          " | ",
          "SearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined]>; searchableSnapshots: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; security: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; shutdown: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; simulate: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; slm: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; snapshot: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; sql: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; ssl: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; synonyms: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; tasks: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; termsEnum: ",
          "ClientApiMockInstance",
          "<Promise<",
          "TermsEnumResponse",
          ">, [params: ",
          "TermsEnumRequest",
          " | ",
          "TermsEnumRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; termvectors: ",
          "ClientApiMockInstance",
          "<Promise<",
          "TermvectorsResponse",
          ">, [params: ",
          "TermvectorsRequest",
          "<unknown> | ",
          "TermvectorsRequest",
          "<unknown>, options?: ",
          "TransportRequestOptions",
          " | undefined]>; textStructure: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; transform: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; updateByQuery: ",
          "ClientApiMockInstance",
          "<Promise<",
          "UpdateByQueryResponse",
          ">, [params: ",
          "UpdateByQueryRequest",
          " | ",
          "UpdateByQueryRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; updateByQueryRethrottle: ",
          "ClientApiMockInstance",
          "<Promise<",
          "UpdateByQueryRethrottleResponse",
          ">, [params: ",
          "UpdateByQueryRethrottleRequest",
          " | ",
          "UpdateByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined]>; watcher: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; xpack: ",
          "DeeplyMockedApi",
          "<",
          "default",
          ">; } & ",
          "ElasticsearchClient"
        ],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
        "id": "def-server.elasticsearchClientMock",
        "type": "Object",
        "tags": [],
        "label": "elasticsearchClientMock",
        "description": [],
        "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createClusterClient",
            "type": "Function",
            "tags": [],
            "label": "createClusterClient",
            "description": [],
            "signature": [
              "() => ",
              "ClusterClientMock"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createCustomClusterClient",
            "type": "Function",
            "tags": [],
            "label": "createCustomClusterClient",
            "description": [],
            "signature": [
              "() => ",
              "CustomClusterClientMock"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createScopedClusterClient",
            "type": "Function",
            "tags": [],
            "label": "createScopedClusterClient",
            "description": [],
            "signature": [
              "() => ",
              "ScopedClusterClientMock"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createElasticsearchClient",
            "type": "Function",
            "tags": [],
            "label": "createElasticsearchClient",
            "description": [],
            "signature": [
              "(res?: Promise<unknown> | undefined) => ",
              "ElasticsearchClientMock"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createElasticsearchClient.$1",
                "type": "Object",
                "tags": [],
                "label": "res",
                "description": [],
                "signature": [
                  "Promise<unknown> | undefined"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createInternalClient",
            "type": "Function",
            "tags": [],
            "label": "createInternalClient",
            "description": [],
            "signature": [
              "(res?: Promise<unknown> | undefined) => ",
              "DeeplyMockedApi",
              "<",
              "default",
              ">"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createInternalClient.$1",
                "type": "Object",
                "tags": [],
                "label": "res",
                "description": [],
                "signature": [
                  "Promise<unknown> | undefined"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createSuccessTransportRequestPromise",
            "type": "Function",
            "tags": [],
            "label": "createSuccessTransportRequestPromise",
            "description": [],
            "signature": [
              "<T>(body: T, { statusCode }?: { statusCode?: number | undefined; }, headers?: Record<string, string | string[]>) => Promise<",
              "TransportResult",
              "<T, unknown> & T>"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createSuccessTransportRequestPromise.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "body",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createSuccessTransportRequestPromise.$2",
                "type": "Object",
                "tags": [],
                "label": "__1",
                "description": [],
                "signature": [
                  "{ statusCode?: number | undefined; }"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createSuccessTransportRequestPromise.$3",
                "type": "Object",
                "tags": [],
                "label": "headers",
                "description": [],
                "signature": [
                  "{ [x: string]: string | string[]; }"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createErrorTransportRequestPromise",
            "type": "Function",
            "tags": [],
            "label": "createErrorTransportRequestPromise",
            "description": [],
            "signature": [
              "(err: any) => Promise<never>"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createErrorTransportRequestPromise.$1",
                "type": "Any",
                "tags": [],
                "label": "err",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
            "id": "def-server.elasticsearchClientMock.createApiResponse",
            "type": "Function",
            "tags": [],
            "label": "createApiResponse",
            "description": [],
            "signature": [
              "<TResponse = Record<string, any>>(opts?: Partial<",
              "TransportResult",
              "<TResponse, unknown>>) => ",
              "TransportResult",
              "<TResponse, unknown>"
            ],
            "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-client-server-mocks",
                "id": "def-server.elasticsearchClientMock.createApiResponse.$1",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [],
                "signature": [
                  "{ body?: TResponse | undefined; statusCode?: number | undefined; headers?: ",
                  "IncomingHttpHeaders",
                  " | undefined; warnings?: string[] | null | undefined; meta?: { context: unknown; name: string | symbol; request: { params: ",
                  "ConnectionRequestParams",
                  "; options: ",
                  "TransportRequestOptions",
                  "; id: any; }; connection: ",
                  "Connection",
                  " | null; attempts: number; aborted: boolean; sniff?: { hosts: any[]; reason: string; } | undefined; } | undefined; }"
                ],
                "path": "src/core/packages/elasticsearch/client-server-mocks/src/mocks.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}