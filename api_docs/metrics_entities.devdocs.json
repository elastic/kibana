{
  "id": "metricsEntities",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "metricsEntities",
      "id": "def-server.MetricsEntitiesPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "MetricsEntitiesPluginSetup",
      "description": [],
      "path": "x-pack/plugins/metrics_entities/server/types.ts",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "metricsEntities",
          "id": "def-server.MetricsEntitiesPluginSetup.getMetricsEntitiesClient",
          "type": "Function",
          "tags": [],
          "label": "getMetricsEntitiesClient",
          "description": [],
          "signature": [
            "(esClient: ",
            {
              "pluginId": "core",
              "scope": "server",
              "docId": "kibCorePluginApi",
              "section": "def-server.ElasticsearchClient",
              "text": "ElasticsearchClient"
            },
            ") => ",
            "MetricsEntitiesClient"
          ],
          "path": "x-pack/plugins/metrics_entities/server/types.ts",
          "deprecated": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "metricsEntities",
              "id": "def-server.MetricsEntitiesPluginSetup.getMetricsEntitiesClient.$1",
              "type": "Object",
              "tags": [],
              "label": "esClient",
              "description": [],
              "signature": [
                "{ eql: ",
                "default",
                "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params?: ",
                "SearchRequest",
                " | ",
                "SearchRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "SearchResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params?: ",
                "SearchRequest",
                " | ",
                "SearchRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "SearchResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params?: ",
                "SearchRequest",
                " | ",
                "SearchRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "SearchResponse",
                "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
                "CreateRequest",
                "<TDocument> | ",
                "CreateRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "CreateResponse",
                ">; <TDocument = unknown>(this: That, params: ",
                "CreateRequest",
                "<TDocument> | ",
                "CreateRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "CreateResponse",
                ", unknown>>; <TDocument = unknown>(this: That, params: ",
                "CreateRequest",
                "<TDocument> | ",
                "CreateRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "CreateResponse",
                ">; }; monitoring: ",
                "default",
                "; security: ",
                "default",
                "; name: string | symbol; index: { <TDocument = unknown>(this: That, params: ",
                "IndexRequest",
                "<TDocument> | ",
                "IndexRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "IndexResponse",
                ">; <TDocument = unknown>(this: That, params: ",
                "IndexRequest",
                "<TDocument> | ",
                "IndexRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "IndexResponse",
                ", unknown>>; <TDocument = unknown>(this: That, params: ",
                "IndexRequest",
                "<TDocument> | ",
                "IndexRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "IndexResponse",
                ">; }; delete: { (this: That, params: ",
                "DeleteRequest",
                " | ",
                "DeleteRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "DeleteResponse",
                ">; (this: That, params: ",
                "DeleteRequest",
                " | ",
                "DeleteRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "DeleteResponse",
                ", unknown>>; (this: That, params: ",
                "DeleteRequest",
                " | ",
                "DeleteRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "DeleteResponse",
                ">; }; get: { <TDocument = unknown>(this: That, params: ",
                "GetRequest",
                " | ",
                "GetRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                "GetRequest",
                " | ",
                "GetRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                "GetRequest",
                " | ",
                "GetRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetResponse",
                "<TDocument>>; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                "UpdateRequest",
                "<TDocument, TPartialDocument> | ",
                "UpdateRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "UpdateResponse",
                "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                "UpdateRequest",
                "<TDocument, TPartialDocument> | ",
                "UpdateRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "UpdateResponse",
                "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                "UpdateRequest",
                "<TDocument, TPartialDocument> | ",
                "UpdateRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "UpdateResponse",
                "<TDocumentR>>; }; closePointInTime: { (this: That, params: ",
                "ClosePointInTimeRequest",
                " | ",
                "ClosePointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ClosePointInTimeResponse",
                ">; (this: That, params: ",
                "ClosePointInTimeRequest",
                " | ",
                "ClosePointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ClosePointInTimeResponse",
                ", unknown>>; (this: That, params: ",
                "ClosePointInTimeRequest",
                " | ",
                "ClosePointInTimeRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ClosePointInTimeResponse",
                ">; }; transform: ",
                "default",
                "; helpers: ",
                "default",
                "; [kInternal]: symbol | null; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                "default",
                "; Internal: ",
                "default",
                "; asyncSearch: ",
                "default",
                "; autoscaling: ",
                "default",
                "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                "BulkRequest",
                "<TDocument, TPartialDocument> | ",
                "BulkRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "BulkResponse",
                ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                "BulkRequest",
                "<TDocument, TPartialDocument> | ",
                "BulkRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "BulkResponse",
                ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                "BulkRequest",
                "<TDocument, TPartialDocument> | ",
                "BulkRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "BulkResponse",
                ">; }; cat: ",
                "default",
                "; ccr: ",
                "default",
                "; clearScroll: { (this: That, params?: ",
                "ClearScrollRequest",
                " | ",
                "ClearScrollRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ClearScrollResponse",
                ">; (this: That, params?: ",
                "ClearScrollRequest",
                " | ",
                "ClearScrollRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ClearScrollResponse",
                ", unknown>>; (this: That, params?: ",
                "ClearScrollRequest",
                " | ",
                "ClearScrollRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ClearScrollResponse",
                ">; }; cluster: ",
                "default",
                "; count: { (this: That, params?: ",
                "CountRequest",
                " | ",
                "CountRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "CountResponse",
                ">; (this: That, params?: ",
                "CountRequest",
                " | ",
                "CountRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "CountResponse",
                ", unknown>>; (this: That, params?: ",
                "CountRequest",
                " | ",
                "CountRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "CountResponse",
                ">; }; danglingIndices: ",
                "default",
                "; deleteByQuery: { (this: That, params: ",
                "DeleteByQueryRequest",
                " | ",
                "DeleteByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "DeleteByQueryResponse",
                ">; (this: That, params: ",
                "DeleteByQueryRequest",
                " | ",
                "DeleteByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "DeleteByQueryResponse",
                ", unknown>>; (this: That, params: ",
                "DeleteByQueryRequest",
                " | ",
                "DeleteByQueryRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "DeleteByQueryResponse",
                ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                "DeleteByQueryRethrottleRequest",
                " | ",
                "DeleteByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "DeleteByQueryRethrottleResponse",
                ">; (this: That, params: ",
                "DeleteByQueryRethrottleRequest",
                " | ",
                "DeleteByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "DeleteByQueryRethrottleResponse",
                ", unknown>>; (this: That, params: ",
                "DeleteByQueryRethrottleRequest",
                " | ",
                "DeleteByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "DeleteByQueryRethrottleResponse",
                ">; }; deleteScript: { (this: That, params: ",
                "DeleteScriptRequest",
                " | ",
                "DeleteScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "DeleteScriptResponse",
                ">; (this: That, params: ",
                "DeleteScriptRequest",
                " | ",
                "DeleteScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "DeleteScriptResponse",
                ", unknown>>; (this: That, params: ",
                "DeleteScriptRequest",
                " | ",
                "DeleteScriptRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "DeleteScriptResponse",
                ">; }; enrich: ",
                "default",
                "; exists: { (this: That, params: ",
                "ExistsRequest",
                " | ",
                "ExistsRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<boolean>; (this: That, params: ",
                "ExistsRequest",
                " | ",
                "ExistsRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<boolean, unknown>>; (this: That, params: ",
                "ExistsRequest",
                " | ",
                "ExistsRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                "ExistsSourceRequest",
                " | ",
                "ExistsSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<boolean>; (this: That, params: ",
                "ExistsSourceRequest",
                " | ",
                "ExistsSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<boolean, unknown>>; (this: That, params: ",
                "ExistsSourceRequest",
                " | ",
                "ExistsSourceRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                "ExplainRequest",
                " | ",
                "ExplainRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ExplainResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                "ExplainRequest",
                " | ",
                "ExplainRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ExplainResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                "ExplainRequest",
                " | ",
                "ExplainRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ExplainResponse",
                "<TDocument>>; }; features: ",
                "default",
                "; fieldCaps: { (this: That, params?: ",
                "FieldCapsRequest",
                " | ",
                "FieldCapsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "FieldCapsResponse",
                ">; (this: That, params?: ",
                "FieldCapsRequest",
                " | ",
                "FieldCapsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "FieldCapsResponse",
                ", unknown>>; (this: That, params?: ",
                "FieldCapsRequest",
                " | ",
                "FieldCapsRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "FieldCapsResponse",
                ">; }; fleet: ",
                "default",
                "; getScript: { (this: That, params: ",
                "GetScriptRequest",
                " | ",
                "GetScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetScriptResponse",
                ">; (this: That, params: ",
                "GetScriptRequest",
                " | ",
                "GetScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetScriptResponse",
                ", unknown>>; (this: That, params: ",
                "GetScriptRequest",
                " | ",
                "GetScriptRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetScriptResponse",
                ">; }; getScriptContext: { (this: That, params?: ",
                "GetScriptContextRequest",
                " | ",
                "GetScriptContextRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetScriptContextResponse",
                ">; (this: That, params?: ",
                "GetScriptContextRequest",
                " | ",
                "GetScriptContextRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetScriptContextResponse",
                ", unknown>>; (this: That, params?: ",
                "GetScriptContextRequest",
                " | ",
                "GetScriptContextRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetScriptContextResponse",
                ">; }; getScriptLanguages: { (this: That, params?: ",
                "GetScriptLanguagesRequest",
                " | ",
                "GetScriptLanguagesRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetScriptLanguagesResponse",
                ">; (this: That, params?: ",
                "GetScriptLanguagesRequest",
                " | ",
                "GetScriptLanguagesRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetScriptLanguagesResponse",
                ", unknown>>; (this: That, params?: ",
                "GetScriptLanguagesRequest",
                " | ",
                "GetScriptLanguagesRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetScriptLanguagesResponse",
                ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                "GetSourceRequest",
                " | ",
                "GetSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                "GetSourceRequest",
                " | ",
                "GetSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                "GetSourceRequest",
                " | ",
                "GetSourceRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<TDocument>; }; graph: ",
                "default",
                "; ilm: ",
                "default",
                "; indices: ",
                "default",
                "; info: { (this: That, params?: ",
                "InfoRequest",
                " | ",
                "InfoRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "InfoResponse",
                ">; (this: That, params?: ",
                "InfoRequest",
                " | ",
                "InfoRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "InfoResponse",
                ", unknown>>; (this: That, params?: ",
                "InfoRequest",
                " | ",
                "InfoRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "InfoResponse",
                ">; }; ingest: ",
                "default",
                "; knnSearch: { <TDocument = unknown>(this: That, params: ",
                "KnnSearchRequest",
                " | ",
                "KnnSearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "KnnSearchResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                "KnnSearchRequest",
                " | ",
                "KnnSearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "KnnSearchResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                "KnnSearchRequest",
                " | ",
                "KnnSearchRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "KnnSearchResponse",
                "<TDocument>>; }; license: ",
                "default",
                "; logstash: ",
                "default",
                "; mget: { <TDocument = unknown>(this: That, params?: ",
                "MgetRequest",
                " | ",
                "MgetRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MgetResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                "MgetRequest",
                " | ",
                "MgetRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MgetResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                "MgetRequest",
                " | ",
                "MgetRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MgetResponse",
                "<TDocument>>; }; migration: ",
                "default",
                "; ml: ",
                "default",
                "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchRequest",
                " | ",
                "MsearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MsearchResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchRequest",
                " | ",
                "MsearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MsearchResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchRequest",
                " | ",
                "MsearchRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MsearchResponse",
                "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchTemplateRequest",
                " | ",
                "MsearchTemplateRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MsearchTemplateResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchTemplateRequest",
                " | ",
                "MsearchTemplateRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MsearchTemplateResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchTemplateRequest",
                " | ",
                "MsearchTemplateRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MsearchTemplateResponse",
                "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                "MtermvectorsRequest",
                " | ",
                "MtermvectorsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MtermvectorsResponse",
                ">; (this: That, params?: ",
                "MtermvectorsRequest",
                " | ",
                "MtermvectorsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MtermvectorsResponse",
                ", unknown>>; (this: That, params?: ",
                "MtermvectorsRequest",
                " | ",
                "MtermvectorsRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MtermvectorsResponse",
                ">; }; nodes: ",
                "default",
                "; openPointInTime: { (this: That, params: ",
                "OpenPointInTimeRequest",
                " | ",
                "OpenPointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "OpenPointInTimeResponse",
                ">; (this: That, params: ",
                "OpenPointInTimeRequest",
                " | ",
                "OpenPointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "OpenPointInTimeResponse",
                ", unknown>>; (this: That, params: ",
                "OpenPointInTimeRequest",
                " | ",
                "OpenPointInTimeRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "OpenPointInTimeResponse",
                ">; }; ping: { (this: That, params?: ",
                "PingRequest",
                " | ",
                "PingRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<boolean>; (this: That, params?: ",
                "PingRequest",
                " | ",
                "PingRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<boolean, unknown>>; (this: That, params?: ",
                "PingRequest",
                " | ",
                "PingRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
                "PutScriptRequest",
                " | ",
                "PutScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "PutScriptResponse",
                ">; (this: That, params: ",
                "PutScriptRequest",
                " | ",
                "PutScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "PutScriptResponse",
                ", unknown>>; (this: That, params: ",
                "PutScriptRequest",
                " | ",
                "PutScriptRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "PutScriptResponse",
                ">; }; rankEval: { (this: That, params: ",
                "RankEvalRequest",
                " | ",
                "RankEvalRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "RankEvalResponse",
                ">; (this: That, params: ",
                "RankEvalRequest",
                " | ",
                "RankEvalRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "RankEvalResponse",
                ", unknown>>; (this: That, params: ",
                "RankEvalRequest",
                " | ",
                "RankEvalRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "RankEvalResponse",
                ">; }; reindex: { (this: That, params?: ",
                "ReindexRequest",
                " | ",
                "ReindexRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ReindexResponse",
                ">; (this: That, params?: ",
                "ReindexRequest",
                " | ",
                "ReindexRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ReindexResponse",
                ", unknown>>; (this: That, params?: ",
                "ReindexRequest",
                " | ",
                "ReindexRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ReindexResponse",
                ">; }; reindexRethrottle: { (this: That, params: ",
                "ReindexRethrottleRequest",
                " | ",
                "ReindexRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ReindexRethrottleResponse",
                ">; (this: That, params: ",
                "ReindexRethrottleRequest",
                " | ",
                "ReindexRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ReindexRethrottleResponse",
                ", unknown>>; (this: That, params: ",
                "ReindexRethrottleRequest",
                " | ",
                "ReindexRethrottleRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ReindexRethrottleResponse",
                ">; }; renderSearchTemplate: { (this: That, params?: ",
                "RenderSearchTemplateRequest",
                " | ",
                "RenderSearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "RenderSearchTemplateResponse",
                ">; (this: That, params?: ",
                "RenderSearchTemplateRequest",
                " | ",
                "RenderSearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "RenderSearchTemplateResponse",
                ", unknown>>; (this: That, params?: ",
                "RenderSearchTemplateRequest",
                " | ",
                "RenderSearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "RenderSearchTemplateResponse",
                ">; }; rollup: ",
                "default",
                "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                "ScriptsPainlessExecuteRequest",
                " | ",
                "ScriptsPainlessExecuteRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ScriptsPainlessExecuteResponse",
                "<TResult>>; <TResult = unknown>(this: That, params?: ",
                "ScriptsPainlessExecuteRequest",
                " | ",
                "ScriptsPainlessExecuteRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ScriptsPainlessExecuteResponse",
                "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                "ScriptsPainlessExecuteRequest",
                " | ",
                "ScriptsPainlessExecuteRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ScriptsPainlessExecuteResponse",
                "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "ScrollRequest",
                " | ",
                "ScrollRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ScrollResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "ScrollRequest",
                " | ",
                "ScrollRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ScrollResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "ScrollRequest",
                " | ",
                "ScrollRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ScrollResponse",
                "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
                "SearchMvtRequest",
                " | ",
                "SearchMvtRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                "SearchMvtRequest",
                " | ",
                "SearchMvtRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<ArrayBuffer, unknown>>; (this: That, params: ",
                "SearchMvtRequest",
                " | ",
                "SearchMvtRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                "SearchShardsRequest",
                " | ",
                "SearchShardsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "SearchShardsResponse",
                ">; (this: That, params?: ",
                "SearchShardsRequest",
                " | ",
                "SearchShardsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "SearchShardsResponse",
                ", unknown>>; (this: That, params?: ",
                "SearchShardsRequest",
                " | ",
                "SearchShardsRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "SearchShardsResponse",
                ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                "SearchTemplateRequest",
                " | ",
                "SearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "SearchTemplateResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                "SearchTemplateRequest",
                " | ",
                "SearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "SearchTemplateResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                "SearchTemplateRequest",
                " | ",
                "SearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "SearchTemplateResponse",
                "<TDocument>>; }; searchableSnapshots: ",
                "default",
                "; shutdown: ",
                "default",
                "; slm: ",
                "default",
                "; snapshot: ",
                "default",
                "; sql: ",
                "default",
                "; ssl: ",
                "default",
                "; tasks: ",
                "default",
                "; termsEnum: { (this: That, params: ",
                "TermsEnumRequest",
                " | ",
                "TermsEnumRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "TermsEnumResponse",
                ">; (this: That, params: ",
                "TermsEnumRequest",
                " | ",
                "TermsEnumRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "TermsEnumResponse",
                ", unknown>>; (this: That, params: ",
                "TermsEnumRequest",
                " | ",
                "TermsEnumRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "TermsEnumResponse",
                ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                "TermvectorsRequest",
                "<TDocument> | ",
                "TermvectorsRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "TermvectorsResponse",
                ">; <TDocument = unknown>(this: That, params: ",
                "TermvectorsRequest",
                "<TDocument> | ",
                "TermvectorsRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "TermvectorsResponse",
                ", unknown>>; <TDocument = unknown>(this: That, params: ",
                "TermvectorsRequest",
                "<TDocument> | ",
                "TermvectorsRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "TermvectorsResponse",
                ">; }; textStructure: ",
                "default",
                "; updateByQuery: { (this: That, params: ",
                "UpdateByQueryRequest",
                " | ",
                "UpdateByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "UpdateByQueryResponse",
                ">; (this: That, params: ",
                "UpdateByQueryRequest",
                " | ",
                "UpdateByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "UpdateByQueryResponse",
                ", unknown>>; (this: That, params: ",
                "UpdateByQueryRequest",
                " | ",
                "UpdateByQueryRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "UpdateByQueryResponse",
                ">; }; updateByQueryRethrottle: { (this: That, params: ",
                "UpdateByQueryRethrottleRequest",
                " | ",
                "UpdateByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "UpdateByQueryRethrottleResponse",
                ">; (this: That, params: ",
                "UpdateByQueryRethrottleRequest",
                " | ",
                "UpdateByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "UpdateByQueryRethrottleResponse",
                ", unknown>>; (this: That, params: ",
                "UpdateByQueryRethrottleRequest",
                " | ",
                "UpdateByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "UpdateByQueryRethrottleResponse",
                ">; }; watcher: ",
                "default",
                "; xpack: ",
                "default",
                "; }"
              ],
              "path": "x-pack/plugins/metrics_entities/server/types.ts",
              "deprecated": false
            }
          ]
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "metricsEntities",
      "id": "def-server.MetricsEntitiesPluginStart",
      "type": "Type",
      "tags": [],
      "label": "MetricsEntitiesPluginStart",
      "description": [],
      "signature": [
        "void"
      ],
      "path": "x-pack/plugins/metrics_entities/server/types.ts",
      "deprecated": false,
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}