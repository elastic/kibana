{
  "id": "@kbn/core-deprecations-server",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-deprecations-server",
        "id": "def-server.DeprecationRegistryProvider",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationRegistryProvider",
        "description": [
          "\nProvides a method to scope the {@link DeprecationsServiceSetup | Deprecations Service} to a specific domain."
        ],
        "path": "src/core/packages/deprecations/server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.DeprecationRegistryProvider.getRegistry",
            "type": "Function",
            "tags": [],
            "label": "getRegistry",
            "description": [
              "\nReturns the {@link DeprecationsServiceSetup | Deprecations Service} scoped to a specific domain."
            ],
            "signature": [
              "(domainId: string) => ",
              "DeprecationsServiceSetup"
            ],
            "path": "src/core/packages/deprecations/server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-deprecations-server",
                "id": "def-server.DeprecationRegistryProvider.getRegistry.$1",
                "type": "string",
                "tags": [],
                "label": "domainId",
                "description": [
                  "Domain ID to categorize the deprecations reported under it."
                ],
                "signature": [
                  "string"
                ],
                "path": "src/core/packages/deprecations/server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-deprecations-server",
        "id": "def-server.DeprecationsClient",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationsClient",
        "description": [
          "\nServer-side client that provides access to fetch all Kibana deprecations\n"
        ],
        "path": "src/core/packages/deprecations/server/src/request_handler_context.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.DeprecationsClient.getAllDeprecations",
            "type": "Function",
            "tags": [],
            "label": "getAllDeprecations",
            "description": [
              "\nFetch all Kibana deprecations."
            ],
            "signature": [
              "() => Promise<",
              "DomainDeprecationDetails",
              "<",
              "DeprecationsDetails",
              ">[]>"
            ],
            "path": "src/core/packages/deprecations/server/src/request_handler_context.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-deprecations-server",
        "id": "def-server.DeprecationsRequestHandlerContext",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationsRequestHandlerContext",
        "description": [
          "\nCore's `deprecations` request handler context."
        ],
        "path": "src/core/packages/deprecations/server/src/request_handler_context.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.DeprecationsRequestHandlerContext.client",
            "type": "Object",
            "tags": [],
            "label": "client",
            "description": [
              "\n{@link DeprecationsClient | Deprecations client} exposed in the request handler context."
            ],
            "signature": [
              "DeprecationsClient"
            ],
            "path": "src/core/packages/deprecations/server/src/request_handler_context.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-deprecations-server",
        "id": "def-server.DeprecationsServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationsServiceSetup",
        "description": [
          "\nThe deprecations service provides a way for the Kibana platform to communicate deprecated\nfeatures and configs with its users. These deprecations are only communicated\nif the deployment is using these features. Allowing for a user tailored experience\nfor upgrading the stack version.\n\nThe Deprecation service is consumed by the upgrade assistant to assist with the upgrade\nexperience.\n\nIf a deprecated feature can be resolved without manual user intervention.\nUsing correctiveActions.api allows the Upgrade Assistant to use this api to correct the\ndeprecation upon a user trigger.\n"
        ],
        "path": "src/core/packages/deprecations/server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.DeprecationsServiceSetup.registerDeprecations",
            "type": "Function",
            "tags": [],
            "label": "registerDeprecations",
            "description": [
              "\nRegisters deprecation messages or notices for a specific feature or functionality\nwithin the application. This allows developers to flag certain behaviors or APIs\nas deprecated, providing guidance and warnings for future deprecation plans.\n"
            ],
            "signature": [
              "(deprecationContext: ",
              "RegisterDeprecationsConfig",
              ") => void"
            ],
            "path": "src/core/packages/deprecations/server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-deprecations-server",
                "id": "def-server.DeprecationsServiceSetup.registerDeprecations.$1",
                "type": "Object",
                "tags": [],
                "label": "deprecationContext",
                "description": [
                  "- The configuration object containing\ninformation about the deprecated features, including messages, corrective actions,\nand any relevant metadata to inform users or developers about the deprecation."
                ],
                "signature": [
                  "RegisterDeprecationsConfig"
                ],
                "path": "src/core/packages/deprecations/server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-deprecations-server",
        "id": "def-server.GetDeprecationsContext",
        "type": "Interface",
        "tags": [],
        "label": "GetDeprecationsContext",
        "description": [
          "\nScoped clients and helpers to ease fetching the deprecations."
        ],
        "path": "src/core/packages/deprecations/server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.GetDeprecationsContext.esClient",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [
              "Elasticsearch client scoped to the current user"
            ],
            "signature": [
              "IScopedClusterClient"
            ],
            "path": "src/core/packages/deprecations/server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.GetDeprecationsContext.savedObjectsClient",
            "type": "Object",
            "tags": [],
            "label": "savedObjectsClient",
            "description": [
              "Saved Objects client scoped to the current user and space"
            ],
            "signature": [
              "SavedObjectsClientContract"
            ],
            "path": "src/core/packages/deprecations/server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.GetDeprecationsContext.request",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              "KibanaRequest",
              "<unknown, unknown, unknown, any>"
            ],
            "path": "src/core/packages/deprecations/server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-deprecations-server",
        "id": "def-server.RegisterDeprecationsConfig",
        "type": "Interface",
        "tags": [],
        "label": "RegisterDeprecationsConfig",
        "description": [
          "\nOptions to provide when registering deprecations via {@link DeprecationsServiceSetup.registerDeprecations}."
        ],
        "path": "src/core/packages/deprecations/server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-deprecations-server",
            "id": "def-server.RegisterDeprecationsConfig.getDeprecations",
            "type": "Function",
            "tags": [],
            "label": "getDeprecations",
            "description": [
              "\nMethod called when the user wants to list any existing deprecations.\nReturns the list of deprecation messages to warn about."
            ],
            "signature": [
              "(context: ",
              "GetDeprecationsContext",
              ") => ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.MaybePromise",
                "text": "MaybePromise"
              },
              "<",
              "DeprecationsDetails",
              "[]>"
            ],
            "path": "src/core/packages/deprecations/server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-deprecations-server",
                "id": "def-server.RegisterDeprecationsConfig.getDeprecations.$1",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [
                  "Scoped clients and helpers to ease fetching the deprecations."
                ],
                "signature": [
                  "GetDeprecationsContext"
                ],
                "path": "src/core/packages/deprecations/server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}