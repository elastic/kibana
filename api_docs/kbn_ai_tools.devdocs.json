{
  "id": "@kbn/ai-tools",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.describeDataset",
        "type": "Function",
        "tags": [],
        "label": "describeDataset",
        "description": [],
        "signature": [
          "({\n  esClient,\n  start,\n  end,\n  index,\n  kql,\n}: { esClient: ",
          "ElasticsearchClient",
          "; start: number; end: number; index: string | string[]; kql?: string | undefined; }) => Promise<",
          {
            "pluginId": "@kbn/ai-tools",
            "scope": "server",
            "docId": "kibKbnAiToolsPluginApi",
            "section": "def-server.DocumentAnalysis",
            "text": "DocumentAnalysis"
          },
          ">"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.describeDataset.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esClient,\n  start,\n  end,\n  index,\n  kql,\n}",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.describeDataset.$1.esClient",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  "{ create: { <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; }; delete: { (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; helpers: ",
                  "default",
                  "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                  "default",
                  "; child: (opts: ",
                  "ClientOptions",
                  ") => ",
                  "default",
                  "; asyncSearch: ",
                  "default",
                  "; autoscaling: ",
                  "default",
                  "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; }; capabilities: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; cat: ",
                  "default",
                  "; ccr: ",
                  "default",
                  "; clearScroll: { (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", unknown>>; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; }; closePointInTime: { (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; }; cluster: ",
                  "default",
                  "; connector: ",
                  "default",
                  "; count: { (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", unknown>>; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; }; danglingIndices: ",
                  "default",
                  "; deleteByQuery: { (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TasksTaskListResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; }; deleteScript: { (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; enrich: ",
                  "default",
                  "; eql: ",
                  "default",
                  "; esql: ",
                  "default",
                  "; exists: { (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; }; features: ",
                  "default",
                  "; fieldCaps: { (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; }; fleet: ",
                  "default",
                  "; getScript: { (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", unknown>>; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; }; getScriptContext: { (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; }; getScriptLanguages: { (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<TDocument>; }; graph: ",
                  "default",
                  "; healthReport: { (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "HealthReportResponse",
                  ", unknown>>; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; }; ilm: ",
                  "default",
                  "; index: { <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; indices: ",
                  "default",
                  "; inference: ",
                  "default",
                  "; info: { (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", unknown>>; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; }; ingest: ",
                  "default",
                  "; knnSearch: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; license: ",
                  "default",
                  "; logstash: ",
                  "default",
                  "; mget: { <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; }; migration: ",
                  "default",
                  "; ml: ",
                  "default",
                  "; monitoring: ",
                  "default",
                  "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; }; nodes: ",
                  "default",
                  "; openPointInTime: { (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; }; ping: { (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; profiling: ",
                  "default",
                  "; putScript: { (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; queryRules: ",
                  "default",
                  "; rankEval: { (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", unknown>>; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; }; reindex: { (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; }; reindexRethrottle: { (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; }; renderSearchTemplate: { (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", unknown>>; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; }; rollup: ",
                  "default",
                  "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; }; searchApplication: ",
                  "default",
                  "; searchMvt: { (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<ArrayBuffer, unknown>>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; }; searchableSnapshots: ",
                  "default",
                  "; security: ",
                  "default",
                  "; shutdown: ",
                  "default",
                  "; simulate: ",
                  "default",
                  "; slm: ",
                  "default",
                  "; snapshot: ",
                  "default",
                  "; sql: ",
                  "default",
                  "; ssl: ",
                  "default",
                  "; synonyms: ",
                  "default",
                  "; tasks: ",
                  "default",
                  "; termsEnum: { (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", unknown>>; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; }; textStructure: ",
                  "default",
                  "; transform: ",
                  "default",
                  "; updateByQuery: { (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; }; updateByQueryRethrottle: { (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; }; watcher: ",
                  "default",
                  "; xpack: ",
                  "default",
                  "; }"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.describeDataset.$1.start",
                "type": "number",
                "tags": [],
                "label": "start",
                "description": [],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.describeDataset.$1.end",
                "type": "number",
                "tags": [],
                "label": "end",
                "description": [],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.describeDataset.$1.index",
                "type": "CompoundType",
                "tags": [],
                "label": "index",
                "description": [],
                "signature": [
                  "string | string[]"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.describeDataset.$1.kql",
                "type": "string",
                "tags": [],
                "label": "kql",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/index.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.executeAsEsqlAgent",
        "type": "Function",
        "tags": [],
        "label": "executeAsEsqlAgent",
        "description": [],
        "signature": [
          "(options: { inferenceClient: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.BoundInferenceClient",
            "text": "BoundInferenceClient"
          },
          "; esClient: ",
          "ElasticsearchClient",
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; start?: number | undefined; end?: number | undefined; signal: AbortSignal; prompt: string; tools?: TTools | undefined; } & (TTools extends Record<string, ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ToolDefinition",
            "text": "ToolDefinition"
          },
          "> ? { toolCallbacks: ToolCallbacksOfTools<TTools>; } : {})) => Promise<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ChatCompleteResponse",
            "text": "ChatCompleteResponse"
          },
          "<Omit<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.PromptOptions",
            "text": "PromptOptions"
          },
          "<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.Prompt",
            "text": "Prompt"
          },
          "<{ prompt: string; esql_system_prompt: string; }, [{ system: { mustache: { template: string; }; }; template: { mustache: { template: string; }; }; temperature: number; tools: { readonly get_documentation: { readonly description: \"Get documentation about specific ES|QL commands or functions\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly commands: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; readonly functions: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"commands\", \"functions\"]; }; }; readonly validate_queries: { readonly description: \"Validate one or more ES|QL queries for syntax errors and/or mapping issues\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly queries: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"queries\"]; }; }; readonly run_queries: { readonly description: \"Run one or more validated ES|QL queries and retrieve the results\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly queries: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"queries\"]; }; }; readonly list_datasets: { readonly description: \"List datasets (index, data stream, aliases) based on a name or pattern, similar to _resolve/_index\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly name: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"name\"]; }; }; readonly describe_dataset: { readonly description: \"Get dataset description via sampling of documents\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly index: { readonly type: \"string\"; readonly description: \"Index, data stream or index pattern you want to analyze\"; }; readonly kql: { readonly type: \"string\"; readonly description: \"KQL for filtering the data\"; }; }; readonly required: readonly [\"index\"]; }; }; }; }]>> & { tools: TTools; stream: false; }, \"tools\" | \"toolChoice\"> & MergeToolOptions<Pick<{ system: { mustache: { template: string; }; }; template: { mustache: { template: string; }; }; temperature: number; tools: { readonly get_documentation: { readonly description: \"Get documentation about specific ES|QL commands or functions\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly commands: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; readonly functions: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"commands\", \"functions\"]; }; }; readonly validate_queries: { readonly description: \"Validate one or more ES|QL queries for syntax errors and/or mapping issues\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly queries: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"queries\"]; }; }; readonly run_queries: { readonly description: \"Run one or more validated ES|QL queries and retrieve the results\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly queries: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"queries\"]; }; }; readonly list_datasets: { readonly description: \"List datasets (index, data stream, aliases) based on a name or pattern, similar to _resolve/_index\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly name: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"name\"]; }; }; readonly describe_dataset: { readonly description: \"Get dataset description via sampling of documents\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly index: { readonly type: \"string\"; readonly description: \"Index, data stream or index pattern you want to analyze\"; }; readonly kql: { readonly type: \"string\"; readonly description: \"KQL for filtering the data\"; }; }; readonly required: readonly [\"index\"]; }; }; }; }, \"tools\" | \"toolChoice\">, ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.PromptOptions",
            "text": "PromptOptions"
          },
          "<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.Prompt",
            "text": "Prompt"
          },
          "<{ prompt: string; esql_system_prompt: string; }, [{ system: { mustache: { template: string; }; }; template: { mustache: { template: string; }; }; temperature: number; tools: { readonly get_documentation: { readonly description: \"Get documentation about specific ES|QL commands or functions\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly commands: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; readonly functions: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"commands\", \"functions\"]; }; }; readonly validate_queries: { readonly description: \"Validate one or more ES|QL queries for syntax errors and/or mapping issues\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly queries: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"queries\"]; }; }; readonly run_queries: { readonly description: \"Run one or more validated ES|QL queries and retrieve the results\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly queries: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"queries\"]; }; }; readonly list_datasets: { readonly description: \"List datasets (index, data stream, aliases) based on a name or pattern, similar to _resolve/_index\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly name: { readonly type: \"array\"; readonly items: { readonly type: \"string\"; }; }; }; readonly required: readonly [\"name\"]; }; }; readonly describe_dataset: { readonly description: \"Get dataset description via sampling of documents\"; readonly schema: { readonly type: \"object\"; readonly properties: { readonly index: { readonly type: \"string\"; readonly description: \"Index, data stream or index pattern you want to analyze\"; }; readonly kql: { readonly type: \"string\"; readonly description: \"KQL for filtering the data\"; }; }; readonly required: readonly [\"index\"]; }; }; }; }]>> & { tools: TTools; stream: false; }>>>"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.executeAsEsqlAgent.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "{ inferenceClient: ",
              {
                "pluginId": "@kbn/inference-common",
                "scope": "common",
                "docId": "kibKbnInferenceCommonPluginApi",
                "section": "def-common.BoundInferenceClient",
                "text": "BoundInferenceClient"
              },
              "; esClient: ",
              "ElasticsearchClient",
              "; logger: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              },
              "; start?: number | undefined; end?: number | undefined; signal: AbortSignal; prompt: string; tools?: TTools | undefined; } & (TTools extends Record<string, ",
              {
                "pluginId": "@kbn/inference-common",
                "scope": "common",
                "docId": "kibKbnInferenceCommonPluginApi",
                "section": "def-common.ToolDefinition",
                "text": "ToolDefinition"
              },
              "> ? { toolCallbacks: ToolCallbacksOfTools<TTools>; } : {})"
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.executeAsEsqlAgent",
        "type": "Function",
        "tags": [],
        "label": "executeAsEsqlAgent",
        "description": [],
        "signature": [
          "({\n  inferenceClient,\n  esClient,\n  start,\n  end,\n  signal,\n  prompt,\n  tools,\n  toolCallbacks,\n}: { inferenceClient: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.BoundInferenceClient",
            "text": "BoundInferenceClient"
          },
          "; esClient: ",
          "ElasticsearchClient",
          "; start?: number | undefined; end?: number | undefined; signal: AbortSignal; prompt: string; tools?: Record<string, ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ToolDefinition",
            "text": "ToolDefinition"
          },
          "> | undefined; toolCallbacks?: { [x: string]: (toolCall: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ToolCall",
            "text": "ToolCall"
          },
          "<string, {}>) => Promise<unknown>; } | undefined; }) => Promise<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.PromptResponse",
            "text": "PromptResponse"
          },
          "<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.PromptOptions",
            "text": "PromptOptions"
          },
          "<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.Prompt",
            "text": "Prompt"
          },
          "<any, ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.PromptVersion",
            "text": "PromptVersion"
          },
          "<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ToolOptions",
            "text": "ToolOptions"
          },
          "<string>>[]>>>>"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.executeAsEsqlAgent.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  inferenceClient,\n  esClient,\n  start,\n  end,\n  signal,\n  prompt,\n  tools,\n  toolCallbacks,\n}",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.inferenceClient",
                "type": "Object",
                "tags": [],
                "label": "inferenceClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/inference-common",
                    "scope": "common",
                    "docId": "kibKbnInferenceCommonPluginApi",
                    "section": "def-common.BoundInferenceClient",
                    "text": "BoundInferenceClient"
                  }
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.esClient",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  "{ create: { <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; }; delete: { (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; helpers: ",
                  "default",
                  "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                  "default",
                  "; child: (opts: ",
                  "ClientOptions",
                  ") => ",
                  "default",
                  "; asyncSearch: ",
                  "default",
                  "; autoscaling: ",
                  "default",
                  "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; }; capabilities: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; cat: ",
                  "default",
                  "; ccr: ",
                  "default",
                  "; clearScroll: { (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", unknown>>; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; }; closePointInTime: { (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; }; cluster: ",
                  "default",
                  "; connector: ",
                  "default",
                  "; count: { (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", unknown>>; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; }; danglingIndices: ",
                  "default",
                  "; deleteByQuery: { (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TasksTaskListResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; }; deleteScript: { (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; enrich: ",
                  "default",
                  "; eql: ",
                  "default",
                  "; esql: ",
                  "default",
                  "; exists: { (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; }; features: ",
                  "default",
                  "; fieldCaps: { (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; }; fleet: ",
                  "default",
                  "; getScript: { (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", unknown>>; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; }; getScriptContext: { (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; }; getScriptLanguages: { (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<TDocument>; }; graph: ",
                  "default",
                  "; healthReport: { (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "HealthReportResponse",
                  ", unknown>>; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; }; ilm: ",
                  "default",
                  "; index: { <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; indices: ",
                  "default",
                  "; inference: ",
                  "default",
                  "; info: { (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", unknown>>; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; }; ingest: ",
                  "default",
                  "; knnSearch: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; license: ",
                  "default",
                  "; logstash: ",
                  "default",
                  "; mget: { <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; }; migration: ",
                  "default",
                  "; ml: ",
                  "default",
                  "; monitoring: ",
                  "default",
                  "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; }; nodes: ",
                  "default",
                  "; openPointInTime: { (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; }; ping: { (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; profiling: ",
                  "default",
                  "; putScript: { (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; queryRules: ",
                  "default",
                  "; rankEval: { (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", unknown>>; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; }; reindex: { (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; }; reindexRethrottle: { (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; }; renderSearchTemplate: { (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", unknown>>; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; }; rollup: ",
                  "default",
                  "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; }; searchApplication: ",
                  "default",
                  "; searchMvt: { (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<ArrayBuffer, unknown>>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; }; searchableSnapshots: ",
                  "default",
                  "; security: ",
                  "default",
                  "; shutdown: ",
                  "default",
                  "; simulate: ",
                  "default",
                  "; slm: ",
                  "default",
                  "; snapshot: ",
                  "default",
                  "; sql: ",
                  "default",
                  "; ssl: ",
                  "default",
                  "; synonyms: ",
                  "default",
                  "; tasks: ",
                  "default",
                  "; termsEnum: { (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", unknown>>; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; }; textStructure: ",
                  "default",
                  "; transform: ",
                  "default",
                  "; updateByQuery: { (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; }; updateByQueryRethrottle: { (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; }; watcher: ",
                  "default",
                  "; xpack: ",
                  "default",
                  "; }"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.start",
                "type": "number",
                "tags": [],
                "label": "start",
                "description": [],
                "signature": [
                  "number | undefined"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.end",
                "type": "number",
                "tags": [],
                "label": "end",
                "description": [],
                "signature": [
                  "number | undefined"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.signal",
                "type": "Object",
                "tags": [],
                "label": "signal",
                "description": [],
                "signature": [
                  "AbortSignal"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.prompt",
                "type": "string",
                "tags": [],
                "label": "prompt",
                "description": [],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.tools",
                "type": "Object",
                "tags": [],
                "label": "tools",
                "description": [],
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "@kbn/inference-common",
                    "scope": "common",
                    "docId": "kibKbnInferenceCommonPluginApi",
                    "section": "def-common.ToolDefinition",
                    "text": "ToolDefinition"
                  },
                  "> | undefined"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.executeAsEsqlAgent.$1.toolCallbacks",
                "type": "Object",
                "tags": [],
                "label": "toolCallbacks",
                "description": [],
                "signature": [
                  "{ [x: string]: (toolCall: ",
                  {
                    "pluginId": "@kbn/inference-common",
                    "scope": "common",
                    "docId": "kibKbnInferenceCommonPluginApi",
                    "section": "def-common.ToolCall",
                    "text": "ToolCall"
                  },
                  "<string, {}>) => Promise<unknown>; } | undefined"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/esql/index.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.getLogPatterns",
        "type": "Function",
        "tags": [],
        "label": "getLogPatterns",
        "description": [],
        "signature": [
          "(options: LogPatternOptions & { includeChanges?: TChanges | undefined; }) => Promise<",
          "FieldPatternResult",
          "<TChanges>[]>"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/log_patterns/get_log_patterns.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.getLogPatterns.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "LogPatternOptions & { includeChanges?: TChanges | undefined; }"
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/log_patterns/get_log_patterns.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.getLogPatterns",
        "type": "Function",
        "tags": [],
        "label": "getLogPatterns",
        "description": [],
        "signature": [
          "({\n  esClient,\n  start,\n  end,\n  index,\n  kql,\n  includeChanges,\n  metadata = [],\n  fields,\n}: LogPatternOptions & { includeChanges?: boolean | undefined; }) => Promise<",
          "FieldPatternResult",
          "<boolean>[]>"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/log_patterns/get_log_patterns.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.getLogPatterns.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{\n  esClient,\n  start,\n  end,\n  index,\n  kql,\n  includeChanges,\n  metadata = [],\n  fields,\n}",
            "description": [],
            "signature": [
              "LogPatternOptions & { includeChanges?: boolean | undefined; }"
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/log_patterns/get_log_patterns.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.pValueToLabel",
        "type": "Function",
        "tags": [],
        "label": "pValueToLabel",
        "description": [],
        "signature": [
          "(pValue: number) => \"medium\" | \"high\" | \"low\""
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/utils/p_value_to_label.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.pValueToLabel.$1",
            "type": "number",
            "tags": [],
            "label": "pValue",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/utils/p_value_to_label.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.sortAndTruncateAnalyzedFields",
        "type": "Function",
        "tags": [],
        "label": "sortAndTruncateAnalyzedFields",
        "description": [],
        "signature": [
          "(analysis: ",
          {
            "pluginId": "@kbn/ai-tools",
            "scope": "server",
            "docId": "kibKbnAiToolsPluginApi",
            "section": "def-server.DocumentAnalysis",
            "text": "DocumentAnalysis"
          },
          ", options: { dropEmpty?: boolean | undefined; }) => ",
          {
            "pluginId": "@kbn/ai-tools",
            "scope": "server",
            "docId": "kibKbnAiToolsPluginApi",
            "section": "def-server.TruncatedDocumentAnalysis",
            "text": "TruncatedDocumentAnalysis"
          }
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/sort_and_truncate_analyzed_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.sortAndTruncateAnalyzedFields.$1",
            "type": "Object",
            "tags": [],
            "label": "analysis",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/ai-tools",
                "scope": "server",
                "docId": "kibKbnAiToolsPluginApi",
                "section": "def-server.DocumentAnalysis",
                "text": "DocumentAnalysis"
              }
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/sort_and_truncate_analyzed_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.sortAndTruncateAnalyzedFields.$2",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/sort_and_truncate_analyzed_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ai-tools",
                "id": "def-server.sortAndTruncateAnalyzedFields.$2.dropEmpty",
                "type": "CompoundType",
                "tags": [],
                "label": "dropEmpty",
                "description": [],
                "signature": [
                  "boolean | undefined"
                ],
                "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/sort_and_truncate_analyzed_fields.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.DocumentAnalysis",
        "type": "Interface",
        "tags": [],
        "label": "DocumentAnalysis",
        "description": [],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.DocumentAnalysis.total",
            "type": "number",
            "tags": [],
            "label": "total",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.DocumentAnalysis.sampled",
            "type": "number",
            "tags": [],
            "label": "sampled",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.DocumentAnalysis.fields",
            "type": "Array",
            "tags": [],
            "label": "fields",
            "description": [],
            "signature": [
              "{ name: string; types: string[]; cardinality: number | null; values: (string | number | boolean)[]; empty: boolean; }[]"
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.TruncatedDocumentAnalysis",
        "type": "Interface",
        "tags": [],
        "label": "TruncatedDocumentAnalysis",
        "description": [],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.TruncatedDocumentAnalysis.fields",
            "type": "Array",
            "tags": [],
            "label": "fields",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.TruncatedDocumentAnalysis.total",
            "type": "number",
            "tags": [],
            "label": "total",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ai-tools",
            "id": "def-server.TruncatedDocumentAnalysis.sampled",
            "type": "number",
            "tags": [],
            "label": "sampled",
            "description": [],
            "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/describe_dataset/document_analysis.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.FieldPatternResultWithChanges",
        "type": "Type",
        "tags": [],
        "label": "FieldPatternResultWithChanges",
        "description": [],
        "signature": [
          "FieldPatternResultBase & FieldPatternResultChanges"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/tools/log_patterns/get_log_patterns.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.P_VALUE_SIGNIFICANCE_HIGH",
        "type": "number",
        "tags": [],
        "label": "P_VALUE_SIGNIFICANCE_HIGH",
        "description": [],
        "signature": [
          "0.000001"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/utils/p_value_to_label.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-tools",
        "id": "def-server.P_VALUE_SIGNIFICANCE_MEDIUM",
        "type": "number",
        "tags": [],
        "label": "P_VALUE_SIGNIFICANCE_MEDIUM",
        "description": [],
        "signature": [
          "0.001"
        ],
        "path": "x-pack/platform/packages/shared/kbn-ai-tools/src/utils/p_value_to_label.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}