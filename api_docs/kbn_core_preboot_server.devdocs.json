{
  "id": "@kbn/core-preboot-server",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-preboot-server",
        "id": "def-server.PrebootServicePreboot",
        "type": "Interface",
        "tags": [],
        "label": "PrebootServicePreboot",
        "description": [
          "\nKibana Preboot Service allows to control the boot flow of Kibana. Preboot plugins can use it to hold the boot until certain condition is met.\n"
        ],
        "path": "packages/core/preboot/core-preboot-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-preboot-server",
            "id": "def-server.PrebootServicePreboot.isSetupOnHold",
            "type": "Function",
            "tags": [],
            "label": "isSetupOnHold",
            "description": [
              "\nIndicates whether Kibana is currently on hold and cannot proceed to `setup` yet."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "packages/core/preboot/core-preboot-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-preboot-server",
            "id": "def-server.PrebootServicePreboot.holdSetupUntilResolved",
            "type": "Function",
            "tags": [],
            "label": "holdSetupUntilResolved",
            "description": [
              "\nRegisters a `Promise` as a precondition before Kibana can proceed to `setup`. This method can be invoked multiple\ntimes and from multiple `preboot` plugins. Kibana will proceed to `setup` only when all registered `Promises`\ninstances are resolved, or it will shut down if any of them is rejected."
            ],
            "signature": [
              "(reason: string, promise: Promise<{ shouldReloadConfig: boolean; } | undefined>) => void"
            ],
            "path": "packages/core/preboot/core-preboot-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-preboot-server",
                "id": "def-server.PrebootServicePreboot.holdSetupUntilResolved.$1",
                "type": "string",
                "tags": [],
                "label": "reason",
                "description": [
                  "A string that explains the reason why this promise should hold `setup`. It's supposed to be a human\nreadable string that will be recorded in the logs or standard output."
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/preboot/core-preboot-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-preboot-server",
                "id": "def-server.PrebootServicePreboot.holdSetupUntilResolved.$2",
                "type": "Object",
                "tags": [],
                "label": "promise",
                "description": [
                  "A `Promise` that should resolved before Kibana can proceed to `setup`."
                ],
                "signature": [
                  "Promise<{ shouldReloadConfig: boolean; } | undefined>"
                ],
                "path": "packages/core/preboot/core-preboot-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}