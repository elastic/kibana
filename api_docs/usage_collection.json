{
  "id": "usageCollection",
  "client": {
    "classes": [],
    "functions": [
      {
        "id": "def-public.TrackApplicationView",
        "type": "Function",
        "children": [
          {
            "id": "def-public.TrackApplicationView.$1",
            "type": "CompoundType",
            "label": "props",
            "isRequired": true,
            "signature": [
              "React.PropsWithChildren<",
              "TrackApplicationViewProps",
              ">"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/public/components/track_application_view/track_application_view.tsx",
              "lineNumber": 23
            }
          }
        ],
        "signature": [
          "(props: React.PropsWithChildren<",
          "TrackApplicationViewProps",
          ">) => JSX.Element"
        ],
        "description": [
          "\nReact component to track the number of clicks and minutes on screen of the children components."
        ],
        "label": "TrackApplicationView",
        "source": {
          "path": "src/plugins/usage_collection/public/components/track_application_view/track_application_view.tsx",
          "lineNumber": 23
        },
        "tags": [
          "Link",
          "constructor"
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [
      {
        "id": "def-public.METRIC_TYPE",
        "type": "Enum",
        "label": "METRIC_TYPE",
        "tags": [],
        "description": [],
        "source": {
          "path": "node_modules/@kbn/analytics/target/types/metrics/index.d.ts",
          "lineNumber": 10
        },
        "signature": [
          "METRIC_TYPE"
        ],
        "initialIsOpen": false
      }
    ],
    "misc": [],
    "objects": [],
    "setup": {
      "id": "def-public.UsageCollectionSetup",
      "type": "Interface",
      "label": "UsageCollectionSetup",
      "description": [],
      "tags": [],
      "children": [
        {
          "tags": [],
          "id": "def-public.UsageCollectionSetup.components",
          "type": "Object",
          "label": "components",
          "description": [],
          "source": {
            "path": "src/plugins/usage_collection/public/plugin.tsx",
            "lineNumber": 35
          },
          "signature": [
            "{ ApplicationUsageTrackingProvider: React.FC<{}>; }"
          ]
        },
        {
          "tags": [],
          "id": "def-public.UsageCollectionSetup.reportUiCounter",
          "type": "Function",
          "label": "reportUiCounter",
          "description": [],
          "source": {
            "path": "src/plugins/usage_collection/public/plugin.tsx",
            "lineNumber": 38
          },
          "signature": [
            "(appName: string, type: ",
            "UiCounterMetricType",
            ", eventNames: string | string[], count?: number | undefined) => void"
          ]
        }
      ],
      "source": {
        "path": "src/plugins/usage_collection/public/plugin.tsx",
        "lineNumber": 34
      },
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "id": "def-public.UsageCollectionStart",
      "type": "Interface",
      "label": "UsageCollectionStart",
      "description": [],
      "tags": [],
      "children": [
        {
          "tags": [],
          "id": "def-public.UsageCollectionStart.reportUiCounter",
          "type": "Function",
          "label": "reportUiCounter",
          "description": [],
          "source": {
            "path": "src/plugins/usage_collection/public/plugin.tsx",
            "lineNumber": 42
          },
          "signature": [
            "(appName: string, type: ",
            "UiCounterMetricType",
            ", eventNames: string | string[], count?: number | undefined) => void"
          ]
        }
      ],
      "source": {
        "path": "src/plugins/usage_collection/public/plugin.tsx",
        "lineNumber": 41
      },
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "id": "def-server.Collector",
        "type": "Class",
        "tags": [],
        "label": "Collector",
        "description": [],
        "signature": [
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.Collector",
            "text": "Collector"
          },
          "<TFetchReturn, ExtraOptions>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.Collector.extendFetchContext",
            "type": "CompoundType",
            "label": "extendFetchContext",
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 144
            },
            "signature": [
              "CollectorOptionsFetchExtendedContext",
              "<any>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Collector.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 145
            }
          },
          {
            "tags": [],
            "id": "def-server.Collector.init",
            "type": "Object",
            "label": "init",
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 146
            },
            "signature": [
              "Function | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Collector.fetch",
            "type": "Function",
            "label": "fetch",
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 147
            },
            "signature": [
              "CollectorFetchMethod",
              "<any, TFetchReturn, ExtraOptions>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Collector.isReady",
            "type": "Function",
            "label": "isReady",
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 148
            },
            "signature": [
              "() => boolean | Promise<boolean>"
            ]
          },
          {
            "id": "def-server.Collector.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "id": "def-server.Collector.Unnamed.$1",
                "type": "Object",
                "label": "log",
                "isRequired": true,
                "signature": [
                  "Logger"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/usage_collection/server/collector/collector.ts",
                  "lineNumber": 155
                }
              },
              {
                "id": "def-server.Collector.Unnamed.$2",
                "type": "CompoundType",
                "label": "{\n      type,\n      init,\n      fetch,\n      isReady,\n      extendFetchContext = {},\n      ...options\n    }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "usageCollection",
                    "scope": "server",
                    "docId": "kibUsageCollectionPluginApi",
                    "section": "def-server.CollectorOptions",
                    "text": "CollectorOptions"
                  },
                  "<TFetchReturn, any, ExtraOptions>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/usage_collection/server/collector/collector.ts",
                  "lineNumber": 156
                }
              }
            ],
            "tags": [
              "private"
            ],
            "returnComment": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 154
            }
          }
        ],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/collector.ts",
          "lineNumber": 143
        },
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "id": "def-server.SchemaField",
        "type": "Interface",
        "label": "SchemaField",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.SchemaField.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/usage_collection/server/collector/collector.ts",
              "lineNumber": 33
            }
          }
        ],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/collector.ts",
          "lineNumber": 32
        },
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "id": "def-server.AllowedSchemaTypes",
        "type": "Type",
        "label": "AllowedSchemaTypes",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/collector.ts",
          "lineNumber": 27
        },
        "signature": [
          "\"boolean\" | \"date\" | \"text\" | \"keyword\" | \"long\" | \"double\" | \"short\" | \"integer\" | \"byte\" | \"float\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.CollectorFetchContext",
        "type": "Type",
        "label": "CollectorFetchContext",
        "tags": [],
        "description": [
          "\nThe context for the `fetch` method: It includes the most commonly used clients in the collectors (ES and SO clients).\nBoth are scoped based on the request and the context:\n- When users are requesting a sample of data, it is scoped to their role to avoid exposing data they shouldn't read\n- When building the telemetry data payload to report to the remote cluster, the requests are scoped to the `kibana` internal user\n"
        ],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/collector.ts",
          "lineNumber": 64
        },
        "signature": [
          "{ esClient: ElasticsearchClient; soClient: SavedObjectsClientContract; } & (WithKibanaRequest extends true ? { kibanaRequest?: KibanaRequest<unknown, unknown, unknown, any> | undefined; } : {})"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.CollectorOptions",
        "type": "Type",
        "label": "CollectorOptions",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/collector.ts",
          "lineNumber": 111
        },
        "signature": [
          "{ type: string; init?: Function | undefined; isReady: () => Promise<boolean> | boolean; schema?: MakeSchemaFrom<TFetchReturn> | undefined; fetch: CollectorFetchMethod<WithKibanaRequest, TFetchReturn, ExtraOptions>; } & ExtraOptions & (WithKibanaRequest extends true ? { extendFetchContext: CollectorOptionsFetchExtendedContext<WithKibanaRequest>; } : { extendFetchContext?: CollectorOptionsFetchExtendedContext<WithKibanaRequest> | undefined; })"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.MakeSchemaFrom",
        "type": "Type",
        "label": "MakeSchemaFrom",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/collector.ts",
          "lineNumber": 50
        },
        "signature": [
          "{ [Key in keyof Required<Base>]: Required<Base>[Key] extends (infer U)[] ? { type: 'array'; items: RecursiveMakeSchemaFrom<U>; } : RecursiveMakeSchemaFrom<Required<Base>[Key]>; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.UsageCollectionSetup",
        "type": "Type",
        "label": "UsageCollectionSetup",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/usage_collection/server/plugin.ts",
          "lineNumber": 21
        },
        "signature": [
          "{ makeStatsCollector: <TFetchReturn, WithKibanaRequest, ExtraOptions>(options: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.CollectorOptions",
            "text": "CollectorOptions"
          },
          "<TFetchReturn, WithKibanaRequest, ExtraOptions>) => ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.Collector",
            "text": "Collector"
          },
          "<TFetchReturn, ExtraOptions>; makeUsageCollector: <TFetchReturn, WithKibanaRequest, ExtraOptions>(options: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.UsageCollectorOptions",
            "text": "UsageCollectorOptions"
          },
          "<TFetchReturn, WithKibanaRequest, ExtraOptions>) => ",
          "UsageCollector",
          "<TFetchReturn, ExtraOptions>; registerCollector: <TFetchReturn, ExtraOptions>(collector: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.Collector",
            "text": "Collector"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.UsageCollectorOptions",
        "type": "Type",
        "label": "UsageCollectorOptions",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/usage_collection/server/collector/usage_collector.ts",
          "lineNumber": 13
        },
        "signature": [
          "{ type: string; init?: Function | undefined; isReady: () => boolean | Promise<boolean>; schema?: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.MakeSchemaFrom",
            "text": "MakeSchemaFrom"
          },
          "<TFetchReturn> | undefined; fetch: ",
          "CollectorFetchMethod",
          "<WithKibanaRequest, TFetchReturn, ExtraOptions>; } & ExtraOptions & (WithKibanaRequest extends true ? { extendFetchContext: ",
          "CollectorOptionsFetchExtendedContext",
          "<WithKibanaRequest>; } : { extendFetchContext?: ",
          "CollectorOptionsFetchExtendedContext",
          "<WithKibanaRequest> | undefined; }) & Required<Pick<CollectorOptions<TFetchReturn, boolean, {}>, \"schema\">>"
        ],
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}