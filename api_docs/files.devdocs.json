{
  "id": "files",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "files",
        "id": "def-public.FilesClient",
        "type": "Interface",
        "tags": [],
        "label": "FilesClient",
        "description": [
          "\nA client that can be used to manage a specific {@link FileKind}."
        ],
        "signature": [
          "FilesClient",
          "<M> extends ",
          "BaseFilesClient",
          "<M>"
        ],
        "path": "src/plugins/files/common/files_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-public.FilesClient.getMetrics",
            "type": "Function",
            "tags": [],
            "label": "getMetrics",
            "description": [
              "\nGet metrics of file system, like storage usage.\n"
            ],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FilesMetrics",
                "text": "FilesMetrics"
              },
              ">"
            ],
            "path": "src/plugins/files/common/files_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-public.FilesClient.publicDownload",
            "type": "Function",
            "tags": [],
            "label": "publicDownload",
            "description": [
              "\nDownload a file, bypassing regular security by way of a\nsecret share token.\n"
            ],
            "signature": [
              "(args: { token: string; fileName?: string | undefined; }) => any"
            ],
            "path": "src/plugins/files/common/files_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-public.FilesClient.publicDownload.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "path": "src/plugins/files/common/files_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.FilesClient.publicDownload.$1.token",
                    "type": "string",
                    "tags": [],
                    "label": "token",
                    "description": [],
                    "path": "src/plugins/files/common/files_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "files",
                    "id": "def-public.FilesClient.publicDownload.$1.fileName",
                    "type": "string",
                    "tags": [],
                    "label": "fileName",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "src/plugins/files/common/files_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-public.FilesClientFactory",
        "type": "Interface",
        "tags": [],
        "label": "FilesClientFactory",
        "description": [
          "\nA factory for creating a {@link ScopedFilesClient}"
        ],
        "path": "src/plugins/files/common/files_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-public.FilesClientFactory.asUnscoped",
            "type": "Function",
            "tags": [],
            "label": "asUnscoped",
            "description": [
              "\nCreate a files client."
            ],
            "signature": [
              "<M = unknown>() => ",
              "FilesClient",
              "<M>"
            ],
            "path": "src/plugins/files/common/files_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-public.FilesClientFactory.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [
              "\nCreate a {@link ScopedFileClient} for a given {@link FileKind}.\n"
            ],
            "signature": [
              "<M = unknown>(fileKind: string) => ",
              "ScopedFilesClient",
              "<M>"
            ],
            "path": "src/plugins/files/common/files_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-public.FilesClientFactory.asScoped.$1",
                "type": "string",
                "tags": [],
                "label": "fileKind",
                "description": [
                  "- The {@link FileKind } to create a client for."
                ],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/files/common/files_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "files",
        "id": "def-public.FilesClientResponses",
        "type": "Type",
        "tags": [],
        "label": "FilesClientResponses",
        "description": [],
        "signature": [
          "{ getMetrics: ",
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.FilesMetrics",
            "text": "FilesMetrics"
          },
          "; publicDownload: any; find: { files: ",
          "FileJSON",
          "<unknown>[]; total: number; }; bulkDelete: { succeeded: string[]; failed?: [id: string, reason: string][] | undefined; }; create: { file: ",
          "FileJSON",
          "<M>; }; delete: { ok: true; }; getById: { file: ",
          "FileJSON",
          "<M>; }; list: { files: ",
          "FileJSON",
          "<M>[]; total: number; }; update: { file: ",
          "FileJSON",
          "<M>; }; upload: { ok: true; size: number; }; download: any; getDownloadHref: string; share: any; unshare: { ok: true; }; getShare: { share: FileShareJSON; }; listShares: { shares: FileShareJSON[]; }; getFileKind: ",
          "FileKind",
          "; }"
        ],
        "path": "src/plugins/files/common/files_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-public.ScopedFilesClient",
        "type": "Type",
        "tags": [],
        "label": "ScopedFilesClient",
        "description": [
          "\nA files client that is scoped to a specific {@link FileKind}.\n\nMore convenient if you want to re-use the same client for the same file kind\nand not specify the kind every time."
        ],
        "signature": [
          "{ getMetrics: (arg: Omit<undefined, \"kind\">) => Promise<",
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.FilesMetrics",
            "text": "FilesMetrics"
          },
          ">; publicDownload: (arg: Omit<{ token: string; fileName?: string | undefined; }, \"kind\">) => any; find: (arg: Omit<{ kind?: string | string[] | undefined; status?: string | string[] | undefined; extension?: string | string[] | undefined; name?: string | string[] | undefined; meta?: M | undefined; } & ",
          "Pagination",
          " & ",
          "Abortable",
          ", \"kind\">) => Promise<{ files: ",
          "FileJSON",
          "<unknown>[]; total: number; }>; bulkDelete: (arg: Omit<{ ids: string[]; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ succeeded: string[]; failed?: [id: string, reason: string][] | undefined; }>; create: (arg: Omit<{ name: string; meta?: M | undefined; alt?: string | undefined; mimeType?: string | undefined; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ file: ",
          "FileJSON",
          "<M>; }>; delete: (arg: Omit<{ id: string; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ ok: true; }>; getById: (arg: Omit<{ id: string; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ file: ",
          "FileJSON",
          "<M>; }>; list: (arg?: Omit<{ kind: string; status?: string | string[] | undefined; extension?: string | string[] | undefined; name?: string | string[] | undefined; meta?: M | undefined; } & ",
          "Pagination",
          " & ",
          "Abortable",
          ", \"kind\"> | undefined) => Promise<{ files: ",
          "FileJSON",
          "<M>[]; total: number; }>; update: (arg: Omit<{ id: string; kind: string; name?: string | undefined; meta?: M | undefined; alt?: string | undefined; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ file: ",
          "FileJSON",
          "<M>; }>; upload: (arg: Omit<{ id: string; body: unknown; kind: string; abortSignal?: AbortSignal | undefined; contentType?: string | undefined; selfDestructOnAbort?: boolean | undefined; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ ok: true; size: number; }>; download: (arg: Omit<{ fileName?: string | undefined; id: string; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<any>; getDownloadHref: (arg: Omit<Pick<",
          "FileJSON",
          "<unknown>, \"id\" | \"fileKind\">, \"kind\">) => string; share: (arg: Omit<{ name?: string | undefined; validUntil?: number | undefined; fileId: string; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<FileShareJSONWithToken>; unshare: (arg: Omit<{ id: string; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ ok: true; }>; getShare: (arg: Omit<{ id: string; kind: string; } & ",
          "Abortable",
          ", \"kind\">) => Promise<{ share: FileShareJSON; }>; listShares: (arg: Omit<{ forFileId?: string | undefined; kind: string; } & ",
          "Pagination",
          " & ",
          "Abortable",
          ", \"kind\">) => Promise<{ shares: FileShareJSON[]; }>; getFileKind: (arg: Omit<string, \"kind\">) => ",
          "FileKind",
          "; }"
        ],
        "path": "src/plugins/files/common/files_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "files",
        "id": "def-public.defaultImageFileKind",
        "type": "Object",
        "tags": [],
        "label": "defaultImageFileKind",
        "description": [
          "\nA file kind that is available to all plugins to use for uploading images\nintended to be reused across Kibana."
        ],
        "path": "src/plugins/files/common/default_image_file_kind.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-public.defaultImageFileKind.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "\"defaultImage\""
            ],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-public.defaultImageFileKind.maxSizeBytes",
            "type": "number",
            "tags": [],
            "label": "maxSizeBytes",
            "description": [],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-public.defaultImageFileKind.blobStoreSettings",
            "type": "Object",
            "tags": [],
            "label": "blobStoreSettings",
            "description": [],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": []
          },
          {
            "parentPluginId": "files",
            "id": "def-public.defaultImageFileKind.allowedMimeTypes",
            "type": "Array",
            "tags": [],
            "label": "allowedMimeTypes",
            "description": [
              "// tried using \"image/*\" but it did not work with the HTTP endpoint (got 415 Unsupported Media Type)"
            ],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-public.defaultImageFileKind.http",
            "type": "Object",
            "tags": [],
            "label": "http",
            "description": [],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.create",
                "type": "Object",
                "tags": [],
                "label": "create",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.create.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.delete",
                "type": "Object",
                "tags": [],
                "label": "delete",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.delete.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.download",
                "type": "Object",
                "tags": [],
                "label": "download",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.download.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.getById",
                "type": "Object",
                "tags": [],
                "label": "getById",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.getById.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.list",
                "type": "Object",
                "tags": [],
                "label": "list",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.list.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.share",
                "type": "Object",
                "tags": [],
                "label": "share",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.share.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-public.defaultImageFileKind.http.update",
                "type": "Object",
                "tags": [],
                "label": "update",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-public.defaultImageFileKind.http.update.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "files",
      "id": "def-public.FilesSetup",
      "type": "Interface",
      "tags": [],
      "label": "FilesSetup",
      "description": [
        "\nPublic setup-phase contract"
      ],
      "path": "src/plugins/files/public/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "files",
          "id": "def-public.FilesSetup.filesClientFactory",
          "type": "Object",
          "tags": [
            "track-adoption"
          ],
          "label": "filesClientFactory",
          "description": [
            "\nA factory for creating an {@link FilesClient} instance. This requires a\nregistered {@link FileKind}.\n"
          ],
          "signature": [
            "FilesClientFactory"
          ],
          "path": "src/plugins/files/public/plugin.ts",
          "deprecated": false,
          "trackAdoption": true,
          "references": [
            {
              "plugin": "imageEmbeddable",
              "path": "src/plugins/image_embeddable/public/plugin.ts"
            },
            {
              "plugin": "filesManagement",
              "path": "src/plugins/files_management/public/mount_management_section.tsx"
            }
          ]
        },
        {
          "parentPluginId": "files",
          "id": "def-public.FilesSetup.registerFileKind",
          "type": "Function",
          "tags": [],
          "label": "registerFileKind",
          "description": [
            "\nRegister a {@link FileKind} which allows for specifying details about the files\nthat will be uploaded.\n"
          ],
          "signature": [
            "(fileKind: ",
            "FileKind",
            ") => void"
          ],
          "path": "src/plugins/files/public/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "files",
              "id": "def-public.FilesSetup.registerFileKind.$1",
              "type": "Object",
              "tags": [],
              "label": "fileKind",
              "description": [
                "- the file kind to register"
              ],
              "signature": [
                "FileKind"
              ],
              "path": "src/plugins/files/public/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "files",
      "id": "def-public.FilesStart",
      "type": "Type",
      "tags": [],
      "label": "FilesStart",
      "description": [],
      "signature": [
        "{ filesClientFactory: ",
        "FilesClientFactory",
        "; }"
      ],
      "path": "src/plugins/files/public/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "files",
        "id": "def-server.createEsFileClient",
        "type": "Function",
        "tags": [
          "note"
        ],
        "label": "createEsFileClient",
        "description": [
          "\nA utility function for creating an instance of {@link FileClient}\nthat will speak with ES indices only for file functionality.\n"
        ],
        "signature": [
          "(arg: ",
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.CreateEsFileClientArgs",
            "text": "CreateEsFileClientArgs"
          },
          ") => ",
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.FileClient",
            "text": "FileClient"
          }
        ],
        "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.createEsFileClient.$1",
            "type": "Object",
            "tags": [],
            "label": "arg",
            "description": [
              "- See {@link CreateEsFileClientArgs }"
            ],
            "signature": [
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.CreateEsFileClientArgs",
                "text": "CreateEsFileClientArgs"
              }
            ],
            "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "files",
        "id": "def-server.CreateEsFileClientArgs",
        "type": "Interface",
        "tags": [],
        "label": "CreateEsFileClientArgs",
        "description": [
          "\nArguments to create an ES file client."
        ],
        "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.CreateEsFileClientArgs.metadataIndex",
            "type": "string",
            "tags": [],
            "label": "metadataIndex",
            "description": [
              "\nThe name of the ES index that will store file metadata."
            ],
            "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateEsFileClientArgs.blobStorageIndex",
            "type": "string",
            "tags": [],
            "label": "blobStorageIndex",
            "description": [
              "\nThe name of the ES index that will store file contents."
            ],
            "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateEsFileClientArgs.elasticsearchClient",
            "type": "Object",
            "tags": [],
            "label": "elasticsearchClient",
            "description": [
              "\nAn elasticsearch client that will be used to interact with the cluster"
            ],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateEsFileClientArgs.maxSizeBytes",
            "type": "number",
            "tags": [],
            "label": "maxSizeBytes",
            "description": [
              "\nThe maximum file size to be write"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateEsFileClientArgs.logger",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [
              "\nA logger for debuggin purposes"
            ],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "src/plugins/files/server/file_client/create_es_file_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.CreateFileArgs",
        "type": "Interface",
        "tags": [],
        "label": "CreateFileArgs",
        "description": [
          "\nArguments to create a new file."
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.CreateFileArgs",
            "text": "CreateFileArgs"
          },
          "<Meta>"
        ],
        "path": "src/plugins/files/server/file_service/file_action_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.CreateFileArgs.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nFile name"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateFileArgs.fileKind",
            "type": "string",
            "tags": [],
            "label": "fileKind",
            "description": [
              "\nFile kind, must correspond to a registered {@link FileKind}."
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateFileArgs.alt",
            "type": "string",
            "tags": [],
            "label": "alt",
            "description": [
              "\nAlternate text for accessibility and display purposes."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateFileArgs.meta",
            "type": "Uncategorized",
            "tags": [],
            "label": "meta",
            "description": [
              "\nCustom metadata like tags or identifiers for the file."
            ],
            "signature": [
              "Meta | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateFileArgs.mime",
            "type": "string",
            "tags": [],
            "label": "mime",
            "description": [
              "\nThe MIME type of the file."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateFileArgs.user",
            "type": "Object",
            "tags": [],
            "label": "user",
            "description": [
              "\nUser data associated with this file"
            ],
            "signature": [
              "{ name?: string | undefined; id?: string | undefined; } | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.CreateShareArgs",
        "type": "Interface",
        "tags": [],
        "label": "CreateShareArgs",
        "description": [
          "\nArguments for a creating a file share"
        ],
        "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.CreateShareArgs.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nOptionally provide a name for this file share instance"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateShareArgs.validUntil",
            "type": "number",
            "tags": [
              "note"
            ],
            "label": "validUntil",
            "description": [
              "\nOptionally set an expiration date as unix timestamp for this file share instance\n"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.CreateShareArgs.file",
            "type": "Object",
            "tags": [],
            "label": "file",
            "description": [
              "\nThe file object to create the share for"
            ],
            "signature": [
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<unknown>"
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.DeleteArg",
        "type": "Interface",
        "tags": [],
        "label": "DeleteArg",
        "description": [],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.DeleteArg.id",
            "type": "string",
            "tags": [
              "note"
            ],
            "label": "id",
            "description": [
              "\nUnique ID of file metadata to delete\n"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.DeleteFileArgs",
        "type": "Interface",
        "tags": [],
        "label": "DeleteFileArgs",
        "description": [
          "\nArguments to delete a file."
        ],
        "path": "src/plugins/files/server/file_service/file_action_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.DeleteFileArgs.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nFile ID."
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.DeleteForFileArgs",
        "type": "Interface",
        "tags": [],
        "label": "DeleteForFileArgs",
        "description": [
          "\nDelete file shares for file arguments."
        ],
        "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.DeleteForFileArgs.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nThe file id to delete the shares for."
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FileClient",
        "type": "Interface",
        "tags": [],
        "label": "FileClient",
        "description": [
          "\nWraps the {@link FileMetadataClient} and {@link BlobStorageClient} client\nto provide basic file CRUD functionality.\n\nFor now this is just a shallow type of the implementation for export purposes."
        ],
        "path": "src/plugins/files/server/file_client/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.fileKind",
            "type": "string",
            "tags": [],
            "label": "fileKind",
            "description": [
              "See {@link FileMetadata.FileKind}."
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [
              "\nSee {@link FileMetadataClient.create}.\n"
            ],
            "signature": [
              "<M = unknown>(arg: ",
              "CreateArgs",
              "<M>) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<M>>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.create.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Arg to create a file."
                ],
                "signature": [
                  "CreateArgs",
                  "<M>"
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nSee {@link FileMetadataClient.get}\n"
            ],
            "signature": [
              "<M = unknown>(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.GetArg",
                "text": "GetArg"
              },
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<M>>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.get.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Argument to get a file"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.GetArg",
                    "text": "GetArg"
                  }
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [
              "\n{@link FileMetadataClient.update}\n"
            ],
            "signature": [
              "<M = unknown>(id: string, metadata: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.UpdatableFileMetadata",
                "text": "UpdatableFileMetadata"
              },
              "<M>) => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.update.$1",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [
                  "- File id"
                ],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.update.$2",
                "type": "Object",
                "tags": [],
                "label": "metadata",
                "description": [
                  "- new file metadata"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "common",
                    "docId": "kibFilesPluginApi",
                    "section": "def-common.UpdatableFileMetadata",
                    "text": "UpdatableFileMetadata"
                  },
                  "<M>"
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.delete",
            "type": "Function",
            "tags": [],
            "label": "delete",
            "description": [
              "\nDelete a file."
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.DeleteArgs",
                "text": "DeleteArgs"
              },
              ") => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.delete.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Argument to delete a file"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.DeleteArgs",
                    "text": "DeleteArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.find",
            "type": "Function",
            "tags": [],
            "label": "find",
            "description": [
              "\nSee {@link FileMetadataClient.find}.\n"
            ],
            "signature": [
              "(arg?: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FindFileArgs",
                "text": "FindFileArgs"
              },
              " | undefined) => Promise<{ files: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<unknown>[]; total: number; }>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.find.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Argument to find files"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.FindFileArgs",
                    "text": "FindFileArgs"
                  },
                  " | undefined"
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.share",
            "type": "Function",
            "tags": [
              "note"
            ],
            "label": "share",
            "description": [
              "\nCreate a file share instance for this file.\n"
            ],
            "signature": [
              "(args: ",
              "ShareArgs",
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSONWithToken",
                "text": "FileShareJSONWithToken"
              },
              ">"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.share.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- Arguments to create a file share"
                ],
                "signature": [
                  "ShareArgs"
                ],
                "path": "src/plugins/files/server/file_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.unshare",
            "type": "Function",
            "tags": [
              "note"
            ],
            "label": "unshare",
            "description": [
              "\nCreate a file share instance for this file.\n"
            ],
            "signature": [
              "(args: IdArg) => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.unshare.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- Arguments to remove a file share"
                ],
                "signature": [
                  "IdArg"
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileClient.listShares",
            "type": "Function",
            "tags": [
              "note"
            ],
            "label": "listShares",
            "description": [
              "\nCreate a file share instance for this file.\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.ListArgs",
                "text": "ListArgs"
              },
              ") => Promise<{ shares: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSON",
                "text": "FileShareJSON"
              },
              "[]; }>"
            ],
            "path": "src/plugins/files/server/file_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileClient.listShares.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Arguments to remove a file share"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.ListArgs",
                    "text": "ListArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FileDescriptor",
        "type": "Interface",
        "tags": [],
        "label": "FileDescriptor",
        "description": [
          "\nMeta description of a file."
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.FileDescriptor",
            "text": "FileDescriptor"
          },
          "<M>"
        ],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FileDescriptor.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique ID of a file, used to locate a file."
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileDescriptor.metadata",
            "type": "CompoundType",
            "tags": [],
            "label": "metadata",
            "description": [
              "\nThe file's metadata."
            ],
            "signature": [
              "Required<Pick<",
              "BaseFileMetadata",
              ", \"name\" | \"created\" | \"Status\" | \"Updated\">> & ",
              "BaseFileMetadata",
              " & { FileKind: string; Meta?: M | undefined; }"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FileMetadataClient",
        "type": "Interface",
        "tags": [],
        "label": "FileMetadataClient",
        "description": [
          "\nAn abstraction of storage implementation of file object's (i.e., metadata)"
        ],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FileMetadataClient.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [
              "\nCreate an instance of file metadata\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileDescriptor",
                "text": "FileDescriptor"
              },
              "<unknown>) => Promise<",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileDescriptor",
                "text": "FileDescriptor"
              },
              "<unknown>>"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileMetadataClient.create.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Provide an ID and metadata"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.FileDescriptor",
                    "text": "FileDescriptor"
                  },
                  "<unknown>"
                ],
                "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileMetadataClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nGet file metadata\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.GetArg",
                "text": "GetArg"
              },
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileDescriptor",
                "text": "FileDescriptor"
              },
              "<unknown>>"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileMetadataClient.get.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Arguments to retrieve file metadata"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.GetArg",
                    "text": "GetArg"
                  }
                ],
                "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileMetadataClient.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [
              "\nThe file metadata to update\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.UpdateArgs",
                "text": "UpdateArgs"
              },
              "<unknown>) => Promise<",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileDescriptor",
                "text": "FileDescriptor"
              },
              "<unknown>>"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileMetadataClient.update.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Arguments to update file metadata"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.UpdateArgs",
                    "text": "UpdateArgs"
                  },
                  "<unknown>"
                ],
                "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileMetadataClient.delete",
            "type": "Function",
            "tags": [],
            "label": "delete",
            "description": [
              "\nDelete an instance of file metadata\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.DeleteArg",
                "text": "DeleteArg"
              },
              ") => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileMetadataClient.delete.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Arguments to delete file metadata"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.DeleteArg",
                    "text": "DeleteArg"
                  }
                ],
                "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileMetadataClient.find",
            "type": "Function",
            "tags": [],
            "label": "find",
            "description": [
              "\nSearch for a set of file kind instances that match the filters.\n"
            ],
            "signature": [
              "(arg?: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FindFileArgs",
                "text": "FindFileArgs"
              },
              " | undefined) => Promise<{ total: number; files: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileDescriptor",
                "text": "FileDescriptor"
              },
              "<unknown>[]; }>"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileMetadataClient.find.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Filters and other settings to match against"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.FindFileArgs",
                    "text": "FindFileArgs"
                  },
                  " | undefined"
                ],
                "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileMetadataClient.getUsageMetrics",
            "type": "Function",
            "tags": [],
            "label": "getUsageMetrics",
            "description": [
              "\nPrepare a set of metrics based on the file metadata.\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.GetUsageMetricsArgs",
                "text": "GetUsageMetricsArgs"
              },
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FilesMetrics",
                "text": "FilesMetrics"
              },
              ">"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileMetadataClient.getUsageMetrics.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- Argument to get usage metrics"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.GetUsageMetricsArgs",
                    "text": "GetUsageMetricsArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FileServiceFactory",
        "type": "Interface",
        "tags": [],
        "label": "FileServiceFactory",
        "description": [
          "\nA simple interface for getting an instance of {@link FileServiceStart}"
        ],
        "path": "src/plugins/files/server/file_service/file_service_factory.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceFactory.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [
              "\nGet a file service instance that is scoped to the current user request.\n"
            ],
            "signature": [
              "(req: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) => ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileServiceStart",
                "text": "FileServiceStart"
              }
            ],
            "path": "src/plugins/files/server/file_service/file_service_factory.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceFactory.asScoped.$1",
                "type": "Object",
                "tags": [],
                "label": "req",
                "description": [
                  "- the Kibana request to scope the service to"
                ],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "src/plugins/files/server/file_service/file_service_factory.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceFactory.asInternal",
            "type": "Function",
            "tags": [
              "note"
            ],
            "label": "asInternal",
            "description": [
              "\nGet a file service instance that is scoped to the internal user.\n"
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FileServiceStart",
                "text": "FileServiceStart"
              }
            ],
            "path": "src/plugins/files/server/file_service/file_service_factory.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FileServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "FileServiceStart",
        "description": [
          "\nPublic file service interface."
        ],
        "path": "src/plugins/files/server/file_service/file_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [
              "\nCreate a new file.\n\nOnce created, the file content can be uploaded. See {@link File}.\n"
            ],
            "signature": [
              "<M>(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.CreateFileArgs",
                "text": "CreateFileArgs"
              },
              "<M>) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<M>>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.create.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- create file arg"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.CreateFileArgs",
                    "text": "CreateFileArgs"
                  },
                  "<M>"
                ],
                "path": "src/plugins/files/server/file_service/file_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [
              "\nUpdate updatable file attributes like name and meta.\n"
            ],
            "signature": [
              "(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.UpdateFileArgs",
                "text": "UpdateFileArgs"
              },
              ") => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.update.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- update file args"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.UpdateFileArgs",
                    "text": "UpdateFileArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_service/file_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.delete",
            "type": "Function",
            "tags": [],
            "label": "delete",
            "description": [
              "\nDelete a file.\n"
            ],
            "signature": [
              "(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.DeleteFileArgs",
                "text": "DeleteFileArgs"
              },
              ") => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.delete.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- delete file args"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.DeleteFileArgs",
                    "text": "DeleteFileArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_service/file_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.getById",
            "type": "Function",
            "tags": [],
            "label": "getById",
            "description": [
              "\nGet a file by ID. Will throw if file cannot be found.\n"
            ],
            "signature": [
              "<M>(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.GetByIdArgs",
                "text": "GetByIdArgs"
              },
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<M>>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.getById.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- get file by ID args"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.GetByIdArgs",
                    "text": "GetByIdArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_service/file_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.find",
            "type": "Function",
            "tags": [],
            "label": "find",
            "description": [
              "\nFind files given a set of parameters.\n"
            ],
            "signature": [
              "<M>(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.FindFileArgs",
                "text": "FindFileArgs"
              },
              ") => Promise<{ files: ",
              "FileJSON",
              "<M>[]; total: number; }>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.find.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- find files args"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.FindFileArgs",
                    "text": "FindFileArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_service/file_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.getShareObject",
            "type": "Function",
            "tags": [],
            "label": "getShareObject",
            "description": [
              "\nGet an instance of a share object\n"
            ],
            "signature": [
              "(arg: IdArg) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSON",
                "text": "FileShareJSON"
              },
              ">"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.getShareObject.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- get share args"
                ],
                "signature": [
                  "IdArg"
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.listShareObjects",
            "type": "Function",
            "tags": [],
            "label": "listShareObjects",
            "description": [
              "\nList share objects\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.ListArgs",
                "text": "ListArgs"
              },
              ") => Promise<{ shares: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSON",
                "text": "FileShareJSON"
              },
              "[]; }>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.listShareObjects.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- list share objects args"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.ListArgs",
                    "text": "ListArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.updateShareObject",
            "type": "Function",
            "tags": [],
            "label": "updateShareObject",
            "description": [
              "\nUpdate an instance of a share object\n"
            ],
            "signature": [
              "(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.UpdateArgs",
                "text": "UpdateArgs"
              },
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShare",
                "text": "FileShare"
              },
              " & { id: string; }>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.updateShareObject.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- update share args"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.UpdateArgs",
                    "text": "UpdateArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.deleteShareObject",
            "type": "Function",
            "tags": [],
            "label": "deleteShareObject",
            "description": [
              "\nDelete a share instance\n"
            ],
            "signature": [
              "(args: IdArg) => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.deleteShareObject.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- delete share args"
                ],
                "signature": [
                  "IdArg"
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.getUsageMetrics",
            "type": "Function",
            "tags": [],
            "label": "getUsageMetrics",
            "description": [
              "\nGet the current usage metrics for all storage media.\n\nReturns diagnostics or `undefined` if metrics could not be retrieved."
            ],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FilesMetrics",
                "text": "FilesMetrics"
              },
              ">"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileServiceStart.getByToken",
            "type": "Function",
            "tags": [],
            "label": "getByToken",
            "description": [
              "\nGet a file by a secret token.\n"
            ],
            "signature": [
              "<M>(token: string) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<M>>"
            ],
            "path": "src/plugins/files/server/file_service/file_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileServiceStart.getByToken.$1",
                "type": "string",
                "tags": [],
                "label": "token",
                "description": [
                  "- secret token"
                ],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/files/server/file_service/file_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FileShareServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "FileShareServiceStart",
        "description": [
          "\nWe only expose functionality here that do not require you to have a {@link File}\ninstance loaded."
        ],
        "path": "src/plugins/files/server/file_share_service/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FileShareServiceStart.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nGet a share instance\n"
            ],
            "signature": [
              "(arg: IdArg) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSON",
                "text": "FileShareJSON"
              },
              ">"
            ],
            "path": "src/plugins/files/server/file_share_service/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileShareServiceStart.get.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- the arguments to get the share instance"
                ],
                "signature": [
                  "IdArg"
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileShareServiceStart.list",
            "type": "Function",
            "tags": [],
            "label": "list",
            "description": [
              "\nList share objects\n"
            ],
            "signature": [
              "(arg: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.ListArgs",
                "text": "ListArgs"
              },
              ") => Promise<{ shares: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSON",
                "text": "FileShareJSON"
              },
              "[]; }>"
            ],
            "path": "src/plugins/files/server/file_share_service/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileShareServiceStart.list.$1",
                "type": "Object",
                "tags": [],
                "label": "arg",
                "description": [
                  "- the arguments to list share objects"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.ListArgs",
                    "text": "ListArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileShareServiceStart.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [
              "\nUpdate a share instance.\n"
            ],
            "signature": [
              "(args: ",
              {
                "pluginId": "files",
                "scope": "server",
                "docId": "kibFilesPluginApi",
                "section": "def-server.UpdateArgs",
                "text": "UpdateArgs"
              },
              ") => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShare",
                "text": "FileShare"
              },
              " & { id: string; }>"
            ],
            "path": "src/plugins/files/server/file_share_service/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileShareServiceStart.update.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- the arguments to update a share instance"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "server",
                    "docId": "kibFilesPluginApi",
                    "section": "def-server.UpdateArgs",
                    "text": "UpdateArgs"
                  }
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FileShareServiceStart.delete",
            "type": "Function",
            "tags": [],
            "label": "delete",
            "description": [
              "\nDelete a share instance.\n"
            ],
            "signature": [
              "(args: IdArg) => Promise<void>"
            ],
            "path": "src/plugins/files/server/file_share_service/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-server.FileShareServiceStart.delete.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [
                  "- the arguments to delete a share instance"
                ],
                "signature": [
                  "IdArg"
                ],
                "path": "src/plugins/files/server/file_share_service/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FindArg",
        "type": "Interface",
        "tags": [],
        "label": "FindArg",
        "description": [],
        "signature": [
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.FindArg",
            "text": "FindArg"
          },
          " extends ",
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.Pagination",
            "text": "Pagination"
          }
        ],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FindArg.fileKind",
            "type": "string",
            "tags": [],
            "label": "fileKind",
            "description": [
              "\nThe file kind to scope this query to"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.FindFileArgs",
        "type": "Interface",
        "tags": [
          "note"
        ],
        "label": "FindFileArgs",
        "description": [
          "\nArguments to filter for files.\n"
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.FindFileArgs",
            "text": "FindFileArgs"
          },
          " extends ",
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.Pagination",
            "text": "Pagination"
          }
        ],
        "path": "src/plugins/files/server/file_service/file_action_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.kind",
            "type": "Array",
            "tags": [],
            "label": "kind",
            "description": [
              "\nFile kind(s), see {@link FileKind}."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.name",
            "type": "Array",
            "tags": [],
            "label": "name",
            "description": [
              "\nFile name(s)."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.extension",
            "type": "Array",
            "tags": [],
            "label": "extension",
            "description": [
              "\nFile extension(s)."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.mimeType",
            "type": "Array",
            "tags": [],
            "label": "mimeType",
            "description": [
              "\nFile mime type(s)."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.status",
            "type": "Array",
            "tags": [],
            "label": "status",
            "description": [
              "\nFile status(es)."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.user",
            "type": "Array",
            "tags": [],
            "label": "user",
            "description": [
              "\nID of user who created the file."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.FindFileArgs.meta",
            "type": "Object",
            "tags": [],
            "label": "meta",
            "description": [
              "\nFile metadata values. These values are governed by the consumer."
            ],
            "signature": [
              "Record<string, string> | undefined"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.GetArg",
        "type": "Interface",
        "tags": [],
        "label": "GetArg",
        "description": [
          "\nGet a file"
        ],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.GetArg.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique ID of file metadata"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.GetByIdArgs",
        "type": "Interface",
        "tags": [],
        "label": "GetByIdArgs",
        "description": [
          "\nArguments to get a file by ID."
        ],
        "path": "src/plugins/files/server/file_service/file_action_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.GetByIdArgs.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nFile ID."
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.GetUsageMetricsArgs",
        "type": "Interface",
        "tags": [],
        "label": "GetUsageMetricsArgs",
        "description": [
          "\nArgs to get usage metrics"
        ],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.GetUsageMetricsArgs.ES_FIXED_SIZE_INDEX_BLOB_STORE",
            "type": "Object",
            "tags": [],
            "label": "[ES_FIXED_SIZE_INDEX_BLOB_STORE]",
            "description": [
              "\nThe ES backed fixed size storage"
            ],
            "signature": [
              "{ capacity: number; }"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.ListArgs",
        "type": "Interface",
        "tags": [],
        "label": "ListArgs",
        "description": [
          "\nArguments for listing file shares."
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.ListArgs",
            "text": "ListArgs"
          },
          " extends ",
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.Pagination",
            "text": "Pagination"
          }
        ],
        "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.ListArgs.fileId",
            "type": "string",
            "tags": [],
            "label": "fileId",
            "description": [
              "\nThe file ID for scope the list to."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.UpdateArgs",
        "type": "Interface",
        "tags": [],
        "label": "UpdateArgs",
        "description": [
          "\nUpdate a file args"
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "server",
            "docId": "kibFilesPluginApi",
            "section": "def-server.UpdateArgs",
            "text": "UpdateArgs"
          },
          "<M>"
        ],
        "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.UpdateArgs.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nA unique file ID."
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.UpdateArgs.metadata",
            "type": "Object",
            "tags": [],
            "label": "metadata",
            "description": [
              "\nThe file's metadata."
            ],
            "signature": [
              "{ name?: string | undefined; created?: string | undefined; Status?: \"AWAITING_UPLOAD\" | \"UPLOADING\" | \"READY\" | \"UPLOAD_ERROR\" | \"DELETED\" | undefined; Updated?: string | undefined; mime_type?: string | undefined; size?: number | undefined; hash?: { [hashName: string]: string | undefined; md5?: string | undefined; sha1?: string | undefined; sha256?: string | undefined; sha384?: string | undefined; sha512?: string | undefined; ssdeep?: string | undefined; tlsh?: string | undefined; } | undefined; user?: { name?: string | undefined; id?: string | undefined; } | undefined; extension?: string | undefined; Alt?: string | undefined; ChunkSize?: number | undefined; Compression?: ",
              "FileCompression",
              " | undefined; FileKind?: string | undefined; Meta?: M | undefined; }"
            ],
            "path": "src/plugins/files/server/file_client/file_metadata_client/file_metadata_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.UpdateArgs",
        "type": "Interface",
        "tags": [],
        "label": "UpdateArgs",
        "description": [
          "\nUpdate file share arguments."
        ],
        "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.UpdateArgs.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nThe file share ID."
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.UpdateArgs.attributes",
            "type": "Object",
            "tags": [],
            "label": "attributes",
            "description": [
              "\nThe updated attributes to store."
            ],
            "signature": [
              "{ name?: string | undefined; }"
            ],
            "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.UpdateFileArgs",
        "type": "Interface",
        "tags": [],
        "label": "UpdateFileArgs",
        "description": [
          "\nArguments to update a file"
        ],
        "path": "src/plugins/files/server/file_service/file_action_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-server.UpdateFileArgs.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nFile ID."
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-server.UpdateFileArgs.attributes",
            "type": "Object",
            "tags": [],
            "label": "attributes",
            "description": [
              "\nAttributes to update."
            ],
            "signature": [
              "{ name: string; meta: unknown; alt: string | undefined; }"
            ],
            "path": "src/plugins/files/server/file_service/file_action_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "files",
        "id": "def-server.DeleteArgs",
        "type": "Type",
        "tags": [],
        "label": "DeleteArgs",
        "description": [
          "\nDelete file share arguments."
        ],
        "signature": [
          "IdArg"
        ],
        "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-server.GetArgs",
        "type": "Type",
        "tags": [],
        "label": "GetArgs",
        "description": [
          "\nGet file share arguments."
        ],
        "signature": [
          "IdArg"
        ],
        "path": "src/plugins/files/server/file_share_service/internal_file_share_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "files",
      "id": "def-server.FilesSetup",
      "type": "Interface",
      "tags": [],
      "label": "FilesSetup",
      "description": [
        "\nFiles plugin setup contract"
      ],
      "path": "src/plugins/files/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "files",
          "id": "def-server.FilesSetup.registerFileKind",
          "type": "Function",
          "tags": [
            "track-adoption"
          ],
          "label": "registerFileKind",
          "description": [
            "\nRegister a {@link FileKind} which allows for specifying details about the files\nthat will be uploaded.\n"
          ],
          "signature": [
            "(fileKind: ",
            "FileKind",
            ") => void"
          ],
          "path": "src/plugins/files/server/types.ts",
          "deprecated": false,
          "trackAdoption": true,
          "references": [],
          "children": [
            {
              "parentPluginId": "files",
              "id": "def-server.FilesSetup.registerFileKind.$1",
              "type": "Object",
              "tags": [],
              "label": "fileKind",
              "description": [
                "- the file kind to register"
              ],
              "signature": [
                "FileKind"
              ],
              "path": "src/plugins/files/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "files",
      "id": "def-server.FilesStart",
      "type": "Interface",
      "tags": [],
      "label": "FilesStart",
      "description": [
        "\nFiles plugin start contract"
      ],
      "path": "src/plugins/files/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "files",
          "id": "def-server.FilesStart.fileServiceFactory",
          "type": "Object",
          "tags": [
            "track-adoption"
          ],
          "label": "fileServiceFactory",
          "description": [
            "\nCreate an instance of {@link FileServiceStart}.\n"
          ],
          "signature": [
            {
              "pluginId": "files",
              "scope": "server",
              "docId": "kibFilesPluginApi",
              "section": "def-server.FileServiceFactory",
              "text": "FileServiceFactory"
            }
          ],
          "path": "src/plugins/files/server/types.ts",
          "deprecated": false,
          "trackAdoption": true,
          "references": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "files",
        "id": "def-common.BlobStorageSettings",
        "type": "Interface",
        "tags": [],
        "label": "BlobStorageSettings",
        "description": [
          "\nDefines all the settings for supported blob stores.\n\nKey names map to unique blob store implementations and so must not be changed\nwithout a migration"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.BlobStorageSettings.ES_FIXED_SIZE_INDEX_BLOB_STORE",
            "type": "Object",
            "tags": [],
            "label": "[ES_FIXED_SIZE_INDEX_BLOB_STORE]",
            "description": [
              "\nSingle index that supports up to 50GB of blobs"
            ],
            "signature": [
              "{ index: string; } | undefined"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.File",
        "type": "Interface",
        "tags": [],
        "label": "File",
        "description": [
          "\nA class with set of properties and behaviors of the \"smart\" file object and adds\nbehaviours for interacting with files on top of the pure data."
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.File",
            "text": "File"
          },
          "<Meta>"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.File.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nThe file ID"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.data",
            "type": "Object",
            "tags": [],
            "label": "data",
            "description": [
              "\nFile metadata in camelCase form."
            ],
            "signature": [
              "FileJSON",
              "<Meta>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [
              "\nUpdate a file object's metadatathat can be updated.\n"
            ],
            "signature": [
              "(attr: Partial<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.UpdatableFileMetadata",
                "text": "UpdatableFileMetadata"
              },
              "<Meta>>) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<Meta>>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-common.File.update.$1",
                "type": "Object",
                "tags": [],
                "label": "attr",
                "description": [
                  "- The of attributes to update."
                ],
                "signature": [
                  "Partial<",
                  {
                    "pluginId": "files",
                    "scope": "common",
                    "docId": "kibFilesPluginApi",
                    "section": "def-common.UpdatableFileMetadata",
                    "text": "UpdatableFileMetadata"
                  },
                  "<Meta>>"
                ],
                "path": "src/plugins/files/common/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.uploadContent",
            "type": "Function",
            "tags": [],
            "label": "uploadContent",
            "description": [
              "\nStream file content to storage.\n"
            ],
            "signature": [
              "(content: ",
              "Readable",
              ", abort$?: ",
              "Observable",
              "<unknown> | undefined) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.File",
                "text": "File"
              },
              "<Meta>>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-common.File.uploadContent.$1",
                "type": "Object",
                "tags": [],
                "label": "content",
                "description": [
                  "- The content to stream to storage."
                ],
                "signature": [
                  "Readable"
                ],
                "path": "src/plugins/files/common/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "files",
                "id": "def-common.File.uploadContent.$2",
                "type": "Object",
                "tags": [],
                "label": "abort$",
                "description": [
                  "- An observable that can be used to abort the upload at any time."
                ],
                "signature": [
                  "Observable",
                  "<unknown> | undefined"
                ],
                "path": "src/plugins/files/common/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.downloadContent",
            "type": "Function",
            "tags": [],
            "label": "downloadContent",
            "description": [
              "\nStream file content from storage."
            ],
            "signature": [
              "() => Promise<",
              "Readable",
              ">"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.delete",
            "type": "Function",
            "tags": [
              "note"
            ],
            "label": "delete",
            "description": [
              "\nDelete a file.\n"
            ],
            "signature": [
              "() => Promise<void>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.share",
            "type": "Function",
            "tags": [
              "note"
            ],
            "label": "share",
            "description": [
              "\nGenerate a secure token that can be used to access a file's content.\n"
            ],
            "signature": [
              "(opts?: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareOptions",
                "text": "FileShareOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSONWithToken",
                "text": "FileShareJSONWithToken"
              },
              ">"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-common.File.share.$1",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [
                  "- Share file options."
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "common",
                    "docId": "kibFilesPluginApi",
                    "section": "def-common.FileShareOptions",
                    "text": "FileShareOptions"
                  },
                  " | undefined"
                ],
                "path": "src/plugins/files/common/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.listShares",
            "type": "Function",
            "tags": [],
            "label": "listShares",
            "description": [
              "\nList all current {@link FileShareJSON} objects that have been created for\na file."
            ],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileShareJSON",
                "text": "FileShareJSON"
              },
              "[]>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.unshare",
            "type": "Function",
            "tags": [],
            "label": "unshare",
            "description": [
              "\nRemove a {@link FileShareJSON} object therefore ceasing to share a file's\ncontent.\n"
            ],
            "signature": [
              "(opts: ",
              {
                "pluginId": "files",
                "scope": "common",
                "docId": "kibFilesPluginApi",
                "section": "def-common.FileUnshareOptions",
                "text": "FileUnshareOptions"
              },
              ") => Promise<void>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-common.File.unshare.$1",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [
                  "- Unshare file options"
                ],
                "signature": [
                  {
                    "pluginId": "files",
                    "scope": "common",
                    "docId": "kibFilesPluginApi",
                    "section": "def-common.FileUnshareOptions",
                    "text": "FileUnshareOptions"
                  }
                ],
                "path": "src/plugins/files/common/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.File.toJSON",
            "type": "Function",
            "tags": [],
            "label": "toJSON",
            "description": [
              "\nGet a JSON representation of the file. Convenient for serialisation."
            ],
            "signature": [
              "() => ",
              "FileJSON",
              "<Meta>"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileJSON",
        "type": "Interface",
        "tags": [],
        "label": "FileJSON",
        "description": [
          "\nAttributes of a file that represent a serialised version of the file."
        ],
        "signature": [
          "FileJSON",
          "<Meta>"
        ],
        "path": "packages/shared-ux/file/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique file ID."
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.created",
            "type": "string",
            "tags": [],
            "label": "created",
            "description": [
              "\nISO string of when this file was created"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.updated",
            "type": "string",
            "tags": [],
            "label": "updated",
            "description": [
              "\nISO string of when the file was updated"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.name",
            "type": "string",
            "tags": [
              "note"
            ],
            "label": "name",
            "description": [
              "\nFile name.\n"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.mimeType",
            "type": "string",
            "tags": [],
            "label": "mimeType",
            "description": [
              "\nMIME type of the file's contents."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.size",
            "type": "number",
            "tags": [],
            "label": "size",
            "description": [
              "\nThe size, in bytes, of the file content."
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.extension",
            "type": "string",
            "tags": [
              "note"
            ],
            "label": "extension",
            "description": [
              "\nThe file extension (dot suffix).\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.meta",
            "type": "Uncategorized",
            "tags": [],
            "label": "meta",
            "description": [
              "\nA consumer defined set of attributes.\n\nConsumers of the file service can add their own tags and identifiers to\na file using the \"meta\" object."
            ],
            "signature": [
              "Meta | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.alt",
            "type": "string",
            "tags": [],
            "label": "alt",
            "description": [
              "\nUse this text to describe the file contents for display and accessibility."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.fileKind",
            "type": "string",
            "tags": [
              "note"
            ],
            "label": "fileKind",
            "description": [
              "\nA unique kind that governs various aspects of the file. A consumer of the\nfiles service must register a file kind and link their files to a specific\nkind.\n"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.status",
            "type": "CompoundType",
            "tags": [],
            "label": "status",
            "description": [
              "\nThe current status of the file.\n\nSee {@link FileStatus} for more details."
            ],
            "signature": [
              "\"AWAITING_UPLOAD\" | \"UPLOADING\" | \"READY\" | \"UPLOAD_ERROR\" | \"DELETED\""
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileJSON.user",
            "type": "Object",
            "tags": [],
            "label": "user",
            "description": [
              "\nUser data associated with this file"
            ],
            "signature": [
              "{ name?: string | undefined; id?: string | undefined; } | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileKind",
        "type": "Interface",
        "tags": [],
        "label": "FileKind",
        "description": [],
        "path": "packages/shared-ux/file/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.FileKind.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique file kind ID"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileKind.maxSizeBytes",
            "type": "number",
            "tags": [
              "default"
            ],
            "label": "maxSizeBytes",
            "description": [
              "\nMaximum size, in bytes, a file of this kind can be.\n"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileKind.allowedMimeTypes",
            "type": "Array",
            "tags": [
              "default"
            ],
            "label": "allowedMimeTypes",
            "description": [
              "\nThe MIME type of the file content.\n"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileKind.blobStoreSettings",
            "type": "Any",
            "tags": [],
            "label": "blobStoreSettings",
            "description": [
              "\nBlob store specific settings that enable configuration of storage\ndetails."
            ],
            "signature": [
              "any"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileKind.http",
            "type": "Object",
            "tags": [
              "note"
            ],
            "label": "http",
            "description": [
              "\nSpecify which HTTP routes to create for the file kind.\n\nYou can always create your own HTTP routes for working with files but\nthis interface allows you to expose basic CRUD operations, upload, download\nand sharing of files over a RESTful-like interface.\n"
            ],
            "signature": [
              "{ create?: any; update?: any; delete?: any; getById?: any; list?: any; download?: any; share?: any; }"
            ],
            "path": "packages/shared-ux/file/types/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileShareJSON",
        "type": "Interface",
        "tags": [],
        "label": "FileShareJSON",
        "description": [
          "\nAttributes of a file that represent a serialised version of the file."
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareJSON.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique ID share instance"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareJSON.created",
            "type": "string",
            "tags": [],
            "label": "created",
            "description": [
              "\nISO timestamp the share was created"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareJSON.validUntil",
            "type": "number",
            "tags": [],
            "label": "validUntil",
            "description": [
              "\nUnix timestamp (in milliseconds) of when this share expires"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareJSON.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nA user-friendly name for the file share"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareJSON.fileId",
            "type": "string",
            "tags": [],
            "label": "fileId",
            "description": [
              "\nThe ID of the file this share is linked to"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileShareOptions",
        "type": "Interface",
        "tags": [],
        "label": "FileShareOptions",
        "description": [
          "\nArguments to pass to share a file"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareOptions.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nOptional name for the file share, should be human-friendly."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FileShareOptions.validUntil",
            "type": "number",
            "tags": [
              "note"
            ],
            "label": "validUntil",
            "description": [
              "\nUnix timestamp (in milliseconds) when the file share will expire.\n"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FilesMetrics",
        "type": "Interface",
        "tags": [],
        "label": "FilesMetrics",
        "description": [
          "\nA collection of generally useful metrics about files."
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.FilesMetrics.storage",
            "type": "Object",
            "tags": [],
            "label": "storage",
            "description": [
              "\nMetrics about all storage media."
            ],
            "signature": [
              "{ esFixedSizeIndex: { capacity: number; used: number; available: number; }; }"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FilesMetrics.countByStatus",
            "type": "Object",
            "tags": [],
            "label": "countByStatus",
            "description": [
              "\nA count of all files grouped by status"
            ],
            "signature": [
              "{ AWAITING_UPLOAD: number; UPLOADING: number; READY: number; UPLOAD_ERROR: number; DELETED: number; }"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.FilesMetrics.countByExtension",
            "type": "Object",
            "tags": [],
            "label": "countByExtension",
            "description": [
              "\nA count of all files grouped by extension"
            ],
            "signature": [
              "{ [x: string]: number; }"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileUnshareOptions",
        "type": "Interface",
        "tags": [],
        "label": "FileUnshareOptions",
        "description": [
          "\nArguments for unsharing a file"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.FileUnshareOptions.shareId",
            "type": "string",
            "tags": [],
            "label": "shareId",
            "description": [
              "\nSpecify the share instance to remove"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.Pagination",
        "type": "Interface",
        "tags": [],
        "label": "Pagination",
        "description": [
          "\nValues for paginating through results."
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.Pagination.page",
            "type": "number",
            "tags": [],
            "label": "page",
            "description": [
              "\nPage of results."
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.Pagination.perPage",
            "type": "number",
            "tags": [],
            "label": "perPage",
            "description": [
              "\nNumber of results per page."
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/plugins/files/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "files",
        "id": "def-common.BaseFileMetadata",
        "type": "Type",
        "tags": [],
        "label": "BaseFileMetadata",
        "description": [
          "\nFile metadata fields are defined per the ECS specification:\n\nhttps://www.elastic.co/guide/en/ecs/current/ecs-file.html\n\nCustom fields are named according to the custom field convention: \"CustomFieldName\"."
        ],
        "signature": [
          "{ name?: string | undefined; mime_type?: string | undefined; created?: string | undefined; size?: number | undefined; hash?: { [hashName: string]: string | undefined; md5?: string | undefined; sha1?: string | undefined; sha256?: string | undefined; sha384?: string | undefined; sha512?: string | undefined; ssdeep?: string | undefined; tlsh?: string | undefined; } | undefined; user?: { name?: string | undefined; id?: string | undefined; } | undefined; extension?: string | undefined; Alt?: string | undefined; Updated?: string | undefined; Status?: ",
          "FileStatus",
          " | undefined; ChunkSize?: number | undefined; Compression?: ",
          "FileCompression",
          " | undefined; }"
        ],
        "path": "packages/shared-ux/file/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.ES_FIXED_SIZE_INDEX_BLOB_STORE",
        "type": "string",
        "tags": [],
        "label": "ES_FIXED_SIZE_INDEX_BLOB_STORE",
        "description": [
          "\nThe name of the fixed size ES-backed blob store"
        ],
        "signature": [
          "\"esFixedSizeIndex\""
        ],
        "path": "src/plugins/files/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FILE_SO_TYPE",
        "type": "string",
        "tags": [],
        "label": "FILE_SO_TYPE",
        "description": [
          "\nUnique type name of the file saved object"
        ],
        "signature": [
          "\"file\""
        ],
        "path": "src/plugins/files/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileCompression",
        "type": "Type",
        "tags": [],
        "label": "FileCompression",
        "description": [
          "\nSupported file compression algorithms"
        ],
        "signature": [
          "\"none\" | \"br\" | \"gzip\" | \"deflate\""
        ],
        "path": "packages/shared-ux/file/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileMetadata",
        "type": "Type",
        "tags": [],
        "label": "FileMetadata",
        "description": [
          "\nExtra metadata on a file object specific to Kibana implementation."
        ],
        "signature": [
          "Required<Pick<",
          "BaseFileMetadata",
          ", \"name\" | \"created\" | \"Status\" | \"Updated\">> & ",
          "BaseFileMetadata",
          " & { FileKind: string; Meta?: Meta | undefined; }"
        ],
        "path": "packages/shared-ux/file/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileSavedObject",
        "type": "Type",
        "tags": [],
        "label": "FileSavedObject",
        "description": [
          "\nAn {@link SavedObject} containing a file object (i.e., metadata only)."
        ],
        "signature": [
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObject",
            "text": "SavedObject"
          },
          "<",
          "FileMetadata",
          "<Meta>>"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileShare",
        "type": "Type",
        "tags": [],
        "label": "FileShare",
        "description": [
          "\nData stored with a file share object"
        ],
        "signature": [
          "{ created: string; token: string; name?: string | undefined; valid_until: number; }"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileShareJSONWithToken",
        "type": "Type",
        "tags": [
          "note"
        ],
        "label": "FileShareJSONWithToken",
        "description": [
          "\nA version of the file share with a token included.\n"
        ],
        "signature": [
          {
            "pluginId": "files",
            "scope": "common",
            "docId": "kibFilesPluginApi",
            "section": "def-common.FileShareJSON",
            "text": "FileShareJSON"
          },
          " & { token: string; }"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.FileStatus",
        "type": "Type",
        "tags": [],
        "label": "FileStatus",
        "description": [],
        "signature": [
          "\"AWAITING_UPLOAD\" | \"UPLOADING\" | \"READY\" | \"UPLOAD_ERROR\" | \"DELETED\""
        ],
        "path": "packages/shared-ux/file/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.PLUGIN_ID",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_ID",
        "description": [
          "\nThe files plugin ID"
        ],
        "signature": [
          "\"files\""
        ],
        "path": "src/plugins/files/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.PLUGIN_NAME",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_NAME",
        "description": [
          "\nThe files plugin name"
        ],
        "signature": [
          "\"files\""
        ],
        "path": "src/plugins/files/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.UpdatableFileMetadata",
        "type": "Type",
        "tags": [],
        "label": "UpdatableFileMetadata",
        "description": [
          "\nThe set of file metadata that can be updated."
        ],
        "signature": [
          "{ name: string; meta: Meta | undefined; alt: string | undefined; }"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "files",
        "id": "def-common.UpdatableFileShareMetadata",
        "type": "Type",
        "tags": [],
        "label": "UpdatableFileShareMetadata",
        "description": [
          "\nSet of attributes that can be updated in a file share."
        ],
        "signature": [
          "{ name?: string | undefined; }"
        ],
        "path": "src/plugins/files/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "files",
        "id": "def-common.defaultImageFileKind",
        "type": "Object",
        "tags": [],
        "label": "defaultImageFileKind",
        "description": [
          "\nA file kind that is available to all plugins to use for uploading images\nintended to be reused across Kibana."
        ],
        "path": "src/plugins/files/common/default_image_file_kind.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "files",
            "id": "def-common.defaultImageFileKind.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "\"defaultImage\""
            ],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.defaultImageFileKind.maxSizeBytes",
            "type": "number",
            "tags": [],
            "label": "maxSizeBytes",
            "description": [],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.defaultImageFileKind.blobStoreSettings",
            "type": "Object",
            "tags": [],
            "label": "blobStoreSettings",
            "description": [],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": []
          },
          {
            "parentPluginId": "files",
            "id": "def-common.defaultImageFileKind.allowedMimeTypes",
            "type": "Array",
            "tags": [],
            "label": "allowedMimeTypes",
            "description": [
              "// tried using \"image/*\" but it did not work with the HTTP endpoint (got 415 Unsupported Media Type)"
            ],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "files",
            "id": "def-common.defaultImageFileKind.http",
            "type": "Object",
            "tags": [],
            "label": "http",
            "description": [],
            "path": "src/plugins/files/common/default_image_file_kind.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.create",
                "type": "Object",
                "tags": [],
                "label": "create",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.create.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.delete",
                "type": "Object",
                "tags": [],
                "label": "delete",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.delete.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.download",
                "type": "Object",
                "tags": [],
                "label": "download",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.download.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.getById",
                "type": "Object",
                "tags": [],
                "label": "getById",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.getById.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.list",
                "type": "Object",
                "tags": [],
                "label": "list",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.list.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.share",
                "type": "Object",
                "tags": [],
                "label": "share",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.share.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "files",
                "id": "def-common.defaultImageFileKind.http.update",
                "type": "Object",
                "tags": [],
                "label": "update",
                "description": [],
                "path": "src/plugins/files/common/default_image_file_kind.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "files",
                    "id": "def-common.defaultImageFileKind.http.update.tags",
                    "type": "Array",
                    "tags": [],
                    "label": "tags",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "src/plugins/files/common/default_image_file_kind.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  }
}