{
  "id": "@kbn/utils",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.concatStreamProviders",
        "type": "Function",
        "tags": [
          "return"
        ],
        "label": "concatStreamProviders",
        "description": [
          "\n Write the data and errors from a list of stream providers\n to a single stream in order. Stream providers are only\n called right before they will be consumed, and only one\n provider will be active at a time.\n"
        ],
        "signature": [
          "(sourceProviders: (() => ",
          "Readable",
          ")[], options: ",
          "TransformOptions",
          " | undefined) => ",
          "PassThrough"
        ],
        "path": "packages/kbn-utils/src/streams/concat_stream_providers.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.concatStreamProviders.$1",
            "type": "Array",
            "tags": [],
            "label": "sourceProviders",
            "description": [],
            "signature": [
              "(() => ",
              "Readable",
              ")[]"
            ],
            "path": "packages/kbn-utils/src/streams/concat_stream_providers.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.concatStreamProviders.$2",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [
              "options passed to the PassThrough constructor"
            ],
            "signature": [
              "TransformOptions",
              " | undefined"
            ],
            "path": "packages/kbn-utils/src/streams/concat_stream_providers.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [
          "combined stream"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createConcatStream",
        "type": "Function",
        "tags": [
          "return"
        ],
        "label": "createConcatStream",
        "description": [
          "\n Creates a Transform stream that consumes all provided\n values and concatenates them using each values `concat`\n method.\n\n Concatenate strings:\n   createListStream(['f', 'o', 'o'])\n     .pipe(createConcatStream())\n     .on('data', console.log)\n     // logs \"foo\"\n\n Concatenate values into an array:\n   createListStream([1,2,3])\n     .pipe(createConcatStream([]))\n     .on('data', console.log)\n     // logs \"[1,2,3]\"\n\n"
        ],
        "signature": [
          "(initial: T | undefined) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/concat_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createConcatStream.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "initial",
            "description": [
              "The initial value that subsequent\nitems will concat with"
            ],
            "signature": [
              "T | undefined"
            ],
            "path": "packages/kbn-utils/src/streams/concat_stream.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createFilterStream",
        "type": "Function",
        "tags": [],
        "label": "createFilterStream",
        "description": [],
        "signature": [
          "(fn: (obj: T) => boolean) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/filter_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createFilterStream.$1",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [],
            "signature": [
              "(obj: T) => boolean"
            ],
            "path": "packages/kbn-utils/src/streams/filter_stream.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createIntersperseStream",
        "type": "Function",
        "tags": [
          "return"
        ],
        "label": "createIntersperseStream",
        "description": [
          "\n Create a Transform stream that receives values in object mode,\n and intersperses a chunk between each object received.\n\n This is useful for writing lists:\n\n   createListStream(['foo', 'bar'])\n     .pipe(createIntersperseStream('\\n'))\n     .pipe(process.stdout) // outputs \"foo\\nbar\"\n\n Combine with a concat stream to get \"join\" like functionality:\n\n   await createPromiseFromStreams([\n     createListStream(['foo', 'bar']),\n     createIntersperseStream(' '),\n     createConcatStream()\n   ]) // produces a single value \"foo bar\"\n"
        ],
        "signature": [
          "(intersperseChunk: string | Buffer) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/intersperse_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createIntersperseStream.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "intersperseChunk",
            "description": [],
            "signature": [
              "string | Buffer"
            ],
            "path": "packages/kbn-utils/src/streams/intersperse_stream.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createListStream",
        "type": "Function",
        "tags": [
          "return"
        ],
        "label": "createListStream",
        "description": [
          "\n Create a Readable stream that provides the items\n from a list as objects to subscribers\n"
        ],
        "signature": [
          "(items: T | T[]) => ",
          "Readable"
        ],
        "path": "packages/kbn-utils/src/streams/list_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createListStream.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "items",
            "description": [
              "- the list of items to provide"
            ],
            "signature": [
              "T | T[]"
            ],
            "path": "packages/kbn-utils/src/streams/list_stream.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createMapStream",
        "type": "Function",
        "tags": [],
        "label": "createMapStream",
        "description": [],
        "signature": [
          "(fn: (value: T, i: number) => void) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/map_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createMapStream.$1",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [],
            "signature": [
              "(value: T, i: number) => void"
            ],
            "path": "packages/kbn-utils/src/streams/map_stream.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createPromiseFromStreams",
        "type": "Function",
        "tags": [],
        "label": "createPromiseFromStreams",
        "description": [],
        "signature": [
          "(streams: [",
          "Readable",
          ", ...",
          "Writable",
          "[]]) => Promise<T>"
        ],
        "path": "packages/kbn-utils/src/streams/promise_from_streams.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createPromiseFromStreams.$1",
            "type": "Object",
            "tags": [],
            "label": "streams",
            "description": [],
            "signature": [
              "[",
              "Readable",
              ", ...",
              "Writable",
              "[]]"
            ],
            "path": "packages/kbn-utils/src/streams/promise_from_streams.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createReduceStream",
        "type": "Function",
        "tags": [
          "return"
        ],
        "label": "createReduceStream",
        "description": [
          "\n Create a transform stream that consumes each chunk it receives\n and passes it to the reducer, which will return the new value\n for the stream. Once all chunks have been received the reduce\n stream provides the result of final call to the reducer to\n subscribers.\n"
        ],
        "signature": [
          "(reducer: (value: any, chunk: T, enc: string) => T, initial: T | undefined) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/reduce_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createReduceStream.$1",
            "type": "Function",
            "tags": [],
            "label": "reducer",
            "description": [],
            "signature": [
              "(value: any, chunk: T, enc: string) => T"
            ],
            "path": "packages/kbn-utils/src/streams/reduce_stream.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createReduceStream.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "initial",
            "description": [
              "Initial value for the stream, if undefined\nthen the first chunk provided is used as the\ninitial value."
            ],
            "signature": [
              "T | undefined"
            ],
            "path": "packages/kbn-utils/src/streams/reduce_stream.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createReplaceStream",
        "type": "Function",
        "tags": [],
        "label": "createReplaceStream",
        "description": [],
        "signature": [
          "(toReplace: string, replacement: string | Buffer) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/replace_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createReplaceStream.$1",
            "type": "string",
            "tags": [],
            "label": "toReplace",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-utils/src/streams/replace_stream.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createReplaceStream.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "replacement",
            "description": [],
            "signature": [
              "string | Buffer"
            ],
            "path": "packages/kbn-utils/src/streams/replace_stream.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.createSplitStream",
        "type": "Function",
        "tags": [
          "return"
        ],
        "label": "createSplitStream",
        "description": [
          "\n Creates a Transform stream that consumes a stream of Buffers\n and produces a stream of strings (in object mode) by splitting\n the received bytes using the splitChunk.\n\n Ways this is behaves like String#split:\n   - instances of splitChunk are removed from the input\n   - splitChunk can be on any size\n   - if there are no bytes found after the last splitChunk\n     a final empty chunk is emitted\n\n Ways this deviates from String#split:\n   - splitChunk cannot be a regexp\n   - an empty string or Buffer will not produce a stream of individual\n     bytes like `string.split('')` would\n"
        ],
        "signature": [
          "(splitChunk: string | Uint8Array) => ",
          "Transform"
        ],
        "path": "packages/kbn-utils/src/streams/split_stream.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.createSplitStream.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "splitChunk",
            "description": [],
            "signature": [
              "string | Uint8Array"
            ],
            "path": "packages/kbn-utils/src/streams/split_stream.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.fromRoot",
        "type": "Function",
        "tags": [],
        "label": "fromRoot",
        "description": [],
        "signature": [
          "(...paths: string[]) => string"
        ],
        "path": "packages/kbn-utils/src/repo_root.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.fromRoot.$1",
            "type": "Array",
            "tags": [],
            "label": "paths",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "packages/kbn-utils/src/repo_root.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.isKibanaDistributable",
        "type": "Function",
        "tags": [],
        "label": "isKibanaDistributable",
        "description": [],
        "signature": [
          "() => any"
        ],
        "path": "packages/kbn-utils/src/package_json/index.ts",
        "deprecated": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.PathConfigType",
        "type": "Type",
        "tags": [],
        "label": "PathConfigType",
        "description": [],
        "signature": [
          "{ readonly data: string; }"
        ],
        "path": "packages/kbn-utils/src/path/index.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.REPO_ROOT",
        "type": "string",
        "tags": [],
        "label": "REPO_ROOT",
        "description": [],
        "path": "packages/kbn-utils/src/repo_root.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.UPSTREAM_BRANCH",
        "type": "string",
        "tags": [],
        "label": "UPSTREAM_BRANCH",
        "description": [],
        "path": "packages/kbn-utils/src/repo_root.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/utils",
        "id": "def-server.kibanaPackageJson",
        "type": "Object",
        "tags": [],
        "label": "kibanaPackageJson",
        "description": [],
        "path": "packages/kbn-utils/src/package_json/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/utils",
            "id": "def-server.kibanaPackageJson.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "packages/kbn-utils/src/package_json/index.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}