{
  "id": "kibanaUtils",
  "client": {
    "classes": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.AbortError",
        "type": "Class",
        "tags": [],
        "label": "AbortError",
        "description": [
          "\nClass used to signify that something was aborted. Useful for applications to conditionally handle\nthis type of error differently than other errors."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.AbortError",
            "text": "AbortError"
          },
          " extends Error"
        ],
        "path": "src/plugins/kibana_utils/common/abort_utils.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.AbortError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/abort_utils.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.AbortError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/abort_utils.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.CharacterNotAllowedInField",
        "type": "Class",
        "tags": [],
        "label": "CharacterNotAllowedInField",
        "description": [
          "\nwhen a user is attempting to create a field with disallowed character in the name, like *"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.CharacterNotAllowedInField",
            "text": "CharacterNotAllowedInField"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.CharacterNotAllowedInField.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.CharacterNotAllowedInField.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "character",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.CharacterNotAllowedInField.Unnamed.$2",
                "type": "string",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Defer",
        "type": "Class",
        "tags": [],
        "label": "Defer",
        "description": [
          "\nAn externally resolvable/rejectable \"promise\". Use it to resolve/reject\npromise at any time.\n\n```ts\nconst future = new Defer();\n\nfuture.promise.then(value => console.log(value));\n\nfuture.resolve(123);\n```"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Defer",
            "text": "Defer"
          },
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/defer.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Defer.resolve",
            "type": "Function",
            "tags": [],
            "label": "resolve",
            "description": [],
            "signature": [
              "(data: T) => void"
            ],
            "path": "src/plugins/kibana_utils/common/defer.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Defer.resolve.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "data",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/plugins/kibana_utils/common/defer.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Defer.reject",
            "type": "Function",
            "tags": [],
            "label": "reject",
            "description": [],
            "signature": [
              "(error: any) => void"
            ],
            "path": "src/plugins/kibana_utils/common/defer.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Defer.reject.$1",
                "type": "Any",
                "tags": [],
                "label": "error",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "src/plugins/kibana_utils/common/defer.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Defer.promise",
            "type": "Object",
            "tags": [],
            "label": "promise",
            "description": [],
            "signature": [
              "Promise<T>"
            ],
            "path": "src/plugins/kibana_utils/common/defer.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.DuplicateField",
        "type": "Class",
        "tags": [],
        "label": "DuplicateField",
        "description": [
          "\nwhen a mapping already exists for a field the user is attempting to add"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.DuplicateField",
            "text": "DuplicateField"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.DuplicateField.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.DuplicateField.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.HashedItemStore",
        "type": "Class",
        "tags": [],
        "label": "HashedItemStore",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.HashedItemStore",
            "text": "HashedItemStore"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStorage",
            "text": "IStorage"
          },
          "<string, boolean>"
        ],
        "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.HashedItemStore.PERSISTED_INDEX_KEY",
            "type": "string",
            "tags": [],
            "label": "PERSISTED_INDEX_KEY",
            "description": [],
            "signature": [
              "\"kbn.hashedItemsIndex.v1\""
            ],
            "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.HashedItemStore.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [
              "\nHashedItemStore uses objects called indexed items to refer to items that have been persisted\nin storage. An indexed item is shaped {hash, touched}. The touched date is when the item\nwas last referenced by the browser history."
            ],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.HashedItemStore.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "storage",
                "description": [],
                "signature": [
                  "Storage"
                ],
                "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.HashedItemStore.setItem",
            "type": "Function",
            "tags": [],
            "label": "setItem",
            "description": [],
            "signature": [
              "(hash: string, item: string) => boolean"
            ],
            "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.HashedItemStore.setItem.$1",
                "type": "string",
                "tags": [],
                "label": "hash",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.HashedItemStore.setItem.$2",
                "type": "string",
                "tags": [],
                "label": "item",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.HashedItemStore.getItem",
            "type": "Function",
            "tags": [],
            "label": "getItem",
            "description": [],
            "signature": [
              "(hash: string) => string | null"
            ],
            "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.HashedItemStore.getItem.$1",
                "type": "string",
                "tags": [],
                "label": "hash",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.HashedItemStore.removeItem",
            "type": "Function",
            "tags": [],
            "label": "removeItem",
            "description": [],
            "signature": [
              "(hash: string) => string | null"
            ],
            "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.HashedItemStore.removeItem.$1",
                "type": "string",
                "tags": [],
                "label": "hash",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.HashedItemStore.clear",
            "type": "Function",
            "tags": [],
            "label": "clear",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/hashed_item_store.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.InvalidJSONProperty",
        "type": "Class",
        "tags": [],
        "label": "InvalidJSONProperty",
        "description": [
          "\nThis error is for scenarios where a saved object is detected that has invalid JSON properties.\nThere was a scenario where we were importing objects with double-encoded JSON, and the system\nwas silently failing. This error is now thrown in those scenarios."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.InvalidJSONProperty",
            "text": "InvalidJSONProperty"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.InvalidJSONProperty.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.InvalidJSONProperty.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.KbnError",
        "type": "Class",
        "tags": [],
        "label": "KbnError",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          },
          " extends Error"
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.KbnError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.KbnError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.RenderCompleteDispatcher",
        "type": "Class",
        "tags": [],
        "label": "RenderCompleteDispatcher",
        "description": [
          "\nShould call `dispatchComplete()` when UI block has finished loading its data and has\ncompletely rendered. Should `dispatchInProgress()` every time UI block\nstarts loading data again. At the start it is assumed that UI block is loading\nso it dispatches \"in progress\" automatically, so you need to call `setRenderComplete`\nat least once.\n\nThis is used for reporting to know that UI block is ready, so\nit can take a screenshot. It is also used in functional tests to know that\npage has stabilized."
        ],
        "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteDispatcher.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.RenderCompleteDispatcher.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "el",
                "description": [],
                "signature": [
                  "HTMLElement | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteDispatcher.setEl",
            "type": "Function",
            "tags": [],
            "label": "setEl",
            "description": [],
            "signature": [
              "(el?: HTMLElement | undefined) => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.RenderCompleteDispatcher.setEl.$1",
                "type": "Object",
                "tags": [],
                "label": "el",
                "description": [],
                "signature": [
                  "HTMLElement | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteDispatcher.dispatchInProgress",
            "type": "Function",
            "tags": [],
            "label": "dispatchInProgress",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteDispatcher.dispatchComplete",
            "type": "Function",
            "tags": [],
            "label": "dispatchComplete",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteDispatcher.dispatchError",
            "type": "Function",
            "tags": [],
            "label": "dispatchError",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteDispatcher.setTitle",
            "type": "Function",
            "tags": [],
            "label": "setTitle",
            "description": [],
            "signature": [
              "(title: string) => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.RenderCompleteDispatcher.setTitle.$1",
                "type": "string",
                "tags": [],
                "label": "title",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.RenderCompleteListener",
        "type": "Class",
        "tags": [],
        "label": "RenderCompleteListener",
        "description": [],
        "path": "src/plugins/kibana_utils/public/render_complete/render_complete_listener.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteListener.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_listener.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.RenderCompleteListener.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "element",
                "description": [],
                "signature": [
                  "HTMLElement"
                ],
                "path": "src/plugins/kibana_utils/public/render_complete/render_complete_listener.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteListener.destroy",
            "type": "Function",
            "tags": [],
            "label": "destroy",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_listener.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteListener.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_listener.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.RenderCompleteListener.disable",
            "type": "Function",
            "tags": [],
            "label": "disable",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_listener.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.ResizeChecker",
        "type": "Class",
        "tags": [],
        "label": "ResizeChecker",
        "description": [
          "\n ResizeChecker receives an element and emits a \"resize\" event every time it changes size."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.ResizeChecker",
            "text": "ResizeChecker"
          },
          " extends EventEmitter"
        ],
        "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ResizeChecker.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ResizeChecker.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "el",
                "description": [],
                "signature": [
                  "HTMLElement"
                ],
                "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ResizeChecker.Unnamed.$2",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.ResizeChecker.Unnamed.$2.disabled",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "disabled",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ResizeChecker.enable",
            "type": "Function",
            "tags": [],
            "label": "enable",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ResizeChecker.modifySizeWithoutTriggeringResize",
            "type": "Function",
            "tags": [],
            "label": "modifySizeWithoutTriggeringResize",
            "description": [
              "\n Run a function and ignore all resizes that occur\n while it's running."
            ],
            "signature": [
              "(block: () => void) => void"
            ],
            "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ResizeChecker.modifySizeWithoutTriggeringResize.$1",
                "type": "Function",
                "tags": [],
                "label": "block",
                "description": [],
                "signature": [
                  "() => void"
                ],
                "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ResizeChecker.destroy",
            "type": "Function",
            "tags": [],
            "label": "destroy",
            "description": [
              "\nTell the ResizeChecker to shutdown, stop listenings, and never\nemit another resize event.\n\nCleans up it's listeners and timers."
            ],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/resize_checker/resize_checker.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.SavedFieldNotFound",
        "type": "Class",
        "tags": [],
        "label": "SavedFieldNotFound",
        "description": [
          "\nA saved field doesn't exist anymore"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedFieldNotFound",
            "text": "SavedFieldNotFound"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.SavedFieldNotFound.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.SavedFieldNotFound.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.SavedFieldTypeInvalidForAgg",
        "type": "Class",
        "tags": [],
        "label": "SavedFieldTypeInvalidForAgg",
        "description": [
          "\nA saved field type isn't compatible with aggregation"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedFieldTypeInvalidForAgg",
            "text": "SavedFieldTypeInvalidForAgg"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.SavedFieldTypeInvalidForAgg.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.SavedFieldTypeInvalidForAgg.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.SavedObjectNotFound",
        "type": "Class",
        "tags": [],
        "label": "SavedObjectNotFound",
        "description": [
          "\nA saved object was not found"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedObjectNotFound",
            "text": "SavedObjectNotFound"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.SavedObjectNotFound.savedObjectType",
            "type": "string",
            "tags": [],
            "label": "savedObjectType",
            "description": [],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.SavedObjectNotFound.savedObjectId",
            "type": "string",
            "tags": [],
            "label": "savedObjectId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.SavedObjectNotFound.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.SavedObjectNotFound.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.SavedObjectNotFound.Unnamed.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.SavedObjectNotFound.Unnamed.$3",
                "type": "string",
                "tags": [],
                "label": "link",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.SavedObjectNotFound.Unnamed.$4",
                "type": "string",
                "tags": [],
                "label": "customMessage",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Storage",
        "type": "Class",
        "tags": [],
        "label": "Storage",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.Storage",
            "text": "Storage"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStorageWrapper",
            "text": "IStorageWrapper"
          },
          "<any, void>"
        ],
        "path": "src/plugins/kibana_utils/public/storage/storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Storage.store",
            "type": "Object",
            "tags": [],
            "label": "store",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "public",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-public.IStorage",
                "text": "IStorage"
              },
              "<any, void>"
            ],
            "path": "src/plugins/kibana_utils/public/storage/storage.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Storage.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/public/storage/storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Storage.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "store",
                "description": [],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "public",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-public.IStorage",
                    "text": "IStorage"
                  },
                  "<any, void>"
                ],
                "path": "src/plugins/kibana_utils/public/storage/storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Storage.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "(key: string) => any"
            ],
            "path": "src/plugins/kibana_utils/public/storage/storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Storage.get.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Storage.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [],
            "signature": [
              "(key: string, value: any) => false | void"
            ],
            "path": "src/plugins/kibana_utils/public/storage/storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Storage.set.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/storage.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Storage.set.$2",
                "type": "Any",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "src/plugins/kibana_utils/public/storage/storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Storage.remove",
            "type": "Function",
            "tags": [],
            "label": "remove",
            "description": [],
            "signature": [
              "(key: string) => any"
            ],
            "path": "src/plugins/kibana_utils/public/storage/storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Storage.remove.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Storage.clear",
            "type": "Function",
            "tags": [],
            "label": "clear",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/storage/storage.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.abortSignalToPromise",
        "type": "Function",
        "tags": [],
        "label": "abortSignalToPromise",
        "description": [
          "\nReturns a `Promise` corresponding with when the given `AbortSignal` is aborted. Useful for\nsituations when you might need to `Promise.race` multiple `AbortSignal`s, or an `AbortSignal`\nwith any other expected errors (or completions).\n"
        ],
        "signature": [
          "(signal: AbortSignal) => { promise: Promise<never>; cleanup: () => void; }"
        ],
        "path": "src/plugins/kibana_utils/common/abort_utils.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.abortSignalToPromise.$1",
            "type": "Object",
            "tags": [],
            "label": "signal",
            "description": [
              "The `AbortSignal` to generate the `Promise` from"
            ],
            "signature": [
              "AbortSignal"
            ],
            "path": "src/plugins/kibana_utils/common/abort_utils.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.applyDiff",
        "type": "Function",
        "tags": [],
        "label": "applyDiff",
        "description": [],
        "signature": [
          "(target: Record<string, any>, source: Record<string, any>) => ",
          "IDiffObject"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/utils/diff_object.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.applyDiff.$1",
            "type": "Object",
            "tags": [],
            "label": "target",
            "description": [],
            "signature": [
              "Record<string, any>"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/utils/diff_object.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.applyDiff.$2",
            "type": "Object",
            "tags": [],
            "label": "source",
            "description": [],
            "signature": [
              "Record<string, any>"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/utils/diff_object.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.calculateObjectHash",
        "type": "Function",
        "tags": [],
        "label": "calculateObjectHash",
        "description": [],
        "signature": [
          "(o: object) => string"
        ],
        "path": "src/plugins/kibana_utils/common/calculate_object_hash.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.calculateObjectHash.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "o",
            "description": [],
            "signature": [
              "object"
            ],
            "path": "src/plugins/kibana_utils/common/calculate_object_hash.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createGetterSetter",
        "type": "Function",
        "tags": [],
        "label": "createGetterSetter",
        "description": [],
        "signature": [
          "<T extends object>(name: string, isValueRequired?: boolean) => [",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Get",
            "text": "Get"
          },
          "<T>, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Set",
            "text": "Set"
          },
          "<T>]"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createGetterSetter.$1",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createGetterSetter.$2",
            "type": "boolean",
            "tags": [],
            "label": "isValueRequired",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createHistoryObservable",
        "type": "Function",
        "tags": [],
        "label": "createHistoryObservable",
        "description": [
          "\nConvert history.listen into an observable"
        ],
        "signature": [
          "(history: ",
          "History",
          "<any>) => ",
          "Observable",
          "<{ location: ",
          "Location",
          "<any>; action: ",
          "Action",
          "; }>"
        ],
        "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createHistoryObservable.$1",
            "type": "Object",
            "tags": [],
            "label": "history",
            "description": [
              "- {@link History} instance"
            ],
            "signature": [
              "History",
              "<any>"
            ],
            "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createKbnUrlControls",
        "type": "Function",
        "tags": [],
        "label": "createKbnUrlControls",
        "description": [],
        "signature": [
          "(history?: ",
          "History",
          "<any>) => ",
          "IKbnUrlControls"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createKbnUrlControls.$1",
            "type": "Object",
            "tags": [],
            "label": "history",
            "description": [],
            "signature": [
              "History",
              "<any>"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createKbnUrlStateStorage",
        "type": "Function",
        "tags": [],
        "label": "createKbnUrlStateStorage",
        "description": [
          "\nCreates {@link IKbnUrlStateStorage} state storage"
        ],
        "signature": [
          "({ useHash, useHashQuery, history, onGetError, onSetError, }?: { useHash: boolean; useHashQuery?: boolean | undefined; history?: ",
          "History",
          "<any> | undefined; onGetError?: ((error: Error) => void) | undefined; onSetError?: ((error: Error) => void) | undefined; }) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IKbnUrlStateStorage",
            "text": "IKbnUrlStateStorage"
          }
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createKbnUrlStateStorage.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n    useHash = false,\n    useHashQuery = true,\n    history,\n    onGetError,\n    onSetError,\n  }",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlStateStorage.$1.useHash",
                "type": "boolean",
                "tags": [],
                "label": "useHash",
                "description": [],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlStateStorage.$1.useHashQuery",
                "type": "CompoundType",
                "tags": [],
                "label": "useHashQuery",
                "description": [],
                "signature": [
                  "boolean | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlStateStorage.$1.history",
                "type": "Object",
                "tags": [],
                "label": "history",
                "description": [],
                "signature": [
                  "History",
                  "<any> | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlStateStorage.$1.onGetError",
                "type": "Function",
                "tags": [],
                "label": "onGetError",
                "description": [],
                "signature": [
                  "((error: Error) => void) | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.createKbnUrlStateStorage.$1.onGetError.$1",
                    "type": "Object",
                    "tags": [],
                    "label": "error",
                    "description": [],
                    "signature": [
                      "Error"
                    ],
                    "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                    "deprecated": false,
                    "isRequired": true
                  }
                ],
                "returnComment": []
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlStateStorage.$1.onSetError",
                "type": "Function",
                "tags": [],
                "label": "onSetError",
                "description": [],
                "signature": [
                  "((error: Error) => void) | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.createKbnUrlStateStorage.$1.onSetError.$1",
                    "type": "Object",
                    "tags": [],
                    "label": "error",
                    "description": [],
                    "signature": [
                      "Error"
                    ],
                    "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                    "deprecated": false,
                    "isRequired": true
                  }
                ],
                "returnComment": []
              }
            ]
          }
        ],
        "returnComment": [
          "- {@link IKbnUrlStateStorage}"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createKbnUrlTracker",
        "type": "Function",
        "tags": [],
        "label": "createKbnUrlTracker",
        "description": [
          "\nListens to history changes and optionally to global state changes and updates the nav link url of\na given app to point to the last visited page within the app.\n\nThis includes the following parts:\n* When the app is currently active, the nav link points to the configurable default url of the app.\n* When the app is not active the last visited url is set to the nav link.\n* When a provided observable emits a new value, the state parameter in the url of the nav link is updated\nas long as the app is not active."
        ],
        "signature": [
          "({\n  baseUrl,\n  defaultSubUrl,\n  storageKey,\n  stateParams,\n  navLinkUpdater$,\n  toastNotifications,\n  history,\n  getHistory,\n  storage,\n  shouldTrackUrlUpdate = () => {\n    return true;\n  },\n  onBeforeNavLinkSaved = (newNavLink) => newNavLink,\n}: { baseUrl: string; defaultSubUrl: string; stateParams: { kbnUrlKey: string; stateUpdate$: ",
          "Observable",
          "<unknown>; }[]; storageKey: string; navLinkUpdater$: ",
          "BehaviorSubject",
          "<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreApplicationPluginApi",
            "section": "def-public.AppUpdater",
            "text": "AppUpdater"
          },
          ">; toastNotifications: Pick<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastsApi",
            "text": "ToastsApi"
          },
          ", \"add\" | \"get$\" | \"remove\" | \"addSuccess\" | \"addWarning\" | \"addDanger\" | \"addError\" | \"addInfo\">; history?: ",
          "History",
          "<any> | undefined; getHistory?: (() => ",
          "History",
          "<any>) | undefined; storage?: Storage | undefined; shouldTrackUrlUpdate?: ((pathname: string) => boolean) | undefined; onBeforeNavLinkSaved?: ((newNavLink: string) => string) | undefined; }) => ",
          "KbnUrlTracker"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createKbnUrlTracker.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  baseUrl,\n  defaultSubUrl,\n  storageKey,\n  stateParams,\n  navLinkUpdater$,\n  toastNotifications,\n  history,\n  getHistory,\n  storage,\n  shouldTrackUrlUpdate = () => {\n    return true;\n  },\n  onBeforeNavLinkSaved = (newNavLink) => newNavLink,\n}",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.baseUrl",
                "type": "string",
                "tags": [],
                "label": "baseUrl",
                "description": [
                  "\nBase url of the current app. This will be used as a prefix for the\nnav link in the side bar"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.defaultSubUrl",
                "type": "string",
                "tags": [],
                "label": "defaultSubUrl",
                "description": [
                  "\nDefault sub url for this app. If the app is currently active or no sub url is already stored in session storage and the app hasn't been visited yet, the nav link will be set to this url."
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.stateParams",
                "type": "Array",
                "tags": [],
                "label": "stateParams",
                "description": [
                  "\nList of URL mapped states that should get updated even when the app is not currently active"
                ],
                "signature": [
                  "{ kbnUrlKey: string; stateUpdate$: ",
                  "Observable",
                  "<unknown>; }[]"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.storageKey",
                "type": "string",
                "tags": [],
                "label": "storageKey",
                "description": [
                  "\nKey used to store the current sub url in session storage. This key should only be used for one active url tracker at any given time."
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.navLinkUpdater$",
                "type": "Object",
                "tags": [],
                "label": "navLinkUpdater$",
                "description": [
                  "\nApp updater subject passed into the application definition to change nav link url."
                ],
                "signature": [
                  "BehaviorSubject",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreApplicationPluginApi",
                    "section": "def-public.AppUpdater",
                    "text": "AppUpdater"
                  },
                  ">"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.toastNotifications",
                "type": "Object",
                "tags": [],
                "label": "toastNotifications",
                "description": [
                  "\nToast notifications service to show toasts in error cases."
                ],
                "signature": [
                  "{ add: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ") => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; get$: () => ",
                  "Observable",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "[]>; remove: (toastOrId: string | ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  ") => void; addSuccess: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addWarning: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addDanger: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addError: (error: Error, options: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ErrorToastOptions",
                    "text": "ErrorToastOptions"
                  },
                  ") => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addInfo: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; }"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.history",
                "type": "Object",
                "tags": [],
                "label": "history",
                "description": [
                  "\nHistory object to use to track url changes. If this isn't provided, a local history instance will be created."
                ],
                "signature": [
                  "History",
                  "<any> | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.getHistory",
                "type": "Function",
                "tags": [],
                "label": "getHistory",
                "description": [
                  "\nLazily retrieve history instance"
                ],
                "signature": [
                  "(() => ",
                  "History",
                  "<any>) | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false,
                "children": [],
                "returnComment": []
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.storage",
                "type": "Object",
                "tags": [],
                "label": "storage",
                "description": [
                  "\nStorage object to use to persist currently active url. If this isn't provided, the browser wide session storage instance will be used."
                ],
                "signature": [
                  "Storage | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.shouldTrackUrlUpdate",
                "type": "Function",
                "tags": [],
                "label": "shouldTrackUrlUpdate",
                "description": [
                  "\nChecks if pathname belongs to current app. It's used in history listener to define whether it's necessary to set pathname as active url or not.\nThe default implementation compares the app name to the first part of pathname. Consumers can override this function for more complex cases.\n"
                ],
                "signature": [
                  "((pathname: string) => boolean) | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.createKbnUrlTracker.$1.shouldTrackUrlUpdate.$1",
                    "type": "string",
                    "tags": [],
                    "label": "pathname",
                    "description": [
                      "A location's pathname which comes to history listener"
                    ],
                    "signature": [
                      "string"
                    ],
                    "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                    "deprecated": false,
                    "isRequired": true
                  }
                ],
                "returnComment": []
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.createKbnUrlTracker.$1.onBeforeNavLinkSaved",
                "type": "Function",
                "tags": [],
                "label": "onBeforeNavLinkSaved",
                "description": [
                  "\nCalled when current subpath is about to be saved to sessionStorage for subsequent use as a nav link.\nUse to mutate app's subpath before it is saved by returning a new subpath."
                ],
                "signature": [
                  "((newNavLink: string) => string) | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.createKbnUrlTracker.$1.onBeforeNavLinkSaved.$1",
                    "type": "string",
                    "tags": [],
                    "label": "newNavLink",
                    "description": [],
                    "signature": [
                      "string"
                    ],
                    "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_tracker.ts",
                    "deprecated": false,
                    "isRequired": true
                  }
                ],
                "returnComment": []
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createQueryParamObservable",
        "type": "Function",
        "tags": [],
        "label": "createQueryParamObservable",
        "description": [
          "\nCreate an observable that emits every time _paramKey_ changes"
        ],
        "signature": [
          "(history: ",
          "History",
          "<any>, paramKey: string) => ",
          "Observable",
          "<Param | null>"
        ],
        "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createQueryParamObservable.$1",
            "type": "Object",
            "tags": [],
            "label": "history",
            "description": [
              "- {@link History} instance"
            ],
            "signature": [
              "History",
              "<any>"
            ],
            "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createQueryParamObservable.$2",
            "type": "string",
            "tags": [],
            "label": "paramKey",
            "description": [
              "- query param key to observe"
            ],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createQueryParamsObservable",
        "type": "Function",
        "tags": [],
        "label": "createQueryParamsObservable",
        "description": [
          "\nCreate an observable that emits every time any of query params change.\nUses deepEqual check."
        ],
        "signature": [
          "(history: ",
          "History",
          "<any>) => ",
          "Observable",
          "<",
          "ParsedQuery",
          "<string>>"
        ],
        "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createQueryParamsObservable.$1",
            "type": "Object",
            "tags": [],
            "label": "history",
            "description": [
              "- {@link History} instance"
            ],
            "signature": [
              "History",
              "<any>"
            ],
            "path": "src/plugins/kibana_utils/public/history/history_observable.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createSessionStorageStateStorage",
        "type": "Function",
        "tags": [],
        "label": "createSessionStorageStateStorage",
        "description": [
          "\nCreates {@link ISessionStorageStateStorage}\n{@link https://github.com/elastic/kibana/blob/main/src/plugins/kibana_utils/docs/state_sync/storages/session_storage.md | guide}"
        ],
        "signature": [
          "(storage?: Storage) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.ISessionStorageStateStorage",
            "text": "ISessionStorageStateStorage"
          }
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createSessionStorageStateStorage.$1",
            "type": "Object",
            "tags": [],
            "label": "storage",
            "description": [
              "- Option {@link Storage} to use for storing state. By default window.sessionStorage."
            ],
            "signature": [
              "Storage"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "- {@link ISessionStorageStateStorage}"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createStartServicesGetter",
        "type": "Function",
        "tags": [],
        "label": "createStartServicesGetter",
        "description": [
          "\nUse this utility to create a synchronous *start* service getter in *setup*\nlife-cycle of your plugin.\n\nBelow is a usage example in a Kibana plugin.\n\n```ts\nexport interface MyPluginStartDeps {\n  data: DataPublicPluginStart;\n  expressions: ExpressionsStart;\n  inspector: InspectorStart;\n  uiActions: UiActionsStart;\n}\n\nclass MyPlugin implements Plugin {\n  setup(core: CoreSetup<MyPluginStartDeps>, plugins) {\n    const start = createStartServicesGetter(core.getStartServices);\n    plugins.expressions.registerFunction(myExpressionFunction(start));\n  }\n\n  start(core, plugins: MyPluginStartDeps) {\n\n  }\n}\n```\n\nIn `myExpressionFunction` you can make sure you are picking only the dependencies\nyour function needs using the `Pick` type.\n\n```ts\nconst myExpressionFunction =\n  (start: StartServicesGetter<Pick<MyPluginStartDeps, 'data'>>) => {\n\n  start().plugins.indexPatterns.something(123);\n}\n```\n"
        ],
        "signature": [
          "<TPluginsStart extends object, TStart>(accessor: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.StartServicesAccessor",
            "text": "StartServicesAccessor"
          },
          "<TPluginsStart, TStart>) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.StartServicesGetter",
            "text": "StartServicesGetter"
          },
          "<TPluginsStart, TStart, ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.CoreStart",
            "text": "CoreStart"
          },
          ">"
        ],
        "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStartServicesGetter.$1",
            "type": "Function",
            "tags": [],
            "label": "accessor",
            "description": [
              "Asynchronous start service accessor provided by platform."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.StartServicesAccessor",
                "text": "StartServicesAccessor"
              },
              "<TPluginsStart, TStart>"
            ],
            "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "Returns a function which synchronously returns *start* core services\nand plugin contracts. If you call this function before the *start* life-cycle\nhas started it will throw."
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createStateContainer",
        "type": "Function",
        "tags": [],
        "label": "createStateContainer",
        "description": [
          "\nCreates a state container without transitions and without selectors."
        ],
        "signature": [
          "(defaultState: State) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, {}, {}>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "defaultState",
            "description": [
              "- initial state"
            ],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createStateContainer",
        "type": "Function",
        "tags": [],
        "label": "createStateContainer",
        "description": [
          "\nCreates a state container with transitions, but without selectors."
        ],
        "signature": [
          "(defaultState: State, pureTransitions: PureTransitions) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, PureTransitions, {}>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "defaultState",
            "description": [
              "- initial state"
            ],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "pureTransitions",
            "description": [
              "- state transitions configuration object. Map of {@link PureTransition}."
            ],
            "signature": [
              "PureTransitions"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createStateContainer",
        "type": "Function",
        "tags": [],
        "label": "createStateContainer",
        "description": [
          "\nCreates a state container with transitions and selectors."
        ],
        "signature": [
          "(defaultState: State, pureTransitions: PureTransitions, pureSelectors: PureSelectors, options: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.CreateStateContainerOptions",
            "text": "CreateStateContainerOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, PureTransitions, PureSelectors>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "defaultState",
            "description": [
              "- initial state"
            ],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "pureTransitions",
            "description": [
              "- state transitions configuration object. Map of {@link PureTransition}."
            ],
            "signature": [
              "PureTransitions"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$3",
            "type": "Uncategorized",
            "tags": [],
            "label": "pureSelectors",
            "description": [
              "- state selectors configuration object. Map of {@link PureSelectors}."
            ],
            "signature": [
              "PureSelectors"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateContainer.$4",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [
              "- state container options {@link CreateStateContainerOptions}"
            ],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.CreateStateContainerOptions",
                "text": "CreateStateContainerOptions"
              },
              " | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createStateContainerReactHelpers",
        "type": "Function",
        "tags": [],
        "label": "createStateContainerReactHelpers",
        "description": [
          "\nCreates helpers for using {@link StateContainer | State Containers} with react\nRefer to {@link https://github.com/elastic/kibana/blob/main/src/plugins/kibana_utils/docs/state_containers/react.md | guide} for details"
        ],
        "signature": [
          "<Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<any, any, {}>>() => { Provider: React.Provider<Container>; Consumer: React.Consumer<Container>; context: React.Context<Container>; useContainer: () => Container; useState: () => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>; useTransitions: () => Container[\"transitions\"]; useSelector: <Result>(selector: (state: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>) => Result, comparator?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Comparator",
            "text": "Comparator"
          },
          "<Result>) => Result; connect: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Connect",
            "text": "Connect"
          },
          "<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>>; }"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
        "deprecated": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createStateHash",
        "type": "Function",
        "tags": [],
        "label": "createStateHash",
        "description": [],
        "signature": [
          "(json: string, existingJsonProvider: ((hash: string) => string | null) | undefined) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateHash.$1",
            "type": "string",
            "tags": [],
            "label": "json",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createStateHash.$2",
            "type": "Function",
            "tags": [],
            "label": "existingJsonProvider",
            "description": [],
            "signature": [
              "((hash: string) => string | null) | undefined"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.createUrlTracker",
        "type": "Function",
        "tags": [],
        "label": "createUrlTracker",
        "description": [
          "\nReplicates what src/legacy/ui/public/chrome/api/nav.ts did\nPersists the url in sessionStorage so it could be restored if navigated back to the app"
        ],
        "signature": [
          "(key: string, storage: Storage) => ",
          "IUrlTracker"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/url_tracker.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createUrlTracker.$1",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/url_tracker.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.createUrlTracker.$2",
            "type": "Object",
            "tags": [],
            "label": "storage",
            "description": [],
            "signature": [
              "Storage"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/url_tracker.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.defer",
        "type": "Function",
        "tags": [],
        "label": "defer",
        "description": [],
        "signature": [
          "<T>() => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Defer",
            "text": "Defer"
          },
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/defer.ts",
        "deprecated": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.dispatchRenderComplete",
        "type": "Function",
        "tags": [],
        "label": "dispatchRenderComplete",
        "description": [],
        "signature": [
          "(el: HTMLElement) => void"
        ],
        "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.dispatchRenderComplete.$1",
            "type": "Object",
            "tags": [],
            "label": "el",
            "description": [],
            "signature": [
              "HTMLElement"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.dispatchRenderStart",
        "type": "Function",
        "tags": [],
        "label": "dispatchRenderStart",
        "description": [],
        "signature": [
          "(el: HTMLElement) => void"
        ],
        "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.dispatchRenderStart.$1",
            "type": "Object",
            "tags": [],
            "label": "el",
            "description": [],
            "signature": [
              "HTMLElement"
            ],
            "path": "src/plugins/kibana_utils/public/render_complete/render_complete_dispatcher.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.fieldWildcardFilter",
        "type": "Function",
        "tags": [],
        "label": "fieldWildcardFilter",
        "description": [],
        "signature": [
          "(globs: string[], metaFields: string[]) => (val: unknown) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.fieldWildcardFilter.$1",
            "type": "Array",
            "tags": [],
            "label": "globs",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.fieldWildcardFilter.$2",
            "type": "Array",
            "tags": [],
            "label": "metaFields",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.fieldWildcardMatcher",
        "type": "Function",
        "tags": [],
        "label": "fieldWildcardMatcher",
        "description": [],
        "signature": [
          "(globs: string[], metaFields: unknown[]) => (val: unknown) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.fieldWildcardMatcher.$1",
            "type": "Array",
            "tags": [],
            "label": "globs",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.fieldWildcardMatcher.$2",
            "type": "Array",
            "tags": [],
            "label": "metaFields",
            "description": [],
            "signature": [
              "unknown[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.getQueryParams",
        "type": "Function",
        "tags": [],
        "label": "getQueryParams",
        "description": [],
        "signature": [
          "(location: ",
          "Location",
          "<any>) => ",
          "ParsedQuery",
          "<string>"
        ],
        "path": "src/plugins/kibana_utils/public/history/get_query_params.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getQueryParams.$1",
            "type": "Object",
            "tags": [],
            "label": "location",
            "description": [],
            "signature": [
              "Location",
              "<any>"
            ],
            "path": "src/plugins/kibana_utils/public/history/get_query_params.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.getStateFromKbnUrl",
        "type": "Function",
        "tags": [],
        "label": "getStateFromKbnUrl",
        "description": [
          "\nRetrieves specific state from url by key\ne.g.:\n\ngiven an url:\nhttp://localhost:5601/oxf/app/kibana#/yourApp?_a=(tab:indexedFields)&_b=(f:test,i:'',l:'')\nand key '_a'\nwill return object:\n{tab: 'indexedFields'}\n\n\nBy default due to Kibana legacy reasons assumed that state is stored in a query inside a hash part of the URL:\nhttp://localhost:5601/oxf/app/kibana#/yourApp?_a={STATE}\n\n{ getFromHashQuery: false } option should be used in case state is stored in a main query (not in a hash):\nhttp://localhost:5601/oxf/app/kibana?_a={STATE}#/yourApp"
        ],
        "signature": [
          "(key: string, url: string, { getFromHashQuery = true }: { getFromHashQuery: boolean; }) => State | null"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getStateFromKbnUrl.$1",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getStateFromKbnUrl.$2",
            "type": "string",
            "tags": [],
            "label": "url",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getStateFromKbnUrl.$3",
            "type": "Object",
            "tags": [],
            "label": "{ getFromHashQuery = true }",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.getStateFromKbnUrl.$3.getFromHashQuery",
                "type": "boolean",
                "tags": [],
                "label": "getFromHashQuery",
                "description": [],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.getStatesFromKbnUrl",
        "type": "Function",
        "tags": [],
        "label": "getStatesFromKbnUrl",
        "description": [
          "\nParses a kibana url and retrieves all the states encoded into the URL,\nHandles both expanded rison state and hashed state (where the actual state stored in sessionStorage)\ne.g.:\n\ngiven an url:\nhttp://localhost:5601/oxf/app/kibana#/yourApp?_a=(tab:indexedFields)&_b=(f:test,i:'',l:'')\nwill return object:\n{_a: {tab: 'indexedFields'}, _b: {f: 'test', i: '', l: ''}};\n\n\nBy default due to Kibana legacy reasons assumed that state is stored in a query inside a hash part of the URL:\nhttp://localhost:5601/oxf/app/kibana#/yourApp?_a={STATE}\n\n{ getFromHashQuery: false } option should be used in case state is stored in a main query (not in a hash):\nhttp://localhost:5601/oxf/app/kibana?_a={STATE}#/yourApp\n"
        ],
        "signature": [
          "(url: string, keys: (keyof State)[] | undefined, { getFromHashQuery = true }: { getFromHashQuery: boolean; }) => State"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getStatesFromKbnUrl.$1",
            "type": "string",
            "tags": [],
            "label": "url",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getStatesFromKbnUrl.$2",
            "type": "Array",
            "tags": [],
            "label": "keys",
            "description": [],
            "signature": [
              "(keyof State)[] | undefined"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.getStatesFromKbnUrl.$3",
            "type": "Object",
            "tags": [],
            "label": "{ getFromHashQuery = true }",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.getStatesFromKbnUrl.$3.getFromHashQuery",
                "type": "boolean",
                "tags": [],
                "label": "getFromHashQuery",
                "description": [],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.hashQuery",
        "type": "Function",
        "tags": [],
        "label": "hashQuery",
        "description": [],
        "signature": [
          "(query: Record<string, any>, options?: IUrlQueryMapperOptions) => { [k: string]: any; }"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.hashQuery.$1",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "{ [x: string]: any; }"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.hashQuery.$2",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "IUrlQueryMapperOptions"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.hashUrl",
        "type": "Function",
        "tags": [],
        "label": "hashUrl",
        "description": [],
        "signature": [
          "(url: string) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.hashUrl.$1",
            "type": "string",
            "tags": [],
            "label": "url",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.isStateHash",
        "type": "Function",
        "tags": [],
        "label": "isStateHash",
        "description": [],
        "signature": [
          "(str: string) => boolean"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.isStateHash.$1",
            "type": "string",
            "tags": [],
            "label": "str",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.of",
        "type": "Function",
        "tags": [],
        "label": "of",
        "description": [
          "\nGiven a promise awaits it and returns a 3-tuple, with the following members:\n\n- First entry is either the resolved value of the promise or `undefined`.\n- Second entry is either the error thrown by promise or `undefined`.\n- Third entry is a boolean, truthy if promise was resolved and falsy if rejected.\n"
        ],
        "signature": [
          "<T, E = any>(promise: Promise<T>) => Promise<[T | undefined, E | undefined, boolean]>"
        ],
        "path": "src/plugins/kibana_utils/common/of.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.of.$1",
            "type": "Object",
            "tags": [],
            "label": "promise",
            "description": [
              "Promise to convert to 3-tuple."
            ],
            "signature": [
              "Promise<T>"
            ],
            "path": "src/plugins/kibana_utils/common/of.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.persistState",
        "type": "Function",
        "tags": [],
        "label": "persistState",
        "description": [],
        "signature": [
          "(state: State) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.persistState.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.redirectWhenMissing",
        "type": "Function",
        "tags": [],
        "label": "redirectWhenMissing",
        "description": [
          "\nCreates an error handler that will redirect to a url when a SavedObjectNotFound\nerror is thrown"
        ],
        "signature": [
          "({\n  history,\n  navigateToApp,\n  basePath,\n  mapping,\n  toastNotifications,\n  onBeforeRedirect,\n}: { history: ",
          "History",
          "<any>; navigateToApp: (appId: string, options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreApplicationPluginApi",
            "section": "def-public.NavigateToAppOptions",
            "text": "NavigateToAppOptions"
          },
          " | undefined) => Promise<void>; basePath: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.IBasePath",
            "text": "IBasePath"
          },
          "; mapping: string | Mapping; toastNotifications: Pick<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastsApi",
            "text": "ToastsApi"
          },
          ", \"add\" | \"get$\" | \"remove\" | \"addSuccess\" | \"addWarning\" | \"addDanger\" | \"addError\" | \"addInfo\">; onBeforeRedirect?: ((error: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedObjectNotFound",
            "text": "SavedObjectNotFound"
          },
          ") => void) | undefined; }) => (error: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedObjectNotFound",
            "text": "SavedObjectNotFound"
          },
          ") => void"
        ],
        "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.redirectWhenMissing.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  history,\n  navigateToApp,\n  basePath,\n  mapping,\n  toastNotifications,\n  onBeforeRedirect,\n}",
            "description": [],
            "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.redirectWhenMissing.$1.history",
                "type": "Object",
                "tags": [],
                "label": "history",
                "description": [],
                "signature": [
                  "History",
                  "<any>"
                ],
                "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.redirectWhenMissing.$1.navigateToApp",
                "type": "Function",
                "tags": [],
                "label": "navigateToApp",
                "description": [],
                "signature": [
                  "(appId: string, options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreApplicationPluginApi",
                    "section": "def-public.NavigateToAppOptions",
                    "text": "NavigateToAppOptions"
                  },
                  " | undefined) => Promise<void>"
                ],
                "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                "deprecated": false,
                "returnComment": [],
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.redirectWhenMissing.$1.navigateToApp.$1",
                    "type": "string",
                    "tags": [],
                    "label": "appId",
                    "description": [],
                    "path": "src/core/public/application/types.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.redirectWhenMissing.$1.navigateToApp.$2",
                    "type": "Object",
                    "tags": [],
                    "label": "options",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "core",
                        "scope": "public",
                        "docId": "kibCoreApplicationPluginApi",
                        "section": "def-public.NavigateToAppOptions",
                        "text": "NavigateToAppOptions"
                      },
                      " | undefined"
                    ],
                    "path": "src/core/public/application/types.ts",
                    "deprecated": false
                  }
                ]
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.redirectWhenMissing.$1.basePath",
                "type": "Object",
                "tags": [],
                "label": "basePath",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.IBasePath",
                    "text": "IBasePath"
                  }
                ],
                "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.redirectWhenMissing.$1.mapping",
                "type": "CompoundType",
                "tags": [],
                "label": "mapping",
                "description": [
                  "\na mapping of url's to redirect to based on the saved object that\ncouldn't be found, or just a string that will be used for all types"
                ],
                "signature": [
                  "string | Mapping"
                ],
                "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.redirectWhenMissing.$1.toastNotifications",
                "type": "Object",
                "tags": [],
                "label": "toastNotifications",
                "description": [
                  "\nToast notifications service to show toasts in error cases."
                ],
                "signature": [
                  "{ add: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ") => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; get$: () => ",
                  "Observable",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "[]>; remove: (toastOrId: string | ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  ") => void; addSuccess: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addWarning: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addDanger: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addError: (error: Error, options: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ErrorToastOptions",
                    "text": "ErrorToastOptions"
                  },
                  ") => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; addInfo: (toastOrTitle: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  },
                  ", options?: ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  },
                  "; }"
                ],
                "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.redirectWhenMissing.$1.onBeforeRedirect",
                "type": "Function",
                "tags": [],
                "label": "onBeforeRedirect",
                "description": [
                  "\nOptional callback invoked directly before a redirect is triggered"
                ],
                "signature": [
                  "((error: ",
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SavedObjectNotFound",
                    "text": "SavedObjectNotFound"
                  },
                  ") => void) | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.redirectWhenMissing.$1.onBeforeRedirect.$1",
                    "type": "Object",
                    "tags": [],
                    "label": "error",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "kibanaUtils",
                        "scope": "common",
                        "docId": "kibKibanaUtilsPluginApi",
                        "section": "def-common.SavedObjectNotFound",
                        "text": "SavedObjectNotFound"
                      }
                    ],
                    "path": "src/plugins/kibana_utils/public/history/redirect_when_missing.tsx",
                    "deprecated": false,
                    "isRequired": true
                  }
                ],
                "returnComment": []
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.removeQueryParam",
        "type": "Function",
        "tags": [],
        "label": "removeQueryParam",
        "description": [],
        "signature": [
          "(history: ",
          "History",
          "<any>, param: string, replace: boolean) => void"
        ],
        "path": "src/plugins/kibana_utils/public/history/remove_query_param.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.removeQueryParam.$1",
            "type": "Object",
            "tags": [],
            "label": "history",
            "description": [],
            "signature": [
              "History",
              "<any>"
            ],
            "path": "src/plugins/kibana_utils/public/history/remove_query_param.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.removeQueryParam.$2",
            "type": "string",
            "tags": [],
            "label": "param",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/history/remove_query_param.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.removeQueryParam.$3",
            "type": "boolean",
            "tags": [],
            "label": "replace",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/plugins/kibana_utils/public/history/remove_query_param.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.replaceUrlHashQuery",
        "type": "Function",
        "tags": [],
        "label": "replaceUrlHashQuery",
        "description": [],
        "signature": [
          "(rawUrl: string, queryReplacer: (query: ",
          "ParsedQuery",
          "<string>) => ",
          "ParsedQuery",
          "<string>) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/format.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.replaceUrlHashQuery.$1",
            "type": "string",
            "tags": [],
            "label": "rawUrl",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/format.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.replaceUrlHashQuery.$2",
            "type": "Function",
            "tags": [],
            "label": "queryReplacer",
            "description": [],
            "signature": [
              "(query: ",
              "ParsedQuery",
              "<string>) => ",
              "ParsedQuery",
              "<string>"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/format.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.replaceUrlQuery",
        "type": "Function",
        "tags": [],
        "label": "replaceUrlQuery",
        "description": [],
        "signature": [
          "(rawUrl: string, queryReplacer: (query: ",
          "ParsedQuery",
          "<string>) => ",
          "ParsedQuery",
          "<string>) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/format.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.replaceUrlQuery.$1",
            "type": "string",
            "tags": [],
            "label": "rawUrl",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/format.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.replaceUrlQuery.$2",
            "type": "Function",
            "tags": [],
            "label": "queryReplacer",
            "description": [],
            "signature": [
              "(query: ",
              "ParsedQuery",
              "<string>) => ",
              "ParsedQuery",
              "<string>"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/format.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.retrieveState",
        "type": "Function",
        "tags": [],
        "label": "retrieveState",
        "description": [],
        "signature": [
          "(stateHash: string) => State"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.retrieveState.$1",
            "type": "string",
            "tags": [],
            "label": "stateHash",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/state_hash/state_hash.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.setStateToKbnUrl",
        "type": "Function",
        "tags": [],
        "label": "setStateToKbnUrl",
        "description": [
          "\nSets state to the url by key and returns a new url string.\nDoesn't actually updates history\n\ne.g.:\ngiven a url: http://localhost:5601/oxf/app/kibana#/yourApp?_a=(tab:indexedFields)&_b=(f:test,i:'',l:'')\nkey: '_a'\nand state: {tab: 'other'}\n\nwill return url:\nhttp://localhost:5601/oxf/app/kibana#/yourApp?_a=(tab:other)&_b=(f:test,i:'',l:'')\n\nBy default due to Kibana legacy reasons assumed that state is stored in a query inside a hash part of the URL:\nhttp://localhost:5601/oxf/app/kibana#/yourApp?_a={STATE}\n\n{ storeInHashQuery: false } option should be used in you want to store you state in a main query (not in a hash):\nhttp://localhost:5601/oxf/app/kibana?_a={STATE}#/yourApp"
        ],
        "signature": [
          "(key: string, state: State, { useHash = false, storeInHashQuery = true }: { useHash: boolean; storeInHashQuery?: boolean | undefined; }, rawUrl: string) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.setStateToKbnUrl.$1",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.setStateToKbnUrl.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.setStateToKbnUrl.$3",
            "type": "Object",
            "tags": [],
            "label": "{ useHash = false, storeInHashQuery = true }",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.setStateToKbnUrl.$3.useHash",
                "type": "boolean",
                "tags": [],
                "label": "useHash",
                "description": [],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.setStateToKbnUrl.$3.storeInHashQuery",
                "type": "CompoundType",
                "tags": [],
                "label": "storeInHashQuery",
                "description": [],
                "signature": [
                  "boolean | undefined"
                ],
                "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.setStateToKbnUrl.$4",
            "type": "string",
            "tags": [],
            "label": "rawUrl",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/kbn_url_storage.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.syncState",
        "type": "Function",
        "tags": [],
        "label": "syncState",
        "description": [
          "\nUtility for syncing application state wrapped in state container\nwith some kind of storage (e.g. URL)\n\nGo {@link https://github.com/elastic/kibana/tree/main/src/plugins/kibana_utils/docs/state_sync | here} for a complete guide and examples.\n"
        ],
        "signature": [
          "({\n  storageKey,\n  stateStorage,\n  stateContainer,\n}: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStateSyncConfig",
            "text": "IStateSyncConfig"
          },
          "<State, ",
          "IStateStorage",
          ">) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.ISyncStateRef",
            "text": "ISyncStateRef"
          },
          "<",
          "IStateStorage",
          ">"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.syncState.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  storageKey,\n  stateStorage,\n  stateContainer,\n}",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "public",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-public.IStateSyncConfig",
                "text": "IStateSyncConfig"
              },
              "<State, ",
              "IStateStorage",
              ">"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "- {@link ISyncStateRef}"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.syncStates",
        "type": "Function",
        "tags": [],
        "label": "syncStates",
        "description": [],
        "signature": [
          "(stateSyncConfigs: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStateSyncConfig",
            "text": "IStateSyncConfig"
          },
          "<any, ",
          "IStateStorage",
          ">[]) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.ISyncStateRef",
            "text": "ISyncStateRef"
          },
          "<",
          "IStateStorage",
          ">"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.syncStates.$1",
            "type": "Array",
            "tags": [],
            "label": "stateSyncConfigs",
            "description": [
              "- Array of {@link IStateSyncConfig} to sync"
            ],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "public",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-public.IStateSyncConfig",
                "text": "IStateSyncConfig"
              },
              "<any, ",
              "IStateStorage",
              ">[]"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.unhashQuery",
        "type": "Function",
        "tags": [],
        "label": "unhashQuery",
        "description": [],
        "signature": [
          "(query: Record<string, any>, options?: IUrlQueryMapperOptions) => { [k: string]: any; }"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.unhashQuery.$1",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "{ [x: string]: any; }"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.unhashQuery.$2",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "IUrlQueryMapperOptions"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.unhashUrl",
        "type": "Function",
        "tags": [],
        "label": "unhashUrl",
        "description": [],
        "signature": [
          "(url: string) => string"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.unhashUrl.$1",
            "type": "string",
            "tags": [],
            "label": "url",
            "description": [],
            "path": "src/plugins/kibana_utils/public/state_management/url/hash_unhash_url.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.useContainerSelector",
        "type": "Function",
        "tags": [],
        "label": "useContainerSelector",
        "description": [
          "\nReact hook to apply selector to state container to extract only needed information. Will\nre-render your component only when the section changes.\n"
        ],
        "signature": [
          "<Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<any, any, {}>, Result>(container: Container, selector: (state: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>) => Result, comparator?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Comparator",
            "text": "Comparator"
          },
          "<Result>) => Result"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.useContainerSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "container",
            "description": [
              "- {@link StateContainer} which state to track."
            ],
            "signature": [
              "Container"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.useContainerSelector.$2",
            "type": "Function",
            "tags": [],
            "label": "selector",
            "description": [
              "- Function used to pick parts of state."
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.UnboxState",
                "text": "UnboxState"
              },
              "<Container>) => Result"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.useContainerSelector.$3",
            "type": "Function",
            "tags": [],
            "label": "comparator",
            "description": [
              "- {@link Comparator} function used to memoize previous result, to not\nre-render React component if state did not change. By default uses\n`fast-deep-equal` package."
            ],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.Comparator",
                "text": "Comparator"
              },
              "<Result>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "- result of a selector(state)"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.useContainerState",
        "type": "Function",
        "tags": [],
        "label": "useContainerState",
        "description": [
          "\nReact hooks that returns the latest state of a {@link StateContainer}.\n"
        ],
        "signature": [
          "<Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<any, any, {}>>(container: Container) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.useContainerState.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "container",
            "description": [
              "- {@link StateContainer} which state to track."
            ],
            "signature": [
              "Container"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "- latest {@link StateContainer} state"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.withNotifyOnErrors",
        "type": "Function",
        "tags": [],
        "label": "withNotifyOnErrors",
        "description": [
          "\nHelper for configuring {@link IKbnUrlStateStorage} to notify about inner errors\n"
        ],
        "signature": [
          "(toasts: Pick<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastsApi",
            "text": "ToastsApi"
          },
          ", \"add\" | \"get$\" | \"remove\" | \"addSuccess\" | \"addWarning\" | \"addDanger\" | \"addError\" | \"addInfo\">) => { onGetError: (error: Error) => void; onSetError: (error: Error) => void; }"
        ],
        "path": "src/plugins/kibana_utils/public/state_management/url/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.withNotifyOnErrors.$1",
            "type": "Object",
            "tags": [],
            "label": "toasts",
            "description": [],
            "signature": [
              "Pick<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastsApi",
                "text": "ToastsApi"
              },
              ", \"add\" | \"get$\" | \"remove\" | \"addSuccess\" | \"addWarning\" | \"addDanger\" | \"addError\" | \"addInfo\">"
            ],
            "path": "src/plugins/kibana_utils/public/state_management/url/errors.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.BaseStateContainer",
        "type": "Interface",
        "tags": [],
        "label": "BaseStateContainer",
        "description": [
          "\nBase state container shape without transitions or selectors"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.BaseStateContainer",
            "text": "BaseStateContainer"
          },
          "<State>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.BaseStateContainer.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nRetrieves current state from the container"
            ],
            "signature": [
              "() => State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": [
              "current state"
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.BaseStateContainer.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [
              "\nSets state into container"
            ],
            "signature": [
              "(state: State) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.BaseStateContainer.set.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "- new state to set"
                ],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.BaseStateContainer.state$",
            "type": "Object",
            "tags": [],
            "label": "state$",
            "description": [
              "\n{@link Observable} of state"
            ],
            "signature": [
              "Observable",
              "<State>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.CollectConfigProps",
        "type": "Interface",
        "tags": [],
        "label": "CollectConfigProps",
        "description": [
          "\nProps provided to `CollectConfig` component on every re-render."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.CollectConfigProps",
            "text": "CollectConfigProps"
          },
          "<Config, Context>"
        ],
        "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.CollectConfigProps.config",
            "type": "Uncategorized",
            "tags": [],
            "label": "config",
            "description": [
              "\nCurrent (latest) config of the item."
            ],
            "signature": [
              "Config"
            ],
            "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.CollectConfigProps.onConfig",
            "type": "Function",
            "tags": [],
            "label": "onConfig",
            "description": [
              "\nCallback called when user updates the config in UI."
            ],
            "signature": [
              "(config: Config) => void"
            ],
            "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.CollectConfigProps.onConfig.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "config",
                "description": [],
                "signature": [
                  "Config"
                ],
                "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.CollectConfigProps.context",
            "type": "Uncategorized",
            "tags": [],
            "label": "context",
            "description": [
              "\nContext information about where component is being rendered."
            ],
            "signature": [
              "Context"
            ],
            "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Configurable",
        "type": "Interface",
        "tags": [],
        "label": "Configurable",
        "description": [
          "\nRepresents something that can be configured by user using UI."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.Configurable",
            "text": "Configurable"
          },
          "<Config, Context>"
        ],
        "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Configurable.createConfig",
            "type": "Function",
            "tags": [],
            "label": "createConfig",
            "description": [
              "\nCreate default config for this item, used when item is created for the first time."
            ],
            "signature": [
              "(context: Context) => Config"
            ],
            "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Configurable.createConfig.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  "Context"
                ],
                "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Configurable.isConfigValid",
            "type": "Function",
            "tags": [],
            "label": "isConfigValid",
            "description": [
              "\nIs this config valid. Used to validate user's input before saving."
            ],
            "signature": [
              "(config: Config, context: Context) => boolean"
            ],
            "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Configurable.isConfigValid.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "config",
                "description": [],
                "signature": [
                  "Config"
                ],
                "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Configurable.isConfigValid.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  "Context"
                ],
                "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Configurable.CollectConfig",
            "type": "Function",
            "tags": [],
            "label": "CollectConfig",
            "description": [
              "\n`UiComponent` to be rendered when collecting configuration for this item."
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.UiComponentInstance",
                "text": "UiComponentInstance"
              },
              "<",
              {
                "pluginId": "kibanaUtils",
                "scope": "public",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-public.CollectConfigProps",
                "text": "CollectConfigProps"
              },
              "<Config, Context>>"
            ],
            "path": "src/plugins/kibana_utils/public/ui/configurable.ts",
            "deprecated": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.CreateStateContainerOptions",
        "type": "Interface",
        "tags": [],
        "label": "CreateStateContainerOptions",
        "description": [
          "\nState container options"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.CreateStateContainerOptions.freeze",
            "type": "Function",
            "tags": [],
            "label": "freeze",
            "description": [
              "\nFunction to use when freezing state. Supply identity function.\nIf not provided, default `deepFreeze` is used.\n"
            ],
            "signature": [
              "(<T>(state: T) => T) | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.CreateStateContainerOptions.freeze.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.IKbnUrlStateStorage",
        "type": "Interface",
        "tags": [],
        "label": "IKbnUrlStateStorage",
        "description": [
          "\nKbnUrlStateStorage is a state storage for {@link syncState} utility which:\n\n1. Keeps state in sync with the URL.\n2. Serializes data and stores it in the URL in one of the supported formats:\n  * Rison encoded.\n  * Hashed URL: In URL we store only the hash from the serialized state, but the state itself is stored in sessionStorage. See Kibana's `state:storeInSessionStorage` advanced option for more context.\n3. Takes care of listening to the URL updates and notifies state about the updates.\n4. Takes care of batching URL updates to prevent redundant browser history records.\n\n{@link https://github.com/elastic/kibana/blob/main/src/plugins/kibana_utils/docs/state_sync/storages/kbn_url_storage.md | Refer to this guide for more info}"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IKbnUrlStateStorage",
            "text": "IKbnUrlStateStorage"
          },
          " extends ",
          "IStateStorage"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IKbnUrlStateStorage.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [],
            "signature": [
              "<State>(key: string, state: State, opts?: { replace: boolean; } | undefined) => Promise<string | undefined>"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IKbnUrlStateStorage.set.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IKbnUrlStateStorage.set.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IKbnUrlStateStorage.set.$3",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.IKbnUrlStateStorage.set.$3.replace",
                    "type": "boolean",
                    "tags": [],
                    "label": "replace",
                    "description": [],
                    "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IKbnUrlStateStorage.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "<State = unknown>(key: string) => State | null"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IKbnUrlStateStorage.get.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IKbnUrlStateStorage.change$",
            "type": "Function",
            "tags": [],
            "label": "change$",
            "description": [],
            "signature": [
              "<State = unknown>(key: string) => ",
              "Observable",
              "<State | null>"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IKbnUrlStateStorage.change$.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IKbnUrlStateStorage.cancel",
            "type": "Function",
            "tags": [],
            "label": "cancel",
            "description": [
              "\nCancels any pending url updates"
            ],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IKbnUrlStateStorage.kbnUrlControls",
            "type": "Object",
            "tags": [],
            "label": "kbnUrlControls",
            "description": [
              "\nLower level wrapper around history library that handles batching multiple URL updates into one history change"
            ],
            "signature": [
              "IKbnUrlControls"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_kbn_url_state_storage.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.INullableBaseStateContainer",
        "type": "Interface",
        "tags": [],
        "label": "INullableBaseStateContainer",
        "description": [
          "\nExtension of {@link BaseStateContainer} with one constraint: set state should handle `null` as incoming state"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.INullableBaseStateContainer",
            "text": "INullableBaseStateContainer"
          },
          "<State> extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.BaseStateContainer",
            "text": "BaseStateContainer"
          },
          "<State>"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.INullableBaseStateContainer.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [],
            "signature": [
              "(state: State | null) => void"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.INullableBaseStateContainer.set.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State | null"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.ISessionStorageStateStorage",
        "type": "Interface",
        "tags": [],
        "label": "ISessionStorageStateStorage",
        "description": [
          "\n{@link IStateStorage} for storing state in browser {@link Storage}\n{@link https://github.com/elastic/kibana/blob/main/src/plugins/kibana_utils/docs/state_sync/storages/session_storage.md | guide}"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.ISessionStorageStateStorage",
            "text": "ISessionStorageStateStorage"
          },
          " extends ",
          "IStateStorage"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ISessionStorageStateStorage.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [],
            "signature": [
              "<State>(key: string, state: State) => void"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ISessionStorageStateStorage.set.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ISessionStorageStateStorage.set.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ISessionStorageStateStorage.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "<State = unknown>(key: string) => State | null"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ISessionStorageStateStorage.get.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/state_sync/state_sync_state_storage/create_session_storage_state_storage.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.IStateSyncConfig",
        "type": "Interface",
        "tags": [],
        "label": "IStateSyncConfig",
        "description": [
          "\nConfig for setting up state syncing with {@link stateSync}"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStateSyncConfig",
            "text": "IStateSyncConfig"
          },
          "<State, StateStorage>"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStateSyncConfig.storageKey",
            "type": "string",
            "tags": [],
            "label": "storageKey",
            "description": [
              "\nStorage key to use for syncing,\ne.g. storageKey '_a' should sync state to ?_a query param"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStateSyncConfig.stateContainer",
            "type": "Object",
            "tags": [],
            "label": "stateContainer",
            "description": [
              "\nState container to keep in sync with storage, have to implement {@link INullableBaseStateContainer} interface\nWe encourage to use {@link BaseStateContainer} as a state container,\nbut it is also possible to implement own custom container for advanced use cases"
            ],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "public",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-public.INullableBaseStateContainer",
                "text": "INullableBaseStateContainer"
              },
              "<State>"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStateSyncConfig.stateStorage",
            "type": "Uncategorized",
            "tags": [],
            "label": "stateStorage",
            "description": [
              "\nState storage to use,\nState storage is responsible for serialising / deserialising and persisting / retrieving stored state\n\nThere are common strategies already implemented:\nsee {@link IKbnUrlStateStorage}\nwhich replicate what State (AppState, GlobalState) in legacy world did\n"
            ],
            "signature": [
              "StateStorage"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.IStorage",
        "type": "Interface",
        "tags": [],
        "label": "IStorage",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStorage",
            "text": "IStorage"
          },
          "<T, S>"
        ],
        "path": "src/plugins/kibana_utils/public/storage/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorage.getItem",
            "type": "Function",
            "tags": [],
            "label": "getItem",
            "description": [],
            "signature": [
              "(key: string) => T | null"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorage.getItem.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorage.setItem",
            "type": "Function",
            "tags": [],
            "label": "setItem",
            "description": [],
            "signature": [
              "(key: string, value: T) => S"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorage.setItem.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorage.setItem.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorage.removeItem",
            "type": "Function",
            "tags": [],
            "label": "removeItem",
            "description": [],
            "signature": [
              "(key: string) => T | null"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorage.removeItem.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorage.clear",
            "type": "Function",
            "tags": [],
            "label": "clear",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.IStorageWrapper",
        "type": "Interface",
        "tags": [],
        "label": "IStorageWrapper",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IStorageWrapper",
            "text": "IStorageWrapper"
          },
          "<T, S>"
        ],
        "path": "src/plugins/kibana_utils/public/storage/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorageWrapper.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "(key: string) => T | null"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorageWrapper.get.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorageWrapper.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [],
            "signature": [
              "(key: string, value: T) => S"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorageWrapper.set.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorageWrapper.set.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorageWrapper.remove",
            "type": "Function",
            "tags": [],
            "label": "remove",
            "description": [],
            "signature": [
              "(key: string) => T | null"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.IStorageWrapper.remove.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/public/storage/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.IStorageWrapper.clear",
            "type": "Function",
            "tags": [],
            "label": "clear",
            "description": [],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/storage/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.ISyncStateRef",
        "type": "Interface",
        "tags": [],
        "label": "ISyncStateRef",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.ISyncStateRef",
            "text": "ISyncStateRef"
          },
          "<StateStorage>"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ISyncStateRef.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [
              "\nstop state syncing"
            ],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
            "deprecated": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ISyncStateRef.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [
              "\nstart state syncing"
            ],
            "signature": [
              "() => void"
            ],
            "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
            "deprecated": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.KibanaServerError",
        "type": "Interface",
        "tags": [],
        "label": "KibanaServerError",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KibanaServerError",
            "text": "KibanaServerError"
          },
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/errors/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.KibanaServerError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "src/plugins/kibana_utils/common/errors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.KibanaServerError.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/plugins/kibana_utils/common/errors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.KibanaServerError.attributes",
            "type": "Uncategorized",
            "tags": [],
            "label": "attributes",
            "description": [],
            "signature": [
              "T | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/errors/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.ReduxLikeStateContainer",
        "type": "Interface",
        "tags": [],
        "label": "ReduxLikeStateContainer",
        "description": [
          "\nFully featured state container which matches Redux store interface. Extends {@link StateContainer}.\nAllows to use state container with redux libraries."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, PureTransitions, PureSelectors> extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<State, PureTransitions, PureSelectors>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ReduxLikeStateContainer.getState",
            "type": "Function",
            "tags": [],
            "label": "getState",
            "description": [],
            "signature": [
              "() => State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ReduxLikeStateContainer.reducer",
            "type": "Function",
            "tags": [],
            "label": "reducer",
            "description": [],
            "signature": [
              "(state: State, action: ",
              "TransitionDescription",
              "<string, any[]>) => State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ReduxLikeStateContainer.reducer.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ReduxLikeStateContainer.reducer.$2",
                "type": "Object",
                "tags": [],
                "label": "action",
                "description": [],
                "signature": [
                  "TransitionDescription",
                  "<string, any[]>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ReduxLikeStateContainer.replaceReducer",
            "type": "Function",
            "tags": [],
            "label": "replaceReducer",
            "description": [],
            "signature": [
              "(nextReducer: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.Reducer",
                "text": "Reducer"
              },
              "<State>) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ReduxLikeStateContainer.replaceReducer.$1",
                "type": "Function",
                "tags": [],
                "label": "nextReducer",
                "description": [],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.Reducer",
                    "text": "Reducer"
                  },
                  "<State>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ReduxLikeStateContainer.dispatch",
            "type": "Function",
            "tags": [],
            "label": "dispatch",
            "description": [],
            "signature": [
              "(action: ",
              "TransitionDescription",
              "<string, any[]>) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ReduxLikeStateContainer.dispatch.$1",
                "type": "Object",
                "tags": [],
                "label": "action",
                "description": [],
                "signature": [
                  "TransitionDescription",
                  "<string, any[]>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ReduxLikeStateContainer.addMiddleware",
            "type": "Function",
            "tags": [],
            "label": "addMiddleware",
            "description": [],
            "signature": [
              "(middleware: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.Middleware",
                "text": "Middleware"
              },
              "<State>) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ReduxLikeStateContainer.addMiddleware.$1",
                "type": "Function",
                "tags": [],
                "label": "middleware",
                "description": [],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.Middleware",
                    "text": "Middleware"
                  },
                  "<State>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.ReduxLikeStateContainer.subscribe",
            "type": "Function",
            "tags": [],
            "label": "subscribe",
            "description": [],
            "signature": [
              "(listener: (state: State) => void) => () => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.ReduxLikeStateContainer.subscribe.$1",
                "type": "Function",
                "tags": [],
                "label": "listener",
                "description": [],
                "signature": [
                  "(state: State) => void"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.StartServices",
        "type": "Interface",
        "tags": [],
        "label": "StartServices",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.StartServices",
            "text": "StartServices"
          },
          "<Plugins, OwnContract, Core>"
        ],
        "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.StartServices.plugins",
            "type": "Uncategorized",
            "tags": [],
            "label": "plugins",
            "description": [],
            "signature": [
              "Plugins"
            ],
            "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.StartServices.self",
            "type": "Uncategorized",
            "tags": [],
            "label": "self",
            "description": [],
            "signature": [
              "OwnContract"
            ],
            "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.StartServices.core",
            "type": "Uncategorized",
            "tags": [],
            "label": "core",
            "description": [],
            "signature": [
              "Core"
            ],
            "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.StateContainer",
        "type": "Interface",
        "tags": [],
        "label": "StateContainer",
        "description": [
          "\nFully featured state container with {@link Selector | Selectors} and {@link Transition | Transitions}. Extends {@link BaseStateContainer}."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<State, PureTransitions, PureSelectors> extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.BaseStateContainer",
            "text": "BaseStateContainer"
          },
          "<State>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.StateContainer.transitions",
            "type": "Object",
            "tags": [],
            "label": "transitions",
            "description": [],
            "signature": [
              "{ readonly [P in keyof ",
              "PureTransitionsToTransitions",
              "<PureTransitions>]: ",
              "PureTransitionsToTransitions",
              "<PureTransitions>[P]; }"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.StateContainer.selectors",
            "type": "Object",
            "tags": [],
            "label": "selectors",
            "description": [],
            "signature": [
              "{ readonly [P in keyof ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.PureSelectorsToSelectors",
                "text": "PureSelectorsToSelectors"
              },
              "<PureSelectors>]: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.PureSelectorsToSelectors",
                "text": "PureSelectorsToSelectors"
              },
              "<PureSelectors>[P]; }"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.UiComponentInstance",
        "type": "Interface",
        "tags": [],
        "label": "UiComponentInstance",
        "description": [
          "\nInstance of an UiComponent, corresponds to React virtual DOM node."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UiComponentInstance",
            "text": "UiComponentInstance"
          },
          "<Props>"
        ],
        "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.UiComponentInstance.render",
            "type": "Function",
            "tags": [],
            "label": "render",
            "description": [
              "\nCall this method on initial render and on all subsequent updates.\n"
            ],
            "signature": [
              "(el: HTMLElement, props: Props) => void"
            ],
            "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.UiComponentInstance.render.$1",
                "type": "Object",
                "tags": [],
                "label": "el",
                "description": [
                  "DOM element."
                ],
                "signature": [
                  "HTMLElement"
                ],
                "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.UiComponentInstance.render.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [
                  "Component props, same as props in React."
                ],
                "signature": [
                  "Props"
                ],
                "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.UiComponentInstance.unmount",
            "type": "Function",
            "tags": [],
            "label": "unmount",
            "description": [
              "\nUn-mount UI component. Call it to remove view from DOM. Implementers of this\ninterface should clear DOM from this UI component and destroy any internal state."
            ],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.BaseState",
        "type": "Type",
        "tags": [],
        "label": "BaseState",
        "description": [
          "\nBase {@link StateContainer} state shape"
        ],
        "signature": [
          "object"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Comparator",
        "type": "Type",
        "tags": [],
        "label": "Comparator",
        "description": [
          "\nUsed to compare state, see {@link useContainerSelector}."
        ],
        "signature": [
          "(previous: Result, current: Result) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Comparator.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "previous",
            "description": [],
            "signature": [
              "Result"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Comparator.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "current",
            "description": [],
            "signature": [
              "Result"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Connect",
        "type": "Type",
        "tags": [],
        "label": "Connect",
        "description": [
          "\nSimilar to `connect` from react-redux,\nallows to map state from state container to component's props."
        ],
        "signature": [
          "<Props extends object, StatePropKeys extends keyof Props>(mapStateToProp: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MapStateToProps",
            "text": "MapStateToProps"
          },
          "<State, Pick<Props, StatePropKeys>>) => (component: React.ComponentType<Props>) => React.FC<Pick<Props, Exclude<keyof Props, StatePropKeys>>>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Connect.$1",
            "type": "Function",
            "tags": [],
            "label": "mapStateToProp",
            "description": [],
            "signature": [
              "(state: State) => Pick<Props, StatePropKeys>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.Connect.$1.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Dispatch",
        "type": "Type",
        "tags": [],
        "label": "Dispatch",
        "description": [
          "\nRedux like dispatch"
        ],
        "signature": [
          "(action: T) => void"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Dispatch.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.EnsurePureSelector",
        "type": "Type",
        "tags": [],
        "label": "EnsurePureSelector",
        "description": [],
        "signature": [
          "T extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any> ? T : never"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.EnsurePureSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.EnsurePureTransition",
        "type": "Type",
        "tags": [],
        "label": "EnsurePureTransition",
        "description": [],
        "signature": [
          "T extends ",
          "PureTransition",
          "<any, any> ? T : never"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.EnsurePureTransition.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Get",
        "type": "Type",
        "tags": [],
        "label": "Get",
        "description": [],
        "signature": [
          "() => T"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.MapStateToProps",
        "type": "Type",
        "tags": [],
        "label": "MapStateToProps",
        "description": [
          "\nState container state to component props mapper.\nSee {@link Connect}"
        ],
        "signature": [
          "(state: State) => StateProps"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.MapStateToProps.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Middleware",
        "type": "Type",
        "tags": [],
        "label": "Middleware",
        "description": [
          "\nRedux like Middleware"
        ],
        "signature": [
          "(store: Pick<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, any, {}>, \"getState\" | \"dispatch\">) => (next: (action: ",
          "TransitionDescription",
          "<string, any[]>) => any) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Dispatch",
            "text": "Dispatch"
          },
          "<",
          "TransitionDescription",
          "<string, any[]>>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Middleware.$1",
            "type": "Object",
            "tags": [],
            "label": "store",
            "description": [],
            "signature": [
              "{ getState: () => State; dispatch: (action: ",
              "TransitionDescription",
              "<string, any[]>) => void; }"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.PureSelector",
        "type": "Type",
        "tags": [],
        "label": "PureSelector",
        "description": [],
        "signature": [
          "(state: State) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Selector",
            "text": "Selector"
          },
          "<Result, Args>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.PureSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.PureSelectorsToSelectors",
        "type": "Type",
        "tags": [],
        "label": "PureSelectorsToSelectors",
        "description": [],
        "signature": [
          "{ [K in keyof T]: ReturnType<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Ensure",
            "text": "Ensure"
          },
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Ensure",
            "text": "Ensure"
          },
          "<T[K], ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any>>, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any>>>; }"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.PureSelectorToSelector",
        "type": "Type",
        "tags": [],
        "label": "PureSelectorToSelector",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Ensure",
            "text": "Ensure"
          },
          "<T, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any>> extends (...args: any) => infer R ? R : any"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.PureSelectorToSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "args",
            "description": [],
            "signature": [
              "Args"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Reducer",
        "type": "Type",
        "tags": [],
        "label": "Reducer",
        "description": [
          "\nRedux like Reducer"
        ],
        "signature": [
          "(state: State, action: ",
          "TransitionDescription",
          "<string, any[]>) => State"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Reducer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Reducer.$2",
            "type": "Object",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "TransitionDescription",
              "<string, any[]>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Selector",
        "type": "Type",
        "tags": [],
        "label": "Selector",
        "description": [],
        "signature": [
          "(...args: Args) => Result"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Selector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "args",
            "description": [],
            "signature": [
              "Args"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.Set",
        "type": "Type",
        "tags": [],
        "label": "Set",
        "description": [],
        "signature": [
          "(value: T) => void"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.Set.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "value",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.StartServicesGetter",
        "type": "Type",
        "tags": [],
        "label": "StartServicesGetter",
        "description": [],
        "signature": [
          "() => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.StartServices",
            "text": "StartServices"
          },
          "<Plugins, OwnContract, ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.CoreStart",
            "text": "CoreStart"
          },
          ">"
        ],
        "path": "src/plugins/kibana_utils/public/core/create_start_service_getter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.StartSyncStateFnType",
        "type": "Type",
        "tags": [],
        "label": "StartSyncStateFnType",
        "description": [],
        "signature": [
          "() => void"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.StopSyncStateFnType",
        "type": "Type",
        "tags": [],
        "label": "StopSyncStateFnType",
        "description": [],
        "signature": [
          "() => void"
        ],
        "path": "src/plugins/kibana_utils/public/state_sync/state_sync.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.UiComponent",
        "type": "Type",
        "tags": [],
        "label": "UiComponent",
        "description": [
          "\nIn many places in Kibana we want to be agnostic to frontend view library,\ni.e. instead of exposing React-specific APIs we want to expose APIs that\nare orthogonal to any rendering library. This interface represents such UI\ncomponents. UI component receives a DOM element and `props` through `render()`\nmethod, the `render()` method can be called many times.\n\nAlthough Kibana aims to be library agnostic, Kibana itself is written in React,\nthus here we define `UiComponent` which is an abstract unit of UI that can be\nimplemented in any framework, but it maps easily to React components, i.e.\n`UiComponent<Props>` is like `React.ComponentType<Props>`."
        ],
        "signature": [
          "() => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UiComponentInstance",
            "text": "UiComponentInstance"
          },
          "<Props>"
        ],
        "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.UnboxState",
        "type": "Type",
        "tags": [],
        "label": "UnboxState",
        "description": [
          "\nUtility type for inferring state shape from {@link StateContainer}"
        ],
        "signature": [
          "Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<infer T, any, {}> ? T : never"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.hashedItemStore",
        "type": "Object",
        "tags": [],
        "label": "hashedItemStore",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.HashedItemStore",
            "text": "HashedItemStore"
          }
        ],
        "path": "src/plugins/kibana_utils/public/storage/hashed_item_store/index.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-public.url",
        "type": "Object",
        "tags": [],
        "label": "url",
        "description": [],
        "path": "src/plugins/kibana_utils/common/url/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.url.encodeQuery",
            "type": "Function",
            "tags": [],
            "label": "encodeQuery",
            "description": [],
            "signature": [
              "(query: ",
              "ParsedQuery",
              "<string>, encodeFunction?: (val: string, pctEncodeSpaces?: boolean | undefined) => string, pctEncodeSpaces?: boolean) => ",
              "ParsedQuery",
              "<string>"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.encodeQuery.$1",
                "type": "Object",
                "tags": [],
                "label": "query",
                "description": [],
                "signature": [
                  "ParsedQuery",
                  "<string>"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.encodeQuery.$2",
                "type": "Function",
                "tags": [],
                "label": "encodeFunction",
                "description": [],
                "signature": [
                  "(val: string, pctEncodeSpaces?: boolean | undefined) => string"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false,
                "returnComment": [],
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.url.encodeQuery.$2.$1",
                    "type": "string",
                    "tags": [],
                    "label": "val",
                    "description": [],
                    "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-public.url.encodeQuery.$2.$2",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "pctEncodeSpaces",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                    "deprecated": false
                  }
                ]
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.encodeQuery.$3",
                "type": "boolean",
                "tags": [],
                "label": "pctEncodeSpaces",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.url.encodeUriQuery",
            "type": "Function",
            "tags": [],
            "label": "encodeUriQuery",
            "description": [],
            "signature": [
              "(val: string, pctEncodeSpaces?: boolean) => string"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.encodeUriQuery.$1",
                "type": "string",
                "tags": [],
                "label": "val",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.encodeUriQuery.$2",
                "type": "boolean",
                "tags": [],
                "label": "pctEncodeSpaces",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-public.url.addQueryParam",
            "type": "Function",
            "tags": [],
            "label": "addQueryParam",
            "description": [],
            "signature": [
              "(params: string, key: string, value?: string | undefined) => string"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.addQueryParam.$1",
                "type": "string",
                "tags": [],
                "label": "params",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.addQueryParam.$2",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-public.url.addQueryParam.$3",
                "type": "string",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "kibanaUtils",
      "id": "def-public.KibanaUtilsSetup",
      "type": "Interface",
      "tags": [],
      "label": "KibanaUtilsSetup",
      "description": [],
      "path": "src/plugins/kibana_utils/public/plugin.ts",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "kibanaUtils",
          "id": "def-public.KibanaUtilsSetup.setVersion",
          "type": "Function",
          "tags": [],
          "label": "setVersion",
          "description": [],
          "signature": [
            "(history: Pick<",
            "History",
            "<any>, \"replace\" | \"location\">) => void"
          ],
          "path": "src/plugins/kibana_utils/public/plugin.ts",
          "deprecated": false,
          "children": [
            {
              "parentPluginId": "kibanaUtils",
              "id": "def-public.KibanaUtilsSetup.setVersion.$1",
              "type": "Object",
              "tags": [],
              "label": "history",
              "description": [],
              "signature": [
                "Pick<",
                "History",
                "<any>, \"replace\" | \"location\">"
              ],
              "path": "src/plugins/kibana_utils/public/plugin.ts",
              "deprecated": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.AbortError",
        "type": "Class",
        "tags": [],
        "label": "AbortError",
        "description": [
          "\nClass used to signify that something was aborted. Useful for applications to conditionally handle\nthis type of error differently than other errors."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.AbortError",
            "text": "AbortError"
          },
          " extends Error"
        ],
        "path": "src/plugins/kibana_utils/common/abort_utils.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.AbortError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/abort_utils.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.AbortError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/abort_utils.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.KbnServerError",
        "type": "Class",
        "tags": [],
        "label": "KbnServerError",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "server",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-server.KbnServerError",
            "text": "KbnServerError"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/server/report_server_error.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.KbnServerError.errBody",
            "type": "Object",
            "tags": [],
            "label": "errBody",
            "description": [],
            "signature": [
              "Record<string, any> | undefined"
            ],
            "path": "src/plugins/kibana_utils/server/report_server_error.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.KbnServerError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/server/report_server_error.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.KbnServerError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/server/report_server_error.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.KbnServerError.Unnamed.$2",
                "type": "number",
                "tags": [],
                "label": "statusCode",
                "description": [],
                "signature": [
                  "number"
                ],
                "path": "src/plugins/kibana_utils/server/report_server_error.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.KbnServerError.Unnamed.$3",
                "type": "Object",
                "tags": [],
                "label": "errBody",
                "description": [],
                "signature": [
                  "Record<string, any> | undefined"
                ],
                "path": "src/plugins/kibana_utils/server/report_server_error.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.abortSignalToPromise",
        "type": "Function",
        "tags": [],
        "label": "abortSignalToPromise",
        "description": [
          "\nReturns a `Promise` corresponding with when the given `AbortSignal` is aborted. Useful for\nsituations when you might need to `Promise.race` multiple `AbortSignal`s, or an `AbortSignal`\nwith any other expected errors (or completions).\n"
        ],
        "signature": [
          "(signal: AbortSignal) => { promise: Promise<never>; cleanup: () => void; }"
        ],
        "path": "src/plugins/kibana_utils/common/abort_utils.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.abortSignalToPromise.$1",
            "type": "Object",
            "tags": [],
            "label": "signal",
            "description": [
              "The `AbortSignal` to generate the `Promise` from"
            ],
            "signature": [
              "AbortSignal"
            ],
            "path": "src/plugins/kibana_utils/common/abort_utils.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.createGetterSetter",
        "type": "Function",
        "tags": [],
        "label": "createGetterSetter",
        "description": [],
        "signature": [
          "<T extends object>(name: string, isValueRequired?: boolean) => [",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Get",
            "text": "Get"
          },
          "<T>, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Set",
            "text": "Set"
          },
          "<T>]"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.createGetterSetter.$1",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.createGetterSetter.$2",
            "type": "boolean",
            "tags": [],
            "label": "isValueRequired",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.fieldWildcardFilter",
        "type": "Function",
        "tags": [],
        "label": "fieldWildcardFilter",
        "description": [],
        "signature": [
          "(globs: string[], metaFields: string[]) => (val: unknown) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.fieldWildcardFilter.$1",
            "type": "Array",
            "tags": [],
            "label": "globs",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.fieldWildcardFilter.$2",
            "type": "Array",
            "tags": [],
            "label": "metaFields",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.fieldWildcardMatcher",
        "type": "Function",
        "tags": [],
        "label": "fieldWildcardMatcher",
        "description": [],
        "signature": [
          "(globs: string[], metaFields: unknown[]) => (val: unknown) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.fieldWildcardMatcher.$1",
            "type": "Array",
            "tags": [],
            "label": "globs",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.fieldWildcardMatcher.$2",
            "type": "Array",
            "tags": [],
            "label": "metaFields",
            "description": [],
            "signature": [
              "unknown[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.getKbnServerError",
        "type": "Function",
        "tags": [],
        "label": "getKbnServerError",
        "description": [
          "\nFormats any error thrown into a standardized `KbnServerError`."
        ],
        "signature": [
          "(e: Error) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "server",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-server.KbnServerError",
            "text": "KbnServerError"
          }
        ],
        "path": "src/plugins/kibana_utils/server/report_server_error.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.getKbnServerError.$1",
            "type": "Object",
            "tags": [],
            "label": "e",
            "description": [
              "`Error` or `ElasticsearchClientError`"
            ],
            "signature": [
              "Error"
            ],
            "path": "src/plugins/kibana_utils/server/report_server_error.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "`KbnServerError`"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.mergeMigrationFunctionMaps",
        "type": "Function",
        "tags": [],
        "label": "mergeMigrationFunctionMaps",
        "description": [],
        "signature": [
          "(obj1: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          },
          ", obj2: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          },
          ") => { [x: string]: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunction",
            "text": "MigrateFunction"
          },
          "<any, any>; } & ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          }
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/merge_migration_function_map.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.mergeMigrationFunctionMaps.$1",
            "type": "Object",
            "tags": [],
            "label": "obj1",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunctionsObject",
                "text": "MigrateFunctionsObject"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/merge_migration_function_map.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.mergeMigrationFunctionMaps.$2",
            "type": "Object",
            "tags": [],
            "label": "obj2",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunctionsObject",
                "text": "MigrateFunctionsObject"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/merge_migration_function_map.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.reportServerError",
        "type": "Function",
        "tags": [],
        "label": "reportServerError",
        "description": [
          "\n"
        ],
        "signature": [
          "(res: { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
          "Stream",
          " | undefined>(options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<T>) => ",
          "KibanaResponse",
          "<T>; badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; forbidden: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; notFound: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; conflict: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; customError: (options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">) => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; redirected: (options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RedirectResponseOptions",
            "text": "RedirectResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; ok: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; accepted: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; noContent: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<undefined>; }, err: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "server",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-server.KbnServerError",
            "text": "KbnServerError"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">"
        ],
        "path": "src/plugins/kibana_utils/server/report_server_error.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.reportServerError.$1",
            "type": "Object",
            "tags": [],
            "label": "res",
            "description": [
              "Formats a `KbnServerError` into a server error response"
            ],
            "signature": [
              "{ custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
              "Stream",
              " | undefined>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<T>) => ",
              "KibanaResponse",
              "<T>; badRequest: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; unauthorized: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; forbidden: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; notFound: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; conflict: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; customError: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">) => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; redirected: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RedirectResponseOptions",
                "text": "RedirectResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; ok: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; accepted: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; noContent: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<undefined>; }"
            ],
            "path": "src/plugins/kibana_utils/server/report_server_error.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.reportServerError.$2",
            "type": "Object",
            "tags": [],
            "label": "err",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "server",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-server.KbnServerError",
                "text": "KbnServerError"
              }
            ],
            "path": "src/plugins/kibana_utils/server/report_server_error.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.Get",
        "type": "Type",
        "tags": [],
        "label": "Get",
        "description": [],
        "signature": [
          "() => T"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.Set",
        "type": "Type",
        "tags": [],
        "label": "Set",
        "description": [],
        "signature": [
          "(value: T) => void"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.Set.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "value",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-server.url",
        "type": "Object",
        "tags": [],
        "label": "url",
        "description": [],
        "path": "src/plugins/kibana_utils/common/url/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.url.encodeQuery",
            "type": "Function",
            "tags": [],
            "label": "encodeQuery",
            "description": [],
            "signature": [
              "(query: ",
              "ParsedQuery",
              "<string>, encodeFunction?: (val: string, pctEncodeSpaces?: boolean | undefined) => string, pctEncodeSpaces?: boolean) => ",
              "ParsedQuery",
              "<string>"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.encodeQuery.$1",
                "type": "Object",
                "tags": [],
                "label": "query",
                "description": [],
                "signature": [
                  "ParsedQuery",
                  "<string>"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.encodeQuery.$2",
                "type": "Function",
                "tags": [],
                "label": "encodeFunction",
                "description": [],
                "signature": [
                  "(val: string, pctEncodeSpaces?: boolean | undefined) => string"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false,
                "returnComment": [],
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-server.url.encodeQuery.$2.$1",
                    "type": "string",
                    "tags": [],
                    "label": "val",
                    "description": [],
                    "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-server.url.encodeQuery.$2.$2",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "pctEncodeSpaces",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                    "deprecated": false
                  }
                ]
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.encodeQuery.$3",
                "type": "boolean",
                "tags": [],
                "label": "pctEncodeSpaces",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.url.encodeUriQuery",
            "type": "Function",
            "tags": [],
            "label": "encodeUriQuery",
            "description": [],
            "signature": [
              "(val: string, pctEncodeSpaces?: boolean) => string"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.encodeUriQuery.$1",
                "type": "string",
                "tags": [],
                "label": "val",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.encodeUriQuery.$2",
                "type": "boolean",
                "tags": [],
                "label": "pctEncodeSpaces",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-server.url.addQueryParam",
            "type": "Function",
            "tags": [],
            "label": "addQueryParam",
            "description": [],
            "signature": [
              "(params: string, key: string, value?: string | undefined) => string"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.addQueryParam.$1",
                "type": "string",
                "tags": [],
                "label": "params",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.addQueryParam.$2",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-server.url.addQueryParam.$3",
                "type": "string",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.AbortError",
        "type": "Class",
        "tags": [],
        "label": "AbortError",
        "description": [
          "\nClass used to signify that something was aborted. Useful for applications to conditionally handle\nthis type of error differently than other errors."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.AbortError",
            "text": "AbortError"
          },
          " extends Error"
        ],
        "path": "src/plugins/kibana_utils/common/abort_utils.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.AbortError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/abort_utils.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.AbortError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/abort_utils.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.CharacterNotAllowedInField",
        "type": "Class",
        "tags": [],
        "label": "CharacterNotAllowedInField",
        "description": [
          "\nwhen a user is attempting to create a field with disallowed character in the name, like *"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.CharacterNotAllowedInField",
            "text": "CharacterNotAllowedInField"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.CharacterNotAllowedInField.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.CharacterNotAllowedInField.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "character",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.CharacterNotAllowedInField.Unnamed.$2",
                "type": "string",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Defer",
        "type": "Class",
        "tags": [],
        "label": "Defer",
        "description": [
          "\nAn externally resolvable/rejectable \"promise\". Use it to resolve/reject\npromise at any time.\n\n```ts\nconst future = new Defer();\n\nfuture.promise.then(value => console.log(value));\n\nfuture.resolve(123);\n```"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Defer",
            "text": "Defer"
          },
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/defer.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Defer.resolve",
            "type": "Function",
            "tags": [],
            "label": "resolve",
            "description": [],
            "signature": [
              "(data: T) => void"
            ],
            "path": "src/plugins/kibana_utils/common/defer.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.Defer.resolve.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "data",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/plugins/kibana_utils/common/defer.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Defer.reject",
            "type": "Function",
            "tags": [],
            "label": "reject",
            "description": [],
            "signature": [
              "(error: any) => void"
            ],
            "path": "src/plugins/kibana_utils/common/defer.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.Defer.reject.$1",
                "type": "Any",
                "tags": [],
                "label": "error",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "src/plugins/kibana_utils/common/defer.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Defer.promise",
            "type": "Object",
            "tags": [],
            "label": "promise",
            "description": [],
            "signature": [
              "Promise<T>"
            ],
            "path": "src/plugins/kibana_utils/common/defer.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.DuplicateField",
        "type": "Class",
        "tags": [],
        "label": "DuplicateField",
        "description": [
          "\nwhen a mapping already exists for a field the user is attempting to add"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.DuplicateField",
            "text": "DuplicateField"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.DuplicateField.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.DuplicateField.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.InvalidJSONProperty",
        "type": "Class",
        "tags": [],
        "label": "InvalidJSONProperty",
        "description": [
          "\nThis error is for scenarios where a saved object is detected that has invalid JSON properties.\nThere was a scenario where we were importing objects with double-encoded JSON, and the system\nwas silently failing. This error is now thrown in those scenarios."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.InvalidJSONProperty",
            "text": "InvalidJSONProperty"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.InvalidJSONProperty.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.InvalidJSONProperty.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.KbnError",
        "type": "Class",
        "tags": [],
        "label": "KbnError",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          },
          " extends Error"
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.KbnError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.KbnError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.SavedFieldNotFound",
        "type": "Class",
        "tags": [],
        "label": "SavedFieldNotFound",
        "description": [
          "\nA saved field doesn't exist anymore"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedFieldNotFound",
            "text": "SavedFieldNotFound"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.SavedFieldNotFound.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.SavedFieldNotFound.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.SavedFieldTypeInvalidForAgg",
        "type": "Class",
        "tags": [],
        "label": "SavedFieldTypeInvalidForAgg",
        "description": [
          "\nA saved field type isn't compatible with aggregation"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedFieldTypeInvalidForAgg",
            "text": "SavedFieldTypeInvalidForAgg"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.SavedFieldTypeInvalidForAgg.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.SavedFieldTypeInvalidForAgg.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.SavedObjectNotFound",
        "type": "Class",
        "tags": [],
        "label": "SavedObjectNotFound",
        "description": [
          "\nA saved object was not found"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SavedObjectNotFound",
            "text": "SavedObjectNotFound"
          },
          " extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KbnError",
            "text": "KbnError"
          }
        ],
        "path": "src/plugins/kibana_utils/common/errors/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.SavedObjectNotFound.savedObjectType",
            "type": "string",
            "tags": [],
            "label": "savedObjectType",
            "description": [],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.SavedObjectNotFound.savedObjectId",
            "type": "string",
            "tags": [],
            "label": "savedObjectId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.SavedObjectNotFound.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/plugins/kibana_utils/common/errors/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.SavedObjectNotFound.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.SavedObjectNotFound.Unnamed.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.SavedObjectNotFound.Unnamed.$3",
                "type": "string",
                "tags": [],
                "label": "link",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.SavedObjectNotFound.Unnamed.$4",
                "type": "string",
                "tags": [],
                "label": "customMessage",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/errors/errors.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.abortSignalToPromise",
        "type": "Function",
        "tags": [],
        "label": "abortSignalToPromise",
        "description": [
          "\nReturns a `Promise` corresponding with when the given `AbortSignal` is aborted. Useful for\nsituations when you might need to `Promise.race` multiple `AbortSignal`s, or an `AbortSignal`\nwith any other expected errors (or completions).\n"
        ],
        "signature": [
          "(signal: AbortSignal) => { promise: Promise<never>; cleanup: () => void; }"
        ],
        "path": "src/plugins/kibana_utils/common/abort_utils.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.abortSignalToPromise.$1",
            "type": "Object",
            "tags": [],
            "label": "signal",
            "description": [
              "The `AbortSignal` to generate the `Promise` from"
            ],
            "signature": [
              "AbortSignal"
            ],
            "path": "src/plugins/kibana_utils/common/abort_utils.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.calculateObjectHash",
        "type": "Function",
        "tags": [],
        "label": "calculateObjectHash",
        "description": [],
        "signature": [
          "(o: object) => string"
        ],
        "path": "src/plugins/kibana_utils/common/calculate_object_hash.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.calculateObjectHash.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "o",
            "description": [],
            "signature": [
              "object"
            ],
            "path": "src/plugins/kibana_utils/common/calculate_object_hash.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.createGetterSetter",
        "type": "Function",
        "tags": [],
        "label": "createGetterSetter",
        "description": [],
        "signature": [
          "<T extends object>(name: string, isValueRequired?: boolean) => [",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Get",
            "text": "Get"
          },
          "<T>, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Set",
            "text": "Set"
          },
          "<T>]"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createGetterSetter.$1",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createGetterSetter.$2",
            "type": "boolean",
            "tags": [],
            "label": "isValueRequired",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.createStateContainer",
        "type": "Function",
        "tags": [],
        "label": "createStateContainer",
        "description": [
          "\nCreates a state container without transitions and without selectors."
        ],
        "signature": [
          "(defaultState: State) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, {}, {}>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "defaultState",
            "description": [
              "- initial state"
            ],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.createStateContainer",
        "type": "Function",
        "tags": [],
        "label": "createStateContainer",
        "description": [
          "\nCreates a state container with transitions, but without selectors."
        ],
        "signature": [
          "(defaultState: State, pureTransitions: PureTransitions) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, PureTransitions, {}>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "defaultState",
            "description": [
              "- initial state"
            ],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "pureTransitions",
            "description": [
              "- state transitions configuration object. Map of {@link PureTransition}."
            ],
            "signature": [
              "PureTransitions"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.createStateContainer",
        "type": "Function",
        "tags": [],
        "label": "createStateContainer",
        "description": [
          "\nCreates a state container with transitions and selectors."
        ],
        "signature": [
          "(defaultState: State, pureTransitions: PureTransitions, pureSelectors: PureSelectors, options: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.CreateStateContainerOptions",
            "text": "CreateStateContainerOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, PureTransitions, PureSelectors>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "defaultState",
            "description": [
              "- initial state"
            ],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "pureTransitions",
            "description": [
              "- state transitions configuration object. Map of {@link PureTransition}."
            ],
            "signature": [
              "PureTransitions"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$3",
            "type": "Uncategorized",
            "tags": [],
            "label": "pureSelectors",
            "description": [
              "- state selectors configuration object. Map of {@link PureSelectors}."
            ],
            "signature": [
              "PureSelectors"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.createStateContainer.$4",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [
              "- state container options {@link CreateStateContainerOptions}"
            ],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.CreateStateContainerOptions",
                "text": "CreateStateContainerOptions"
              },
              " | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.createStateContainerReactHelpers",
        "type": "Function",
        "tags": [],
        "label": "createStateContainerReactHelpers",
        "description": [
          "\nCreates helpers for using {@link StateContainer | State Containers} with react\nRefer to {@link https://github.com/elastic/kibana/blob/main/src/plugins/kibana_utils/docs/state_containers/react.md | guide} for details"
        ],
        "signature": [
          "<Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<any, any, {}>>() => { Provider: React.Provider<Container>; Consumer: React.Consumer<Container>; context: React.Context<Container>; useContainer: () => Container; useState: () => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>; useTransitions: () => Container[\"transitions\"]; useSelector: <Result>(selector: (state: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>) => Result, comparator?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Comparator",
            "text": "Comparator"
          },
          "<Result>) => Result; connect: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Connect",
            "text": "Connect"
          },
          "<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>>; }"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
        "deprecated": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.defer",
        "type": "Function",
        "tags": [],
        "label": "defer",
        "description": [],
        "signature": [
          "<T>() => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Defer",
            "text": "Defer"
          },
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/defer.ts",
        "deprecated": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.distinctUntilChangedWithInitialValue",
        "type": "Function",
        "tags": [],
        "label": "distinctUntilChangedWithInitialValue",
        "description": [],
        "signature": [
          "(initialValue: T | Promise<T>, compare: ((x: T, y: T) => boolean) | undefined) => ",
          "MonoTypeOperatorFunction",
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/distinct_until_changed_with_initial_value.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.distinctUntilChangedWithInitialValue.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "initialValue",
            "description": [],
            "signature": [
              "T | Promise<T>"
            ],
            "path": "src/plugins/kibana_utils/common/distinct_until_changed_with_initial_value.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.distinctUntilChangedWithInitialValue.$2",
            "type": "Function",
            "tags": [],
            "label": "compare",
            "description": [],
            "signature": [
              "((x: T, y: T) => boolean) | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/distinct_until_changed_with_initial_value.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.fieldWildcardFilter",
        "type": "Function",
        "tags": [],
        "label": "fieldWildcardFilter",
        "description": [],
        "signature": [
          "(globs: string[], metaFields: string[]) => (val: unknown) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.fieldWildcardFilter.$1",
            "type": "Array",
            "tags": [],
            "label": "globs",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.fieldWildcardFilter.$2",
            "type": "Array",
            "tags": [],
            "label": "metaFields",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.fieldWildcardMatcher",
        "type": "Function",
        "tags": [],
        "label": "fieldWildcardMatcher",
        "description": [],
        "signature": [
          "(globs: string[], metaFields: unknown[]) => (val: unknown) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.fieldWildcardMatcher.$1",
            "type": "Array",
            "tags": [],
            "label": "globs",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.fieldWildcardMatcher.$2",
            "type": "Array",
            "tags": [],
            "label": "metaFields",
            "description": [],
            "signature": [
              "unknown[]"
            ],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.makeRegEx",
        "type": "Function",
        "tags": [],
        "label": "makeRegEx",
        "description": [],
        "signature": [
          "((glob: string) => RegExp) & _.MemoizedFunction"
        ],
        "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.makeRegEx.$1",
            "type": "string",
            "tags": [],
            "label": "glob",
            "description": [],
            "path": "src/plugins/kibana_utils/common/field_wildcard.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.mergeMigrationFunctionMaps",
        "type": "Function",
        "tags": [],
        "label": "mergeMigrationFunctionMaps",
        "description": [],
        "signature": [
          "(obj1: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          },
          ", obj2: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          },
          ") => { [x: string]: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunction",
            "text": "MigrateFunction"
          },
          "<any, any>; } & ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          }
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/merge_migration_function_map.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.mergeMigrationFunctionMaps.$1",
            "type": "Object",
            "tags": [],
            "label": "obj1",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunctionsObject",
                "text": "MigrateFunctionsObject"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/merge_migration_function_map.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.mergeMigrationFunctionMaps.$2",
            "type": "Object",
            "tags": [],
            "label": "obj2",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunctionsObject",
                "text": "MigrateFunctionsObject"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/merge_migration_function_map.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.migrateToLatest",
        "type": "Function",
        "tags": [],
        "label": "migrateToLatest",
        "description": [],
        "signature": [
          "(migrations: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          },
          ", { state, version: oldVersion }: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.VersionedState",
            "text": "VersionedState"
          },
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Serializable",
            "text": "Serializable"
          },
          ">) => S"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/migrate_to_latest.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.migrateToLatest.$1",
            "type": "Object",
            "tags": [],
            "label": "migrations",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunctionsObject",
                "text": "MigrateFunctionsObject"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/migrate_to_latest.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.migrateToLatest.$2",
            "type": "Object",
            "tags": [],
            "label": "{ state, version: oldVersion }",
            "description": [],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.VersionedState",
                "text": "VersionedState"
              },
              "<",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "server",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-server.Serializable",
                "text": "Serializable"
              },
              ">"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/migrate_to_latest.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.now",
        "type": "Function",
        "tags": [],
        "label": "now",
        "description": [
          "\nFunction that returns number in milliseconds since some undefined point in\ntime. Use this function for performance measurements."
        ],
        "signature": [
          "() => number"
        ],
        "path": "src/plugins/kibana_utils/common/now.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.of",
        "type": "Function",
        "tags": [],
        "label": "of",
        "description": [
          "\nGiven a promise awaits it and returns a 3-tuple, with the following members:\n\n- First entry is either the resolved value of the promise or `undefined`.\n- Second entry is either the error thrown by promise or `undefined`.\n- Third entry is a boolean, truthy if promise was resolved and falsy if rejected.\n"
        ],
        "signature": [
          "<T, E = any>(promise: Promise<T>) => Promise<[T | undefined, E | undefined, boolean]>"
        ],
        "path": "src/plugins/kibana_utils/common/of.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.of.$1",
            "type": "Object",
            "tags": [],
            "label": "promise",
            "description": [
              "Promise to convert to 3-tuple."
            ],
            "signature": [
              "Promise<T>"
            ],
            "path": "src/plugins/kibana_utils/common/of.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.useContainerSelector",
        "type": "Function",
        "tags": [],
        "label": "useContainerSelector",
        "description": [
          "\nReact hook to apply selector to state container to extract only needed information. Will\nre-render your component only when the section changes.\n"
        ],
        "signature": [
          "<Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<any, any, {}>, Result>(container: Container, selector: (state: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>) => Result, comparator?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Comparator",
            "text": "Comparator"
          },
          "<Result>) => Result"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.useContainerSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "container",
            "description": [
              "- {@link StateContainer} which state to track."
            ],
            "signature": [
              "Container"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.useContainerSelector.$2",
            "type": "Function",
            "tags": [],
            "label": "selector",
            "description": [
              "- Function used to pick parts of state."
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.UnboxState",
                "text": "UnboxState"
              },
              "<Container>) => Result"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.useContainerSelector.$3",
            "type": "Function",
            "tags": [],
            "label": "comparator",
            "description": [
              "- {@link Comparator} function used to memoize previous result, to not\nre-render React component if state did not change. By default uses\n`fast-deep-equal` package."
            ],
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.Comparator",
                "text": "Comparator"
              },
              "<Result>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "- result of a selector(state)"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.useContainerState",
        "type": "Function",
        "tags": [],
        "label": "useContainerState",
        "description": [
          "\nReact hooks that returns the latest state of a {@link StateContainer}.\n"
        ],
        "signature": [
          "<Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<any, any, {}>>(container: Container) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UnboxState",
            "text": "UnboxState"
          },
          "<Container>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.useContainerState.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "container",
            "description": [
              "- {@link StateContainer} which state to track."
            ],
            "signature": [
              "Container"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container_react_helpers.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "- latest {@link StateContainer} state"
        ],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.BaseStateContainer",
        "type": "Interface",
        "tags": [],
        "label": "BaseStateContainer",
        "description": [
          "\nBase state container shape without transitions or selectors"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.BaseStateContainer",
            "text": "BaseStateContainer"
          },
          "<State>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.BaseStateContainer.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nRetrieves current state from the container"
            ],
            "signature": [
              "() => State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": [
              "current state"
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.BaseStateContainer.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [
              "\nSets state into container"
            ],
            "signature": [
              "(state: State) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.BaseStateContainer.set.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "- new state to set"
                ],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.BaseStateContainer.state$",
            "type": "Object",
            "tags": [],
            "label": "state$",
            "description": [
              "\n{@link Observable} of state"
            ],
            "signature": [
              "Observable",
              "<State>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.CreateStateContainerOptions",
        "type": "Interface",
        "tags": [],
        "label": "CreateStateContainerOptions",
        "description": [
          "\nState container options"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.CreateStateContainerOptions.freeze",
            "type": "Function",
            "tags": [],
            "label": "freeze",
            "description": [
              "\nFunction to use when freezing state. Supply identity function.\nIf not provided, default `deepFreeze` is used.\n"
            ],
            "signature": [
              "(<T>(state: T) => T) | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.CreateStateContainerOptions.freeze.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "T"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/create_state_container.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.KibanaServerError",
        "type": "Interface",
        "tags": [],
        "label": "KibanaServerError",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.KibanaServerError",
            "text": "KibanaServerError"
          },
          "<T>"
        ],
        "path": "src/plugins/kibana_utils/common/errors/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.KibanaServerError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "src/plugins/kibana_utils/common/errors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.KibanaServerError.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/plugins/kibana_utils/common/errors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.KibanaServerError.attributes",
            "type": "Uncategorized",
            "tags": [],
            "label": "attributes",
            "description": [],
            "signature": [
              "T | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/errors/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PersistableState",
        "type": "Interface",
        "tags": [
          "todo"
        ],
        "label": "PersistableState",
        "description": [
          "\nPersistable state interface can be implemented by something that persists\n(stores) state, for example, in a saved object. Once implemented that thing\nwill gain ability to \"extract\" and \"inject\" saved object references, which\nare necessary for various saved object tasks, such as export. It will also be\nable to do state migrations across Kibana versions, if the shape of the state\nwould change over time.\n"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<P>"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableState.telemetry",
            "type": "Function",
            "tags": [],
            "label": "telemetry",
            "description": [
              "\nFunction which reports telemetry information. This function is essentially\na \"reducer\" - it receives the existing \"stats\" object and returns an\nupdated version of the \"stats\" object.\n"
            ],
            "signature": [
              "(state: P, stats: Record<string, any>) => Record<string, any>"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableState.telemetry.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  "P"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableState.telemetry.$2",
                "type": "Object",
                "tags": [],
                "label": "stats",
                "description": [
                  "Stats object containing the stats which were already\ncollected. This `stats` object shall not be mutated in-line."
                ],
                "signature": [
                  "Record<string, any>"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "A new stats object augmented with new telemetry information."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableState.inject",
            "type": "Function",
            "tags": [],
            "label": "inject",
            "description": [
              "\nA function which receives state and a list of references and should return\nback the state with references injected. The default is an identity\nfunction.\n"
            ],
            "signature": [
              "(state: P, references: ",
              "SavedObjectReference",
              "[]) => P"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableState.inject.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  "P"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableState.inject.$2",
                "type": "Array",
                "tags": [],
                "label": "references",
                "description": [
                  "List of saved object references."
                ],
                "signature": [
                  "SavedObjectReference",
                  "[]"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Persistable state object with references injected."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableState.extract",
            "type": "Function",
            "tags": [],
            "label": "extract",
            "description": [
              "\nA function which receives state and should return the state with references\nextracted and an array of the extracted references. The default case could\nsimply return the same state with an empty array of references.\n"
            ],
            "signature": [
              "(state: P) => { state: P; references: ",
              "SavedObjectReference",
              "[]; }"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableState.extract.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  "P"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Persistable state object with references extracted and a list of\nreferences."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableState.migrations",
            "type": "Object",
            "tags": [],
            "label": "migrations",
            "description": [
              "\nA list of migration functions, which migrate the persistable state\nserializable object to the next version. Migration functions should are\nkeyed by the Kibana version using semver, where the version indicates to\nwhich version the state will be migrated to."
            ],
            "signature": [
              "{ [semver: string]: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunction",
                "text": "MigrateFunction"
              },
              "<any, any>; }"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PersistableStateService",
        "type": "Interface",
        "tags": [
          "todo"
        ],
        "label": "PersistableStateService",
        "description": [],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableStateService",
            "text": "PersistableStateService"
          },
          "<P>"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateService.telemetry",
            "type": "Function",
            "tags": [],
            "label": "telemetry",
            "description": [
              "\nFunction which reports telemetry information. This function is essentially\na \"reducer\" - it receives the existing \"stats\" object and returns an\nupdated version of the \"stats\" object.\n"
            ],
            "signature": [
              "(state: P, collector: Record<string, any>) => Record<string, any>"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableStateService.telemetry.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  "P"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableStateService.telemetry.$2",
                "type": "Object",
                "tags": [],
                "label": "collector",
                "description": [],
                "signature": [
                  "Record<string, any>"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "A new stats object augmented with new telemetry information."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateService.inject",
            "type": "Function",
            "tags": [],
            "label": "inject",
            "description": [
              "\nA function which receives state and a list of references and should return\nback the state with references injected. The default is an identity\nfunction.\n"
            ],
            "signature": [
              "(state: P, references: ",
              "SavedObjectReference",
              "[]) => P"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableStateService.inject.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  "P"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableStateService.inject.$2",
                "type": "Array",
                "tags": [],
                "label": "references",
                "description": [
                  "List of saved object references."
                ],
                "signature": [
                  "SavedObjectReference",
                  "[]"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Persistable state object with references injected."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateService.extract",
            "type": "Function",
            "tags": [],
            "label": "extract",
            "description": [
              "\nA function which receives state and should return the state with references\nextracted and an array of the extracted references. The default case could\nsimply return the same state with an empty array of references.\n"
            ],
            "signature": [
              "(state: P) => { state: P; references: ",
              "SavedObjectReference",
              "[]; }"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableStateService.extract.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  "P"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Persistable state object with references extracted and a list of\nreferences."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateService.migrateToLatest",
            "type": "Function",
            "tags": [],
            "label": "migrateToLatest",
            "description": [
              "\nA function which receives the state of an older object and version and\nshould migrate the state of the object to the latest possible version using\nthe `.migrations` dictionary provided on a {@link PersistableState} item.\n"
            ],
            "signature": [
              "((state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.VersionedState",
                "text": "VersionedState"
              },
              "<",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "server",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-server.Serializable",
                "text": "Serializable"
              },
              ">) => P) | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.PersistableStateService.migrateToLatest.$1",
                "type": "Object",
                "tags": [],
                "label": "state",
                "description": [
                  "The persistable state serializable state object."
                ],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.VersionedState",
                    "text": "VersionedState"
                  },
                  "<",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "server",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-server.Serializable",
                    "text": "Serializable"
                  },
                  ">"
                ],
                "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "A serializable state object migrated to the latest state."
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateService.getAllMigrations",
            "type": "Function",
            "tags": [],
            "label": "getAllMigrations",
            "description": [
              "\nreturns all registered migrations"
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.MigrateFunctionsObject",
                "text": "MigrateFunctionsObject"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.ReduxLikeStateContainer",
        "type": "Interface",
        "tags": [],
        "label": "ReduxLikeStateContainer",
        "description": [
          "\nFully featured state container which matches Redux store interface. Extends {@link StateContainer}.\nAllows to use state container with redux libraries."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, PureTransitions, PureSelectors> extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<State, PureTransitions, PureSelectors>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.ReduxLikeStateContainer.getState",
            "type": "Function",
            "tags": [],
            "label": "getState",
            "description": [],
            "signature": [
              "() => State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.ReduxLikeStateContainer.reducer",
            "type": "Function",
            "tags": [],
            "label": "reducer",
            "description": [],
            "signature": [
              "(state: State, action: ",
              "TransitionDescription",
              "<string, any[]>) => State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.ReduxLikeStateContainer.reducer.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.ReduxLikeStateContainer.reducer.$2",
                "type": "Object",
                "tags": [],
                "label": "action",
                "description": [],
                "signature": [
                  "TransitionDescription",
                  "<string, any[]>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.ReduxLikeStateContainer.replaceReducer",
            "type": "Function",
            "tags": [],
            "label": "replaceReducer",
            "description": [],
            "signature": [
              "(nextReducer: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.Reducer",
                "text": "Reducer"
              },
              "<State>) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.ReduxLikeStateContainer.replaceReducer.$1",
                "type": "Function",
                "tags": [],
                "label": "nextReducer",
                "description": [],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.Reducer",
                    "text": "Reducer"
                  },
                  "<State>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.ReduxLikeStateContainer.dispatch",
            "type": "Function",
            "tags": [],
            "label": "dispatch",
            "description": [],
            "signature": [
              "(action: ",
              "TransitionDescription",
              "<string, any[]>) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.ReduxLikeStateContainer.dispatch.$1",
                "type": "Object",
                "tags": [],
                "label": "action",
                "description": [],
                "signature": [
                  "TransitionDescription",
                  "<string, any[]>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.ReduxLikeStateContainer.addMiddleware",
            "type": "Function",
            "tags": [],
            "label": "addMiddleware",
            "description": [],
            "signature": [
              "(middleware: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.Middleware",
                "text": "Middleware"
              },
              "<State>) => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.ReduxLikeStateContainer.addMiddleware.$1",
                "type": "Function",
                "tags": [],
                "label": "middleware",
                "description": [],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.Middleware",
                    "text": "Middleware"
                  },
                  "<State>"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.ReduxLikeStateContainer.subscribe",
            "type": "Function",
            "tags": [],
            "label": "subscribe",
            "description": [],
            "signature": [
              "(listener: (state: State) => void) => () => void"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.ReduxLikeStateContainer.subscribe.$1",
                "type": "Function",
                "tags": [],
                "label": "listener",
                "description": [],
                "signature": [
                  "(state: State) => void"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.StateContainer",
        "type": "Interface",
        "tags": [],
        "label": "StateContainer",
        "description": [
          "\nFully featured state container with {@link Selector | Selectors} and {@link Transition | Transitions}. Extends {@link BaseStateContainer}."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<State, PureTransitions, PureSelectors> extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.BaseStateContainer",
            "text": "BaseStateContainer"
          },
          "<State>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.StateContainer.transitions",
            "type": "Object",
            "tags": [],
            "label": "transitions",
            "description": [],
            "signature": [
              "{ readonly [P in keyof ",
              "PureTransitionsToTransitions",
              "<PureTransitions>]: ",
              "PureTransitionsToTransitions",
              "<PureTransitions>[P]; }"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.StateContainer.selectors",
            "type": "Object",
            "tags": [],
            "label": "selectors",
            "description": [],
            "signature": [
              "{ readonly [P in keyof ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.PureSelectorsToSelectors",
                "text": "PureSelectorsToSelectors"
              },
              "<PureSelectors>]: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.PureSelectorsToSelectors",
                "text": "PureSelectorsToSelectors"
              },
              "<PureSelectors>[P]; }"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.UiComponentInstance",
        "type": "Interface",
        "tags": [],
        "label": "UiComponentInstance",
        "description": [
          "\nInstance of an UiComponent, corresponds to React virtual DOM node."
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UiComponentInstance",
            "text": "UiComponentInstance"
          },
          "<Props>"
        ],
        "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.UiComponentInstance.render",
            "type": "Function",
            "tags": [],
            "label": "render",
            "description": [
              "\nCall this method on initial render and on all subsequent updates.\n"
            ],
            "signature": [
              "(el: HTMLElement, props: Props) => void"
            ],
            "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.UiComponentInstance.render.$1",
                "type": "Object",
                "tags": [],
                "label": "el",
                "description": [
                  "DOM element."
                ],
                "signature": [
                  "HTMLElement"
                ],
                "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.UiComponentInstance.render.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [
                  "Component props, same as props in React."
                ],
                "signature": [
                  "Props"
                ],
                "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.UiComponentInstance.unmount",
            "type": "Function",
            "tags": [],
            "label": "unmount",
            "description": [
              "\nUn-mount UI component. Call it to remove view from DOM. Implementers of this\ninterface should clear DOM from this UI component and destroy any internal state."
            ],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.VersionedState",
        "type": "Interface",
        "tags": [],
        "label": "VersionedState",
        "description": [
          "\nVersioned state is a POJO JavaScript object that can be serialized to JSON,\nand which also contains the version information. The version is stored in\nsemver format and corresponds to the Kibana release version when the object\nwas created. The version can be used to apply migrations to the object.\n\nFor example:\n\n```ts\nconst obj: VersionedState<{ dashboardId: string }> = {\n  version: '7.14.0',\n  state: {\n    dashboardId: '123',\n  },\n};\n```"
        ],
        "signature": [
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.VersionedState",
            "text": "VersionedState"
          },
          "<S>"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.VersionedState.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.VersionedState.state",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "S"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.BaseState",
        "type": "Type",
        "tags": [],
        "label": "BaseState",
        "description": [
          "\nBase {@link StateContainer} state shape"
        ],
        "signature": [
          "object"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Comparator",
        "type": "Type",
        "tags": [],
        "label": "Comparator",
        "description": [
          "\nUsed to compare state, see {@link useContainerSelector}."
        ],
        "signature": [
          "(previous: Result, current: Result) => boolean"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Comparator.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "previous",
            "description": [],
            "signature": [
              "Result"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Comparator.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "current",
            "description": [],
            "signature": [
              "Result"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Connect",
        "type": "Type",
        "tags": [],
        "label": "Connect",
        "description": [
          "\nSimilar to `connect` from react-redux,\nallows to map state from state container to component's props."
        ],
        "signature": [
          "<Props extends object, StatePropKeys extends keyof Props>(mapStateToProp: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MapStateToProps",
            "text": "MapStateToProps"
          },
          "<State, Pick<Props, StatePropKeys>>) => (component: React.ComponentType<Props>) => React.FC<Pick<Props, Exclude<keyof Props, StatePropKeys>>>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Connect.$1",
            "type": "Function",
            "tags": [],
            "label": "mapStateToProp",
            "description": [],
            "signature": [
              "(state: State) => Pick<Props, StatePropKeys>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.Connect.$1.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "state",
                "description": [],
                "signature": [
                  "State"
                ],
                "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Dispatch",
        "type": "Type",
        "tags": [],
        "label": "Dispatch",
        "description": [
          "\nRedux like dispatch"
        ],
        "signature": [
          "(action: T) => void"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Dispatch.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.EnsurePureSelector",
        "type": "Type",
        "tags": [],
        "label": "EnsurePureSelector",
        "description": [],
        "signature": [
          "T extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any> ? T : never"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.EnsurePureSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.EnsurePureTransition",
        "type": "Type",
        "tags": [],
        "label": "EnsurePureTransition",
        "description": [],
        "signature": [
          "T extends ",
          "PureTransition",
          "<any, any> ? T : never"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.EnsurePureTransition.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Get",
        "type": "Type",
        "tags": [],
        "label": "Get",
        "description": [],
        "signature": [
          "() => T"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.MapStateToProps",
        "type": "Type",
        "tags": [],
        "label": "MapStateToProps",
        "description": [
          "\nState container state to component props mapper.\nSee {@link Connect}"
        ],
        "signature": [
          "(state: State) => StateProps"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.MapStateToProps.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Middleware",
        "type": "Type",
        "tags": [],
        "label": "Middleware",
        "description": [
          "\nRedux like Middleware"
        ],
        "signature": [
          "(store: Pick<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.ReduxLikeStateContainer",
            "text": "ReduxLikeStateContainer"
          },
          "<State, any, {}>, \"getState\" | \"dispatch\">) => (next: (action: ",
          "TransitionDescription",
          "<string, any[]>) => any) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Dispatch",
            "text": "Dispatch"
          },
          "<",
          "TransitionDescription",
          "<string, any[]>>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Middleware.$1",
            "type": "Object",
            "tags": [],
            "label": "store",
            "description": [],
            "signature": [
              "{ getState: () => State; dispatch: (action: ",
              "TransitionDescription",
              "<string, any[]>) => void; }"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.MigrateFunction",
        "type": "Type",
        "tags": [],
        "label": "MigrateFunction",
        "description": [],
        "signature": [
          "(state: FromVersion) => ToVersion"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.MigrateFunction.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "FromVersion"
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.MigrateFunctionsObject",
        "type": "Type",
        "tags": [],
        "label": "MigrateFunctionsObject",
        "description": [
          "\nCollection of migrations that a given type of persistable state object has\naccumulated over time. Migration functions are keyed using semver version\nof Kibana releases."
        ],
        "signature": [
          "{ [semver: string]: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunction",
            "text": "MigrateFunction"
          },
          "<any, any>; }"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PersistableStateDefinition",
        "type": "Type",
        "tags": [
          "todo"
        ],
        "label": "PersistableStateDefinition",
        "description": [],
        "signature": [
          "{ telemetry?: ((state: P, stats: Record<string, any>) => Record<string, any>) | undefined; inject?: ((state: P, references: ",
          "SavedObjectReference",
          "[]) => P) | undefined; extract?: ((state: P) => { state: P; references: ",
          "SavedObjectReference",
          "[]; }) | undefined; migrations?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.MigrateFunctionsObject",
            "text": "MigrateFunctionsObject"
          },
          " | undefined; }"
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PersistableStateMigrateFn",
        "type": "Type",
        "tags": [],
        "label": "PersistableStateMigrateFn",
        "description": [
          "\nmigrate function runs the specified migration"
        ],
        "signature": [
          "(state: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.SerializableRecord",
            "text": "SerializableRecord"
          },
          ", version: string) => ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.SerializableRecord",
            "text": "SerializableRecord"
          }
        ],
        "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateMigrateFn.$1",
            "type": "Object",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/utility-types",
                "scope": "server",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-server.SerializableRecord",
                "text": "SerializableRecord"
              }
            ],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PersistableStateMigrateFn.$2",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "src/plugins/kibana_utils/common/persistable_state/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PureSelector",
        "type": "Type",
        "tags": [],
        "label": "PureSelector",
        "description": [],
        "signature": [
          "(state: State) => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.Selector",
            "text": "Selector"
          },
          "<Result, Args>"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PureSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PureSelectorsToSelectors",
        "type": "Type",
        "tags": [],
        "label": "PureSelectorsToSelectors",
        "description": [],
        "signature": [
          "{ [K in keyof T]: ReturnType<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Ensure",
            "text": "Ensure"
          },
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Ensure",
            "text": "Ensure"
          },
          "<T[K], ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any>>, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any>>>; }"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.PureSelectorToSelector",
        "type": "Type",
        "tags": [],
        "label": "PureSelectorToSelector",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.Ensure",
            "text": "Ensure"
          },
          "<T, ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PureSelector",
            "text": "PureSelector"
          },
          "<any, any, any>> extends (...args: any) => infer R ? R : any"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.PureSelectorToSelector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "args",
            "description": [],
            "signature": [
              "Args"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Reducer",
        "type": "Type",
        "tags": [],
        "label": "Reducer",
        "description": [
          "\nRedux like Reducer"
        ],
        "signature": [
          "(state: State, action: ",
          "TransitionDescription",
          "<string, any[]>) => State"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Reducer.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "State"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Reducer.$2",
            "type": "Object",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "TransitionDescription",
              "<string, any[]>"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Selector",
        "type": "Type",
        "tags": [],
        "label": "Selector",
        "description": [],
        "signature": [
          "(...args: Args) => Result"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Selector.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "args",
            "description": [],
            "signature": [
              "Args"
            ],
            "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.Set",
        "type": "Type",
        "tags": [],
        "label": "Set",
        "description": [],
        "signature": [
          "(value: T) => void"
        ],
        "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.Set.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "value",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/plugins/kibana_utils/common/create_getter_setter.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.UiComponent",
        "type": "Type",
        "tags": [],
        "label": "UiComponent",
        "description": [
          "\nIn many places in Kibana we want to be agnostic to frontend view library,\ni.e. instead of exposing React-specific APIs we want to expose APIs that\nare orthogonal to any rendering library. This interface represents such UI\ncomponents. UI component receives a DOM element and `props` through `render()`\nmethod, the `render()` method can be called many times.\n\nAlthough Kibana aims to be library agnostic, Kibana itself is written in React,\nthus here we define `UiComponent` which is an abstract unit of UI that can be\nimplemented in any framework, but it maps easily to React components, i.e.\n`UiComponent<Props>` is like `React.ComponentType<Props>`."
        ],
        "signature": [
          "() => ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.UiComponentInstance",
            "text": "UiComponentInstance"
          },
          "<Props>"
        ],
        "path": "src/plugins/kibana_utils/common/ui/ui_component.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.UnboxState",
        "type": "Type",
        "tags": [],
        "label": "UnboxState",
        "description": [
          "\nUtility type for inferring state shape from {@link StateContainer}"
        ],
        "signature": [
          "Container extends ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.StateContainer",
            "text": "StateContainer"
          },
          "<infer T, any, {}> ? T : never"
        ],
        "path": "src/plugins/kibana_utils/common/state_containers/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "kibanaUtils",
        "id": "def-common.url",
        "type": "Object",
        "tags": [],
        "label": "url",
        "description": [],
        "path": "src/plugins/kibana_utils/common/url/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.url.encodeQuery",
            "type": "Function",
            "tags": [],
            "label": "encodeQuery",
            "description": [],
            "signature": [
              "(query: ",
              "ParsedQuery",
              "<string>, encodeFunction?: (val: string, pctEncodeSpaces?: boolean | undefined) => string, pctEncodeSpaces?: boolean) => ",
              "ParsedQuery",
              "<string>"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.encodeQuery.$1",
                "type": "Object",
                "tags": [],
                "label": "query",
                "description": [],
                "signature": [
                  "ParsedQuery",
                  "<string>"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.encodeQuery.$2",
                "type": "Function",
                "tags": [],
                "label": "encodeFunction",
                "description": [],
                "signature": [
                  "(val: string, pctEncodeSpaces?: boolean | undefined) => string"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false,
                "returnComment": [],
                "children": [
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-common.url.encodeQuery.$2.$1",
                    "type": "string",
                    "tags": [],
                    "label": "val",
                    "description": [],
                    "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "kibanaUtils",
                    "id": "def-common.url.encodeQuery.$2.$2",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "pctEncodeSpaces",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                    "deprecated": false
                  }
                ]
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.encodeQuery.$3",
                "type": "boolean",
                "tags": [],
                "label": "pctEncodeSpaces",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.url.encodeUriQuery",
            "type": "Function",
            "tags": [],
            "label": "encodeUriQuery",
            "description": [],
            "signature": [
              "(val: string, pctEncodeSpaces?: boolean) => string"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.encodeUriQuery.$1",
                "type": "string",
                "tags": [],
                "label": "val",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.encodeUriQuery.$2",
                "type": "boolean",
                "tags": [],
                "label": "pctEncodeSpaces",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "kibanaUtils",
            "id": "def-common.url.addQueryParam",
            "type": "Function",
            "tags": [],
            "label": "addQueryParam",
            "description": [],
            "signature": [
              "(params: string, key: string, value?: string | undefined) => string"
            ],
            "path": "src/plugins/kibana_utils/common/url/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.addQueryParam.$1",
                "type": "string",
                "tags": [],
                "label": "params",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.addQueryParam.$2",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "kibanaUtils",
                "id": "def-common.url.addQueryParam.$3",
                "type": "string",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/plugins/kibana_utils/common/url/encode_uri_query.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  }
}