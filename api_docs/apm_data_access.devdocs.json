{
  "id": "apmDataAccess",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.APMEventClient",
        "type": "Class",
        "tags": [],
        "label": "APMEventClient",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.indices",
            "type": "Object",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "{ readonly error: string; readonly transaction: string; readonly span: string; readonly metric: string; readonly onboarding: string; readonly sourcemap: string; }"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "config",
                "description": [],
                "signature": [
                  {
                    "pluginId": "apmDataAccess",
                    "scope": "server",
                    "docId": "kibApmDataAccessPluginApi",
                    "section": "def-server.APMEventClientConfig",
                    "text": "APMEventClientConfig"
                  }
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.search",
            "type": "Function",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "<TParams extends ",
              {
                "pluginId": "apmDataAccess",
                "scope": "server",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-server.APMEventESSearchRequest",
                "text": "APMEventESSearchRequest"
              },
              ">(operationName: string, params: TParams) => Promise<TypedSearchResponse<TParams>>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.search.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.search.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "TParams"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.logEventSearch",
            "type": "Function",
            "tags": [],
            "label": "logEventSearch",
            "description": [],
            "signature": [
              "<TParams extends ",
              {
                "pluginId": "apmDataAccess",
                "scope": "server",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-server.APMLogEventESSearchRequest",
                "text": "APMLogEventESSearchRequest"
              },
              ">(operationName: string, params: TParams) => Promise<TypedLogEventSearchResponse<TParams>>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.logEventSearch.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.logEventSearch.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "TParams"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.msearch",
            "type": "Function",
            "tags": [],
            "label": "msearch",
            "description": [],
            "signature": [
              "<TParams extends ",
              {
                "pluginId": "apmDataAccess",
                "scope": "server",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-server.APMEventESSearchRequest",
                "text": "APMEventESSearchRequest"
              },
              ">(operationName: string, ...allParams: TParams[]) => Promise<TypedMSearchResponse<TParams>>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.msearch.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.msearch.$2",
                "type": "Array",
                "tags": [],
                "label": "allParams",
                "description": [],
                "signature": [
                  "TParams[]"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.eqlSearch",
            "type": "Function",
            "tags": [],
            "label": "eqlSearch",
            "description": [],
            "signature": [
              "(operationName: string, params: APMEventEqlSearchRequest) => Promise<",
              "EqlSearchResponse",
              "<unknown>>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.eqlSearch.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.eqlSearch.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "APMEventEqlSearchRequest"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.fieldCaps",
            "type": "Function",
            "tags": [],
            "label": "fieldCaps",
            "description": [],
            "signature": [
              "(operationName: string, params: ",
              "APMEventFieldCapsRequest",
              ") => Promise<",
              "FieldCapsResponse",
              ">"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.fieldCaps.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.fieldCaps.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "APMEventFieldCapsRequest"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.termsEnum",
            "type": "Function",
            "tags": [],
            "label": "termsEnum",
            "description": [],
            "signature": [
              "(operationName: string, params: ",
              "APMEventTermsEnumRequest",
              ") => Promise<",
              "TermsEnumResponse",
              ">"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.termsEnum.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.termsEnum.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "APMEventTermsEnumRequest"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClient.getIndicesFromProcessorEvent",
            "type": "Function",
            "tags": [],
            "label": "getIndicesFromProcessorEvent",
            "description": [],
            "signature": [
              "(processorEvent: ",
              {
                "pluginId": "observability",
                "scope": "common",
                "docId": "kibObservabilityPluginApi",
                "section": "def-common.ProcessorEvent",
                "text": "ProcessorEvent"
              },
              ") => string[]"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.APMEventClient.getIndicesFromProcessorEvent.$1",
                "type": "Enum",
                "tags": [],
                "label": "processorEvent",
                "description": [],
                "signature": [
                  {
                    "pluginId": "observability",
                    "scope": "common",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-common.ProcessorEvent",
                    "text": "ProcessorEvent"
                  }
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.ApmDataAccessPrivilegesCheck",
        "type": "Interface",
        "tags": [],
        "label": "ApmDataAccessPrivilegesCheck",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/check_privileges.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.ApmDataAccessPrivilegesCheck.request",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              "KibanaRequest",
              "<unknown, unknown, unknown, any>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/check_privileges.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.ApmDataAccessPrivilegesCheck.security",
            "type": "Object",
            "tags": [],
            "label": "security",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/security-plugin-types-server",
                "scope": "server",
                "docId": "kibKbnSecurityPluginTypesServerPluginApi",
                "section": "def-server.SecurityPluginStart",
                "text": "SecurityPluginStart"
              },
              " | undefined"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/check_privileges.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.ApmDataAccessPrivilegesCheck.getApmIndices",
            "type": "Function",
            "tags": [],
            "label": "getApmIndices",
            "description": [],
            "signature": [
              "(request: ",
              "KibanaRequest",
              "<unknown, unknown, unknown, any>) => Promise<Readonly<{} & { error: string; transaction: string; span: string; metric: string; onboarding: string; sourcemap: string; }>>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/check_privileges.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-server.ApmDataAccessPrivilegesCheck.getApmIndices.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  "KibanaRequest",
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/check_privileges.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.ApmDataAccessServicesParams",
        "type": "Interface",
        "tags": [],
        "label": "ApmDataAccessServicesParams",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_services.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.ApmDataAccessServicesParams.apmEventClient",
            "type": "Object",
            "tags": [],
            "label": "apmEventClient",
            "description": [],
            "signature": [
              {
                "pluginId": "apmDataAccess",
                "scope": "server",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-server.APMEventClient",
                "text": "APMEventClient"
              }
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_services.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.APMEventClientConfig",
        "type": "Interface",
        "tags": [],
        "label": "APMEventClientConfig",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClientConfig.esClient",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; helpers: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; asyncSearch: ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; capabilities: { (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; cluster: ",
              "default",
              "; connector: ",
              "default",
              "; count: { (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; eql: ",
              "default",
              "; esql: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; healthReport: { (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "HealthReportResponse",
              ", unknown>>; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; }; ilm: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; indices: ",
              "default",
              "; inference: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; monitoring: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; profiling: ",
              "default",
              "; putScript: { (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; queryRules: ",
              "default",
              "; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchApplication: ",
              "default",
              "; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; security: ",
              "default",
              "; shutdown: ",
              "default",
              "; simulate: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; synonyms: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClientConfig.debug",
            "type": "boolean",
            "tags": [],
            "label": "debug",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClientConfig.request",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              "KibanaRequest",
              "<unknown, unknown, unknown, any>"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClientConfig.indices",
            "type": "Object",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "{ readonly error: string; readonly transaction: string; readonly span: string; readonly metric: string; readonly onboarding: string; readonly sourcemap: string; }"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.APMEventClientConfig.options",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "{ includeFrozen: boolean; inspectableEsQueriesMap?: WeakMap<",
              "KibanaRequest",
              "<unknown, unknown, unknown, any>, ",
              "InspectResponse",
              "> | undefined; excludedDataTiers?: ",
              {
                "pluginId": "observabilityShared",
                "scope": "common",
                "docId": "kibObservabilitySharedPluginApi",
                "section": "def-common.DataTier",
                "text": "DataTier"
              },
              "[] | undefined; }"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.DocumentSourcesRequest",
        "type": "Interface",
        "tags": [],
        "label": "DocumentSourcesRequest",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.DocumentSourcesRequest.apmEventClient",
            "type": "Object",
            "tags": [],
            "label": "apmEventClient",
            "description": [],
            "signature": [
              {
                "pluginId": "apmDataAccess",
                "scope": "server",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-server.APMEventClient",
                "text": "APMEventClient"
              }
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.DocumentSourcesRequest.start",
            "type": "number",
            "tags": [],
            "label": "start",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.DocumentSourcesRequest.end",
            "type": "number",
            "tags": [],
            "label": "end",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.DocumentSourcesRequest.kuery",
            "type": "string",
            "tags": [],
            "label": "kuery",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.DocumentSourcesRequest.enableServiceTransactionMetrics",
            "type": "boolean",
            "tags": [],
            "label": "enableServiceTransactionMetrics",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.DocumentSourcesRequest.enableContinuousRollups",
            "type": "boolean",
            "tags": [],
            "label": "enableContinuousRollups",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_sources/get_document_sources.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.GetDocumentTypeParams",
        "type": "Interface",
        "tags": [],
        "label": "GetDocumentTypeParams",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_type_config/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.GetDocumentTypeParams.start",
            "type": "number",
            "tags": [],
            "label": "start",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_type_config/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.GetDocumentTypeParams.end",
            "type": "number",
            "tags": [],
            "label": "end",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_type_config/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.GetDocumentTypeParams.documentSources",
            "type": "Array",
            "tags": [],
            "label": "documentSources",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "apmDataAccess",
                "scope": "common",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-common.ApmDataSource",
                "text": "ApmDataSource"
              },
              "<AnyApmDocumentType> & { hasDocs: boolean; hasDurationSummaryField: boolean; })[]"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_type_config/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.GetDocumentTypeParams.documentTypes",
            "type": "Array",
            "tags": [],
            "label": "documentTypes",
            "description": [],
            "signature": [
              {
                "pluginId": "apmDataAccess",
                "scope": "common",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-common.ApmDocumentType",
                "text": "ApmDocumentType"
              },
              "[]"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_type_config/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.GetDocumentTypeParams.numBuckets",
            "type": "number",
            "tags": [],
            "label": "numBuckets",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_document_type_config/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.HostNamesRequest",
        "type": "Interface",
        "tags": [],
        "label": "HostNamesRequest",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.HostNamesRequest.query",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "QueryDslQueryContainer",
              " | undefined"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.HostNamesRequest.kuery",
            "type": "string",
            "tags": [],
            "label": "kuery",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.HostNamesRequest.start",
            "type": "number",
            "tags": [],
            "label": "start",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.HostNamesRequest.end",
            "type": "number",
            "tags": [],
            "label": "end",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.HostNamesRequest.size",
            "type": "number",
            "tags": [],
            "label": "size",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-server.HostNamesRequest.documentSources",
            "type": "Array",
            "tags": [],
            "label": "documentSources",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "apmDataAccess",
                "scope": "common",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-common.ApmDataSource",
                "text": "ApmDataSource"
              },
              "<AnyApmDocumentType> & { hasDocs: boolean; hasDurationSummaryField: boolean; })[]"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_host_names/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.ApmDataAccessServices",
        "type": "Type",
        "tags": [],
        "label": "ApmDataAccessServices",
        "description": [],
        "signature": [
          "{ getDocumentSources: ({ enableContinuousRollups, enableServiceTransactionMetrics, end, kuery, start, }: Omit<",
          {
            "pluginId": "apmDataAccess",
            "scope": "server",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-server.DocumentSourcesRequest",
            "text": "DocumentSourcesRequest"
          },
          ", \"apmEventClient\">) => Promise<(",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSource",
            "text": "ApmDataSource"
          },
          "<AnyApmDocumentType> & { hasDocs: boolean; hasDurationSummaryField: boolean; })[]>; getHostNames: ({ start, end, size, query, documentSources }: ",
          {
            "pluginId": "apmDataAccess",
            "scope": "server",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-server.HostNamesRequest",
            "text": "HostNamesRequest"
          },
          ") => Promise<string[]>; getDocumentTypeConfig: ({ start, end, numBuckets, documentTypes, documentSources, }: ",
          {
            "pluginId": "apmDataAccess",
            "scope": "server",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-server.GetDocumentTypeParams",
            "text": "GetDocumentTypeParams"
          },
          ") => { preferredSource: { source: ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSourceWithSummary",
            "text": "ApmDataSourceWithSummary"
          },
          "<AnyApmDocumentType>; bucketSizeInSeconds: number; }; documentTypeConfig: DocumentTypeConfigOf<AnyApmDocumentType>; }; getHostServices: ({ start, end, size, filters, documentSources }: ",
          "HostServicesRequest",
          ") => Promise<{ services: { serviceName: string; agentName: string | null; }[]; }>; }"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.APMEventESSearchRequest",
        "type": "Type",
        "tags": [],
        "label": "APMEventESSearchRequest",
        "description": [],
        "signature": [
          "Omit<",
          "SearchRequest",
          ", \"index\"> & { apm: { includeLegacyData?: boolean | undefined; } & ({ events: ",
          {
            "pluginId": "observability",
            "scope": "common",
            "docId": "kibObservabilityPluginApi",
            "section": "def-common.ProcessorEvent",
            "text": "ProcessorEvent"
          },
          "[]; } | { sources: ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSource",
            "text": "ApmDataSource"
          },
          "<AnyApmDocumentType>[]; }); size: number; track_total_hits: number | boolean; }"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-server.APMLogEventESSearchRequest",
        "type": "Type",
        "tags": [],
        "label": "APMLogEventESSearchRequest",
        "description": [],
        "signature": [
          "Omit<",
          "SearchRequest",
          ", \"index\"> & { size: number; track_total_hits: number | boolean; }"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/server/lib/helpers/create_es_client/create_apm_event_client/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "apmDataAccess",
      "id": "def-server.ApmDataAccessPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "ApmDataAccessPluginSetup",
      "description": [],
      "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "apmDataAccess",
          "id": "def-server.ApmDataAccessPluginSetup.apmIndicesFromConfigFile",
          "type": "Object",
          "tags": [],
          "label": "apmIndicesFromConfigFile",
          "description": [],
          "signature": [
            "{ readonly error: string; readonly transaction: string; readonly span: string; readonly metric: string; readonly onboarding: string; readonly sourcemap: string; }"
          ],
          "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "apmDataAccess",
          "id": "def-server.ApmDataAccessPluginSetup.getApmIndices",
          "type": "Function",
          "tags": [],
          "label": "getApmIndices",
          "description": [],
          "signature": [
            "(soClient: ",
            "SavedObjectsClientContract",
            ") => Promise<Readonly<{} & { error: string; transaction: string; span: string; metric: string; onboarding: string; sourcemap: string; }>>"
          ],
          "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "apmDataAccess",
              "id": "def-server.ApmDataAccessPluginSetup.getApmIndices.$1",
              "type": "Object",
              "tags": [],
              "label": "soClient",
              "description": [],
              "signature": [
                "SavedObjectsClientContract"
              ],
              "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "apmDataAccess",
          "id": "def-server.ApmDataAccessPluginSetup.getServices",
          "type": "Function",
          "tags": [],
          "label": "getServices",
          "description": [],
          "signature": [
            "(params: ",
            {
              "pluginId": "apmDataAccess",
              "scope": "server",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-server.ApmDataAccessServicesParams",
              "text": "ApmDataAccessServicesParams"
            },
            ") => { getDocumentSources: ({ enableContinuousRollups, enableServiceTransactionMetrics, end, kuery, start, }: Omit<",
            {
              "pluginId": "apmDataAccess",
              "scope": "server",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-server.DocumentSourcesRequest",
              "text": "DocumentSourcesRequest"
            },
            ", \"apmEventClient\">) => Promise<(",
            {
              "pluginId": "apmDataAccess",
              "scope": "common",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-common.ApmDataSource",
              "text": "ApmDataSource"
            },
            "<AnyApmDocumentType> & { hasDocs: boolean; hasDurationSummaryField: boolean; })[]>; getHostNames: ({ start, end, size, query, documentSources }: ",
            {
              "pluginId": "apmDataAccess",
              "scope": "server",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-server.HostNamesRequest",
              "text": "HostNamesRequest"
            },
            ") => Promise<string[]>; getDocumentTypeConfig: ({ start, end, numBuckets, documentTypes, documentSources, }: ",
            {
              "pluginId": "apmDataAccess",
              "scope": "server",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-server.GetDocumentTypeParams",
              "text": "GetDocumentTypeParams"
            },
            ") => { preferredSource: { source: ",
            {
              "pluginId": "apmDataAccess",
              "scope": "common",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-common.ApmDataSourceWithSummary",
              "text": "ApmDataSourceWithSummary"
            },
            "<AnyApmDocumentType>; bucketSizeInSeconds: number; }; documentTypeConfig: DocumentTypeConfigOf<AnyApmDocumentType>; }; getHostServices: ({ start, end, size, filters, documentSources }: ",
            "HostServicesRequest",
            ") => Promise<{ services: { serviceName: string; agentName: string | null; }[]; }>; }"
          ],
          "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "apmDataAccess",
              "id": "def-server.ApmDataAccessPluginSetup.getServices.$1",
              "type": "Object",
              "tags": [],
              "label": "params",
              "description": [],
              "signature": [
                {
                  "pluginId": "apmDataAccess",
                  "scope": "server",
                  "docId": "kibApmDataAccessPluginApi",
                  "section": "def-server.ApmDataAccessServicesParams",
                  "text": "ApmDataAccessServicesParams"
                }
              ],
              "path": "x-pack/solutions/observability/plugins/apm_data_access/server/services/get_services.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "apmDataAccess",
      "id": "def-server.ApmDataAccessPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "ApmDataAccessPluginStart",
      "description": [],
      "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "apmDataAccess",
          "id": "def-server.ApmDataAccessPluginStart.hasPrivileges",
          "type": "Function",
          "tags": [],
          "label": "hasPrivileges",
          "description": [],
          "signature": [
            "(params: Pick<",
            {
              "pluginId": "apmDataAccess",
              "scope": "server",
              "docId": "kibApmDataAccessPluginApi",
              "section": "def-server.ApmDataAccessPrivilegesCheck",
              "text": "ApmDataAccessPrivilegesCheck"
            },
            ", \"request\">) => Promise<boolean>"
          ],
          "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "apmDataAccess",
              "id": "def-server.ApmDataAccessPluginStart.hasPrivileges.$1",
              "type": "Object",
              "tags": [],
              "label": "params",
              "description": [],
              "signature": [
                "Pick<",
                {
                  "pluginId": "apmDataAccess",
                  "scope": "server",
                  "docId": "kibApmDataAccessPluginApi",
                  "section": "def-server.ApmDataAccessPrivilegesCheck",
                  "text": "ApmDataAccessPrivilegesCheck"
                },
                ", \"request\">"
              ],
              "path": "x-pack/solutions/observability/plugins/apm_data_access/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.getBucketSize",
        "type": "Function",
        "tags": [],
        "label": "getBucketSize",
        "description": [],
        "signature": [
          "({\n  start,\n  end,\n  numBuckets = 50,\n  minBucketSize,\n}: { start: number; end: number; numBuckets?: number | undefined; minBucketSize?: number | undefined; }) => { bucketSize: number; intervalString: string; }"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_bucket_size/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-common.getBucketSize.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  start,\n  end,\n  numBuckets = 50,\n  minBucketSize,\n}",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_bucket_size/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-common.getBucketSize.$1.start",
                "type": "number",
                "tags": [],
                "label": "start",
                "description": [],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_bucket_size/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-common.getBucketSize.$1.end",
                "type": "number",
                "tags": [],
                "label": "end",
                "description": [],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_bucket_size/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-common.getBucketSize.$1.numBuckets",
                "type": "number",
                "tags": [],
                "label": "numBuckets",
                "description": [],
                "signature": [
                  "number | undefined"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_bucket_size/index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-common.getBucketSize.$1.minBucketSize",
                "type": "number",
                "tags": [],
                "label": "minBucketSize",
                "description": [],
                "signature": [
                  "number | undefined"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_bucket_size/index.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.getPreferredBucketSizeAndDataSource",
        "type": "Function",
        "tags": [],
        "label": "getPreferredBucketSizeAndDataSource",
        "description": [],
        "signature": [
          "({\n  sources,\n  bucketSizeInSeconds,\n}: { sources: ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSourceWithSummary",
            "text": "ApmDataSourceWithSummary"
          },
          "<AnyApmDocumentType>[]; bucketSizeInSeconds: number; }) => { source: ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSourceWithSummary",
            "text": "ApmDataSourceWithSummary"
          },
          "<AnyApmDocumentType>; bucketSizeInSeconds: number; }"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_preferred_bucket_size_and_data_source.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-common.getPreferredBucketSizeAndDataSource.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  sources,\n  bucketSizeInSeconds,\n}",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_preferred_bucket_size_and_data_source.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-common.getPreferredBucketSizeAndDataSource.$1.sources",
                "type": "Array",
                "tags": [],
                "label": "sources",
                "description": [],
                "signature": [
                  {
                    "pluginId": "apmDataAccess",
                    "scope": "common",
                    "docId": "kibApmDataAccessPluginApi",
                    "section": "def-common.ApmDataSourceWithSummary",
                    "text": "ApmDataSourceWithSummary"
                  },
                  "<AnyApmDocumentType>[]"
                ],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_preferred_bucket_size_and_data_source.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "apmDataAccess",
                "id": "def-common.getPreferredBucketSizeAndDataSource.$1.bucketSizeInSeconds",
                "type": "number",
                "tags": [],
                "label": "bucketSizeInSeconds",
                "description": [],
                "path": "x-pack/solutions/observability/plugins/apm_data_access/common/utils/get_preferred_bucket_size_and_data_source.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.ApmDataSource",
        "type": "Interface",
        "tags": [],
        "label": "ApmDataSource",
        "description": [],
        "signature": [
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSource",
            "text": "ApmDataSource"
          },
          "<TDocumentType>"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/data_source.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-common.ApmDataSource.rollupInterval",
            "type": "Enum",
            "tags": [],
            "label": "rollupInterval",
            "description": [],
            "signature": [
              {
                "pluginId": "apmDataAccess",
                "scope": "common",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-common.RollupInterval",
                "text": "RollupInterval"
              }
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/common/data_source.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-common.ApmDataSource.documentType",
            "type": "Uncategorized",
            "tags": [],
            "label": "documentType",
            "description": [],
            "signature": [
              "TDocumentType"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/common/data_source.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.TimeRangeMetadata",
        "type": "Interface",
        "tags": [],
        "label": "TimeRangeMetadata",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/time_range_metadata.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-common.TimeRangeMetadata.isUsingServiceDestinationMetrics",
            "type": "boolean",
            "tags": [],
            "label": "isUsingServiceDestinationMetrics",
            "description": [],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/common/time_range_metadata.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "apmDataAccess",
            "id": "def-common.TimeRangeMetadata.sources",
            "type": "Array",
            "tags": [],
            "label": "sources",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "apmDataAccess",
                "scope": "common",
                "docId": "kibApmDataAccessPluginApi",
                "section": "def-common.ApmDataSource",
                "text": "ApmDataSource"
              },
              "<AnyApmDocumentType> & { hasDocs: boolean; hasDurationSummaryField: boolean; })[]"
            ],
            "path": "x-pack/solutions/observability/plugins/apm_data_access/common/time_range_metadata.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.ApmDocumentType",
        "type": "Enum",
        "tags": [],
        "label": "ApmDocumentType",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/document_type.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.RollupInterval",
        "type": "Enum",
        "tags": [],
        "label": "RollupInterval",
        "description": [],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/rollup.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.ApmDataSourceWithSummary",
        "type": "Type",
        "tags": [],
        "label": "ApmDataSourceWithSummary",
        "description": [],
        "signature": [
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDataSource",
            "text": "ApmDataSource"
          },
          "<T> & { hasDurationSummaryField: boolean; hasDocs: boolean; }"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/data_source.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.ApmServiceTransactionDocumentType",
        "type": "Type",
        "tags": [],
        "label": "ApmServiceTransactionDocumentType",
        "description": [],
        "signature": [
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDocumentType",
            "text": "ApmDocumentType"
          },
          ".TransactionMetric | ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDocumentType",
            "text": "ApmDocumentType"
          },
          ".ServiceTransactionMetric | ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDocumentType",
            "text": "ApmDocumentType"
          },
          ".TransactionEvent"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/document_type.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.ApmTransactionDocumentType",
        "type": "Type",
        "tags": [],
        "label": "ApmTransactionDocumentType",
        "description": [],
        "signature": [
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDocumentType",
            "text": "ApmDocumentType"
          },
          ".TransactionMetric | ",
          {
            "pluginId": "apmDataAccess",
            "scope": "common",
            "docId": "kibApmDataAccessPluginApi",
            "section": "def-common.ApmDocumentType",
            "text": "ApmDocumentType"
          },
          ".TransactionEvent"
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/document_type.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.PLUGIN_ID",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_ID",
        "description": [],
        "signature": [
          "\"apmDataAccess\""
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "apmDataAccess",
        "id": "def-common.PLUGIN_NAME",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_NAME",
        "description": [],
        "signature": [
          "\"apmDataAccess\""
        ],
        "path": "x-pack/solutions/observability/plugins/apm_data_access/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}