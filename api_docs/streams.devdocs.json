{
  "id": "streams",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "streams",
        "id": "def-server.StreamsConfig",
        "type": "Type",
        "tags": [],
        "label": "StreamsConfig",
        "description": [],
        "signature": [
          "{}"
        ],
        "path": "x-pack/plugins/streams/common/config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "streams",
        "id": "def-server.StreamsRouteRepository",
        "type": "Type",
        "tags": [],
        "label": "StreamsRouteRepository",
        "description": [],
        "signature": [
          "{ \"GET /api/streams 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/streams 2023-10-31\", Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; \"DELETE /api/streams/{id} 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"DELETE /api/streams/{id} 2023-10-31\", Zod.ZodObject<{ path: Zod.ZodObject<{ id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; }, { id: string; }>; }, \"strip\", Zod.ZodTypeAny, { path: { id: string; }; }, { path: { id: string; }; }>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; \"PUT /api/streams/{id} 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"PUT /api/streams/{id} 2023-10-31\", Zod.ZodObject<{ path: Zod.ZodObject<{ id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; }, { id: string; }>; body: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          "Condition",
          ", Zod.ZodTypeDef, ",
          "Condition",
          ">>; config: Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"grok\">; field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"dissect\">; field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: \"dissect\"; field: string; pattern: string; }, { type: \"dissect\"; field: string; pattern: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }, { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }>, \"many\">>; fields: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }>, \"many\">>; children: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ id: Zod.ZodString; condition: Zod.ZodType<",
          "Condition",
          ", Zod.ZodTypeDef, ",
          "Condition",
          ">; }, \"strip\", Zod.ZodTypeAny, { id: string; condition?: ",
          "Condition",
          "; }, { id: string; condition?: ",
          "Condition",
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { children: { id: string; condition?: ",
          "Condition",
          "; }[]; fields: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[]; processing: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[]; }, { children?: { id: string; condition?: ",
          "Condition",
          "; }[] | undefined; fields?: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[] | undefined; processing?: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[] | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { path: { id: string; }; body: { children: { id: string; condition?: ",
          "Condition",
          "; }[]; fields: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[]; processing: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[]; }; }, { path: { id: string; }; body: { children?: { id: string; condition?: ",
          "Condition",
          "; }[] | undefined; fields?: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[] | undefined; processing?: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[] | undefined; }; }>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; \"GET /api/streams/{id} 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/streams/{id} 2023-10-31\", Zod.ZodObject<{ path: Zod.ZodObject<{ id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; }, { id: string; }>; }, \"strip\", Zod.ZodTypeAny, { path: { id: string; }; }, { path: { id: string; }; }>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; \"POST /api/streams/{id}/_fork 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/streams/{id}/_fork 2023-10-31\", Zod.ZodObject<{ path: Zod.ZodObject<{ id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; }, { id: string; }>; body: Zod.ZodObject<{ stream: Zod.ZodObject<Omit<Zod.objectUtil.extendShape<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          "Condition",
          ", Zod.ZodTypeDef, ",
          "Condition",
          ">>; config: Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"grok\">; field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"dissect\">; field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: \"dissect\"; field: string; pattern: string; }, { type: \"dissect\"; field: string; pattern: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }, { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }>, \"many\">>; fields: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }>, \"many\">>; children: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ id: Zod.ZodString; condition: Zod.ZodType<",
          "Condition",
          ", Zod.ZodTypeDef, ",
          "Condition",
          ">; }, \"strip\", Zod.ZodTypeAny, { id: string; condition?: ",
          "Condition",
          "; }, { id: string; condition?: ",
          "Condition",
          "; }>, \"many\">>; }, { id: Zod.ZodString; }>, \"children\">, \"strip\", Zod.ZodTypeAny, { id: string; fields: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[]; processing: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[]; }, { id: string; fields?: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[] | undefined; processing?: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[] | undefined; }>; condition: Zod.ZodType<",
          "Condition",
          ", Zod.ZodTypeDef, ",
          "Condition",
          ">; }, \"strip\", Zod.ZodTypeAny, { stream: { id: string; fields: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[]; processing: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[]; }; condition?: ",
          "Condition",
          "; }, { stream: { id: string; fields?: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[] | undefined; processing?: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[] | undefined; }; condition?: ",
          "Condition",
          "; }>; }, \"strip\", Zod.ZodTypeAny, { path: { id: string; }; body: { stream: { id: string; fields: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[]; processing: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[]; }; condition?: ",
          "Condition",
          "; }; }, { path: { id: string; }; body: { stream: { id: string; fields?: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; }[] | undefined; processing?: { config: { type: \"grok\"; field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; } | { type: \"dissect\"; field: string; pattern: string; }; condition?: ",
          "Condition",
          "; }[] | undefined; }; condition?: ",
          "Condition",
          "; }; }>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; \"POST /api/streams/_resync 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/streams/_resync 2023-10-31\", Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; \"POST /api/streams/_enable 2023-10-31\": ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/streams/_enable 2023-10-31\", Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, ",
          "StreamsRouteHandlerResources",
          ", ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>, ",
          {
            "pluginId": "@kbn/server-route-repository-utils",
            "scope": "common",
            "docId": "kibKbnServerRouteRepositoryUtilsPluginApi",
            "section": "def-common.DefaultRouteCreateOptions",
            "text": "DefaultRouteCreateOptions"
          },
          ">; }"
        ],
        "path": "x-pack/plugins/streams/server/routes/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "streams",
        "id": "def-server.StreamsRouteRepository",
        "type": "Object",
        "tags": [],
        "label": "StreamsRouteRepository",
        "description": [],
        "path": "x-pack/plugins/streams/server/routes/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "streams",
            "id": "def-server.StreamsRouteRepository.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/streams/server/routes/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "streams",
      "id": "def-server.StreamsPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "StreamsPluginSetup",
      "description": [],
      "path": "x-pack/plugins/streams/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "streams",
      "id": "def-server.StreamsPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "StreamsPluginStart",
      "description": [],
      "path": "x-pack/plugins/streams/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}