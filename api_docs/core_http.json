{
  "id": "core.http",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "id": "def-public.HttpFetchOptions",
        "type": "Interface",
        "label": "HttpFetchOptions",
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpFetchOptions",
            "text": "HttpFetchOptions"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpRequestInit",
            "text": "HttpRequestInit"
          }
        ],
        "description": [
          "\nAll options that may be used with a {@link HttpHandler}."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpFetchOptions.query",
            "type": "Object",
            "label": "query",
            "description": [
              "\nThe query string for an HTTP request. See {@link HttpFetchQuery}."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 249
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchQuery",
                "text": "HttpFetchQuery"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpFetchOptions.prependBasePath",
            "type": "CompoundType",
            "label": "prependBasePath",
            "description": [
              "\nWhether or not the request should automatically prepend the basePath. Defaults to `true`."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 254
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpFetchOptions.headers",
            "type": "Object",
            "label": "headers",
            "description": [
              "\nHeaders to send with the request. See {@link HttpHeadersInit}."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 259
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHeadersInit",
                "text": "HttpHeadersInit"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpFetchOptions.asSystemRequest",
            "type": "CompoundType",
            "label": "asSystemRequest",
            "description": [
              "\nWhether or not the request should include the \"system request\" header to differentiate an end user request from\nKibana internal request.\nCan be read on the server-side using KibanaRequest#isSystemRequest. Defaults to `false`."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 266
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpFetchOptions.asResponse",
            "type": "CompoundType",
            "label": "asResponse",
            "description": [
              "\nWhen `true` the return type of {@link HttpHandler} will be an {@link HttpResponse} with detailed request and\nresponse information. When `false`, the return type will just be the parsed response body. Defaults to `false`."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 272
            },
            "signature": [
              "boolean | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 245
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpFetchOptionsWithPath",
        "type": "Interface",
        "label": "HttpFetchOptionsWithPath",
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpFetchOptionsWithPath",
            "text": "HttpFetchOptionsWithPath"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpFetchOptions",
            "text": "HttpFetchOptions"
          }
        ],
        "description": [
          "\nSimilar to {@link HttpFetchOptions} but with the URL path included."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpFetchOptionsWithPath.path",
            "type": "string",
            "label": "path",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 283
            }
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 279
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpFetchQuery",
        "type": "Interface",
        "label": "HttpFetchQuery",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-public.HttpFetchQuery.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [
              "\nTypeScript note: Technically we should use this interface instead, but @types/node uses the below stricter\ndefinition, so to avoid TypeScript errors, we'll restrict our version.\n\n[key: string]:\n  | string\n  | number\n  | boolean\n  | Array<string | number | boolean>\n  | undefined\n  | null;"
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 238
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 225
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpHandler",
        "type": "Interface",
        "label": "HttpHandler",
        "description": [
          "\nA function for making an HTTP requests to Kibana's backend. See {@link HttpFetchOptions} for options and\n{@link HttpResponse} for the response.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-public.HttpHandler.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 296
            },
            "signature": [
              "any"
            ]
          },
          {
            "id": "def-public.HttpHandler.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 299
            },
            "signature": [
              "any"
            ]
          },
          {
            "id": "def-public.HttpHandler.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 302
            },
            "signature": [
              "any"
            ]
          },
          {
            "id": "def-public.HttpHandler.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 303
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 295
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpHeadersInit",
        "type": "Interface",
        "label": "HttpHeadersInit",
        "description": [
          "\nHeaders to append to the request. Any headers that begin with `kbn-` are considered private to Core and will cause\n{@link HttpHandler} to throw an error."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-public.HttpHeadersInit.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 145
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 144
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpInterceptor",
        "type": "Interface",
        "label": "HttpInterceptor",
        "description": [
          "\nAn object that may define global interceptor functions for different parts of the request and response lifecycle.\nSee {@link IHttpInterceptController}.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-public.HttpInterceptor.request",
            "type": "Function",
            "label": "request",
            "signature": [
              "((fetchOptions: Readonly<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              ">, controller: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpInterceptController",
                "text": "IHttpInterceptController"
              },
              ") => void | Partial<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              "> | Promise<Partial<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              ">>) | undefined"
            ],
            "description": [
              "\nDefine an interceptor to be executed before a request is sent."
            ],
            "children": [
              {
                "type": "Object",
                "label": "fetchOptions",
                "isRequired": true,
                "signature": [
                  "Readonly<",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.HttpFetchOptionsWithPath",
                    "text": "HttpFetchOptionsWithPath"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 369
                }
              },
              {
                "type": "Object",
                "label": "controller",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.IHttpInterceptController",
                    "text": "IHttpInterceptController"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 370
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 368
            }
          },
          {
            "id": "def-public.HttpInterceptor.requestError",
            "type": "Function",
            "label": "requestError",
            "signature": [
              "((httpErrorRequest: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpInterceptorRequestError",
                "text": "HttpInterceptorRequestError"
              },
              ", controller: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpInterceptController",
                "text": "IHttpInterceptController"
              },
              ") => void | Partial<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              "> | Promise<Partial<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              ">>) | undefined"
            ],
            "description": [
              "\nDefine an interceptor to be executed if a request interceptor throws an error or returns a rejected Promise."
            ],
            "children": [
              {
                "type": "Object",
                "label": "httpErrorRequest",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.HttpInterceptorRequestError",
                    "text": "HttpInterceptorRequestError"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 379
                }
              },
              {
                "type": "Object",
                "label": "controller",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.IHttpInterceptController",
                    "text": "IHttpInterceptController"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 380
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 378
            }
          },
          {
            "id": "def-public.HttpInterceptor.response",
            "type": "Function",
            "label": "response",
            "signature": [
              "((httpResponse: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpResponse",
                "text": "HttpResponse"
              },
              "<any>, controller: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpInterceptController",
                "text": "IHttpInterceptController"
              },
              ") => void | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpResponseInterceptorOverrides",
                "text": "IHttpResponseInterceptorOverrides"
              },
              "<any> | Promise<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpResponseInterceptorOverrides",
                "text": "IHttpResponseInterceptorOverrides"
              },
              "<any>>) | undefined"
            ],
            "description": [
              "\nDefine an interceptor to be executed after a response is received."
            ],
            "children": [
              {
                "type": "Object",
                "label": "httpResponse",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.HttpResponse",
                    "text": "HttpResponse"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 389
                }
              },
              {
                "type": "Object",
                "label": "controller",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.IHttpInterceptController",
                    "text": "IHttpInterceptController"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 390
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 388
            }
          },
          {
            "id": "def-public.HttpInterceptor.responseError",
            "type": "Function",
            "label": "responseError",
            "signature": [
              "((httpErrorResponse: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpInterceptorResponseError",
                "text": "HttpInterceptorResponseError"
              },
              ", controller: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpInterceptController",
                "text": "IHttpInterceptController"
              },
              ") => void | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpResponseInterceptorOverrides",
                "text": "IHttpResponseInterceptorOverrides"
              },
              "<any> | Promise<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpResponseInterceptorOverrides",
                "text": "IHttpResponseInterceptorOverrides"
              },
              "<any>>) | undefined"
            ],
            "description": [
              "\nDefine an interceptor to be executed if a response interceptor throws an error or returns a rejected Promise."
            ],
            "children": [
              {
                "type": "Object",
                "label": "httpErrorResponse",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.HttpInterceptorResponseError",
                    "text": "HttpInterceptorResponseError"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 399
                }
              },
              {
                "type": "Object",
                "label": "controller",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.IHttpInterceptController",
                    "text": "IHttpInterceptController"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 400
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 398
            }
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 362
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpInterceptorRequestError",
        "type": "Interface",
        "label": "HttpInterceptorRequestError",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpInterceptorRequestError.fetchOptions",
            "type": "Object",
            "label": "fetchOptions",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 352
            },
            "signature": [
              "Readonly<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpInterceptorRequestError.error",
            "type": "Object",
            "label": "error",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 353
            },
            "signature": [
              "Error"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 351
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpInterceptorResponseError",
        "type": "Interface",
        "label": "HttpInterceptorResponseError",
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpInterceptorResponseError",
            "text": "HttpInterceptorResponseError"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpResponse",
            "text": "HttpResponse"
          },
          "<any>"
        ],
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpInterceptorResponseError.request",
            "type": "Object",
            "label": "request",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 347
            },
            "signature": [
              "Readonly<Request>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpInterceptorResponseError.error",
            "type": "CompoundType",
            "label": "error",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 348
            },
            "signature": [
              "Error | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IHttpFetchError",
                "text": "IHttpFetchError"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 346
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpRequestInit",
        "type": "Interface",
        "label": "HttpRequestInit",
        "description": [
          "\nFetch API options available to {@link HttpHandler}s.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.body",
            "type": "CompoundType",
            "label": "body",
            "description": [
              "\nA BodyInit object or null to set request's body."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 158
            },
            "signature": [
              "string | ArrayBuffer | Blob | URLSearchParams | ArrayBufferView | FormData | ReadableStream<Uint8Array> | null | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.cache",
            "type": "CompoundType",
            "label": "cache",
            "description": [
              "\nThe cache mode associated with request, which is a string indicating how the request will interact with the\nbrowser's cache when fetching."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 164
            },
            "signature": [
              "\"default\" | \"reload\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.credentials",
            "type": "CompoundType",
            "label": "credentials",
            "description": [
              "\nThe credentials mode associated with request, which is a string indicating whether credentials will be sent with\nthe request always, never, or only when sent to a same-origin URL."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 170
            },
            "signature": [
              "\"include\" | \"omit\" | \"same-origin\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.headers",
            "type": "Object",
            "label": "headers",
            "description": [
              "{@link HttpHeadersInit}"
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 173
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHeadersInit",
                "text": "HttpHeadersInit"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.integrity",
            "type": "string",
            "label": "integrity",
            "description": [
              "\nSubresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of\nmultiple hashes separated by whitespace."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 179
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.keepalive",
            "type": "CompoundType",
            "label": "keepalive",
            "description": [
              "Whether or not request can outlive the global in which it was created."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 182
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.method",
            "type": "string",
            "label": "method",
            "description": [
              "HTTP method, which is \"GET\" by default."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 185
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.mode",
            "type": "CompoundType",
            "label": "mode",
            "description": [
              "\nThe mode associated with request, which is a string indicating whether the request will use CORS, or will be\nrestricted to same-origin URLs."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 191
            },
            "signature": [
              "\"same-origin\" | \"cors\" | \"navigate\" | \"no-cors\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.redirect",
            "type": "CompoundType",
            "label": "redirect",
            "description": [
              "\nThe redirect mode associated with request, which is a string indicating how redirects for the request will be\nhandled during fetching. A request will follow redirects by default."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 197
            },
            "signature": [
              "\"error\" | \"manual\" | \"follow\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.referrer",
            "type": "string",
            "label": "referrer",
            "description": [
              "\nThe referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to\nindicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to\ndetermine the value of the `Referer` header of the request being made."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 204
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.referrerPolicy",
            "type": "CompoundType",
            "label": "referrerPolicy",
            "description": [
              "\nThe referrer policy associated with request. This is used during fetching to compute the value of the request's\nreferrer."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 210
            },
            "signature": [
              "\"\" | \"origin\" | \"no-referrer\" | \"unsafe-url\" | \"same-origin\" | \"no-referrer-when-downgrade\" | \"origin-when-cross-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.signal",
            "type": "CompoundType",
            "label": "signal",
            "description": [
              "\nReturns the signal associated with request, which is an AbortSignal object indicating whether or not request has\nbeen aborted, and its abort event handler."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 216
            },
            "signature": [
              "AbortSignal | null | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpRequestInit.window",
            "type": "Uncategorized",
            "label": "window",
            "description": [
              "\nCan only be null. Used to disassociate request from any Window."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 221
            },
            "signature": [
              "null | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 154
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpResponse",
        "type": "Interface",
        "label": "HttpResponse",
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.HttpResponse",
            "text": "HttpResponse"
          },
          "<TResponseBody>"
        ],
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpResponse.fetchOptions",
            "type": "Object",
            "label": "fetchOptions",
            "description": [
              "The original {@link HttpFetchOptionsWithPath} used to send this request."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 309
            },
            "signature": [
              "Readonly<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpFetchOptionsWithPath",
                "text": "HttpFetchOptionsWithPath"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpResponse.request",
            "type": "Object",
            "label": "request",
            "description": [
              "Raw request sent to Kibana server."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 311
            },
            "signature": [
              "Readonly<Request>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpResponse.response",
            "type": "Object",
            "label": "response",
            "description": [
              "Raw response received, may be undefined if there was an error."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 313
            },
            "signature": [
              "Readonly<Response> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpResponse.body",
            "type": "Uncategorized",
            "label": "body",
            "description": [
              "Parsed body received, may be undefined if there was an error."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 315
            },
            "signature": [
              "TResponseBody | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 307
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.HttpSetup",
        "type": "Interface",
        "label": "HttpSetup",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.HttpSetup.basePath",
            "type": "Object",
            "label": "basePath",
            "description": [
              "\nAPIs for manipulating the basePath on URL segments.\nSee {@link IBasePath}"
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 18
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IBasePath",
                "text": "IBasePath"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.anonymousPaths",
            "type": "Object",
            "label": "anonymousPaths",
            "description": [
              "\nAPIs for denoting certain paths for not requiring authentication"
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 23
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IAnonymousPaths",
                "text": "IAnonymousPaths"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.externalUrl",
            "type": "Object",
            "label": "externalUrl",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 25
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.IExternalUrl",
                "text": "IExternalUrl"
              }
            ]
          },
          {
            "id": "def-public.HttpSetup.intercept",
            "type": "Function",
            "label": "intercept",
            "signature": [
              "(interceptor: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpInterceptor",
                "text": "HttpInterceptor"
              },
              ") => () => void"
            ],
            "description": [
              "\nAdds a new {@link HttpInterceptor} to the global HTTP client."
            ],
            "children": [
              {
                "type": "Object",
                "label": "interceptor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-public.HttpInterceptor",
                    "text": "HttpInterceptor"
                  }
                ],
                "description": [
                  "a {@link HttpInterceptor}"
                ],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 32
                }
              }
            ],
            "tags": [],
            "returnComment": [
              "a function for removing the attached interceptor."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 32
            }
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.fetch",
            "type": "Function",
            "label": "fetch",
            "description": [
              "Makes an HTTP request. Defaults to a GET request unless overriden. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 35
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.delete",
            "type": "Function",
            "label": "delete",
            "description": [
              "Makes an HTTP request with the DELETE method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 37
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.get",
            "type": "Function",
            "label": "get",
            "description": [
              "Makes an HTTP request with the GET method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 39
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.head",
            "type": "Function",
            "label": "head",
            "description": [
              "Makes an HTTP request with the HEAD method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 41
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.options",
            "type": "Function",
            "label": "options",
            "description": [
              "Makes an HTTP request with the OPTIONS method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 43
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.patch",
            "type": "Function",
            "label": "patch",
            "description": [
              "Makes an HTTP request with the PATCH method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 45
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.post",
            "type": "Function",
            "label": "post",
            "description": [
              "Makes an HTTP request with the POST method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 47
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.HttpSetup.put",
            "type": "Function",
            "label": "put",
            "description": [
              "Makes an HTTP request with the PUT method. See {@link HttpHandler} for options."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 49
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpHandler",
                "text": "HttpHandler"
              }
            ]
          },
          {
            "id": "def-public.HttpSetup.addLoadingCountSource",
            "type": "Function",
            "label": "addLoadingCountSource",
            "signature": [
              "(countSource$: ",
              "Observable",
              "<number>) => void"
            ],
            "description": [
              "\nAdds a new source of loading counts. Used to show the global loading indicator when sum of all observed counts are\nmore than 0."
            ],
            "children": [
              {
                "type": "Object",
                "label": "countSource$",
                "isRequired": true,
                "signature": [
                  "Observable",
                  "<number>"
                ],
                "description": [
                  "an Observable to subscribe to for loading count updates."
                ],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 56
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 56
            }
          },
          {
            "id": "def-public.HttpSetup.getLoadingCount$",
            "type": "Function",
            "label": "getLoadingCount$",
            "signature": [
              "() => ",
              "Observable",
              "<number>"
            ],
            "description": [
              "\nGet the sum of all loading count sources as a single Observable."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 61
            }
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IAnonymousPaths",
        "type": "Interface",
        "label": "IAnonymousPaths",
        "description": [
          "\nAPIs for denoting paths as not requiring authentication"
        ],
        "tags": [],
        "children": [
          {
            "id": "def-public.IAnonymousPaths.isAnonymous",
            "type": "Function",
            "label": "isAnonymous",
            "signature": [
              "(path: string) => boolean"
            ],
            "description": [
              "\nDetermines whether the provided path doesn't require authentication. `path` should include the current basePath."
            ],
            "children": [
              {
                "type": "string",
                "label": "path",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 131
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 131
            }
          },
          {
            "id": "def-public.IAnonymousPaths.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(path: string) => void"
            ],
            "description": [
              "\nRegister `path` as not requiring authentication. `path` should not include the current basePath."
            ],
            "children": [
              {
                "type": "string",
                "label": "path",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 136
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 136
            }
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 127
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IBasePath",
        "type": "Interface",
        "label": "IBasePath",
        "description": [
          "\nAPIs for manipulating the basePath on URL segments."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.IBasePath.get",
            "type": "Function",
            "label": "get",
            "description": [
              "\nGets the `basePath` string."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 78
            },
            "signature": [
              "() => string"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IBasePath.prepend",
            "type": "Function",
            "label": "prepend",
            "description": [
              "\nPrepends `path` with the basePath."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 83
            },
            "signature": [
              "(url: string) => string"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IBasePath.remove",
            "type": "Function",
            "label": "remove",
            "description": [
              "\nRemoves the prepended basePath from the `path`."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 88
            },
            "signature": [
              "(url: string) => string"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IBasePath.serverBasePath",
            "type": "string",
            "label": "serverBasePath",
            "description": [
              "\nReturns the server's root basePath as configured, without any namespace prefix.\n\nSee {@link BasePath.get} for getting the basePath value for a specific request"
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 95
            }
          },
          {
            "tags": [],
            "id": "def-public.IBasePath.publicBaseUrl",
            "type": "string",
            "label": "publicBaseUrl",
            "description": [
              "\nThe server's publicly exposed base URL, if configured. Includes protocol, host, port (optional) and the\n{@link IBasePath.serverBasePath}.\n"
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 104
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 74
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IExternalUrl",
        "type": "Interface",
        "label": "IExternalUrl",
        "description": [
          "\nAPIs for working with external URLs.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-public.IExternalUrl.validateUrl",
            "type": "Function",
            "label": "validateUrl",
            "signature": [
              "(relativeOrAbsoluteUrl: string) => URL | null"
            ],
            "description": [
              "\nDetermines if the provided URL is a valid location to send users.\nValidation is based on the configured allow list in kibana.yml.\n\nIf the URL is valid, then a URL will be returned.\nOtherwise, this will return null.\n"
            ],
            "children": [
              {
                "type": "string",
                "label": "relativeOrAbsoluteUrl",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/core/public/http/types.ts",
                  "lineNumber": 121
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 121
            }
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 111
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IHttpFetchError",
        "type": "Interface",
        "label": "IHttpFetchError",
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.IHttpFetchError",
            "text": "IHttpFetchError"
          },
          " extends Error"
        ],
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.IHttpFetchError.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 331
            }
          },
          {
            "tags": [],
            "id": "def-public.IHttpFetchError.request",
            "type": "Object",
            "label": "request",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 332
            },
            "signature": [
              "Request"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IHttpFetchError.response",
            "type": "Object",
            "label": "response",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 333
            },
            "signature": [
              "Response | undefined"
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-public.IHttpFetchError.req",
            "type": "Object",
            "label": "req",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 337
            },
            "signature": [
              "Request"
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-public.IHttpFetchError.res",
            "type": "Object",
            "label": "res",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 341
            },
            "signature": [
              "Response | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IHttpFetchError.body",
            "type": "Any",
            "label": "body",
            "description": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 342
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 330
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IHttpInterceptController",
        "type": "Interface",
        "label": "IHttpInterceptController",
        "description": [
          "\nUsed to halt a request Promise chain in a {@link HttpInterceptor}."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.IHttpInterceptController.halted",
            "type": "boolean",
            "label": "halted",
            "description": [
              "Whether or not this chain has been halted."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 410
            }
          },
          {
            "id": "def-public.IHttpInterceptController.halt",
            "type": "Function",
            "label": "halt",
            "signature": [
              "() => void"
            ],
            "description": [
              "Halt the request Promise chain and do not process further interceptors or response handlers."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 412
            }
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 408
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IHttpResponseInterceptorOverrides",
        "type": "Interface",
        "label": "IHttpResponseInterceptorOverrides",
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-public.IHttpResponseInterceptorOverrides",
            "text": "IHttpResponseInterceptorOverrides"
          },
          "<TResponseBody>"
        ],
        "description": [
          "\nProperties that can be returned by HttpInterceptor.request to override the response."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.IHttpResponseInterceptorOverrides.response",
            "type": "Object",
            "label": "response",
            "description": [
              "Raw response received, may be undefined if there was an error."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 324
            },
            "signature": [
              "Readonly<Response> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IHttpResponseInterceptorOverrides.body",
            "type": "Uncategorized",
            "label": "body",
            "description": [
              "Parsed body received, may be undefined if there was an error."
            ],
            "source": {
              "path": "src/core/public/http/types.ts",
              "lineNumber": 326
            },
            "signature": [
              "TResponseBody | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 322
        },
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "id": "def-public.HttpStart",
        "type": "Type",
        "label": "HttpStart",
        "tags": [
          "public"
        ],
        "description": [
          "\nSee {@link HttpSetup}"
        ],
        "source": {
          "path": "src/core/public/http/types.ts",
          "lineNumber": 68
        },
        "signature": [
          "HttpSetup"
        ],
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "id": "def-server.BasePath",
        "type": "Class",
        "tags": [
          "public"
        ],
        "label": "BasePath",
        "description": [
          "\nAccess or manipulate the Kibana base path\n"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.BasePath.serverBasePath",
            "type": "string",
            "label": "serverBasePath",
            "description": [
              "\nreturns the server's basePath\n\nSee {@link BasePath.get} for getting the basePath value for a specific request"
            ],
            "source": {
              "path": "src/core/server/http/base_path_service.ts",
              "lineNumber": 26
            }
          },
          {
            "tags": [],
            "id": "def-server.BasePath.publicBaseUrl",
            "type": "string",
            "label": "publicBaseUrl",
            "description": [
              "\nThe server's publicly exposed base URL, if configured. Includes protocol, host, port (optional) and the\n{@link BasePath.serverBasePath}.\n"
            ],
            "source": {
              "path": "src/core/server/http/base_path_service.ts",
              "lineNumber": 34
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "id": "def-server.BasePath.get",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "request",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.LegacyRequest",
                    "text": "LegacyRequest"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/base_path_service.ts",
                  "lineNumber": 45
                }
              }
            ],
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.LegacyRequest",
                "text": "LegacyRequest"
              },
              ") => string"
            ],
            "description": [
              "\nreturns `basePath` value, specific for an incoming request."
            ],
            "label": "get",
            "source": {
              "path": "src/core/server/http/base_path_service.ts",
              "lineNumber": 45
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.BasePath.set",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "request",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.LegacyRequest",
                    "text": "LegacyRequest"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/base_path_service.ts",
                  "lineNumber": 55
                }
              },
              {
                "type": "string",
                "label": "requestSpecificBasePath",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/base_path_service.ts",
                  "lineNumber": 55
                }
              }
            ],
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.LegacyRequest",
                "text": "LegacyRequest"
              },
              ", requestSpecificBasePath: string) => void"
            ],
            "description": [
              "\nsets `basePath` value, specific for an incoming request.\n"
            ],
            "label": "set",
            "source": {
              "path": "src/core/server/http/base_path_service.ts",
              "lineNumber": 55
            },
            "tags": [
              "privateRemarks"
            ],
            "returnComment": []
          },
          {
            "id": "def-server.BasePath.prepend",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "path",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/base_path_service.ts",
                  "lineNumber": 69
                }
              }
            ],
            "signature": [
              "(path: string) => string"
            ],
            "description": [
              "\nPrepends `path` with the basePath."
            ],
            "label": "prepend",
            "source": {
              "path": "src/core/server/http/base_path_service.ts",
              "lineNumber": 69
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.BasePath.remove",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "path",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/base_path_service.ts",
                  "lineNumber": 81
                }
              }
            ],
            "signature": [
              "(path: string) => string"
            ],
            "description": [
              "\nRemoves the prepended basePath from the `path`."
            ],
            "label": "remove",
            "source": {
              "path": "src/core/server/http/base_path_service.ts",
              "lineNumber": 81
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/core/server/http/base_path_service.ts",
          "lineNumber": 18
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.KibanaRequest",
        "type": "Class",
        "tags": [
          "public"
        ],
        "label": "KibanaRequest",
        "description": [
          "\nKibana specific abstraction for an incoming request."
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<Params, Query, Body, Method>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.KibanaRequest.id",
            "type": "string",
            "label": "id",
            "description": [
              "\nA identifier to identify this request.\n"
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 144
            }
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.uuid",
            "type": "string",
            "label": "uuid",
            "description": [
              "\nA UUID to identify this request.\n"
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 152
            }
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.url",
            "type": "Object",
            "label": "url",
            "description": [
              "a WHATWG URL standard object."
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 154
            },
            "signature": [
              "URL"
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.route",
            "type": "Object",
            "label": "route",
            "description": [
              "matched route details"
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 156
            },
            "signature": [
              "Readonly<{ path: string; method: ",
              "RecursiveReadonly",
              "<Method>; options: ",
              "RecursiveReadonly",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequestRouteOptions",
                "text": "KibanaRequestRouteOptions"
              },
              "<Method>>; }>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "\nReadonly copy of incoming request headers."
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 162
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.Headers",
                "text": "Headers"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.isSystemRequest",
            "type": "boolean",
            "label": "isSystemRequest",
            "description": [
              "\nWhether or not the request is a \"system request\" rather than an application-level request.\nCan be set on the client using the `HttpFetchOptions#asSystemRequest` option."
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 167
            }
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.socket",
            "type": "Object",
            "label": "socket",
            "description": [
              "{@link IKibanaSocket}"
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 170
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IKibanaSocket",
                "text": "IKibanaSocket"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.events",
            "type": "Object",
            "label": "events",
            "description": [
              "Request events {@link KibanaRequestEvents}"
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 172
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequestEvents",
                "text": "KibanaRequestEvents"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.auth",
            "type": "Object",
            "label": "auth",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 173
            },
            "signature": [
              "{ isAuthenticated: boolean; }"
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequest.rewrittenUrl",
            "type": "Object",
            "label": "rewrittenUrl",
            "description": [
              "\nURL rewritten in onPreRouting request interceptor."
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 181
            },
            "signature": [
              "URL",
              " | undefined"
            ]
          },
          {
            "id": "def-server.KibanaRequest.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "request",
                "isRequired": true,
                "signature": [
                  "Request"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/request.ts",
                  "lineNumber": 187
                }
              },
              {
                "type": "Uncategorized",
                "label": "params",
                "isRequired": true,
                "signature": [
                  "Params"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/request.ts",
                  "lineNumber": 188
                }
              },
              {
                "type": "Uncategorized",
                "label": "query",
                "isRequired": true,
                "signature": [
                  "Query"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/request.ts",
                  "lineNumber": 189
                }
              },
              {
                "type": "Uncategorized",
                "label": "body",
                "isRequired": true,
                "signature": [
                  "Body"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/request.ts",
                  "lineNumber": 190
                }
              },
              {
                "type": "boolean",
                "label": "withoutSecretHeaders",
                "isRequired": true,
                "signature": [
                  "boolean"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/request.ts",
                  "lineNumber": 193
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 186
            }
          }
        ],
        "source": {
          "path": "src/core/server/http/router/request.ts",
          "lineNumber": 90
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidationError",
        "type": "Class",
        "tags": [
          "public"
        ],
        "label": "RouteValidationError",
        "description": [
          "\nError to return when the validation is not successful."
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteValidationError",
            "text": "RouteValidationError"
          },
          " extends ",
          "SchemaTypeError"
        ],
        "children": [
          {
            "id": "def-server.RouteValidationError.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "error",
                "isRequired": true,
                "signature": [
                  "string | Error"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/validator/validator_error.ts",
                  "lineNumber": 16
                }
              },
              {
                "type": "Array",
                "label": "path",
                "isRequired": true,
                "signature": [
                  "string[]"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/validator/validator_error.ts",
                  "lineNumber": 16
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/router/validator/validator_error.ts",
              "lineNumber": 16
            }
          }
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator_error.ts",
          "lineNumber": 15
        },
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "id": "def-server.Authenticated",
        "type": "Interface",
        "label": "Authenticated",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.Authenticated",
            "text": "Authenticated"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.AuthResultParams",
            "text": "AuthResultParams"
          }
        ],
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.Authenticated.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 30
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResultType",
                "text": "AuthResultType"
              },
              ".authenticated"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 29
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthNotHandled",
        "type": "Interface",
        "label": "AuthNotHandled",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.AuthNotHandled.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 35
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResultType",
                "text": "AuthResultType"
              },
              ".notHandled"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 34
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthRedirected",
        "type": "Interface",
        "label": "AuthRedirected",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.AuthRedirected",
            "text": "AuthRedirected"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.AuthRedirectedParams",
            "text": "AuthRedirectedParams"
          }
        ],
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.AuthRedirected.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 40
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResultType",
                "text": "AuthResultType"
              },
              ".redirected"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 39
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthRedirectedParams",
        "type": "Interface",
        "label": "AuthRedirectedParams",
        "description": [
          "\nResult of auth redirection."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.AuthRedirectedParams.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "\nHeaders to attach for auth redirect.\nMust include \"location\" header"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 114
            },
            "signature": [
              "({ location: string; } & Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]>) | ({ location: string; } & Record<string, string | string[]>)"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 109
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthResultParams",
        "type": "Interface",
        "label": "AuthResultParams",
        "description": [
          "\nResult of successful authentication."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.AuthResultParams.state",
            "type": "Object",
            "label": "state",
            "description": [
              "\nData to associate with an incoming request. Any downstream plugin may get access to the data."
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 92
            },
            "signature": [
              "Record<string, any> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.AuthResultParams.requestHeaders",
            "type": "Object",
            "label": "requestHeaders",
            "description": [
              "\nAuth specific headers to attach to a request object.\nUsed to perform a request to Elasticsearch on behalf of an authenticated user."
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 97
            },
            "signature": [
              "Record<string, string | string[]> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.AuthResultParams.responseHeaders",
            "type": "Object",
            "label": "responseHeaders",
            "description": [
              "\nAuth specific headers to attach to a response object.\nUsed to send back authentication mechanism related headers to a client when needed."
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 102
            },
            "signature": [
              "Record<string, string | string[]> | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 88
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthToolkit",
        "type": "Interface",
        "label": "AuthToolkit",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.AuthToolkit.authenticated",
            "type": "Function",
            "label": "authenticated",
            "description": [
              "Authentication is successful with given credentials, allow request to pass through"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 123
            },
            "signature": [
              "(data?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResultParams",
                "text": "AuthResultParams"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResult",
                "text": "AuthResult"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.AuthToolkit.notHandled",
            "type": "Function",
            "label": "notHandled",
            "description": [
              "\nUser has no credentials.\nAllows user to access a resource when authRequired is 'optional'\nRejects a request when authRequired: true"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 129
            },
            "signature": [
              "() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResult",
                "text": "AuthResult"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.AuthToolkit.redirected",
            "type": "Function",
            "label": "redirected",
            "description": [
              "\nRedirects user to another location to complete authentication when authRequired: true\nAllows user to access a resource without redirection when authRequired: 'optional'"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/auth.ts",
              "lineNumber": 134
            },
            "signature": [
              "(headers: ({ location: string; } & Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]>) | ({ location: string; } & Record<string, string | string[]>)) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthResult",
                "text": "AuthResult"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 121
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.CustomHttpResponseOptions",
        "type": "Interface",
        "label": "CustomHttpResponseOptions",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<T>"
        ],
        "description": [
          "\nHTTP response parameters for a response with adjustable status code."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.CustomHttpResponseOptions.body",
            "type": "Uncategorized",
            "label": "body",
            "description": [
              "HTTP message to send to the client"
            ],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 79
            },
            "signature": [
              "T | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.CustomHttpResponseOptions.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "HTTP Headers with additional information about response"
            ],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 81
            },
            "signature": [
              "Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.CustomHttpResponseOptions.statusCode",
            "type": "number",
            "label": "statusCode",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 82
            }
          }
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 77
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ErrorHttpResponseOptions",
        "type": "Interface",
        "label": "ErrorHttpResponseOptions",
        "description": [
          "\nHTTP response parameters"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.ErrorHttpResponseOptions.body",
            "type": "CompoundType",
            "label": "body",
            "description": [
              "HTTP message to send to the client"
            ],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 101
            },
            "signature": [
              "string | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ErrorHttpResponseOptions.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "HTTP Headers with additional information about response"
            ],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 103
            },
            "signature": [
              "Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]> | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 99
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.HttpAuth",
        "type": "Interface",
        "label": "HttpAuth",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.HttpAuth.get",
            "type": "Function",
            "label": "get",
            "description": [
              "\nGets authentication state for a request. Returned by `auth` interceptor.\n{@link GetAuthState}"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 51
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.GetAuthState",
                "text": "GetAuthState"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpAuth.isAuthenticated",
            "type": "Function",
            "label": "isAuthenticated",
            "description": [
              "\nReturns authentication status for a request.\n{@link IsAuthenticated}"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 56
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IsAuthenticated",
                "text": "IsAuthenticated"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/types.ts",
          "lineNumber": 46
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.HttpResponseOptions",
        "type": "Interface",
        "label": "HttpResponseOptions",
        "description": [
          "\nHTTP response parameters"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.HttpResponseOptions.body",
            "type": "CompoundType",
            "label": "body",
            "description": [
              "HTTP message to send to the client"
            ],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 62
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponsePayload",
                "text": "HttpResponsePayload"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpResponseOptions.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "HTTP Headers with additional information about response"
            ],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 64
            },
            "signature": [
              "Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]> | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 60
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.HttpServerInfo",
        "type": "Interface",
        "label": "HttpServerInfo",
        "description": [
          "\nInformation about what hostname, port, and protocol the server process is\nrunning on. Note that this may not match the URL that end-users access\nKibana at. For the public URL, see {@link BasePath.publicBaseUrl}."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.HttpServerInfo.name",
            "type": "string",
            "label": "name",
            "description": [
              "The name of the Kibana server"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 336
            }
          },
          {
            "tags": [],
            "id": "def-server.HttpServerInfo.hostname",
            "type": "string",
            "label": "hostname",
            "description": [
              "The hostname of the server"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 338
            }
          },
          {
            "tags": [],
            "id": "def-server.HttpServerInfo.port",
            "type": "number",
            "label": "port",
            "description": [
              "The port the server is listening on"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 340
            }
          },
          {
            "tags": [],
            "id": "def-server.HttpServerInfo.protocol",
            "type": "CompoundType",
            "label": "protocol",
            "description": [
              "The protocol used by the server"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 342
            },
            "signature": [
              "\"http\" | \"https\" | \"socket\""
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/types.ts",
          "lineNumber": 334
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.HttpServiceSetup",
        "type": "Interface",
        "label": "HttpServiceSetup",
        "description": [
          "\nKibana HTTP Service provides own abstraction for work with HTTP stack.\nPlugins don't have direct access to `hapi` server and its primitives anymore. Moreover,\nplugins shouldn't rely on the fact that HTTP Service uses one or another library under the hood.\nThis gives the platform flexibility to upgrade or changing our internal HTTP stack without breaking plugins.\nIf the HTTP Service lacks functionality you need, we are happy to discuss and support your needs.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.createCookieSessionStorageFactory",
            "type": "Function",
            "label": "createCookieSessionStorageFactory",
            "description": [
              "\nCreates cookie based session storage factory {@link SessionStorageFactory}"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 136
            },
            "signature": [
              "<T>(cookieOptions: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.SessionStorageCookieOptions",
                "text": "SessionStorageCookieOptions"
              },
              "<T>) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.SessionStorageFactory",
                "text": "SessionStorageFactory"
              },
              "<T>>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.registerOnPreRouting",
            "type": "Function",
            "label": "registerOnPreRouting",
            "description": [
              "\nTo define custom logic to perform for incoming requests before server performs a route lookup.\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 150
            },
            "signature": [
              "(handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.OnPreRoutingHandler",
                "text": "OnPreRoutingHandler"
              },
              ") => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.registerOnPreAuth",
            "type": "Function",
            "label": "registerOnPreAuth",
            "description": [
              "\nTo define custom logic to perform for incoming requests before\nthe Auth interceptor performs a check that user has access to requested resources.\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 162
            },
            "signature": [
              "(handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.OnPreAuthHandler",
                "text": "OnPreAuthHandler"
              },
              ") => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.registerAuth",
            "type": "Function",
            "label": "registerAuth",
            "description": [
              "\nTo define custom authentication and/or authorization mechanism for incoming requests.\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 174
            },
            "signature": [
              "(handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.AuthenticationHandler",
                "text": "AuthenticationHandler"
              },
              ") => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.registerOnPostAuth",
            "type": "Function",
            "label": "registerOnPostAuth",
            "description": [
              "\nTo define custom logic after Auth interceptor did make sure a user has access to the requested resource.\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 186
            },
            "signature": [
              "(handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.OnPostAuthHandler",
                "text": "OnPostAuthHandler"
              },
              ") => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.registerOnPreResponse",
            "type": "Function",
            "label": "registerOnPreResponse",
            "description": [
              "\nTo define custom logic to perform for the server response.\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 198
            },
            "signature": [
              "(handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.OnPreResponseHandler",
                "text": "OnPreResponseHandler"
              },
              ") => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.basePath",
            "type": "Object",
            "label": "basePath",
            "description": [
              "\nAccess or manipulate the Kibana base path\nSee {@link IBasePath}."
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 204
            },
            "signature": [
              "Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.BasePath",
                "text": "BasePath"
              },
              ", \"remove\" | \"get\" | \"prepend\" | \"set\" | \"serverBasePath\" | \"publicBaseUrl\">"
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-server.HttpServiceSetup.auth",
            "type": "Object",
            "label": "auth",
            "description": [
              "\nAuth status.\nSee {@link HttpAuth}\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 212
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpAuth",
                "text": "HttpAuth"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.csp",
            "type": "Object",
            "label": "csp",
            "description": [
              "\nThe CSP config used for Kibana."
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 217
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ICspConfig",
                "text": "ICspConfig"
              }
            ]
          },
          {
            "tags": [
              "public"
            ],
            "id": "def-server.HttpServiceSetup.createRouter",
            "type": "Function",
            "label": "createRouter",
            "description": [
              "\nProvides ability to declare a handler function for a particular path and HTTP request method.\n"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 234
            },
            "signature": [
              "<Context extends ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " = ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              ">() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IRouter",
                "text": "IRouter"
              },
              "<Context>"
            ]
          },
          {
            "tags": [
              "public"
            ],
            "id": "def-server.HttpServiceSetup.registerRouteHandlerContext",
            "type": "Function",
            "label": "registerRouteHandlerContext",
            "description": [
              "\nRegister a context provider for a route handler."
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 266
            },
            "signature": [
              "<Context extends ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              ", ContextName extends keyof Context>(contextName: ContextName, provider: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IContextProvider",
                "text": "IContextProvider"
              },
              "<Context, ContextName>) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IContextContainer",
                "text": "IContextContainer"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceSetup.getServerInfo",
            "type": "Function",
            "label": "getServerInfo",
            "description": [
              "\nProvides common {@link HttpServerInfo | information} about the running http server."
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 277
            },
            "signature": [
              "() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpServerInfo",
                "text": "HttpServerInfo"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/types.ts",
          "lineNumber": 131
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.HttpServiceStart",
        "type": "Interface",
        "label": "HttpServiceStart",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.HttpServiceStart.basePath",
            "type": "Object",
            "label": "basePath",
            "description": [
              "\nAccess or manipulate the Kibana base path\nSee {@link IBasePath}."
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 308
            },
            "signature": [
              "Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.BasePath",
                "text": "BasePath"
              },
              ", \"remove\" | \"get\" | \"prepend\" | \"set\" | \"serverBasePath\" | \"publicBaseUrl\">"
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceStart.auth",
            "type": "Object",
            "label": "auth",
            "description": [
              "\nAuth status.\nSee {@link HttpAuth}"
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 314
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpAuth",
                "text": "HttpAuth"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.HttpServiceStart.getServerInfo",
            "type": "Function",
            "label": "getServerInfo",
            "description": [
              "\nProvides common {@link HttpServerInfo | information} about the running http server."
            ],
            "source": {
              "path": "src/core/server/http/types.ts",
              "lineNumber": 319
            },
            "signature": [
              "() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpServerInfo",
                "text": "HttpServerInfo"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/types.ts",
          "lineNumber": 303
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.IKibanaResponse",
        "type": "Interface",
        "label": "IKibanaResponse",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<T>"
        ],
        "description": [
          "\nA response data object, expected to returned as a result of {@link RequestHandler} execution"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.IKibanaResponse.status",
            "type": "number",
            "label": "status",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 34
            }
          },
          {
            "tags": [],
            "id": "def-server.IKibanaResponse.payload",
            "type": "Uncategorized",
            "label": "payload",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 35
            },
            "signature": [
              "T | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IKibanaResponse.options",
            "type": "Object",
            "label": "options",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 36
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 33
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.IKibanaSocket",
        "type": "Interface",
        "label": "IKibanaSocket",
        "description": [
          "\nA tiny abstraction for TCP socket."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-server.IKibanaSocket.getPeerCertificate",
            "type": "Function",
            "label": "getPeerCertificate",
            "signature": [
              "{ (detailed: true): ",
              "DetailedPeerCertificate",
              " | null; (detailed: false): ",
              "PeerCertificate",
              " | null; (detailed?: boolean | undefined): ",
              "DetailedPeerCertificate",
              " | ",
              "PeerCertificate",
              " | null; }"
            ],
            "description": [],
            "children": [
              {
                "type": "boolean",
                "label": "detailed",
                "isRequired": true,
                "signature": [
                  "true"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/socket.ts",
                  "lineNumber": 18
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 18
            }
          },
          {
            "id": "def-server.IKibanaSocket.getPeerCertificate",
            "type": "Function",
            "label": "getPeerCertificate",
            "signature": [
              "{ (detailed: true): ",
              "DetailedPeerCertificate",
              " | null; (detailed: false): ",
              "PeerCertificate",
              " | null; (detailed?: boolean | undefined): ",
              "DetailedPeerCertificate",
              " | ",
              "PeerCertificate",
              " | null; }"
            ],
            "description": [],
            "children": [
              {
                "type": "boolean",
                "label": "detailed",
                "isRequired": true,
                "signature": [
                  "false"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/socket.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 19
            }
          },
          {
            "id": "def-server.IKibanaSocket.getPeerCertificate",
            "type": "Function",
            "label": "getPeerCertificate",
            "signature": [
              "{ (detailed: true): ",
              "DetailedPeerCertificate",
              " | null; (detailed: false): ",
              "PeerCertificate",
              " | null; (detailed?: boolean | undefined): ",
              "DetailedPeerCertificate",
              " | ",
              "PeerCertificate",
              " | null; }"
            ],
            "description": [
              "\nReturns an object representing the peer's certificate.\nThe returned object has some properties corresponding to the field of the certificate.\nIf detailed argument is true the full chain with issuer property will be returned,\nif false only the top certificate without issuer property.\nIf the peer does not provide a certificate, it returns null."
            ],
            "children": [
              {
                "type": "CompoundType",
                "label": "detailed",
                "isRequired": false,
                "signature": [
                  "boolean | undefined"
                ],
                "description": [
                  "- If true; the full chain with issuer property will be returned."
                ],
                "source": {
                  "path": "src/core/server/http/router/socket.ts",
                  "lineNumber": 29
                }
              }
            ],
            "tags": [],
            "returnComment": [
              "An object representing the peer's certificate."
            ],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 29
            }
          },
          {
            "id": "def-server.IKibanaSocket.getProtocol",
            "type": "Function",
            "label": "getProtocol",
            "signature": [
              "() => string | null"
            ],
            "description": [
              "\nReturns a string containing the negotiated SSL/TLS protocol version of the current connection. The value 'unknown' will be returned for\nconnected sockets that have not completed the handshaking process. The value null will be returned for server sockets or disconnected\nclient sockets. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html for more information."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 36
            }
          },
          {
            "id": "def-server.IKibanaSocket.renegotiate",
            "type": "Function",
            "label": "renegotiate",
            "signature": [
              "(options: { rejectUnauthorized?: boolean | undefined; requestCert?: boolean | undefined; }) => Promise<void>"
            ],
            "description": [
              "\nRenegotiates a connection to obtain the peer's certificate. This cannot be used when the protocol version is TLSv1.3."
            ],
            "children": [
              {
                "id": "def-server.IKibanaSocket.renegotiate.options",
                "type": "Object",
                "label": "options",
                "tags": [],
                "description": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-server.IKibanaSocket.renegotiate.options.rejectUnauthorized",
                    "type": "CompoundType",
                    "label": "rejectUnauthorized",
                    "description": [],
                    "source": {
                      "path": "src/core/server/http/router/socket.ts",
                      "lineNumber": 43
                    },
                    "signature": [
                      "boolean | undefined"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-server.IKibanaSocket.renegotiate.options.requestCert",
                    "type": "CompoundType",
                    "label": "requestCert",
                    "description": [],
                    "source": {
                      "path": "src/core/server/http/router/socket.ts",
                      "lineNumber": 43
                    },
                    "signature": [
                      "boolean | undefined"
                    ]
                  }
                ],
                "source": {
                  "path": "src/core/server/http/router/socket.ts",
                  "lineNumber": 43
                }
              }
            ],
            "tags": [],
            "returnComment": [
              "A Promise that will be resolved if renegotiation succeeded, or will be rejected if renegotiation failed."
            ],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 43
            }
          },
          {
            "tags": [],
            "id": "def-server.IKibanaSocket.authorized",
            "type": "CompoundType",
            "label": "authorized",
            "description": [
              "\nIndicates whether or not the peer certificate was signed by one of the specified CAs. When TLS\nisn't used the value is `undefined`."
            ],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 49
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IKibanaSocket.authorizationError",
            "type": "Object",
            "label": "authorizationError",
            "description": [
              "\nThe reason why the peer's certificate has not been verified. This property becomes available\nonly when `authorized` is `false`."
            ],
            "source": {
              "path": "src/core/server/http/router/socket.ts",
              "lineNumber": 55
            },
            "signature": [
              "Error | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/socket.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.IRouter",
        "type": "Interface",
        "label": "IRouter",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.IRouter",
            "text": "IRouter"
          },
          "<Context>"
        ],
        "description": [
          "\nRegisters route handlers for specified resource path and method.\nSee {@link RouteConfig} and {@link RequestHandler} for more information about arguments to route registrations.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.IRouter.routerPath",
            "type": "string",
            "label": "routerPath",
            "description": [
              "\nResulted path"
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 65
            }
          },
          {
            "tags": [],
            "id": "def-server.IRouter.get",
            "type": "Function",
            "label": "get",
            "description": [
              "\nRegister a route handler for `GET` request."
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 72
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteRegistrar",
                "text": "RouteRegistrar"
              },
              "<\"get\", Context>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IRouter.post",
            "type": "Function",
            "label": "post",
            "description": [
              "\nRegister a route handler for `POST` request."
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 79
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteRegistrar",
                "text": "RouteRegistrar"
              },
              "<\"post\", Context>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IRouter.put",
            "type": "Function",
            "label": "put",
            "description": [
              "\nRegister a route handler for `PUT` request."
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 86
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteRegistrar",
                "text": "RouteRegistrar"
              },
              "<\"put\", Context>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IRouter.patch",
            "type": "Function",
            "label": "patch",
            "description": [
              "\nRegister a route handler for `PATCH` request."
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 93
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteRegistrar",
                "text": "RouteRegistrar"
              },
              "<\"patch\", Context>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IRouter.delete",
            "type": "Function",
            "label": "delete",
            "description": [
              "\nRegister a route handler for `DELETE` request."
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 100
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteRegistrar",
                "text": "RouteRegistrar"
              },
              "<\"delete\", Context>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IRouter.handleLegacyErrors",
            "type": "Function",
            "label": "handleLegacyErrors",
            "description": [
              "\nWrap a router handler to catch and converts legacy boom errors to proper custom errors."
            ],
            "source": {
              "path": "src/core/server/http/router/router.ts",
              "lineNumber": 106
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RequestHandlerWrapper",
                "text": "RequestHandlerWrapper"
              }
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/router.ts",
          "lineNumber": 61
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.KibanaRequestEvents",
        "type": "Interface",
        "label": "KibanaRequestEvents",
        "description": [
          "\nRequest events."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.KibanaRequestEvents.aborted$",
            "type": "Object",
            "label": "aborted$",
            "description": [
              "\nObservable that emits once if and when the request has been aborted."
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 66
            },
            "signature": [
              "Observable",
              "<void>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequestEvents.completed$",
            "type": "Object",
            "label": "completed$",
            "description": [
              "\nObservable that emits once if and when the request has been completely handled.\n"
            ],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 76
            },
            "signature": [
              "Observable",
              "<void>"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/request.ts",
          "lineNumber": 62
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.KibanaRequestRoute",
        "type": "Interface",
        "label": "KibanaRequestRoute",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequestRoute",
            "text": "KibanaRequestRoute"
          },
          "<Method>"
        ],
        "description": [
          "\nRequest specific route information exposed to a handler."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.KibanaRequestRoute.path",
            "type": "string",
            "label": "path",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 53
            }
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequestRoute.method",
            "type": "Uncategorized",
            "label": "method",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 54
            },
            "signature": [
              "Method"
            ]
          },
          {
            "tags": [],
            "id": "def-server.KibanaRequestRoute.options",
            "type": "Uncategorized",
            "label": "options",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/request.ts",
              "lineNumber": 55
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequestRouteOptions",
                "text": "KibanaRequestRouteOptions"
              },
              "<Method>"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/request.ts",
          "lineNumber": 52
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.LegacyRequest",
        "type": "Interface",
        "label": "LegacyRequest",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.LegacyRequest",
            "text": "LegacyRequest"
          },
          " extends ",
          "Request"
        ],
        "description": [],
        "tags": [
          "deprecated",
          "public"
        ],
        "children": [],
        "source": {
          "path": "src/core/server/http/router/request.ts",
          "lineNumber": 84
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPostAuthToolkit",
        "type": "Interface",
        "label": "OnPostAuthToolkit",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPostAuthToolkit.next",
            "type": "Function",
            "label": "next",
            "description": [
              "To pass request to the next handler"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_post_auth.ts",
              "lineNumber": 44
            },
            "signature": [
              "() => Next"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_post_auth.ts",
          "lineNumber": 42
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreAuthToolkit",
        "type": "Interface",
        "label": "OnPreAuthToolkit",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPreAuthToolkit.next",
            "type": "Function",
            "label": "next",
            "description": [
              "To pass request to the next handler"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_auth.ts",
              "lineNumber": 44
            },
            "signature": [
              "() => Next"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_auth.ts",
          "lineNumber": 42
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreResponseExtensions",
        "type": "Interface",
        "label": "OnPreResponseExtensions",
        "description": [
          "\nAdditional data to extend a response."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPreResponseExtensions.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "additional headers to attach to the response"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_response.ts",
              "lineNumber": 58
            },
            "signature": [
              "Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]> | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_response.ts",
          "lineNumber": 56
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreResponseInfo",
        "type": "Interface",
        "label": "OnPreResponseInfo",
        "description": [
          "\nResponse status code."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPreResponseInfo.statusCode",
            "type": "number",
            "label": "statusCode",
            "description": [],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_response.ts",
              "lineNumber": 66
            }
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_response.ts",
          "lineNumber": 65
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreResponseRender",
        "type": "Interface",
        "label": "OnPreResponseRender",
        "description": [
          "\nAdditional data to extend a response when rendering a new body"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPreResponseRender.headers",
            "type": "CompoundType",
            "label": "headers",
            "description": [
              "additional headers to attach to the response"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_response.ts",
              "lineNumber": 47
            },
            "signature": [
              "Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.OnPreResponseRender.body",
            "type": "string",
            "label": "body",
            "description": [
              "the body to use in the response"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_response.ts",
              "lineNumber": 49
            }
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_response.ts",
          "lineNumber": 45
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreResponseToolkit",
        "type": "Interface",
        "label": "OnPreResponseToolkit",
        "description": [
          "\nA tool set defining an outcome of OnPreResponse interceptor for incoming request."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPreResponseToolkit.render",
            "type": "Function",
            "label": "render",
            "description": [
              "To override the response with a different body"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_response.ts",
              "lineNumber": 90
            },
            "signature": [
              "(responseRender: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.OnPreResponseRender",
                "text": "OnPreResponseRender"
              },
              ") => OnPreResponseResult"
            ]
          },
          {
            "tags": [],
            "id": "def-server.OnPreResponseToolkit.next",
            "type": "Function",
            "label": "next",
            "description": [
              "To pass request to the next handler"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_response.ts",
              "lineNumber": 92
            },
            "signature": [
              "(responseExtensions?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.OnPreResponseExtensions",
                "text": "OnPreResponseExtensions"
              },
              " | undefined) => OnPreResponseResult"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_response.ts",
          "lineNumber": 88
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreRoutingToolkit",
        "type": "Interface",
        "label": "OnPreRoutingToolkit",
        "description": [],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.OnPreRoutingToolkit.next",
            "type": "Function",
            "label": "next",
            "description": [
              "To pass request to the next handler"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_routing.ts",
              "lineNumber": 57
            },
            "signature": [
              "() => OnPreRoutingResult"
            ]
          },
          {
            "tags": [],
            "id": "def-server.OnPreRoutingToolkit.rewriteUrl",
            "type": "Function",
            "label": "rewriteUrl",
            "description": [
              "Rewrite requested resources url before is was authenticated and routed to a handler"
            ],
            "source": {
              "path": "src/core/server/http/lifecycle/on_pre_routing.ts",
              "lineNumber": 59
            },
            "signature": [
              "(url: string) => OnPreRoutingResult"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_routing.ts",
          "lineNumber": 55
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteConfig",
        "type": "Interface",
        "label": "RouteConfig",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteConfig",
            "text": "RouteConfig"
          },
          "<P, Q, B, Method>"
        ],
        "description": [
          "\nRoute specific configuration."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.RouteConfig.path",
            "type": "string",
            "label": "path",
            "description": [
              "\nThe endpoint _within_ the router path to register the route.\n"
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 171
            }
          },
          {
            "tags": [],
            "id": "def-server.RouteConfig.validate",
            "type": "CompoundType",
            "label": "validate",
            "description": [
              "\nA schema created with `@kbn/config-schema` that every request will be validated against.\n"
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 229
            },
            "signature": [
              "false | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteValidatorFullConfig",
                "text": "RouteValidatorFullConfig"
              },
              "<P, Q, B>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfig.options",
            "type": "Object",
            "label": "options",
            "description": [
              "\nAdditional route options {@link RouteConfigOptions}."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 234
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteConfigOptions",
                "text": "RouteConfigOptions"
              },
              "<Method> | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 157
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteConfigOptions",
        "type": "Interface",
        "label": "RouteConfigOptions",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteConfigOptions",
            "text": "RouteConfigOptions"
          },
          "<Method>"
        ],
        "description": [
          "\nAdditional route options."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.RouteConfigOptions.authRequired",
            "type": "CompoundType",
            "label": "authRequired",
            "description": [
              "\nDefines authentication mode for a route:\n- true. A user has to have valid credentials to access a resource\n- false. A user can access a resource without any credentials.\n- 'optional'. A user can access a resource, and will be authenticated if provided credentials are valid.\n              Can be useful when we grant access to a resource but want to identify a user if possible.\n\nDefaults to `true` if an auth mechanism is registered."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 116
            },
            "signature": [
              "boolean | \"optional\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptions.xsrfRequired",
            "type": "Uncategorized",
            "label": "xsrfRequired",
            "description": [
              "\nDefines xsrf protection requirements for a route:\n- true. Requires an incoming POST/PUT/DELETE request to contain `kbn-xsrf` header.\n- false. Disables xsrf protection.\n\nSet to true by default"
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 125
            },
            "signature": [
              "(Method extends \"get\" ? never : boolean) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptions.tags",
            "type": "Object",
            "label": "tags",
            "description": [
              "\nAdditional metadata tag strings to attach to the route."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 130
            },
            "signature": [
              "readonly string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptions.body",
            "type": "Uncategorized",
            "label": "body",
            "description": [
              "\nAdditional body options {@link RouteConfigOptionsBody}."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 135
            },
            "signature": [
              "(Method extends ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.SafeRouteMethod",
                "text": "SafeRouteMethod"
              },
              " ? undefined : ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteConfigOptionsBody",
                "text": "RouteConfigOptionsBody"
              },
              ") | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptions.timeout",
            "type": "Object",
            "label": "timeout",
            "description": [
              "\nDefines per-route timeouts."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 140
            },
            "signature": [
              "{ payload?: (Method extends ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.SafeRouteMethod",
                "text": "SafeRouteMethod"
              },
              " ? undefined : number) | undefined; idleSocket?: number | undefined; } | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 106
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteConfigOptionsBody",
        "type": "Interface",
        "label": "RouteConfigOptionsBody",
        "description": [
          "\nAdditional body options for a route"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.RouteConfigOptionsBody.accepts",
            "type": "CompoundType",
            "label": "accepts",
            "description": [
              "\nA string or an array of strings with the allowed mime types for the endpoint. Use this settings to limit the set of allowed mime types. Note that allowing additional mime types not listed\nabove will not enable them to be parsed, and if parse is true, the request will result in an error response.\n\nDefault value: allows parsing of the following mime types:\n* application/json\n* application/*+json\n* application/octet-stream\n* application/x-www-form-urlencoded\n* multipart/form-data\n* text/*"
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 68
            },
            "signature": [
              "string | string[] | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteContentType",
                "text": "RouteContentType"
              },
              "[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptionsBody.maxBytes",
            "type": "number",
            "label": "maxBytes",
            "description": [
              "\nLimits the size of incoming payloads to the specified byte count. Allowing very large payloads may cause the server to run out of memory.\n\nDefault value: The one set in the kibana.yml config file under the parameter `server.maxPayloadBytes`."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 75
            },
            "signature": [
              "number | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptionsBody.output",
            "type": "CompoundType",
            "label": "output",
            "description": [
              "\nThe processed payload format. The value must be one of:\n* 'data' - the incoming payload is read fully into memory. If parse is true, the payload is parsed (JSON, form-decoded, multipart) based on the 'Content-Type' header. If parse is false, a raw\nBuffer is returned.\n* 'stream' - the incoming payload is made available via a Stream.Readable interface. If the payload is 'multipart/form-data' and parse is true, field values are presented as text while files\nare provided as streams. File streams from a 'multipart/form-data' upload will also have a hapi property containing the filename and headers properties. Note that payload streams for multipart\npayloads are a synthetic interface created on top of the entire multipart content loaded into memory. To avoid loading large multipart payloads into memory, set parse to false and handle the\nmultipart payload in the handler using a streaming parser (e.g. pez).\n\nDefault value: 'data', unless no validation.body is provided in the route definition. In that case the default is 'stream' to alleviate memory pressure."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 88
            },
            "signature": [
              "\"data\" | \"stream\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteConfigOptionsBody.parse",
            "type": "CompoundType",
            "label": "parse",
            "description": [
              "\nDetermines if the incoming payload is processed or presented raw. Available values:\n* true - if the request 'Content-Type' matches the allowed mime types set by allow (for the whole payload as well as parts), the payload is converted into an object when possible. If the\nformat is unknown, a Bad Request (400) error response is sent. Any known content encoding is decoded.\n* false - the raw payload is returned unmodified.\n* 'gunzip' - the raw payload is returned unmodified after any known content encoding is decoded.\n\nDefault value: true, unless no validation.body is provided in the route definition. In that case the default is false to alleviate memory pressure."
            ],
            "source": {
              "path": "src/core/server/http/router/route.ts",
              "lineNumber": 99
            },
            "signature": [
              "boolean | \"gunzip\" | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 55
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidationResultFactory",
        "type": "Interface",
        "label": "RouteValidationResultFactory",
        "description": [
          "\nValidation result factory to be used in the custom validation function to return the valid data or validation errors\n\nSee {@link RouteValidationFunction}.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.RouteValidationResultFactory.ok",
            "type": "Function",
            "label": "ok",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/validator/validator.ts",
              "lineNumber": 21
            },
            "signature": [
              "<T>(value: T) => { value: T; }"
            ]
          },
          {
            "tags": [],
            "id": "def-server.RouteValidationResultFactory.badRequest",
            "type": "Function",
            "label": "badRequest",
            "description": [],
            "source": {
              "path": "src/core/server/http/router/validator/validator.ts",
              "lineNumber": 22
            },
            "signature": [
              "(error: string | Error, path?: string[] | undefined) => { error: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteValidationError",
                "text": "RouteValidationError"
              },
              "; }"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator.ts",
          "lineNumber": 20
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidatorConfig",
        "type": "Interface",
        "label": "RouteValidatorConfig",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteValidatorConfig",
            "text": "RouteValidatorConfig"
          },
          "<P, Q, B>"
        ],
        "description": [
          "\nThe configuration object to the RouteValidator class.\nSet `params`, `query` and/or `body` to specify the validation logic to follow for that property.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [
              "public"
            ],
            "id": "def-server.RouteValidatorConfig.params",
            "type": "CompoundType",
            "label": "params",
            "description": [
              "\nValidation logic for the URL params"
            ],
            "source": {
              "path": "src/core/server/http/router/validator/validator.ts",
              "lineNumber": 92
            },
            "signature": [
              "ObjectType",
              "<any> | ",
              "Type",
              "<P> | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteValidationFunction",
                "text": "RouteValidationFunction"
              },
              "<P> | undefined"
            ]
          },
          {
            "tags": [
              "public"
            ],
            "id": "def-server.RouteValidatorConfig.query",
            "type": "CompoundType",
            "label": "query",
            "description": [
              "\nValidation logic for the Query params"
            ],
            "source": {
              "path": "src/core/server/http/router/validator/validator.ts",
              "lineNumber": 97
            },
            "signature": [
              "ObjectType",
              "<any> | ",
              "Type",
              "<Q> | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteValidationFunction",
                "text": "RouteValidationFunction"
              },
              "<Q> | undefined"
            ]
          },
          {
            "tags": [
              "public"
            ],
            "id": "def-server.RouteValidatorConfig.body",
            "type": "CompoundType",
            "label": "body",
            "description": [
              "\nValidation logic for the body payload"
            ],
            "source": {
              "path": "src/core/server/http/router/validator/validator.ts",
              "lineNumber": 102
            },
            "signature": [
              "ObjectType",
              "<any> | ",
              "Type",
              "<B> | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteValidationFunction",
                "text": "RouteValidationFunction"
              },
              "<B> | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator.ts",
          "lineNumber": 87
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidatorOptions",
        "type": "Interface",
        "label": "RouteValidatorOptions",
        "description": [
          "\nAdditional options for the RouteValidator class to modify its default behaviour.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [
              "public"
            ],
            "id": "def-server.RouteValidatorOptions.unsafe",
            "type": "Object",
            "label": "unsafe",
            "description": [
              "\nSet the `unsafe` config to avoid running some additional internal *safe* validations on top of your custom validation"
            ],
            "source": {
              "path": "src/core/server/http/router/validator/validator.ts",
              "lineNumber": 115
            },
            "signature": [
              "{ params?: boolean | undefined; query?: boolean | undefined; body?: boolean | undefined; } | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator.ts",
          "lineNumber": 110
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.SessionCookieValidationResult",
        "type": "Interface",
        "label": "SessionCookieValidationResult",
        "description": [
          "\nReturn type from a function to validate cookie contents."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.SessionCookieValidationResult.isValid",
            "type": "boolean",
            "label": "isValid",
            "description": [
              "\nWhether the cookie is valid or not."
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 52
            }
          },
          {
            "tags": [],
            "id": "def-server.SessionCookieValidationResult.path",
            "type": "string",
            "label": "path",
            "description": [
              "\nThe \"Path\" attribute of the cookie; if the cookie is invalid, this is used to clear it."
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 56
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/cookie_session_storage.ts",
          "lineNumber": 48
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.SessionStorage",
        "type": "Interface",
        "label": "SessionStorage",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.SessionStorage",
            "text": "SessionStorage"
          },
          "<T>"
        ],
        "description": [
          "\nProvides an interface to store and retrieve data across requests."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-server.SessionStorage.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "() => Promise<T | null>"
            ],
            "description": [
              "\nRetrieves session value from the session storage."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/session_storage.ts",
              "lineNumber": 18
            }
          },
          {
            "id": "def-server.SessionStorage.set",
            "type": "Function",
            "label": "set",
            "signature": [
              "(sessionValue: T) => void"
            ],
            "description": [
              "\nPuts current session value into the session storage."
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "sessionValue",
                "isRequired": true,
                "signature": [
                  "T"
                ],
                "description": [
                  "- value to put"
                ],
                "source": {
                  "path": "src/core/server/http/session_storage.ts",
                  "lineNumber": 23
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/session_storage.ts",
              "lineNumber": 23
            }
          },
          {
            "id": "def-server.SessionStorage.clear",
            "type": "Function",
            "label": "clear",
            "signature": [
              "() => void"
            ],
            "description": [
              "\nClears current session."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/core/server/http/session_storage.ts",
              "lineNumber": 27
            }
          }
        ],
        "source": {
          "path": "src/core/server/http/session_storage.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.SessionStorageCookieOptions",
        "type": "Interface",
        "label": "SessionStorageCookieOptions",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.SessionStorageCookieOptions",
            "text": "SessionStorageCookieOptions"
          },
          "<T>"
        ],
        "description": [
          "\nConfiguration used to create HTTP session storage based on top of cookie mechanism."
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.SessionStorageCookieOptions.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nName of the session cookie."
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 24
            }
          },
          {
            "tags": [],
            "id": "def-server.SessionStorageCookieOptions.encryptionKey",
            "type": "string",
            "label": "encryptionKey",
            "description": [
              "\nA key used to encrypt a cookie's value. Should be at least 32 characters long."
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 28
            }
          },
          {
            "tags": [],
            "id": "def-server.SessionStorageCookieOptions.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nFunction called to validate a cookie's decrypted value."
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 32
            },
            "signature": [
              "(sessionValue: T | T[]) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.SessionCookieValidationResult",
                "text": "SessionCookieValidationResult"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.SessionStorageCookieOptions.isSecure",
            "type": "boolean",
            "label": "isSecure",
            "description": [
              "\nFlag indicating whether the cookie should be sent only via a secure connection."
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 36
            }
          },
          {
            "tags": [],
            "id": "def-server.SessionStorageCookieOptions.sameSite",
            "type": "CompoundType",
            "label": "sameSite",
            "description": [
              "\nDefines SameSite attribute of the Set-Cookie Header.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite"
            ],
            "source": {
              "path": "src/core/server/http/cookie_session_storage.ts",
              "lineNumber": 41
            },
            "signature": [
              "\"None\" | \"Strict\" | \"Lax\" | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/cookie_session_storage.ts",
          "lineNumber": 20
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.SessionStorageFactory",
        "type": "Interface",
        "label": "SessionStorageFactory",
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.SessionStorageFactory",
            "text": "SessionStorageFactory"
          },
          "<T>"
        ],
        "description": [
          "\nSessionStorage factory to bind one to an incoming request"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.SessionStorageFactory.asScoped",
            "type": "Function",
            "label": "asScoped",
            "description": [],
            "source": {
              "path": "src/core/server/http/session_storage.ts",
              "lineNumber": 34
            },
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.SessionStorage",
                "text": "SessionStorage"
              },
              "<T>"
            ]
          }
        ],
        "source": {
          "path": "src/core/server/http/session_storage.ts",
          "lineNumber": 33
        },
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "id": "def-server.AuthResultType",
        "type": "Enum",
        "label": "AuthResultType",
        "tags": [
          "public"
        ],
        "description": [],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 22
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthStatus",
        "type": "Enum",
        "label": "AuthStatus",
        "tags": [
          "public"
        ],
        "description": [
          "\nStatus indicating an outcome of the authentication."
        ],
        "source": {
          "path": "src/core/server/http/auth_state_storage.ts",
          "lineNumber": 15
        },
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "id": "def-server.AuthenticationHandler",
        "type": "Type",
        "label": "AuthenticationHandler",
        "tags": [
          "public"
        ],
        "description": [
          "\nSee {@link AuthToolkit}."
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 147
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, response: { badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthHeaders",
        "type": "Type",
        "label": "AuthHeaders",
        "tags": [
          "public"
        ],
        "description": [
          "\nAuth Headers map"
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 82
        },
        "signature": [
          "{ [x: string]: string | string[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.AuthResult",
        "type": "Type",
        "label": "AuthResult",
        "tags": [
          "public"
        ],
        "description": [],
        "source": {
          "path": "src/core/server/http/lifecycle/auth.ts",
          "lineNumber": 44
        },
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.Authenticated",
            "text": "Authenticated"
          },
          " | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.AuthNotHandled",
            "text": "AuthNotHandled"
          },
          " | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.AuthRedirected",
            "text": "AuthRedirected"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.DestructiveRouteMethod",
        "type": "Type",
        "label": "DestructiveRouteMethod",
        "tags": [
          "public"
        ],
        "description": [
          "\nSet of HTTP methods changing the state of the server."
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 19
        },
        "signature": [
          "\"post\" | \"put\" | \"delete\" | \"patch\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.GetAuthHeaders",
        "type": "Type",
        "label": "GetAuthHeaders",
        "tags": [
          "return",
          "public"
        ],
        "description": [
          "\nGet headers to authenticate a user against Elasticsearch."
        ],
        "source": {
          "path": "src/core/server/http/auth_headers_storage.ts",
          "lineNumber": 18
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.LegacyRequest",
            "text": "LegacyRequest"
          },
          ") => Record<string, string | string[]> | undefined"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.GetAuthState",
        "type": "Type",
        "label": "GetAuthState",
        "tags": [
          "public"
        ],
        "description": [
          "\nGets authentication state for a request. Returned by `auth` interceptor."
        ],
        "source": {
          "path": "src/core/server/http/auth_state_storage.ts",
          "lineNumber": 35
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.LegacyRequest",
            "text": "LegacyRequest"
          },
          ") => { status: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.AuthStatus",
            "text": "AuthStatus"
          },
          "; state: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.Headers",
        "type": "Type",
        "label": "Headers",
        "tags": [
          "public"
        ],
        "description": [
          "\nHttp request headers to read."
        ],
        "source": {
          "path": "src/core/server/http/router/headers.ts",
          "lineNumber": 40
        },
        "signature": [
          "{ accept?: string | string[] | undefined; \"accept-language\"?: string | string[] | undefined; \"accept-patch\"?: string | string[] | undefined; \"accept-ranges\"?: string | string[] | undefined; \"access-control-allow-credentials\"?: string | string[] | undefined; \"access-control-allow-headers\"?: string | string[] | undefined; \"access-control-allow-methods\"?: string | string[] | undefined; \"access-control-allow-origin\"?: string | string[] | undefined; \"access-control-expose-headers\"?: string | string[] | undefined; \"access-control-max-age\"?: string | string[] | undefined; \"access-control-request-headers\"?: string | string[] | undefined; \"access-control-request-method\"?: string | string[] | undefined; age?: string | string[] | undefined; allow?: string | string[] | undefined; \"alt-svc\"?: string | string[] | undefined; authorization?: string | string[] | undefined; \"cache-control\"?: string | string[] | undefined; connection?: string | string[] | undefined; \"content-disposition\"?: string | string[] | undefined; \"content-encoding\"?: string | string[] | undefined; \"content-language\"?: string | string[] | undefined; \"content-length\"?: string | string[] | undefined; \"content-location\"?: string | string[] | undefined; \"content-range\"?: string | string[] | undefined; \"content-type\"?: string | string[] | undefined; cookie?: string | string[] | undefined; date?: string | string[] | undefined; expect?: string | string[] | undefined; expires?: string | string[] | undefined; forwarded?: string | string[] | undefined; from?: string | string[] | undefined; host?: string | string[] | undefined; \"if-match\"?: string | string[] | undefined; \"if-modified-since\"?: string | string[] | undefined; \"if-none-match\"?: string | string[] | undefined; \"if-unmodified-since\"?: string | string[] | undefined; \"last-modified\"?: string | string[] | undefined; location?: string | string[] | undefined; origin?: string | string[] | undefined; pragma?: string | string[] | undefined; \"proxy-authenticate\"?: string | string[] | undefined; \"proxy-authorization\"?: string | string[] | undefined; \"public-key-pins\"?: string | string[] | undefined; range?: string | string[] | undefined; referer?: string | string[] | undefined; \"retry-after\"?: string | string[] | undefined; \"sec-websocket-accept\"?: string | string[] | undefined; \"sec-websocket-extensions\"?: string | string[] | undefined; \"sec-websocket-key\"?: string | string[] | undefined; \"sec-websocket-protocol\"?: string | string[] | undefined; \"sec-websocket-version\"?: string | string[] | undefined; \"set-cookie\"?: string | string[] | undefined; \"strict-transport-security\"?: string | string[] | undefined; tk?: string | string[] | undefined; trailer?: string | string[] | undefined; \"transfer-encoding\"?: string | string[] | undefined; upgrade?: string | string[] | undefined; \"user-agent\"?: string | string[] | undefined; vary?: string | string[] | undefined; via?: string | string[] | undefined; warning?: string | string[] | undefined; \"www-authenticate\"?: string | string[] | undefined; } & { [header: string]: string | string[] | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.HttpResponsePayload",
        "type": "Type",
        "label": "HttpResponsePayload",
        "tags": [
          "public"
        ],
        "description": [
          "\nData send to the client as a response payload."
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 71
        },
        "signature": [
          "undefined | string | Record<string, any> | Buffer | ",
          "Stream"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.IBasePath",
        "type": "Type",
        "label": "IBasePath",
        "tags": [
          "public"
        ],
        "description": [
          "\nAccess or manipulate the Kibana base path\n\n{@link BasePath}"
        ],
        "source": {
          "path": "src/core/server/http/base_path_service.ts",
          "lineNumber": 104
        },
        "signature": [
          "{ remove: (path: string) => string; get: (request: KibanaRequest<unknown, unknown, unknown, any> | LegacyRequest) => string; prepend: (path: string) => string; set: (request: KibanaRequest<unknown, unknown, unknown, any> | LegacyRequest, requestSpecificBasePath: string) => void; readonly serverBasePath: string; readonly publicBaseUrl?: string | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.IsAuthenticated",
        "type": "Type",
        "label": "IsAuthenticated",
        "tags": [
          "public"
        ],
        "description": [
          "\nReturns authentication status for a request."
        ],
        "source": {
          "path": "src/core/server/http/auth_state_storage.ts",
          "lineNumber": 44
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.LegacyRequest",
            "text": "LegacyRequest"
          },
          ") => boolean"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.KibanaRequestRouteOptions",
        "type": "Type",
        "label": "KibanaRequestRouteOptions",
        "tags": [
          "public"
        ],
        "description": [
          "\nRoute options: If 'GET' or 'OPTIONS' method, body options won't be returned."
        ],
        "source": {
          "path": "src/core/server/http/router/request.ts",
          "lineNumber": 44
        },
        "signature": [
          "Method extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.SafeRouteMethod",
            "text": "SafeRouteMethod"
          },
          " ? Required<Pick<RouteConfigOptions<Method>, \"timeout\" | \"tags\" | \"authRequired\" | \"xsrfRequired\">> : Required<RouteConfigOptions<Method>>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.KibanaResponseFactory",
        "type": "Type",
        "label": "KibanaResponseFactory",
        "tags": [
          "public"
        ],
        "description": [
          "\nCreates an object containing request response payload, HTTP headers, error details, and other data transmitted to the client."
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 319
        },
        "signature": [
          "{ custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | Stream | undefined>(options: CustomHttpResponseOptions<T>) => KibanaResponse<T>; badRequest: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; unauthorized: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; forbidden: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; notFound: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; conflict: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; customError: (options: CustomHttpResponseOptions<ResponseError>) => KibanaResponse<ResponseError>; redirected: (options: RedirectResponseOptions) => KibanaResponse<string | Record<string, any> | Buffer | Stream>; ok: (options?: HttpResponseOptions) => KibanaResponse<string | Record<string, any> | Buffer | Stream>; accepted: (options?: HttpResponseOptions) => KibanaResponse<string | Record<string, any> | Buffer | Stream>; noContent: (options?: HttpResponseOptions) => KibanaResponse<undefined>; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.KnownHeaders",
        "type": "Type",
        "label": "KnownHeaders",
        "tags": [
          "public"
        ],
        "description": [
          "\nSet of well-known HTTP headers."
        ],
        "source": {
          "path": "src/core/server/http/router/headers.ts",
          "lineNumber": 34
        },
        "signature": [
          "\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.LifecycleResponseFactory",
        "type": "Type",
        "label": "LifecycleResponseFactory",
        "tags": [
          "public"
        ],
        "description": [
          "\nCreates an object containing redirection or error response with error details, HTTP headers, and other data transmitted to the client."
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 325
        },
        "signature": [
          "{ badRequest: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; unauthorized: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; forbidden: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; notFound: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; conflict: (options?: ErrorHttpResponseOptions) => KibanaResponse<ResponseError>; customError: (options: CustomHttpResponseOptions<ResponseError>) => KibanaResponse<ResponseError>; redirected: (options: RedirectResponseOptions) => KibanaResponse<string | Record<string, any> | Buffer | Stream>; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPostAuthHandler",
        "type": "Type",
        "label": "OnPostAuthHandler",
        "tags": [
          "public"
        ],
        "description": [
          "\nSee {@link OnPostAuthToolkit}."
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_post_auth.ts",
          "lineNumber": 51
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, response: { badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreAuthHandler",
        "type": "Type",
        "label": "OnPreAuthHandler",
        "tags": [
          "public"
        ],
        "description": [
          "\nSee {@link OnPreAuthToolkit}."
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_auth.ts",
          "lineNumber": 55
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, response: { badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreResponseHandler",
        "type": "Type",
        "label": "OnPreResponseHandler",
        "tags": [
          "public"
        ],
        "description": [
          "\nSee {@link OnPreRoutingToolkit}."
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_response.ts",
          "lineNumber": 104
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, preResponse: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.OnPreResponseInfo",
            "text": "OnPreResponseInfo"
          },
          ", toolkit: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.OnPreResponseToolkit",
            "text": "OnPreResponseToolkit"
          },
          ") => Render | Next | Promise<OnPreResponseResult>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.OnPreRoutingHandler",
        "type": "Type",
        "label": "OnPreRoutingHandler",
        "tags": [
          "public"
        ],
        "description": [
          "\nSee {@link OnPreRoutingToolkit}."
        ],
        "source": {
          "path": "src/core/server/http/lifecycle/on_pre_routing.ts",
          "lineNumber": 71
        },
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, response: { badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RedirectResponseOptions",
        "type": "Type",
        "label": "RedirectResponseOptions",
        "tags": [
          "public"
        ],
        "description": [
          "\nHTTP response parameters for redirection response"
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 89
        },
        "signature": [
          "HttpResponseOptions & { headers: {    location: string;}; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RequestHandler",
        "type": "Type",
        "label": "RequestHandler",
        "tags": [
          "public"
        ],
        "description": [
          "\nA function executed when route path matched requested resource path.\nRequest handler is expected to return a result of one of {@link KibanaResponseFactory} functions.\nIf anything else is returned, or an error is thrown, the HTTP service will automatically log the error\nand respond `500 - Internal Server Error`."
        ],
        "source": {
          "path": "src/core/server/http/router/router.ts",
          "lineNumber": 350
        },
        "signature": [
          "(context: Context, request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<P, Q, B, Method>, response: ResponseFactory) => ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any> | Promise<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RequestHandlerContextContainer",
        "type": "Type",
        "label": "RequestHandlerContextContainer",
        "tags": [
          "public"
        ],
        "description": [
          "\nAn object that handles registration of http request context providers."
        ],
        "source": {
          "path": "src/core/server/http/types.ts",
          "lineNumber": 30
        },
        "signature": [
          "IContextContainer"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RequestHandlerContextProvider",
        "type": "Type",
        "label": "RequestHandlerContextProvider",
        "tags": [
          "public"
        ],
        "description": [
          "\nContext provider for request handler.\nExtends request context object with provided functionality or data.\n"
        ],
        "source": {
          "path": "src/core/server/http/types.ts",
          "lineNumber": 38
        },
        "signature": [
          "(context: Pick<Context, Exclude<keyof Context, ContextName>>, rest: [request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, response: { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
          "Stream",
          " | undefined>(options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<T>) => ",
          "KibanaResponse",
          "<T>; badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RequestHandlerWrapper",
        "type": "Type",
        "label": "RequestHandlerWrapper",
        "tags": [
          "public"
        ],
        "description": [
          "\nType-safe wrapper for {@link RequestHandler} function."
        ],
        "source": {
          "path": "src/core/server/http/router/router.ts",
          "lineNumber": 376
        },
        "signature": [
          "(handler: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RequestHandler",
            "text": "RequestHandler"
          },
          "<P, Q, B, Context, Method, ResponseFactory>) => ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RequestHandler",
            "text": "RequestHandler"
          },
          "<P, Q, B, Context, Method, ResponseFactory>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ResponseError",
        "type": "Type",
        "label": "ResponseError",
        "tags": [
          "public"
        ],
        "description": [
          "\nError message and optional data send to the client in case of error."
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 21
        },
        "signature": [
          "string | Error | { message: string | Error; attributes?: Record<string, any> | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ResponseErrorAttributes",
        "type": "Type",
        "label": "ResponseErrorAttributes",
        "tags": [
          "public"
        ],
        "description": [
          "\nAdditional data to provide error details."
        ],
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ResponseHeaders",
        "type": "Type",
        "label": "ResponseHeaders",
        "tags": [
          "public"
        ],
        "description": [
          "\nHttp response headers to set."
        ],
        "source": {
          "path": "src/core/server/http/router/headers.ts",
          "lineNumber": 48
        },
        "signature": [
          "Record<\"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"allow\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"date\" | \"expect\" | \"expires\" | \"forwarded\" | \"from\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"location\" | \"origin\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"range\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"warning\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteContentType",
        "type": "Type",
        "label": "RouteContentType",
        "tags": [
          "public"
        ],
        "description": [
          "\nThe set of supported parseable Content-Types"
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 43
        },
        "signature": [
          "\"application/json\" | \"application/*+json\" | \"application/octet-stream\" | \"application/x-www-form-urlencoded\" | \"multipart/form-data\" | \"text/*\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteMethod",
        "type": "Type",
        "label": "RouteMethod",
        "tags": [
          "public"
        ],
        "description": [
          "\nThe set of common HTTP methods supported by Kibana routing."
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 31
        },
        "signature": [
          "\"get\" | \"options\" | \"post\" | \"put\" | \"delete\" | \"patch\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteRegistrar",
        "type": "Type",
        "label": "RouteRegistrar",
        "tags": [
          "public"
        ],
        "description": [
          "\nRoute handler common definition\n"
        ],
        "source": {
          "path": "src/core/server/http/router/router.ts",
          "lineNumber": 47
        },
        "signature": [
          "(route: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteConfig",
            "text": "RouteConfig"
          },
          "<P, Q, B, Method>, handler: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RequestHandler",
            "text": "RequestHandler"
          },
          "<P, Q, B, Context, Method, { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
          "Stream",
          " | undefined>(options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<T>) => ",
          "KibanaResponse"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidationFunction",
        "type": "Type",
        "label": "RouteValidationFunction",
        "tags": [
          "public"
        ],
        "description": [
          "\nThe custom validation function if @kbn/config-schema is not a valid solution for your specific plugin requirements.\n"
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator.ts",
          "lineNumber": 50
        },
        "signature": [
          "(data: any, validationResult: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteValidationResultFactory",
            "text": "RouteValidationResultFactory"
          },
          ") => { value: T; error?: undefined; } | { value?: undefined; error: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteValidationError",
            "text": "RouteValidationError"
          },
          "; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidationSpec",
        "type": "Type",
        "label": "RouteValidationSpec",
        "tags": [
          "public"
        ],
        "description": [
          "\nAllowed property validation options: either @kbn/config-schema validations or custom validation functions\n\nSee {@link RouteValidationFunction} for custom validation.\n"
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator.ts",
          "lineNumber": 70
        },
        "signature": [
          "ObjectType",
          "<any> | ",
          "Type",
          "<T> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RouteValidationFunction",
            "text": "RouteValidationFunction"
          },
          "<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.RouteValidatorFullConfig",
        "type": "Type",
        "label": "RouteValidatorFullConfig",
        "tags": [
          "public"
        ],
        "description": [
          "\nRoute validations config and options merged into one object"
        ],
        "source": {
          "path": "src/core/server/http/router/validator/validator.ts",
          "lineNumber": 126
        },
        "signature": [
          "RouteValidatorConfig<P, Q, B> & RouteValidatorOptions"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.SafeRouteMethod",
        "type": "Type",
        "label": "SafeRouteMethod",
        "tags": [
          "public"
        ],
        "description": [
          "\nSet of HTTP methods not changing the state of the server."
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 25
        },
        "signature": [
          "\"get\" | \"options\""
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "id": "def-server.kibanaResponseFactory",
        "type": "Object",
        "tags": [
          "public"
        ],
        "children": [
          {
            "id": "def-server.kibanaResponseFactory.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 290
            },
            "signature": [
              "any"
            ]
          },
          {
            "id": "def-server.kibanaResponseFactory.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 291
            },
            "signature": [
              "any"
            ]
          },
          {
            "id": "def-server.kibanaResponseFactory.Unnamed",
            "type": "Any",
            "label": "Unnamed",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 292
            },
            "signature": [
              "any"
            ]
          },
          {
            "id": "def-server.kibanaResponseFactory.custom",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "options",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.CustomHttpResponseOptions",
                    "text": "CustomHttpResponseOptions"
                  },
                  "<T>"
                ],
                "description": [],
                "source": {
                  "path": "src/core/server/http/router/response.ts",
                  "lineNumber": 298
                }
              }
            ],
            "signature": [
              "<T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
              "Stream",
              " | undefined>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<T>) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaResponse",
                "text": "KibanaResponse"
              },
              "<T>"
            ],
            "description": [
              "/**\n   * Creates a response with defined status code and payload.\n   * @param options - {@link CustomHttpResponseOptions} configures HTTP response parameters.\n   */"
            ],
            "label": "custom",
            "source": {
              "path": "src/core/server/http/router/response.ts",
              "lineNumber": 297
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [
          "\nSet of helpers used to create `KibanaResponse` to form HTTP response on an incoming request.\nShould be returned as a result of {@link RequestHandler} execution.\n"
        ],
        "label": "kibanaResponseFactory",
        "source": {
          "path": "src/core/server/http/router/response.ts",
          "lineNumber": 289
        },
        "initialIsOpen": false
      },
      {
        "tags": [
          "public"
        ],
        "id": "def-server.validBodyOutput",
        "type": "Object",
        "label": "validBodyOutput",
        "description": [
          "\nThe set of valid body.output"
        ],
        "source": {
          "path": "src/core/server/http/router/route.ts",
          "lineNumber": 37
        },
        "signature": [
          "readonly [\"data\", \"stream\"]"
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}