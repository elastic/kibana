{
  "id": "@kbn/streams-schema",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isAndCondition",
        "type": "Function",
        "tags": [],
        "label": "isAndCondition",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isAndCondition.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isDissectProcessor",
        "type": "Function",
        "tags": [],
        "label": "isDissectProcessor",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isDissectProcessor.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isFilterCondition",
        "type": "Function",
        "tags": [],
        "label": "isFilterCondition",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isFilterCondition.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isGrokProcessor",
        "type": "Function",
        "tags": [],
        "label": "isGrokProcessor",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isGrokProcessor.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isIngestReadStream",
        "type": "Function",
        "tags": [],
        "label": "isIngestReadStream",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isIngestReadStream.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isIngestStream",
        "type": "Function",
        "tags": [],
        "label": "isIngestStream",
        "description": [],
        "signature": [
          "(subject: { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isIngestStream.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isIngestStreamConfig",
        "type": "Function",
        "tags": [],
        "label": "isIngestStreamConfig",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isIngestStreamConfig.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isOrCondition",
        "type": "Function",
        "tags": [],
        "label": "isOrCondition",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isOrCondition.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isReadStream",
        "type": "Function",
        "tags": [],
        "label": "isReadStream",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isReadStream.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isSchema",
        "type": "Function",
        "tags": [],
        "label": "isSchema",
        "description": [],
        "signature": [
          "(zodSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, subject: T) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "zodSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isSchema.$2",
            "type": "Uncategorized",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isStream",
        "type": "Function",
        "tags": [],
        "label": "isStream",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isStream.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isStreamConfig",
        "type": "Function",
        "tags": [],
        "label": "isStreamConfig",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isStreamConfig.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isWiredReadStream",
        "type": "Function",
        "tags": [],
        "label": "isWiredReadStream",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isWiredReadStream.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isWiredStream",
        "type": "Function",
        "tags": [],
        "label": "isWiredStream",
        "description": [],
        "signature": [
          "(subject: { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isWiredStream.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.isWiredStreamConfig",
        "type": "Function",
        "tags": [],
        "label": "isWiredStreamConfig",
        "description": [],
        "signature": [
          "(subject: any) => boolean"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.isWiredStreamConfig.$1",
            "type": "Any",
            "tags": [],
            "label": "subject",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/helpers/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.AndCondition",
        "type": "Interface",
        "tags": [],
        "label": "AndCondition",
        "description": [],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.AndCondition.and",
            "type": "Array",
            "tags": [],
            "label": "and",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "[]"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.OrCondition",
        "type": "Interface",
        "tags": [],
        "label": "OrCondition",
        "description": [],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/streams-schema",
            "id": "def-common.OrCondition.or",
            "type": "Array",
            "tags": [],
            "label": "or",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/streams-schema",
                "scope": "common",
                "docId": "kibKbnStreamsSchemaPluginApi",
                "section": "def-common.Condition",
                "text": "Condition"
              },
              "[]"
            ],
            "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.BinaryFilterCondition",
        "type": "Type",
        "tags": [],
        "label": "BinaryFilterCondition",
        "description": [],
        "signature": [
          "{ value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.Condition",
        "type": "Type",
        "tags": [],
        "label": "Condition",
        "description": [],
        "signature": [
          "{ field: string; operator: \"exists\" | \"notExists\"; } | { value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; } | ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.AndCondition",
            "text": "AndCondition"
          },
          " | ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.OrCondition",
            "text": "OrCondition"
          },
          " | undefined"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.DissectProcssingDefinition",
        "type": "Type",
        "tags": [],
        "label": "DissectProcssingDefinition",
        "description": [],
        "signature": [
          "{ dissect: { field: string; pattern: string; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ElasticsearchAsset",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchAsset",
        "description": [],
        "signature": [
          "{ id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[]"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.FieldDefinition",
        "type": "Type",
        "tags": [],
        "label": "FieldDefinition",
        "description": [],
        "signature": [
          "{ [x: string]: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.FieldDefinitionConfig",
        "type": "Type",
        "tags": [],
        "label": "FieldDefinitionConfig",
        "description": [],
        "signature": [
          "{ type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.FieldDefinitionConfigWithName",
        "type": "Type",
        "tags": [],
        "label": "FieldDefinitionConfigWithName",
        "description": [],
        "signature": [
          "{ type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; format?: string | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.FilterCondition",
        "type": "Type",
        "tags": [],
        "label": "FilterCondition",
        "description": [],
        "signature": [
          "{ field: string; operator: \"exists\" | \"notExists\"; } | { value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.GrokProcessingDefinition",
        "type": "Type",
        "tags": [],
        "label": "GrokProcessingDefinition",
        "description": [],
        "signature": [
          "{ grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.IngestReadStreamDefinition",
        "type": "Type",
        "tags": [],
        "label": "IngestReadStreamDefinition",
        "description": [],
        "signature": [
          "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/read_streams/ingest_read_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.IngestStreamConfigDefinition",
        "type": "Type",
        "tags": [],
        "label": "IngestStreamConfigDefinition",
        "description": [],
        "signature": [
          "{ ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/stream_config/ingest_stream_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.IngestStreamDefinition",
        "type": "Type",
        "tags": [],
        "label": "IngestStreamDefinition",
        "description": [],
        "signature": [
          "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/streams/ingest_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.InheritedFieldDefinition",
        "type": "Type",
        "tags": [],
        "label": "InheritedFieldDefinition",
        "description": [],
        "signature": [
          "{ [x: string]: { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ListStreamsResponse",
        "type": "Type",
        "tags": [],
        "label": "ListStreamsResponse",
        "description": [],
        "signature": [
          "{ streams: ({ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; })[]; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/apis/list_streams_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ProcessingDefinition",
        "type": "Type",
        "tags": [],
        "label": "ProcessingDefinition",
        "description": [],
        "signature": [
          "{ config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ReadStreamDefinition",
        "type": "Type",
        "tags": [],
        "label": "ReadStreamDefinition",
        "description": [],
        "signature": [
          "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/read_streams/read_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ReadStreamResponse",
        "type": "Type",
        "tags": [],
        "label": "ReadStreamResponse",
        "description": [],
        "signature": [
          "{ streams: ({ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; })[]; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/apis/read_streams_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.StreamChild",
        "type": "Type",
        "tags": [],
        "label": "StreamChild",
        "description": [],
        "signature": [
          "{ name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.StreamConfigDefinition",
        "type": "Type",
        "tags": [],
        "label": "StreamConfigDefinition",
        "description": [],
        "signature": [
          "{ ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; } | { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/stream_config/stream_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.StreamDefinition",
        "type": "Type",
        "tags": [],
        "label": "StreamDefinition",
        "description": [],
        "signature": [
          "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/streams/stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.UnaryFilterCondition",
        "type": "Type",
        "tags": [],
        "label": "UnaryFilterCondition",
        "description": [],
        "signature": [
          "{ field: string; operator: \"exists\" | \"notExists\"; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.WiredReadStreamDefinition",
        "type": "Type",
        "tags": [],
        "label": "WiredReadStreamDefinition",
        "description": [],
        "signature": [
          "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/read_streams/wired_read_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.WiredStreamConfigDefinition",
        "type": "Type",
        "tags": [],
        "label": "WiredStreamConfigDefinition",
        "description": [],
        "signature": [
          "{ ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/stream_config/wired_stream_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.WiredStreamDefinition",
        "type": "Type",
        "tags": [],
        "label": "WiredStreamDefinition",
        "description": [],
        "signature": [
          "{ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/streams/wired_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.binaryConditionSchema",
        "type": "Object",
        "tags": [],
        "label": "binaryConditionSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ field: Zod.ZodString; operator: Zod.ZodEnum<[\"eq\", \"neq\", \"lt\", \"lte\", \"gt\", \"gte\", \"contains\", \"startsWith\", \"endsWith\"]>; value: Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>; }, \"strip\", Zod.ZodTypeAny, { value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; }, { value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.conditionSchema",
        "type": "Object",
        "tags": [],
        "label": "conditionSchema",
        "description": [],
        "signature": [
          "Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.dissectProcessingDefinitionSchema",
        "type": "Object",
        "tags": [],
        "label": "dissectProcessingDefinitionSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.elasticsearchAssetSchema",
        "type": "Object",
        "tags": [],
        "label": "elasticsearchAssetSchema",
        "description": [],
        "signature": [
          "Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.fieldDefinitionConfigSchema",
        "type": "Object",
        "tags": [],
        "label": "fieldDefinitionConfigSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.fieldDefinitionConfigWithNameSchema",
        "type": "Object",
        "tags": [],
        "label": "fieldDefinitionConfigWithNameSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { name: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; name: string; format?: string | undefined; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.fieldDefinitionSchema",
        "type": "Object",
        "tags": [],
        "label": "fieldDefinitionSchema",
        "description": [],
        "signature": [
          "Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.filterConditionSchema",
        "type": "Object",
        "tags": [],
        "label": "filterConditionSchema",
        "description": [],
        "signature": [
          "Zod.ZodDiscriminatedUnion<\"operator\", [Zod.ZodObject<{ field: Zod.ZodString; operator: Zod.ZodEnum<[\"exists\", \"notExists\"]>; }, \"strip\", Zod.ZodTypeAny, { field: string; operator: \"exists\" | \"notExists\"; }, { field: string; operator: \"exists\" | \"notExists\"; }>, Zod.ZodObject<{ field: Zod.ZodString; operator: Zod.ZodEnum<[\"eq\", \"neq\", \"lt\", \"lte\", \"gt\", \"gte\", \"contains\", \"startsWith\", \"endsWith\"]>; value: Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>; }, \"strip\", Zod.ZodTypeAny, { value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; }, { value: string | number | boolean; field: string; operator: \"endsWith\" | \"startsWith\" | \"gte\" | \"lte\" | \"contains\" | \"gt\" | \"lt\" | \"eq\" | \"neq\"; }>]>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.grokProcessingDefinitionSchema",
        "type": "Object",
        "tags": [],
        "label": "grokProcessingDefinitionSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ingestReadStreamDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "ingestReadStreamDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, { inherited_fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>>; }>, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/read_streams/ingest_read_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ingestStreamConfigDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "ingestStreamConfigDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/stream_config/ingest_stream_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.ingestStreamDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "ingestStreamDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/streams/ingest_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.inheritedFieldDefinitionSchema",
        "type": "Object",
        "tags": [],
        "label": "inheritedFieldDefinitionSchema",
        "description": [],
        "signature": [
          "Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.listStreamsResponseSchema",
        "type": "Object",
        "tags": [],
        "label": "listStreamsResponseSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ streams: Zod.ZodArray<Zod.ZodUnion<[Zod.ZodObject<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }>, Zod.ZodObject<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }>]>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { streams: ({ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; })[]; }, { streams: ({ name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; })[]; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/apis/list_streams_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.processingConfigSchema",
        "type": "Object",
        "tags": [],
        "label": "processingConfigSchema",
        "description": [],
        "signature": [
          "Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.processingDefinitionSchema",
        "type": "Object",
        "tags": [],
        "label": "processingDefinitionSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.readStreamDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "readStreamDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodUnion<[Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, { inherited_fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>>; }>, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, { inherited_fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>>; }>, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; }>]>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/read_streams/read_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.readStreamResponseSchema",
        "type": "Object",
        "tags": [],
        "label": "readStreamResponseSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ streams: Zod.ZodArray<Zod.ZodUnion<[Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, { inherited_fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>>; }>, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, { inherited_fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>>; }>, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; }>]>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { streams: ({ name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; } | { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; })[]; }, { streams: ({ name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; } | { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; })[]; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/apis/read_streams_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.streamChildSchema",
        "type": "Object",
        "tags": [],
        "label": "streamChildSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.streamConfigDefinitionSchema",
        "type": "Object",
        "tags": [],
        "label": "streamConfigDefinitionSchema",
        "description": [],
        "signature": [
          "Zod.ZodUnion<[Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>, Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>]>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/stream_config/stream_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.streamDefintionSchema",
        "type": "Object",
        "tags": [],
        "label": "streamDefintionSchema",
        "description": [],
        "signature": [
          "Zod.ZodUnion<[Zod.ZodObject<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }>, Zod.ZodObject<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }, { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }, { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }>]>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/streams/stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.unaryFilterConditionSchema",
        "type": "Object",
        "tags": [],
        "label": "unaryFilterConditionSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ field: Zod.ZodString; operator: Zod.ZodEnum<[\"exists\", \"notExists\"]>; }, \"strip\", Zod.ZodTypeAny, { field: string; operator: \"exists\" | \"notExists\"; }, { field: string; operator: \"exists\" | \"notExists\"; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.wiredReadStreamDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "wiredReadStreamDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, { inherited_fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<Zod.objectUtil.extendShape<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, { from: Zod.ZodString; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>>>; }>, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; inherited_fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }>; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; inherited_fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; from: string; format?: string | undefined; }> | undefined; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/read_streams/wired_read_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.wiredStreamConfigDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "wiredStreamConfigDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/stream_config/wired_stream_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/streams-schema",
        "id": "def-common.wiredStreamDefinitonSchema",
        "type": "Object",
        "tags": [],
        "label": "wiredStreamDefinitonSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; elasticsearch_assets: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ type: Zod.ZodEnum<[\"ingest_pipeline\", \"component_template\", \"index_template\", \"data_stream\"]>; id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }, { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }>, \"many\">>; stream: Zod.ZodObject<{ ingest: Zod.ZodObject<{ processing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; config: Zod.ZodUnion<[Zod.ZodObject<{ grok: Zod.ZodObject<{ field: Zod.ZodString; patterns: Zod.ZodArray<Zod.ZodString, \"many\">; pattern_definitions: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }, { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }, { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; }>, Zod.ZodObject<{ dissect: Zod.ZodObject<{ field: Zod.ZodString; pattern: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { field: string; pattern: string; }, { field: string; pattern: string; }>; }, \"strip\", Zod.ZodTypeAny, { dissect: { field: string; pattern: string; }; }, { dissect: { field: string; pattern: string; }; }>]>; }, \"strip\", Zod.ZodTypeAny, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; wired: Zod.ZodObject<{ fields: Zod.ZodDefault<Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ type: Zod.ZodEnum<[\"keyword\", \"match_only_text\", \"long\", \"double\", \"date\", \"boolean\", \"ip\"]>; format: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }, { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }>; routing: Zod.ZodDefault<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; condition: Zod.ZodOptional<Zod.ZodType<",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ", Zod.ZodTypeDef, ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          ">>; }, \"strip\", Zod.ZodTypeAny, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }, { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }, { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }>; }, \"strict\", Zod.ZodTypeAny, { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }, { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }>; }, \"strict\", Zod.ZodTypeAny, { name: string; stream: { ingest: { routing: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; processing: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[]; wired: { fields: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }>; }; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }, { name: string; stream: { ingest: { wired: { fields?: Record<string, { type: \"boolean\" | \"ip\" | \"keyword\" | \"date\" | \"long\" | \"double\" | \"match_only_text\"; format?: string | undefined; }> | undefined; }; routing?: { name: string; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; processing?: { config: { grok: { field: string; patterns: string[]; pattern_definitions?: Record<string, string> | undefined; }; } | { dissect: { field: string; pattern: string; }; }; condition?: ",
          {
            "pluginId": "@kbn/streams-schema",
            "scope": "common",
            "docId": "kibKbnStreamsSchemaPluginApi",
            "section": "def-common.Condition",
            "text": "Condition"
          },
          "; }[] | undefined; }; }; elasticsearch_assets?: { id: string; type: \"ingest_pipeline\" | \"data_stream\" | \"index_template\" | \"component_template\"; }[] | undefined; }>"
        ],
        "path": "x-pack/packages/kbn-streams-schema/src/models/streams/wired_stream.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ]
  }
}