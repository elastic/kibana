{
  "id": "@kbn/logging",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/logging",
        "id": "def-common.Logger",
        "type": "Interface",
        "tags": [],
        "label": "Logger",
        "description": [
          "\nLogger exposes all the necessary methods to log any type of information and\nthis is the interface used by the logging consumers including plugins.\n"
        ],
        "path": "packages/kbn-logging/src/logger.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.trace",
            "type": "Function",
            "tags": [],
            "label": "trace",
            "description": [
              "\nLog messages at the most detailed log level\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              ">(message: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMessageSource",
                "text": "LogMessageSource"
              },
              ", meta?: Meta | undefined) => void"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.trace.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "message",
                "description": [
                  "- The log message, or a function returning the log message"
                ],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.LogMessageSource",
                    "text": "LogMessageSource"
                  }
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.trace.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "- The ECS meta to attach to the log entry"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.debug",
            "type": "Function",
            "tags": [],
            "label": "debug",
            "description": [
              "\nLog messages useful for debugging and interactive investigation\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              ">(message: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMessageSource",
                "text": "LogMessageSource"
              },
              ", meta?: Meta | undefined) => void"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.debug.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "message",
                "description": [
                  "- The log message, or a function returning the log message"
                ],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.LogMessageSource",
                    "text": "LogMessageSource"
                  }
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.debug.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "- The ECS meta to attach to the log entry"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.info",
            "type": "Function",
            "tags": [],
            "label": "info",
            "description": [
              "\nLogs messages related to general application flow\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              ">(message: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMessageSource",
                "text": "LogMessageSource"
              },
              ", meta?: Meta | undefined) => void"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.info.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "message",
                "description": [
                  "- The log message, or a function returning the log message"
                ],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.LogMessageSource",
                    "text": "LogMessageSource"
                  }
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.info.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "- The ECS meta to attach to the log entry"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.warn",
            "type": "Function",
            "tags": [],
            "label": "warn",
            "description": [
              "\nLogs abnormal or unexpected errors or messages\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              ">(errorOrMessage: Error | ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMessageSource",
                "text": "LogMessageSource"
              },
              ", meta?: Meta | undefined) => void"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.warn.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "errorOrMessage",
                "description": [
                  "- An Error object, message string, or function returning the log message"
                ],
                "signature": [
                  "Error | ",
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.LogMessageSource",
                    "text": "LogMessageSource"
                  }
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.warn.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "- The ECS meta to attach to the log entry"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.error",
            "type": "Function",
            "tags": [],
            "label": "error",
            "description": [
              "\nLogs abnormal or unexpected errors or messages that caused a failure in the application flow\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              ">(errorOrMessage: Error | ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMessageSource",
                "text": "LogMessageSource"
              },
              ", meta?: Meta | undefined) => void"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.error.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "errorOrMessage",
                "description": [
                  "- An Error object, message string, or function returning the log message"
                ],
                "signature": [
                  "Error | ",
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.LogMessageSource",
                    "text": "LogMessageSource"
                  }
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.error.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "- The ECS meta to attach to the log entry"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.fatal",
            "type": "Function",
            "tags": [],
            "label": "fatal",
            "description": [
              "\nLogs abnormal or unexpected errors or messages that caused an unrecoverable failure\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMeta",
                "text": "LogMeta"
              },
              ">(errorOrMessage: Error | ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LogMessageSource",
                "text": "LogMessageSource"
              },
              ", meta?: Meta | undefined) => void"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.fatal.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "errorOrMessage",
                "description": [
                  "- An Error object, message string, or function returning the log message"
                ],
                "signature": [
                  "Error | ",
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.LogMessageSource",
                    "text": "LogMessageSource"
                  }
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.fatal.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "- The ECS meta to attach to the log entry"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.isLevelEnabled",
            "type": "Function",
            "tags": [],
            "label": "isLevelEnabled",
            "description": [
              "\nChecks if given level is currently enabled for this logger.\nCan be used to wrap expensive logging operations into conditional blocks\n"
            ],
            "signature": [
              "(level: ",
              "LogLevelId",
              ") => boolean"
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.isLevelEnabled.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "level",
                "description": [
                  "The log level to check for."
                ],
                "signature": [
                  "LogLevelId"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.Logger.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nReturns a new {@link Logger} instance extending the current logger context.\n"
            ],
            "signature": [
              "(...childContextPaths: string[]) => ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "packages/kbn-logging/src/logger.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.Logger.get.$1",
                "type": "Array",
                "tags": [],
                "label": "childContextPaths",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "packages/kbn-logging/src/logger.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/logging",
        "id": "def-common.LoggerFactory",
        "type": "Interface",
        "tags": [],
        "label": "LoggerFactory",
        "description": [
          "\nThe single purpose of `LoggerFactory` interface is to define a way to\nretrieve a context-based logger instance.\n"
        ],
        "path": "packages/kbn-logging/src/logger_factory.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/logging",
            "id": "def-common.LoggerFactory.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nReturns a `Logger` instance for the specified context.\n"
            ],
            "signature": [
              "(...contextParts: string[]) => ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "packages/kbn-logging/src/logger_factory.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/logging",
                "id": "def-common.LoggerFactory.get.$1",
                "type": "Array",
                "tags": [],
                "label": "contextParts",
                "description": [
                  "- Parts of the context to return logger for. For example\nget('plugins', 'pid') will return a logger for the `plugins.pid` context."
                ],
                "signature": [
                  "string[]"
                ],
                "path": "packages/kbn-logging/src/logger_factory.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/logging",
        "id": "def-common.LogMessageSource",
        "type": "Type",
        "tags": [],
        "label": "LogMessageSource",
        "description": [],
        "signature": [
          "string | (() => string)"
        ],
        "path": "packages/kbn-logging/src/logger.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/logging",
        "id": "def-common.LogMeta",
        "type": "Type",
        "tags": [],
        "label": "LogMeta",
        "description": [
          "\nRepresents the ECS schema with the following reserved keys excluded:\n- `ecs`\n- `@timestamp`\n- `message`\n- `log.level`\n- `log.logger`\n"
        ],
        "signature": [
          "Omit<",
          "EcsBase",
          ", \"@timestamp\" | \"message\"> & ",
          "EcsTracing",
          " & { agent?: ",
          "EcsAgent",
          " | undefined; as?: ",
          "EcsAs",
          " | undefined; client?: ",
          "EcsClient",
          " | undefined; cloud?: ",
          "EcsCloud",
          " | undefined; container?: ",
          "EcsContainer",
          " | undefined; destination?: ",
          "EcsDestination",
          " | undefined; dns?: ",
          "EcsDns",
          " | undefined; error?: ",
          "EcsError",
          " | undefined; event?: ",
          "EcsEvent",
          " | undefined; file?: ",
          "EcsFile",
          " | undefined; group?: ",
          "EcsGroup",
          " | undefined; host?: ",
          "EcsHost",
          " | undefined; http?: ",
          "EcsHttp",
          " | undefined; log?: Omit<",
          "EcsLog",
          ", \"logger\" | \"level\"> | undefined; network?: ",
          "EcsNetwork",
          " | undefined; observer?: ",
          "EcsObserver",
          " | undefined; organization?: ",
          "EcsOrganization",
          " | undefined; package?: ",
          "EcsPackage",
          " | undefined; process?: ",
          "EcsProcess",
          " | undefined; registry?: ",
          "EcsRegistry",
          " | undefined; related?: ",
          "EcsRelated",
          " | undefined; rule?: ",
          "EcsRule",
          " | undefined; server?: ",
          "EcsServer",
          " | undefined; service?: ",
          "EcsService",
          " | undefined; source?: ",
          "EcsSource",
          " | undefined; threat?: ",
          "EcsThreat",
          " | undefined; tls?: ",
          "EcsTls",
          " | undefined; url?: ",
          "EcsUrl",
          " | undefined; user?: ",
          "EcsUser",
          " | undefined; user_agent?: ",
          "EcsUserAgent",
          " | undefined; vulnerability?: ",
          "EcsVulnerability",
          " | undefined; }"
        ],
        "path": "packages/kbn-logging/src/log_meta.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}