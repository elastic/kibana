{
  "id": "@kbn/content-management-inspector",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/content-management-inspector",
        "id": "def-common.InspectorKibanaProvider",
        "type": "Function",
        "tags": [],
        "label": "InspectorKibanaProvider",
        "description": [
          "\nKibana-specific Provider that maps to known dependency types."
        ],
        "signature": [
          "({ children, ...services }: React.PropsWithChildren<",
          "InspectorKibanaDependencies",
          ">) => JSX.Element"
        ],
        "path": "packages/content-management/inspector/src/services.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/content-management-inspector",
            "id": "def-common.InspectorKibanaProvider.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{\n  children,\n  ...services\n}",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              "InspectorKibanaDependencies",
              ">"
            ],
            "path": "packages/content-management/inspector/src/services.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/content-management-inspector",
        "id": "def-common.InspectorProvider",
        "type": "Function",
        "tags": [],
        "label": "InspectorProvider",
        "description": [
          "\nAbstract external service Provider."
        ],
        "signature": [
          "({ children, ...services }: React.PropsWithChildren<",
          "Services",
          ">) => JSX.Element"
        ],
        "path": "packages/content-management/inspector/src/services.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/content-management-inspector",
            "id": "def-common.InspectorProvider.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ children, ...services }",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              "Services",
              ">"
            ],
            "path": "packages/content-management/inspector/src/services.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/content-management-inspector",
        "id": "def-common.useOpenInspector",
        "type": "Function",
        "tags": [],
        "label": "useOpenInspector",
        "description": [],
        "signature": [
          "() => (args: ",
          {
            "pluginId": "@kbn/content-management-inspector",
            "scope": "common",
            "docId": "kibKbnContentManagementInspectorPluginApi",
            "section": "def-common.OpenInspectorParams",
            "text": "OpenInspectorParams"
          },
          ") => void"
        ],
        "path": "packages/content-management/inspector/src/open_inspector.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/content-management-inspector",
        "id": "def-common.OpenInspectorParams",
        "type": "Type",
        "tags": [],
        "label": "OpenInspectorParams",
        "description": [],
        "signature": [
          "{ onSave?: ((args: { id: string; title: string; description?: string | undefined; tags: string[]; }) => Promise<void>) | undefined; item: ",
          "Item",
          "; isReadonly?: boolean | undefined; entityName: string; }"
        ],
        "path": "packages/content-management/inspector/src/open_inspector.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}