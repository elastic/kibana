{
  "id": "@kbn/core-http-browser-mocks",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/core-http-browser-mocks",
        "id": "def-public.createHttpFetchError",
        "type": "Function",
        "tags": [],
        "label": "createHttpFetchError",
        "description": [],
        "signature": [
          "(message: string, name: string, request: Request, response: Response | undefined, body: TResponseBody | undefined) => ",
          "IHttpFetchError",
          "<unknown>"
        ],
        "path": "src/core/packages/http/browser-mocks/src/fetch_error.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.createHttpFetchError.$1",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/core/packages/http/browser-mocks/src/fetch_error.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.createHttpFetchError.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/core/packages/http/browser-mocks/src/fetch_error.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.createHttpFetchError.$3",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              "Request"
            ],
            "path": "src/core/packages/http/browser-mocks/src/fetch_error.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.createHttpFetchError.$4",
            "type": "Object",
            "tags": [],
            "label": "response",
            "description": [],
            "signature": [
              "Response | undefined"
            ],
            "path": "src/core/packages/http/browser-mocks/src/fetch_error.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.createHttpFetchError.$5",
            "type": "Uncategorized",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "TResponseBody | undefined"
            ],
            "path": "src/core/packages/http/browser-mocks/src/fetch_error.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-http-browser-mocks",
        "id": "def-public.HttpSetupMock",
        "type": "Type",
        "tags": [],
        "label": "HttpSetupMock",
        "description": [],
        "signature": [
          "{ basePath: ",
          "IBasePath",
          "; staticAssets: ",
          "IStaticAssets",
          "; anonymousPaths: ",
          "IAnonymousPaths",
          "; externalUrl: ",
          "IExternalUrl",
          "; intercept: jest.MockInstance<() => void, [interceptor: ",
          "HttpInterceptor",
          "], unknown>; fetch: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; delete: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; get: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; head: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; options: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; patch: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; post: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; put: jest.MockInstance<Promise<unknown>, [options: ",
          "HttpFetchOptionsWithPath",
          "], unknown>; addLoadingCountSource: jest.MockInstance<void, [countSource$: ",
          "Observable",
          "<number>], unknown>; getLoadingCount$: jest.MockInstance<",
          "Observable",
          "<number>, [], unknown>; } & ",
          "HttpSetup",
          " & { basePath: ",
          "BasePath",
          "; anonymousPaths: jest.Mocked<",
          "IAnonymousPaths",
          ">; }"
        ],
        "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/core-http-browser-mocks",
        "id": "def-public.httpServiceMock",
        "type": "Object",
        "tags": [],
        "label": "httpServiceMock",
        "description": [],
        "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.httpServiceMock.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [],
            "signature": [
              "({ basePath }?: { basePath?: string | undefined; }) => jest.Mocked<",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.PublicMethodsOf",
                "text": "PublicMethodsOf"
              },
              "<",
              "HttpService",
              ">>"
            ],
            "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-browser-mocks",
                "id": "def-public.httpServiceMock.create.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; }"
                ],
                "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.httpServiceMock.createSetupContract",
            "type": "Function",
            "tags": [],
            "label": "createSetupContract",
            "description": [],
            "signature": [
              "({ basePath, publicBaseUrl, }?: { basePath?: string | undefined; publicBaseUrl?: string | undefined; }) => ",
              "HttpSetupMock"
            ],
            "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-browser-mocks",
                "id": "def-public.httpServiceMock.createSetupContract.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; publicBaseUrl?: string | undefined; }"
                ],
                "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.httpServiceMock.createStartContract",
            "type": "Function",
            "tags": [],
            "label": "createStartContract",
            "description": [],
            "signature": [
              "({ basePath, publicBaseUrl, }?: { basePath?: string | undefined; publicBaseUrl?: string | undefined; }) => ",
              "HttpSetupMock"
            ],
            "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-browser-mocks",
                "id": "def-public.httpServiceMock.createStartContract.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; publicBaseUrl?: string | undefined; }"
                ],
                "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-browser-mocks",
            "id": "def-public.httpServiceMock.createBasePath",
            "type": "Function",
            "tags": [],
            "label": "createBasePath",
            "description": [],
            "signature": [
              "({ publicBaseUrl, serverBasePath, assetsHrefBase, }?: { publicBaseUrl?: string | undefined; serverBasePath?: string | undefined; assetsHrefBase?: string | undefined; }) => jest.Mocked<",
              "IBasePath",
              ">"
            ],
            "path": "src/core/packages/http/browser-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-browser-mocks",
                "id": "def-public.httpServiceMock.createBasePath.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ publicBaseUrl?: string | undefined; serverBasePath?: string | undefined; assetsHrefBase?: string | undefined; }"
                ],
                "path": "src/core/packages/http/browser-mocks/src/base_path.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}