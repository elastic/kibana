{
  "id": "@kbn/core-http-server-mocks",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.createConfigService",
        "type": "Function",
        "tags": [],
        "label": "createConfigService",
        "description": [],
        "signature": [
          "({ server, externalUrl, csp, }?: Partial<{ server: Partial<Readonly<{ uuid?: string | undefined; basePath?: string | undefined; publicBaseUrl?: string | undefined; } & { name: string; ssl: Readonly<{ key?: string | undefined; certificate?: string | undefined; certificateAuthorities?: string | string[] | undefined; keyPassphrase?: string | undefined; redirectHttpFromPort?: number | undefined; } & { enabled: boolean; keystore: Readonly<{ password?: string | undefined; path?: string | undefined; } & {}>; truststore: Readonly<{ password?: string | undefined; path?: string | undefined; } & {}>; cipherSuites: string[]; supportedProtocols: string[]; clientAuthentication: \"none\" | \"required\" | \"optional\"; }>; host: string; protocol: \"http1\" | \"http2\"; port: number; compression: Readonly<{ referrerWhitelist?: string[] | undefined; } & { enabled: boolean; brotli: Readonly<{} & { enabled: boolean; quality: number; }>; }>; cors: Readonly<{} & { enabled: boolean; allowCredentials: boolean; allowOrigin: string[] | \"*\"[]; }>; prototypeHardening: boolean; http2: Readonly<{} & { allowUnsecure: boolean; }>; versioned: Readonly<{} & { useVersionResolutionStrategyForInternalPaths: string[]; versionResolution: \"none\" | \"oldest\" | \"newest\"; strictClientVersionCheck: boolean; }>; autoListen: boolean; shutdownTimeout: moment.Duration; cdn: Readonly<{ url?: string | null | undefined; } & {}>; oas: Readonly<{} & { enabled: boolean; }>; securityResponseHeaders: Readonly<{ permissionsPolicyReportOnly?: string | null | undefined; } & { referrerPolicy: \"origin\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\" | null; strictTransportSecurity: string | null; xContentTypeOptions: \"nosniff\" | null; permissionsPolicy: string | null; disableEmbedding: boolean; crossOriginOpenerPolicy: \"same-origin\" | \"unsafe-none\" | \"same-origin-allow-popups\" | null; }>; customResponseHeaders: Record<string, any>; maxPayload: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "common",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-common.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          "; rewriteBasePath: boolean; keepaliveTimeout: number; socketTimeout: number; payloadTimeout: number; xsrf: Readonly<{} & { disableProtection: boolean; allowlist: string[]; }>; eluMonitor: Readonly<{} & { enabled: boolean; logging: Readonly<{} & { enabled: boolean; threshold: Readonly<{} & { elu: number; ela: number; }>; }>; }>; rateLimiter: Readonly<{} & { enabled: boolean; term: \"long\" | \"short\" | \"medium\"; elu: number; }>; requestId: Readonly<{} & { allowFromAnyIp: boolean; ipAllowlist: string[]; }>; restrictInternalApis: boolean; }>>; externalUrl: Partial<Readonly<{} & { policy: ",
          "IExternalUrlPolicy",
          "[]; }>>; csp: Partial<Readonly<{ report_only?: Readonly<{} & { form_action: string[]; }> | undefined; } & { strict: boolean; disableEmbedding: boolean; disableUnsafeEval: boolean; script_src: string[]; worker_src: string[]; style_src: string[]; connect_src: string[]; default_src: string[]; font_src: string[]; frame_src: string[]; img_src: string[]; frame_ancestors: string[]; report_uri: string[]; report_to: string[]; warnLegacyBrowsers: boolean; }>>; }>) => ",
          {
            "pluginId": "@kbn/config-mocks",
            "scope": "common",
            "docId": "kibKbnConfigMocksPluginApi",
            "section": "def-common.IConfigServiceMock",
            "text": "IConfigServiceMock"
          }
        ],
        "path": "src/core/packages/http/server-mocks/src/test_utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.createConfigService.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  server,\n  externalUrl,\n  csp,\n}",
            "description": [],
            "signature": [
              "Partial<{ server: Partial<Readonly<{ uuid?: string | undefined; basePath?: string | undefined; publicBaseUrl?: string | undefined; } & { name: string; ssl: Readonly<{ key?: string | undefined; certificate?: string | undefined; certificateAuthorities?: string | string[] | undefined; keyPassphrase?: string | undefined; redirectHttpFromPort?: number | undefined; } & { enabled: boolean; keystore: Readonly<{ password?: string | undefined; path?: string | undefined; } & {}>; truststore: Readonly<{ password?: string | undefined; path?: string | undefined; } & {}>; cipherSuites: string[]; supportedProtocols: string[]; clientAuthentication: \"none\" | \"required\" | \"optional\"; }>; host: string; protocol: \"http1\" | \"http2\"; port: number; compression: Readonly<{ referrerWhitelist?: string[] | undefined; } & { enabled: boolean; brotli: Readonly<{} & { enabled: boolean; quality: number; }>; }>; cors: Readonly<{} & { enabled: boolean; allowCredentials: boolean; allowOrigin: string[] | \"*\"[]; }>; prototypeHardening: boolean; http2: Readonly<{} & { allowUnsecure: boolean; }>; versioned: Readonly<{} & { useVersionResolutionStrategyForInternalPaths: string[]; versionResolution: \"none\" | \"oldest\" | \"newest\"; strictClientVersionCheck: boolean; }>; autoListen: boolean; shutdownTimeout: moment.Duration; cdn: Readonly<{ url?: string | null | undefined; } & {}>; oas: Readonly<{} & { enabled: boolean; }>; securityResponseHeaders: Readonly<{ permissionsPolicyReportOnly?: string | null | undefined; } & { referrerPolicy: \"origin\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\" | null; strictTransportSecurity: string | null; xContentTypeOptions: \"nosniff\" | null; permissionsPolicy: string | null; disableEmbedding: boolean; crossOriginOpenerPolicy: \"same-origin\" | \"unsafe-none\" | \"same-origin-allow-popups\" | null; }>; customResponseHeaders: Record<string, any>; maxPayload: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              "; rewriteBasePath: boolean; keepaliveTimeout: number; socketTimeout: number; payloadTimeout: number; xsrf: Readonly<{} & { disableProtection: boolean; allowlist: string[]; }>; eluMonitor: Readonly<{} & { enabled: boolean; logging: Readonly<{} & { enabled: boolean; threshold: Readonly<{} & { elu: number; ela: number; }>; }>; }>; rateLimiter: Readonly<{} & { enabled: boolean; term: \"long\" | \"short\" | \"medium\"; elu: number; }>; requestId: Readonly<{} & { allowFromAnyIp: boolean; ipAllowlist: string[]; }>; restrictInternalApis: boolean; }>>; externalUrl: Partial<Readonly<{} & { policy: ",
              "IExternalUrlPolicy",
              "[]; }>>; csp: Partial<Readonly<{ report_only?: Readonly<{} & { form_action: string[]; }> | undefined; } & { strict: boolean; disableEmbedding: boolean; disableUnsafeEval: boolean; script_src: string[]; worker_src: string[]; style_src: string[]; connect_src: string[]; default_src: string[]; font_src: string[]; frame_src: string[]; img_src: string[]; frame_ancestors: string[]; report_uri: string[]; report_to: string[]; warnLegacyBrowsers: boolean; }>>; }>"
            ],
            "path": "src/core/packages/http/server-mocks/src/test_utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.createCoreContext",
        "type": "Function",
        "tags": [],
        "label": "createCoreContext",
        "description": [],
        "signature": [
          "(overrides?: Partial<",
          "CoreContext",
          ">) => ",
          "CoreContext"
        ],
        "path": "src/core/packages/http/server-mocks/src/test_utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.createCoreContext.$1",
            "type": "Object",
            "tags": [],
            "label": "overrides",
            "description": [],
            "signature": [
              "Partial<",
              "CoreContext",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/test_utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.createHttpService",
        "type": "Function",
        "tags": [],
        "label": "createHttpService",
        "description": [
          "\nCreates a concrete HttpService with a mocked context."
        ],
        "signature": [
          "({ buildNum, ...overrides }?: Partial<",
          "CoreContext",
          " & { buildNum: number; }>) => ",
          "HttpService"
        ],
        "path": "src/core/packages/http/server-mocks/src/test_utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.createHttpService.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  buildNum,\n  ...overrides\n}",
            "description": [],
            "signature": [
              "Partial<",
              "CoreContext",
              " & { buildNum: number; }>"
            ],
            "path": "src/core/packages/http/server-mocks/src/test_utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.HttpServicePrebootMock",
        "type": "Type",
        "tags": [],
        "label": "HttpServicePrebootMock",
        "description": [],
        "signature": [
          "{ registerRoutes: jest.MockInstance<void, [path: string, callback: (router: ",
          "IRouter",
          "<",
          "RequestHandlerContextBase",
          ">) => void], unknown>; basePath: ",
          "IBasePath",
          "; getServerInfo: jest.MockInstance<",
          "HttpServerInfo",
          ", [], unknown>; } & ",
          "HttpServicePreboot",
          "<",
          "RequestHandlerContextBase",
          ">"
        ],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.HttpServiceSetupMock",
        "type": "Type",
        "tags": [],
        "label": "HttpServiceSetupMock",
        "description": [],
        "signature": [
          "{ csp: ",
          "ICspConfig",
          "; staticAssets: ",
          "IStaticAssets",
          "; registerRouteHandlerContext: jest.MockInstance<",
          "IContextContainer",
          ", [contextName: Exclude<keyof ContextType, \"resolve\">, provider: ",
          "IContextProvider",
          "<ContextType, Exclude<keyof ContextType, \"resolve\">>], unknown>; getServerInfo: jest.MockInstance<",
          "HttpServerInfo",
          ", [], unknown>; createCookieSessionStorageFactory: jest.MockInstance<Promise<",
          "SessionStorageFactory",
          "<object>>, [cookieOptions: ",
          "SessionStorageCookieOptions",
          "<object>], unknown>; registerOnPreRouting: jest.MockInstance<void, [handler: ",
          "OnPreRoutingHandler",
          "], unknown>; registerOnPreAuth: jest.MockInstance<void, [handler: ",
          "OnPreAuthHandler",
          "], unknown>; registerAuth: jest.MockInstance<void, [handler: ",
          "AuthenticationHandler",
          "], unknown>; registerOnPostAuth: jest.MockInstance<void, [handler: ",
          "OnPostAuthHandler",
          "], unknown>; registerOnPreResponse: jest.MockInstance<void, [handler: ",
          "OnPreResponseHandler",
          "], unknown>; getDeprecatedRoutes: jest.MockInstance<",
          "RouterDeprecatedApiDetails",
          "[], [], unknown>; } & Omit<",
          "HttpServiceSetup",
          "<ContextType>, \"basePath\" | \"createRouter\"> & { basePath: BasePathMocked; staticAssets: StaticAssetsMocked; createRouter: jest.MockedFunction<() => ",
          "RouterMock",
          ">; }"
        ],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.HttpServiceStartMock",
        "type": "Type",
        "tags": [],
        "label": "HttpServiceStartMock",
        "description": [],
        "signature": [
          "{ basePath: ",
          "IBasePath",
          "; staticAssets: ",
          "IStaticAssets",
          "; auth: ",
          "HttpAuth",
          "; getServerInfo: jest.MockInstance<",
          "HttpServerInfo",
          ", [], unknown>; } & ",
          "HttpServiceStart",
          " & { basePath: BasePathMocked; staticAssets: StaticAssetsMocked; }"
        ],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.InternalHttpServicePrebootMock",
        "type": "Type",
        "tags": [],
        "label": "InternalHttpServicePrebootMock",
        "description": [],
        "signature": [
          "{ auth: ",
          "HttpAuth",
          "; externalUrl: ",
          "ExternalUrlConfig",
          "; csp: ",
          "ICspConfig",
          "; server: ",
          "Server",
          "<",
          "ServerApplicationState",
          ">; registerStaticDir: jest.MockInstance<void, [path: string, dirPath: string], unknown>; registerRouteHandlerContext: <Context extends ",
          "RequestHandlerContextBase",
          ", ContextName extends Exclude<keyof Context, \"resolve\">>(pluginOpaqueId: symbol, contextName: ContextName, provider: ",
          "IContextProvider",
          "<Context, ContextName>) => ",
          "IContextContainer",
          "; getServerInfo: jest.MockInstance<",
          "HttpServerInfo",
          ", [], unknown>; prototypeHardening: boolean; registerRoutes: jest.MockInstance<void, [path: string, callback: (router: ",
          "IRouter",
          "<",
          "RequestHandlerContextBase",
          ">) => void], unknown>; } & Omit<",
          "InternalHttpServicePreboot",
          ", \"basePath\" | \"staticAssets\"> & { basePath: BasePathMocked; staticAssets: InternalStaticAssetsMocked; }"
        ],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.InternalHttpServiceSetupMock",
        "type": "Type",
        "tags": [],
        "label": "InternalHttpServiceSetupMock",
        "description": [],
        "signature": [
          "{ externalUrl: ",
          "ExternalUrlConfig",
          "; csp: ",
          "ICspConfig",
          "; server: ",
          "Server",
          "<",
          "ServerApplicationState",
          ">; registerStaticDir: jest.MockInstance<void, [path: string, dirPath: string], unknown>; registerRouteHandlerContext: <Context extends ",
          "RequestHandlerContextBase",
          ", ContextName extends Exclude<keyof Context, \"resolve\">>(pluginOpaqueId: symbol, contextName: ContextName, provider: ",
          "IContextProvider",
          "<Context, ContextName>) => ",
          "IContextContainer",
          "; getServerInfo: jest.MockInstance<",
          "HttpServerInfo",
          ", [], unknown>; prototypeHardening: boolean; createCookieSessionStorageFactory: jest.MockInstance<Promise<",
          "SessionStorageFactory",
          "<object>>, [cookieOptions: ",
          "SessionStorageCookieOptions",
          "<object>], unknown>; registerOnPreRouting: jest.MockInstance<void, [handler: ",
          "OnPreRoutingHandler",
          "], unknown>; registerOnPreAuth: jest.MockInstance<void, [handler: ",
          "OnPreAuthHandler",
          "], unknown>; registerAuth: jest.MockInstance<void, [handler: ",
          "AuthenticationHandler",
          "], unknown>; registerOnPostAuth: jest.MockInstance<void, [handler: ",
          "OnPostAuthHandler",
          "], unknown>; registerOnPreResponse: jest.MockInstance<void, [handler: ",
          "OnPreResponseHandler",
          "], unknown>; getDeprecatedRoutes: jest.MockInstance<",
          "RouterDeprecatedApiDetails",
          "[], [], unknown>; rateLimiter: Readonly<{} & { enabled: boolean; term: \"long\" | \"short\" | \"medium\"; elu: number; }>; registerOnPostValidation: jest.MockInstance<void, [cb: (req: ",
          "CoreKibanaRequest",
          "<unknown, unknown, unknown, any>, metadata: ",
          "PostValidationMetadata",
          ") => void], unknown>; registerRouterAfterListening: jest.MockInstance<void, [router: ",
          "IRouter",
          "<",
          "RequestHandlerContextBase",
          ">], unknown>; getRegisteredDeprecatedApis: jest.MockInstance<",
          "RouterDeprecatedApiDetails",
          "[], [], unknown>; } & Omit<",
          "InternalHttpServiceSetup",
          ", \"auth\" | \"basePath\" | \"staticAssets\" | \"createRouter\" | \"authRequestHeaders\"> & { auth: AuthMocked; basePath: BasePathMocked; staticAssets: InternalStaticAssetsMocked; createRouter: jest.MockedFunction<(path: string) => ",
          "RouterMock",
          ">; authRequestHeaders: jest.Mocked<",
          "IAuthHeadersStorage",
          ">; }"
        ],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.InternalHttpServiceStartMock",
        "type": "Type",
        "tags": [],
        "label": "InternalHttpServiceStartMock",
        "description": [],
        "signature": [
          "{ staticAssets: ",
          "InternalStaticAssets",
          "; isListening: jest.MockInstance<boolean, [], unknown>; auth: ",
          "HttpAuth",
          "; basePath: ",
          "IBasePath",
          "; getServerInfo: jest.MockInstance<",
          "HttpServerInfo",
          ", [], unknown>; } & ",
          "InternalHttpServiceStart",
          " & { basePath: BasePathMocked; staticAssets: InternalStaticAssetsMocked; }"
        ],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.httpServerMock",
        "type": "Object",
        "tags": [],
        "label": "httpServerMock",
        "description": [],
        "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServerMock.createKibanaRequest",
            "type": "Function",
            "tags": [],
            "label": "createKibanaRequest",
            "description": [],
            "signature": [
              "<P = any, Q = any, B = any>({ path, headers, params, body, query, method, socket, routeTags, routeAuthRequired, validation, kibanaRouteOptions, kibanaRequestState, auth, }?: ",
              "RequestFixtureOptions",
              "<P, Q, B>) => ",
              "KibanaRequest",
              "<P, Q, B, any>"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServerMock.createKibanaRequest.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "RequestFixtureOptions",
                  "<P, Q, B>"
                ],
                "path": "src/core/packages/http/router-server-mocks/src/router.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServerMock.createFakeKibanaRequest",
            "type": "Function",
            "tags": [],
            "label": "createFakeKibanaRequest",
            "description": [],
            "signature": [
              "({ headers, }: { headers?: Record<string, string> | undefined; }) => ",
              "KibanaRequest",
              "<unknown, unknown, unknown, any>"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServerMock.createFakeKibanaRequest.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ headers?: Record<string, string> | undefined; }"
                ],
                "path": "src/core/packages/http/router-server-mocks/src/router.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServerMock.createRawRequest",
            "type": "Function",
            "tags": [],
            "label": "createRawRequest",
            "description": [],
            "signature": [
              "(customization?: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.DeepPartialObject",
                "text": "DeepPartialObject"
              },
              "<",
              "Request",
              "<",
              "ReqRefDefaults",
              ">>) => ",
              "Request",
              "<",
              "ReqRefDefaults",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServerMock.createRawRequest.$1",
                "type": "Object",
                "tags": [],
                "label": "customization",
                "description": [],
                "signature": [
                  "{ app?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestApplicationState",
                  "> | undefined; readonly auth?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestAuth",
                  "<",
                  "UserCredentials",
                  ", ",
                  "AppCredentials",
                  ", Record<string, unknown>, Record<string, unknown>>> | undefined; events?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestEvents",
                  "> | undefined; readonly headers?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<Record<string, any>> | undefined; readonly info?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestInfo",
                  "> | undefined; readonly logs?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialArray",
                    "text": "DeepPartialArray"
                  },
                  "<",
                  "RequestLog",
                  "> | undefined; readonly method?: \"source\" | \"get\" | \"delete\" | \"options\" | \"search\" | \"link\" | \"head\" | \"post\" | \"put\" | \"patch\" | \"purge\" | \"unlink\" | \"copy\" | \"move\" | \"merge\" | \"trace\" | \"subscribe\" | \"lock\" | \"unsubscribe\" | \"report\" | \"acl\" | \"bind\" | \"checkout\" | \"connect\" | \"m-search\" | \"mkactivity\" | \"mkcalendar\" | \"mkcol\" | \"notify\" | \"propfind\" | \"proppatch\" | \"rebind\" | \"unbind\" | \"unlock\" | undefined; readonly mime?: string | undefined; readonly orig?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestOrig",
                  "> | undefined; readonly params?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<Record<string, any>> | undefined; readonly paramsArray?: string | ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialArray",
                    "text": "DeepPartialArray"
                  },
                  "<string> | undefined; readonly path?: string | undefined; readonly payload?: string | object | ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<Buffer> | ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "Readable",
                  "> | undefined; plugins?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "PluginsStates",
                  "> | undefined; readonly pre?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<Record<string, any>> | undefined; response?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "Boom",
                  "<any>> | ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "ResponseObject",
                  "> | undefined; readonly preResponses?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<Record<string, any>> | undefined; readonly query?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestQuery",
                  "> | undefined; readonly raw?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<{ req: ",
                  "IncomingMessage",
                  "; res: ",
                  "ServerResponse",
                  "<",
                  "IncomingMessage",
                  ">; }> | undefined; readonly route?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "RequestRoute",
                  "<",
                  "ReqRefDefaults",
                  ">> | undefined; readonly server?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "Server",
                  "<",
                  "ServerApplicationState",
                  ">> | undefined; readonly state?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<Record<string, any>> | undefined; readonly url?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<",
                  "URL",
                  "> | undefined; active?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<() => boolean> | undefined; generateResponse?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(source: string | object | null, options?: { variety?: string | undefined; prepare?: ((response: ",
                  "ResponseObject",
                  ") => Promise<",
                  "ResponseObject",
                  ">) | undefined; marshal?: ((response: ",
                  "ResponseObject",
                  ") => Promise<",
                  "ResponseValue",
                  ">) | undefined; close?: ((response: ",
                  "ResponseObject",
                  ") => void) | undefined; } | undefined) => ",
                  "ResponseObject",
                  "> | undefined; log?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(tags: string | string[], data?: string | object | (() => string | object) | undefined) => void> | undefined; setMethod?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(method: \"source\" | \"get\" | \"delete\" | \"options\" | \"search\" | \"link\" | \"head\" | \"post\" | \"put\" | \"patch\" | \"purge\" | \"unlink\" | \"copy\" | \"move\" | \"merge\" | \"trace\" | \"subscribe\" | \"lock\" | \"unsubscribe\" | \"report\" | ",
                  "HTTP_METHODS",
                  " | \"acl\" | \"bind\" | \"checkout\" | \"connect\" | \"m-search\" | \"mkactivity\" | \"mkcalendar\" | \"mkcol\" | \"notify\" | \"propfind\" | \"proppatch\" | \"rebind\" | \"unbind\" | \"unlock\") => void> | undefined; setUrl?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(url: string | ",
                  "URL",
                  ", stripTrailingSlash?: boolean | undefined) => void> | undefined; cookieAuth?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<{ set(session: object): void; set(key: string, value: string | object): void; clear(key?: string | undefined): void; ttl(milliseconds: number): void; }> | undefined; registerEvent?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(events: ",
                  "Podium",
                  ".EventOptions<string> | ",
                  "Podium",
                  ".EventOptions<string>[], options?: ",
                  "Podium",
                  ".EventSettings | undefined) => void> | undefined; emit?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(criteria: ",
                  "Podium",
                  ".EmitCriteria<string>, data?: any) => void> | undefined; gauge?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(<T = unknown>(criteria: ",
                  "Podium",
                  ".EmitCriteria<string>, data?: any) => Promise<PromiseSettledResult<T>[]>)> | undefined; on?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(<TArgs extends any[] = unknown[], Tcontext extends object = ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">>(criteria: ",
                  "Podium",
                  ".Criteria<string>, listener: ",
                  "EventListener",
                  "<undefined, TArgs, Tcontext>, context?: Tcontext | undefined) => ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">)> | undefined; addListener?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(<TArgs extends any[] = unknown[], Tcontext extends object = ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">>(criteria: ",
                  "Podium",
                  ".Criteria<string>, listener: ",
                  "EventListener",
                  "<undefined, TArgs, Tcontext>, context?: Tcontext | undefined) => ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">)> | undefined; once?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<{ <TArgs extends any[] = unknown[], Tcontext extends object = ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">>(criteria: ",
                  "Podium",
                  ".OnceCriteria<string>, listener: ",
                  "EventListener",
                  "<undefined, TArgs, Tcontext>, context?: Tcontext | undefined): ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">; <TArgs extends any[] = unknown[], Tcontext extends object = ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">>(criteria: ",
                  "Podium",
                  ".OnceCriteria<string>): Promise<TArgs>; }> | undefined; few?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(<TArgs extends any[] = unknown[], Tcontext extends object = ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">>(criteria: ",
                  "Podium",
                  ".FewCriteria<string>) => Promise<TArgs>)> | undefined; off?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(name: string, listener: ",
                  "Podium",
                  ".Listener<any, any[]>) => ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">> | undefined; removeListener?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(name: string, listener: ",
                  "Podium",
                  ".Listener<any, any[]>) => ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">> | undefined; removeAllListeners?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(name: string) => ",
                  "Request",
                  "<",
                  "ReqRefDefaults",
                  ">> | undefined; hasListeners?: ",
                  {
                    "pluginId": "@kbn/utility-types",
                    "scope": "common",
                    "docId": "kibKbnUtilityTypesPluginApi",
                    "section": "def-common.DeepPartialObject",
                    "text": "DeepPartialObject"
                  },
                  "<(name: string) => boolean> | undefined; }"
                ],
                "path": "src/platform/packages/private/kbn-hapi-mocks/src/request.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServerMock.createResponseFactory",
            "type": "Function",
            "tags": [],
            "label": "createResponseFactory",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "KibanaResponseFactory",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServerMock.createLifecycleResponseFactory",
            "type": "Function",
            "tags": [],
            "label": "createLifecycleResponseFactory",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "LifecycleResponseFactory",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServerMock.createToolkit",
            "type": "Function",
            "tags": [],
            "label": "createToolkit",
            "description": [],
            "signature": [
              "() => ToolkitMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_server.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.httpServiceMock",
        "type": "Object",
        "tags": [],
        "label": "httpServiceMock",
        "description": [],
        "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [],
            "signature": [
              "() => jest.Mocked<HttpServiceContract>"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createBasePath",
            "type": "Function",
            "tags": [],
            "label": "createBasePath",
            "description": [],
            "signature": [
              "(serverBasePath?: string, publicBaseUrl?: string) => BasePathMocked"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServiceMock.createBasePath.$1",
                "type": "string",
                "tags": [],
                "label": "serverBasePath",
                "description": [],
                "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServiceMock.createBasePath.$2",
                "type": "string",
                "tags": [],
                "label": "publicBaseUrl",
                "description": [],
                "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createAuth",
            "type": "Function",
            "tags": [],
            "label": "createAuth",
            "description": [],
            "signature": [
              "() => AuthMocked"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createInternalPrebootContract",
            "type": "Function",
            "tags": [],
            "label": "createInternalPrebootContract",
            "description": [],
            "signature": [
              "(args?: CreateMockArgs) => ",
              "InternalHttpServicePrebootMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServiceMock.createInternalPrebootContract.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "signature": [
                  "CreateMockArgs"
                ],
                "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createPrebootContract",
            "type": "Function",
            "tags": [],
            "label": "createPrebootContract",
            "description": [],
            "signature": [
              "() => ",
              "HttpServicePrebootMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createInternalSetupContract",
            "type": "Function",
            "tags": [],
            "label": "createInternalSetupContract",
            "description": [],
            "signature": [
              "() => ",
              "InternalHttpServiceSetupMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createSetupContract",
            "type": "Function",
            "tags": [],
            "label": "createSetupContract",
            "description": [],
            "signature": [
              "<ContextType extends ",
              "RequestHandlerContextBase",
              " = ",
              "RequestHandlerContextBase",
              ">() => ",
              "HttpServiceSetupMock",
              "<ContextType>"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createInternalStartContract",
            "type": "Function",
            "tags": [],
            "label": "createInternalStartContract",
            "description": [],
            "signature": [
              "() => ",
              "InternalHttpServiceStartMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createStartContract",
            "type": "Function",
            "tags": [],
            "label": "createStartContract",
            "description": [],
            "signature": [
              "() => ",
              "HttpServiceStartMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createOnPreAuthToolkit",
            "type": "Function",
            "tags": [],
            "label": "createOnPreAuthToolkit",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "OnPreAuthToolkit",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createOnPostAuthToolkit",
            "type": "Function",
            "tags": [],
            "label": "createOnPostAuthToolkit",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "OnPostAuthToolkit",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createOnPreResponseToolkit",
            "type": "Function",
            "tags": [],
            "label": "createOnPreResponseToolkit",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "OnPreResponseToolkit",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createOnPreRoutingToolkit",
            "type": "Function",
            "tags": [],
            "label": "createOnPreRoutingToolkit",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "OnPreRoutingToolkit",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createAuthToolkit",
            "type": "Function",
            "tags": [],
            "label": "createAuthToolkit",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "AuthToolkit",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createAuthHeaderStorage",
            "type": "Function",
            "tags": [],
            "label": "createAuthHeaderStorage",
            "description": [],
            "signature": [
              "() => jest.Mocked<",
              "IAuthHeadersStorage",
              ">"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.httpServiceMock.createRouter",
            "type": "Function",
            "tags": [],
            "label": "createRouter",
            "description": [],
            "signature": [
              "({ routerPath }?: { routerPath?: string | undefined; }) => ",
              "RouterMock"
            ],
            "path": "src/core/packages/http/server-mocks/src/http_service.mock.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-http-server-mocks",
                "id": "def-server.httpServiceMock.createRouter.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ routerPath?: string | undefined; }"
                ],
                "path": "src/core/packages/http/router-server-mocks/src/router.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-http-server-mocks",
        "id": "def-server.sessionStorageMock",
        "type": "Object",
        "tags": [],
        "label": "sessionStorageMock",
        "description": [],
        "path": "src/core/packages/http/server-mocks/src/cookie_session_storage.mocks.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.sessionStorageMock.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [],
            "signature": [
              "<T>() => jest.Mocked<",
              "SessionStorage",
              "<T>>"
            ],
            "path": "src/core/packages/http/server-mocks/src/cookie_session_storage.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          },
          {
            "parentPluginId": "@kbn/core-http-server-mocks",
            "id": "def-server.sessionStorageMock.createFactory",
            "type": "Function",
            "tags": [],
            "label": "createFactory",
            "description": [],
            "signature": [
              "<T extends object>() => DeepMocked<",
              "SessionStorageFactory",
              "<T>>"
            ],
            "path": "src/core/packages/http/server-mocks/src/cookie_session_storage.mocks.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}