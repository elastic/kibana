{
  "id": "ruleRegistry",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertsClient",
        "type": "Class",
        "tags": [],
        "label": "AlertsClient",
        "description": [
          "\nProvides apis to interact with alerts as data\nensures the request is authorized to perform read / write actions\non alerts as data."
        ],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "({ id, index }: GetAlertParams) => Promise<OutputOf<",
              "Optional",
              "<{ readonly \"kibana.alert.rule.params\": { readonly type: \"keyword\"; readonly index: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.evaluation.threshold\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.alert.evaluation.value\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.risk_score_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }, \"tags\" | \"event.kind\" | \"ecs.version\" | \"event.action\" | \"kibana.alert.action_group\" | \"kibana.alert.duration.us\" | \"kibana.alert.end\" | \"kibana.alert.evaluation.threshold\" | \"kibana.alert.evaluation.value\" | \"kibana.alert.reason\" | \"kibana.alert.risk_score\" | \"kibana.alert.rule.author\" | \"kibana.alert.rule.created_at\" | \"kibana.alert.rule.created_by\" | \"kibana.alert.rule.description\" | \"kibana.alert.rule.enabled\" | \"kibana.alert.rule.from\" | \"kibana.alert.rule.interval\" | \"kibana.alert.rule.license\" | \"kibana.alert.rule.note\" | \"kibana.alert.rule.params\" | \"kibana.alert.rule.references\" | \"kibana.alert.rule.risk_score\" | \"kibana.alert.rule.risk_score_mapping\" | \"kibana.alert.rule.rule_id\" | \"kibana.alert.rule.rule_name_override\" | \"kibana.alert.rule.severity\" | \"kibana.alert.rule.severity_mapping\" | \"kibana.alert.rule.tags\" | \"kibana.alert.rule.to\" | \"kibana.alert.rule.type\" | \"kibana.alert.rule.updated_at\" | \"kibana.alert.rule.updated_by\" | \"kibana.alert.rule.version\" | \"kibana.alert.start\" | \"kibana.alert.severity\" | \"kibana.alert.system_status\" | \"kibana.alert.workflow_reason\" | \"kibana.alert.workflow_status\" | \"kibana.alert.workflow_user\" | \"kibana.version\">> | undefined>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.get.$1",
                "type": "Object",
                "tags": [],
                "label": "{ id, index }",
                "description": [],
                "signature": [
                  "GetAlertParams"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [],
            "signature": [
              "<Params extends Record<string, unknown> = never>({ id, status, _version, index, }: ",
              "UpdateOptions",
              "<Params>) => Promise<{ _version: string | undefined; get?: { [property: string]: any; } | ",
              "InlineGetKeys",
              "<OutputOf<",
              "Optional",
              "<{ readonly \"kibana.alert.rule.params\": { readonly type: \"keyword\"; readonly index: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.evaluation.threshold\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.alert.evaluation.value\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.risk_score_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }, \"tags\" | \"event.kind\" | \"ecs.version\" | \"event.action\" | \"kibana.alert.action_group\" | \"kibana.alert.duration.us\" | \"kibana.alert.end\" | \"kibana.alert.evaluation.threshold\" | \"kibana.alert.evaluation.value\" | \"kibana.alert.reason\" | \"kibana.alert.risk_score\" | \"kibana.alert.rule.author\" | \"kibana.alert.rule.created_at\" | \"kibana.alert.rule.created_by\" | \"kibana.alert.rule.description\" | \"kibana.alert.rule.enabled\" | \"kibana.alert.rule.from\" | \"kibana.alert.rule.interval\" | \"kibana.alert.rule.license\" | \"kibana.alert.rule.note\" | \"kibana.alert.rule.params\" | \"kibana.alert.rule.references\" | \"kibana.alert.rule.risk_score\" | \"kibana.alert.rule.risk_score_mapping\" | \"kibana.alert.rule.rule_id\" | \"kibana.alert.rule.rule_name_override\" | \"kibana.alert.rule.severity\" | \"kibana.alert.rule.severity_mapping\" | \"kibana.alert.rule.tags\" | \"kibana.alert.rule.to\" | \"kibana.alert.rule.type\" | \"kibana.alert.rule.updated_at\" | \"kibana.alert.rule.updated_by\" | \"kibana.alert.rule.version\" | \"kibana.alert.start\" | \"kibana.alert.severity\" | \"kibana.alert.system_status\" | \"kibana.alert.workflow_reason\" | \"kibana.alert.workflow_status\" | \"kibana.alert.workflow_user\" | \"kibana.version\">>> | undefined; _id: string; _index: string; _primary_term: number; result: ",
              "Result",
              "; _seq_no: number; _shards: ",
              "ShardStatistics",
              "; _type?: string | undefined; forced_refresh?: boolean | undefined; }>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.update.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    status,\n    _version,\n    index,\n  }",
                "description": [],
                "signature": [
                  "UpdateOptions",
                  "<Params>"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.bulkUpdate",
            "type": "Function",
            "tags": [],
            "label": "bulkUpdate",
            "description": [],
            "signature": [
              "<Params extends Record<string, unknown> = never>({ ids, query, index, status, }: ",
              "BulkUpdateOptions",
              "<Params>) => Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown> | ",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.bulkUpdate.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    ids,\n    query,\n    index,\n    status,\n  }",
                "description": [],
                "signature": [
                  "BulkUpdateOptions",
                  "<Params>"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.find",
            "type": "Function",
            "tags": [],
            "label": "find",
            "description": [],
            "signature": [
              "<Params extends Record<string, unknown> = never>({ query, aggs, _source, track_total_hits: trackTotalHits, size, index, }: { query?: object | undefined; aggs?: object | undefined; index: string | undefined; track_total_hits?: boolean | undefined; _source?: string[] | undefined; size?: number | undefined; }) => Promise<",
              "SearchResponse",
              "<OutputOf<",
              "Optional",
              "<{ readonly \"kibana.alert.rule.params\": { readonly type: \"keyword\"; readonly index: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.evaluation.threshold\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.alert.evaluation.value\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.risk_score_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }, \"tags\" | \"event.kind\" | \"ecs.version\" | \"event.action\" | \"kibana.alert.action_group\" | \"kibana.alert.duration.us\" | \"kibana.alert.end\" | \"kibana.alert.evaluation.threshold\" | \"kibana.alert.evaluation.value\" | \"kibana.alert.reason\" | \"kibana.alert.risk_score\" | \"kibana.alert.rule.author\" | \"kibana.alert.rule.created_at\" | \"kibana.alert.rule.created_by\" | \"kibana.alert.rule.description\" | \"kibana.alert.rule.enabled\" | \"kibana.alert.rule.from\" | \"kibana.alert.rule.interval\" | \"kibana.alert.rule.license\" | \"kibana.alert.rule.note\" | \"kibana.alert.rule.params\" | \"kibana.alert.rule.references\" | \"kibana.alert.rule.risk_score\" | \"kibana.alert.rule.risk_score_mapping\" | \"kibana.alert.rule.rule_id\" | \"kibana.alert.rule.rule_name_override\" | \"kibana.alert.rule.severity\" | \"kibana.alert.rule.severity_mapping\" | \"kibana.alert.rule.tags\" | \"kibana.alert.rule.to\" | \"kibana.alert.rule.type\" | \"kibana.alert.rule.updated_at\" | \"kibana.alert.rule.updated_by\" | \"kibana.alert.rule.version\" | \"kibana.alert.start\" | \"kibana.alert.severity\" | \"kibana.alert.system_status\" | \"kibana.alert.workflow_reason\" | \"kibana.alert.workflow_status\" | \"kibana.alert.workflow_user\" | \"kibana.version\">>>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.find.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    query,\n    aggs,\n    _source,\n    track_total_hits: trackTotalHits,\n    size,\n    index,\n  }",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.query",
                    "type": "Uncategorized",
                    "tags": [],
                    "label": "query",
                    "description": [],
                    "signature": [
                      "object | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.aggs",
                    "type": "Uncategorized",
                    "tags": [],
                    "label": "aggs",
                    "description": [],
                    "signature": [
                      "object | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.index",
                    "type": "string",
                    "tags": [],
                    "label": "index",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.track_total_hits",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "track_total_hits",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1._source",
                    "type": "Array",
                    "tags": [],
                    "label": "_source",
                    "description": [],
                    "signature": [
                      "string[] | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.size",
                    "type": "number",
                    "tags": [],
                    "label": "size",
                    "description": [],
                    "signature": [
                      "number | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.getAuthorizedAlertsIndices",
            "type": "Function",
            "tags": [],
            "label": "getAuthorizedAlertsIndices",
            "description": [],
            "signature": [
              "(featureIds: string[]) => Promise<string[] | undefined>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.getAuthorizedAlertsIndices.$1",
                "type": "Array",
                "tags": [],
                "label": "featureIds",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataClient",
        "type": "Class",
        "tags": [],
        "label": "RuleDataClient",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataClient",
            "text": "RuleDataClient"
          },
          " implements ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.indexName",
            "type": "string",
            "tags": [],
            "label": "indexName",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.getReader",
            "type": "Function",
            "tags": [],
            "label": "getReader",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; }) => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataReader",
                "text": "IRuleDataReader"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.getReader.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataClient.getReader.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.getWriter",
            "type": "Function",
            "tags": [],
            "label": "getWriter",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; }) => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataWriter",
                "text": "IRuleDataWriter"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.getWriter.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataClient.getWriter.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataService",
        "type": "Class",
        "tags": [],
        "label": "RuleDataService",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataService",
            "text": "RuleDataService"
          },
          " implements ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataService",
            "text": "IRuleDataService"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.getResourcePrefix",
            "type": "Function",
            "tags": [],
            "label": "getResourcePrefix",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.getResourceName",
            "type": "Function",
            "tags": [],
            "label": "getResourceName",
            "description": [],
            "signature": [
              "(relativeName: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.getResourceName.$1",
                "type": "string",
                "tags": [],
                "label": "relativeName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.isWriterCacheEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriterCacheEnabled",
            "description": [
              "\nIf writer cache is enabled (the default), the writer will be cached\nafter being initialized. Disabling this is useful for tests, where we\nexpect to easily be able to clean up after ourselves between test cases."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.initializeService",
            "type": "Function",
            "tags": [],
            "label": "initializeService",
            "description": [
              "\nInstalls common Elasticsearch resources used by all alerts-as-data indices."
            ],
            "signature": [
              "() => void"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.initializeIndex",
            "type": "Function",
            "tags": [],
            "label": "initializeIndex",
            "description": [],
            "signature": [
              "(indexOptions: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IndexOptions",
                "text": "IndexOptions"
              },
              ") => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.initializeIndex.$1",
                "type": "Object",
                "tags": [],
                "label": "indexOptions",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.IndexOptions",
                    "text": "IndexOptions"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.findIndexByName",
            "type": "Function",
            "tags": [],
            "label": "findIndexByName",
            "description": [],
            "signature": [
              "(registrationContext: string, dataset: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              ") => ",
              "IndexInfo",
              " | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndexByName.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndexByName.$2",
                "type": "Enum",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.findIndicesByFeature",
            "type": "Function",
            "tags": [],
            "label": "findIndicesByFeature",
            "description": [],
            "signature": [
              "(featureId: ",
              {
                "pluginId": "@kbn/rule-data-utils",
                "scope": "server",
                "docId": "kibKbnRuleDataUtilsPluginApi",
                "section": "def-server.AlertConsumers",
                "text": "AlertConsumers"
              },
              ", dataset?: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              " | undefined) => ",
              "IndexInfo",
              "[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndicesByFeature.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "featureId",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/rule-data-utils",
                    "scope": "server",
                    "docId": "kibKbnRuleDataUtilsPluginApi",
                    "section": "def-server.AlertConsumers",
                    "text": "AlertConsumers"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndicesByFeature.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataWriteDisabledError",
        "type": "Class",
        "tags": [],
        "label": "RuleDataWriteDisabledError",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataWriteDisabledError",
            "text": "RuleDataWriteDisabledError"
          },
          " extends Error"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataWriteDisabledError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriteDisabledError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataWriterInitializationError",
        "type": "Class",
        "tags": [],
        "label": "RuleDataWriterInitializationError",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataWriterInitializationError",
            "text": "RuleDataWriterInitializationError"
          },
          " extends Error"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataWriterInitializationError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriterInitializationError.Unnamed.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "resourceType",
                "description": [],
                "signature": [
                  "\"index\" | \"namespace\""
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriterInitializationError.Unnamed.$2",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriterInitializationError.Unnamed.$3",
                "type": "CompoundType",
                "tags": [],
                "label": "error",
                "description": [],
                "signature": [
                  "string | Error"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.alertAuditEvent",
        "type": "Function",
        "tags": [],
        "label": "alertAuditEvent",
        "description": [],
        "signature": [
          "({ action, id, outcome, error }: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.AlertAuditEventParams",
            "text": "AlertAuditEventParams"
          },
          ") => ",
          {
            "pluginId": "security",
            "scope": "server",
            "docId": "kibSecurityPluginApi",
            "section": "def-server.AuditEvent",
            "text": "AuditEvent"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.alertAuditEvent.$1",
            "type": "Object",
            "tags": [],
            "label": "{ action, id, outcome, error }",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditEventParams",
                "text": "AlertAuditEventParams"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createLifecycleExecutor",
        "type": "Function",
        "tags": [],
        "label": "createLifecycleExecutor",
        "description": [],
        "signature": [
          "(logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "server",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-server.Logger",
            "text": "Logger"
          },
          ", ruleDataClient: Pick<",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          ", \"indexName\" | \"kibanaVersion\" | \"isWriteEnabled\" | \"getReader\" | \"getWriter\">) => <Params extends Record<string, unknown> = never, State extends Record<string, unknown> = never, InstanceState extends { [x: string]: unknown; } = never, InstanceContext extends { [x: string]: unknown; } = never, ActionGroupIds extends string = never>(wrappedExecutor: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleRuleExecutor",
            "text": "LifecycleRuleExecutor"
          },
          "<Params, State, InstanceState, InstanceContext, ActionGroupIds>) => (options: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.AlertExecutorOptions",
            "text": "AlertExecutorOptions"
          },
          "<Params, ",
          "WrappedLifecycleRuleState",
          "<State>, InstanceState, InstanceContext, ActionGroupIds>) => Promise<",
          "WrappedLifecycleRuleState",
          "<State>>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createLifecycleExecutor.$1",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.Logger",
                "text": "Logger"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createLifecycleExecutor.$2",
            "type": "Object",
            "tags": [],
            "label": "ruleDataClient",
            "description": [],
            "signature": [
              "Pick<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              },
              ", \"indexName\" | \"kibanaVersion\" | \"isWriteEnabled\" | \"getReader\" | \"getWriter\">"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createLifecycleRuleTypeFactory",
        "type": "Function",
        "tags": [],
        "label": "createLifecycleRuleTypeFactory",
        "description": [],
        "signature": [
          "({ logger, ruleDataClient }: { logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "server",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-server.Logger",
            "text": "Logger"
          },
          "; ruleDataClient: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          "; }) => <TParams extends Record<string, unknown>, TAlertInstanceContext extends { [x: string]: unknown; }, TServices extends { alertWithLifecycle: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleAlertService",
            "text": "LifecycleAlertService"
          },
          "<Record<string, any>, TAlertInstanceContext, string>; }>(type: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.AlertTypeWithExecutor",
            "text": "AlertTypeWithExecutor"
          },
          "<Record<string, any>, TParams, TAlertInstanceContext, TServices>) => ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.AlertTypeWithExecutor",
            "text": "AlertTypeWithExecutor"
          },
          "<Record<string, any>, TParams, TAlertInstanceContext, any>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createLifecycleRuleTypeFactory.$1",
            "type": "Object",
            "tags": [],
            "label": "{ logger, ruleDataClient }",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.createLifecycleRuleTypeFactory.$1.logger",
                "type": "Object",
                "tags": [],
                "label": "logger",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "server",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-server.Logger",
                    "text": "Logger"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.createLifecycleRuleTypeFactory.$1.ruleDataClient",
                "type": "Object",
                "tags": [],
                "label": "ruleDataClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.IRuleDataClient",
                    "text": "IRuleDataClient"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createPersistenceRuleTypeWrapper",
        "type": "Function",
        "tags": [],
        "label": "createPersistenceRuleTypeWrapper",
        "description": [],
        "signature": [
          "({ logger, ruleDataClient }: { ruleDataClient: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "server",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-server.Logger",
            "text": "Logger"
          },
          "; }) => <TParams extends Record<string, unknown>, TState extends Record<string, unknown>, TInstanceContext extends { [x: string]: unknown; } = {}, TActionGroupIds extends string = never>(type: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertType",
            "text": "PersistenceAlertType"
          },
          "<TParams, TState, TInstanceContext, TActionGroupIds>) => { executor: (options: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.AlertExecutorOptions",
            "text": "AlertExecutorOptions"
          },
          "<TParams, TState, { [x: string]: unknown; }, TInstanceContext, ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.WithoutReservedActionGroups",
            "text": "WithoutReservedActionGroups"
          },
          "<TActionGroupIds, never>>) => Promise<void | TState>; name: string; id: string; validate?: { params?: ",
          "AlertTypeParamsValidator",
          "<TParams> | undefined; } | undefined; actionGroups: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionGroup",
            "text": "ActionGroup"
          },
          "<TActionGroupIds>[]; defaultActionGroupId: TActionGroupIds; recoveryActionGroup?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionGroup",
            "text": "ActionGroup"
          },
          "<never> | undefined; producer: string; actionVariables?: { context?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionVariable",
            "text": "ActionVariable"
          },
          "[] | undefined; state?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionVariable",
            "text": "ActionVariable"
          },
          "[] | undefined; params?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionVariable",
            "text": "ActionVariable"
          },
          "[] | undefined; } | undefined; minimumLicenseRequired: \"basic\" | \"standard\" | \"gold\" | \"platinum\" | \"enterprise\" | \"trial\"; useSavedObjectReferences?: { extractReferences: (params: TParams) => ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleParamsAndRefs",
            "text": "RuleParamsAndRefs"
          },
          "<TParams>; injectReferences: (params: TParams, references: ",
          "SavedObjectReference",
          "[]) => TParams; } | undefined; isExportable: boolean; defaultScheduleInterval?: string | undefined; minimumScheduleInterval?: string | undefined; ruleTaskTimeout?: string | undefined; cancelAlertsOnRuleTimeout?: boolean | undefined; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_persistence_rule_type_wrapper.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createPersistenceRuleTypeWrapper.$1",
            "type": "Object",
            "tags": [],
            "label": "{ logger, ruleDataClient }",
            "description": [],
            "signature": [
              "{ ruleDataClient: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              },
              "; logger: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.Logger",
                "text": "Logger"
              },
              "; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_persistence_rule_type_wrapper.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertAuditEventParams",
        "type": "Interface",
        "tags": [],
        "label": "AlertAuditEventParams",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.action",
            "type": "Enum",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.outcome",
            "type": "CompoundType",
            "tags": [],
            "label": "outcome",
            "description": [],
            "signature": [
              "\"unknown\" | \"success\" | \"failure\" | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "Error | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.ComponentTemplateOptions",
        "type": "Interface",
        "tags": [],
        "label": "ComponentTemplateOptions",
        "description": [
          "\nWhen initializing an index, a plugin/solution can break mappings and settings\ndown into several component templates. Some of their properties can be\ndefined by the plugin/solution via these options.\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions.mappings",
            "type": "Object",
            "tags": [],
            "label": "mappings",
            "description": [],
            "signature": [
              "MappingTypeMapping",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions.settings",
            "type": "Object",
            "tags": [],
            "label": "settings",
            "description": [],
            "signature": [
              "IndicesIndexSettings",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions._meta",
            "type": "Object",
            "tags": [],
            "label": "_meta",
            "description": [],
            "signature": [
              "Record<string, any> | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IndexOptions",
        "type": "Interface",
        "tags": [],
        "label": "IndexOptions",
        "description": [
          "\nOptions that a plugin/solution provides to rule_registry in order to\ndefine and initialize an index for alerts-as-data.\n\nIMPORTANT: All names provided in these options are relative. For example:\n- component template refs will be 'ecs-mappings', not '.alerts-ecs-mappings'\n- component template names will be 'mappings', not '.alerts-security.alerts-mappings'\n- etc"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.feature",
            "type": "CompoundType",
            "tags": [],
            "label": "feature",
            "description": [
              "\nID of the Kibana feature associated with the index.\nUsed by alerts-as-data RBAC.\n\nNote from @dhurley14\nThe purpose of the `feature` param is to force the user to update\nthe data structure which contains the mapping of consumers to alerts\nas data indices. The idea is it is typed such that it forces the\nuser to go to the code and modify it. At least until a better system\nis put in place or we move the alerts as data client out of rule registry.\n"
            ],
            "signature": [
              "\"logs\" | \"apm\" | \"observability\" | \"uptime\" | \"infrastructure\" | \"siem\""
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.registrationContext",
            "type": "string",
            "tags": [],
            "label": "registrationContext",
            "description": [
              "\nRegistration context which defines a solution or an app within a solution."
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.dataset",
            "type": "Enum",
            "tags": [],
            "label": "dataset",
            "description": [
              "\nDataset suffix. Restricted to a few values."
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.componentTemplateRefs",
            "type": "Array",
            "tags": [],
            "label": "componentTemplateRefs",
            "description": [
              "\nA list of references to external component templates. Those can be\nthe common ones shared between all solutions, or special ones\nshared between some of them.\n\nIMPORTANT: These names should be relative.\n- correct: 'my-mappings'\n- incorrect: '.alerts-my-mappings'\n"
            ],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.componentTemplates",
            "type": "Array",
            "tags": [],
            "label": "componentTemplates",
            "description": [
              "\nOwn component templates specified for the index by the plugin/solution\ndefining this index.\n\nIMPORTANT: Order matters. This order is used by Elasticsearch to set\npriorities when merging the same field names defined in 2+ templates.\n\nIMPORTANT: Component template names should be relative.\n- correct: 'mappings'\n- incorrect: 'security.alerts-mappings'\n- incorrect: '.alerts-security.alerts-mappings'"
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.ComponentTemplateOptions",
                "text": "ComponentTemplateOptions"
              },
              "[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.indexTemplate",
            "type": "Object",
            "tags": [],
            "label": "indexTemplate",
            "description": [
              "\nAdditional properties for the namespaced index template."
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IndexTemplateOptions",
                "text": "IndexTemplateOptions"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.ilmPolicy",
            "type": "Object",
            "tags": [],
            "label": "ilmPolicy",
            "description": [
              "\nOptional custom ILM policy for the index.\nNOTE: this policy will be shared between all namespaces of the index."
            ],
            "signature": [
              "Pick<",
              "IlmPolicy",
              ", \"phases\"> | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.secondaryAlias",
            "type": "string",
            "tags": [],
            "label": "secondaryAlias",
            "description": [
              "\nOptional secondary alias that will be applied to concrete indices in\naddition to the primary one '.alerts-{reg. context}.{dataset}-{namespace}'\n\nIMPORTANT: It should not include the namespace. It will be added\nautomatically.\n- correct: '.siem-signals'\n- incorrect: '.siem-signals-default'\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IndexTemplateOptions",
        "type": "Interface",
        "tags": [],
        "label": "IndexTemplateOptions",
        "description": [
          "\nWhen initializing an index, a plugin/solution can provide some optional\nproperties which will be included into the index template.\n\nNote that:\n- each index namespace will get its own index template\n- the template will be created by the library\n- most of its properties will be set by the library\n- you can inject some of them via these options\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/index-templates.html"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexTemplateOptions._meta",
            "type": "Object",
            "tags": [],
            "label": "_meta",
            "description": [],
            "signature": [
              "Record<string, any> | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataClient",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataClient",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.indexName",
            "type": "string",
            "tags": [],
            "label": "indexName",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.getReader",
            "type": "Function",
            "tags": [],
            "label": "getReader",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; } | undefined) => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataReader",
                "text": "IRuleDataReader"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataClient.getReader.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.IRuleDataClient.getReader.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.getWriter",
            "type": "Function",
            "tags": [],
            "label": "getWriter",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; } | undefined) => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataWriter",
                "text": "IRuleDataWriter"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataClient.getWriter.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.IRuleDataClient.getWriter.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataReader",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataReader",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataReader.search",
            "type": "Function",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "<TSearchRequest extends ",
              "SearchRequest",
              ">(request: TSearchRequest) => Promise<",
              "InferSearchResponseOf",
              "<Partial<Record<\"tags\" | \"kibana\" | \"@timestamp\" | \"event.kind\" | \"kibana.consumers\" | \"ecs.version\" | \"event.action\" | \"event.module\" | \"kibana.alert.action_group\" | \"kibana.alert.duration.us\" | \"kibana.alert.end\" | \"kibana.alert.evaluation.threshold\" | \"kibana.alert.evaluation.value\" | \"kibana.alert.instance.id\" | \"kibana.alert.rule.consumer\" | \"kibana.alert.rule.producer\" | \"kibana.alert.reason\" | \"kibana.alert.risk_score\" | \"kibana.alert.rule.author\" | \"kibana.alert.rule.created_at\" | \"kibana.alert.rule.created_by\" | \"kibana.alert.rule.description\" | \"kibana.alert.rule.enabled\" | \"kibana.alert.rule.from\" | \"kibana.alert.rule.interval\" | \"kibana.alert.rule.license\" | \"kibana.alert.rule.name\" | \"kibana.alert.rule.note\" | \"kibana.alert.rule.params\" | \"kibana.alert.rule.references\" | \"kibana.alert.rule.risk_score\" | \"kibana.alert.rule.risk_score_mapping\" | \"kibana.alert.rule.rule_id\" | \"kibana.alert.rule.rule_name_override\" | \"kibana.alert.rule.severity\" | \"kibana.alert.rule.severity_mapping\" | \"kibana.alert.rule.tags\" | \"kibana.alert.rule.to\" | \"kibana.alert.rule.type\" | \"kibana.alert.rule.rule_type_id\" | \"kibana.alert.rule.updated_at\" | \"kibana.alert.rule.updated_by\" | \"kibana.alert.rule.version\" | \"kibana.alert.start\" | \"kibana.alert.severity\" | \"kibana.alert.status\" | \"kibana.alert.system_status\" | \"kibana.alert.uuid\" | \"kibana.alert.workflow_reason\" | \"kibana.alert.workflow_status\" | \"kibana.alert.workflow_user\" | \"kibana.alert.rule.uuid\" | \"kibana.alert.rule.category\" | \"kibana.space_ids\" | \"kibana.version\" | \"kibana.alert\" | \"kibana.alert.rule\", unknown[]>>, TSearchRequest, { restTotalHitsAsInt: false; }>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataReader.search.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  "TSearchRequest"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataReader.getDynamicIndexPattern",
            "type": "Function",
            "tags": [],
            "label": "getDynamicIndexPattern",
            "description": [],
            "signature": [
              "(target?: string | undefined) => Promise<{ title: string; timeFieldName: string; fields: ",
              {
                "pluginId": "dataViews",
                "scope": "server",
                "docId": "kibDataViewsPluginApi",
                "section": "def-server.FieldDescriptor",
                "text": "FieldDescriptor"
              },
              "[]; }>"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataReader.getDynamicIndexPattern.$1",
                "type": "string",
                "tags": [],
                "label": "target",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataService",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataService",
        "description": [
          "\nA service for creating and using Elasticsearch indices for alerts-as-data."
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.getResourcePrefix",
            "type": "Function",
            "tags": [],
            "label": "getResourcePrefix",
            "description": [
              "\nReturns a prefix used in the naming scheme of index aliases, templates\nand other Elasticsearch resources that this service creates\nfor alerts-as-data indices."
            ],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.getResourceName",
            "type": "Function",
            "tags": [],
            "label": "getResourceName",
            "description": [
              "\nPrepends a relative resource name with the resource prefix."
            ],
            "signature": [
              "(relativeName: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.getResourceName.$1",
                "type": "string",
                "tags": [],
                "label": "relativeName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Full name of the resource."
            ]
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [
              "\nIf write is enabled, everything works as usual.\nIf it's disabled, writing to all alerts-as-data indices will be disabled,\nand also Elasticsearch resources associated with the indices will not be\ninstalled."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.isWriterCacheEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriterCacheEnabled",
            "description": [
              "\nIf writer cache is enabled (the default), the writer will be cached\nafter being initialized. Disabling this is useful for tests, where we\nexpect to easily be able to clean up after ourselves between test cases."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.initializeService",
            "type": "Function",
            "tags": [],
            "label": "initializeService",
            "description": [
              "\nInstalls common Elasticsearch resources used by all alerts-as-data indices."
            ],
            "signature": [
              "() => void"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.initializeIndex",
            "type": "Function",
            "tags": [],
            "label": "initializeIndex",
            "description": [
              "\nInitializes alerts-as-data index and starts index bootstrapping right away."
            ],
            "signature": [
              "(indexOptions: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IndexOptions",
                "text": "IndexOptions"
              },
              ") => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.initializeIndex.$1",
                "type": "Object",
                "tags": [],
                "label": "indexOptions",
                "description": [
                  "Index parameters: names and resources."
                ],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.IndexOptions",
                    "text": "IndexOptions"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Client for reading and writing data to this index."
            ]
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.findIndexByName",
            "type": "Function",
            "tags": [],
            "label": "findIndexByName",
            "description": [
              "\nLooks up the index information associated with the given registration context and dataset."
            ],
            "signature": [
              "(registrationContext: string, dataset: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              ") => ",
              "IndexInfo",
              " | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndexByName.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndexByName.$2",
                "type": "Enum",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.findIndicesByFeature",
            "type": "Function",
            "tags": [],
            "label": "findIndicesByFeature",
            "description": [
              "\nLooks up the index information associated with the given Kibana \"feature\".\nNote: features are used in RBAC."
            ],
            "signature": [
              "(featureId: ",
              {
                "pluginId": "@kbn/rule-data-utils",
                "scope": "server",
                "docId": "kibKbnRuleDataUtilsPluginApi",
                "section": "def-server.AlertConsumers",
                "text": "AlertConsumers"
              },
              ", dataset?: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              " | undefined) => ",
              "IndexInfo",
              "[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndicesByFeature.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "featureId",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/rule-data-utils",
                    "scope": "server",
                    "docId": "kibKbnRuleDataUtilsPluginApi",
                    "section": "def-server.AlertConsumers",
                    "text": "AlertConsumers"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndicesByFeature.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataWriter",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataWriter",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataWriter.bulk",
            "type": "Function",
            "tags": [],
            "label": "bulk",
            "description": [],
            "signature": [
              "(request: ",
              "BulkRequest",
              "<unknown>) => Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown> | undefined>"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataWriter.bulk.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  "BulkRequest",
                  "<unknown>"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.LifecycleAlertServices",
        "type": "Interface",
        "tags": [],
        "label": "LifecycleAlertServices",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleAlertServices",
            "text": "LifecycleAlertServices"
          },
          "<InstanceState, InstanceContext, ActionGroupIds>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertServices.alertWithLifecycle",
            "type": "Function",
            "tags": [],
            "label": "alertWithLifecycle",
            "description": [],
            "signature": [
              "(alert: { id: string; fields: ExplicitAlertFields; }) => Pick<",
              "AlertInstance",
              "<InstanceState, InstanceContext, ActionGroupIds>, \"getState\" | \"replaceState\" | \"scheduleActions\" | \"scheduleActionsWithSubGroup\">"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.LifecycleAlertServices.alertWithLifecycle.$1",
                "type": "Object",
                "tags": [],
                "label": "alert",
                "description": [],
                "signature": [
                  "{ id: string; fields: ExplicitAlertFields; }"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceAlertServiceResult",
        "type": "Interface",
        "tags": [],
        "label": "PersistenceAlertServiceResult",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertServiceResult",
            "text": "PersistenceAlertServiceResult"
          },
          "<T>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertServiceResult.createdAlerts",
            "type": "Array",
            "tags": [],
            "label": "createdAlerts",
            "description": [],
            "signature": [
              "(T & { _id: string; _index: string; })[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceServices",
        "type": "Interface",
        "tags": [],
        "label": "PersistenceServices",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceServices.alertWithPersistence",
            "type": "Function",
            "tags": [],
            "label": "alertWithPersistence",
            "description": [],
            "signature": [
              "<T>(alerts: { _id: string; _source: T; }[], refresh: ",
              "Refresh",
              ") => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.PersistenceAlertServiceResult",
                "text": "PersistenceAlertServiceResult"
              },
              "<T>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithPersistence.$1",
                "type": "Array",
                "tags": [],
                "label": "alerts",
                "description": [],
                "signature": [
                  "{ _id: string; _source: T; }[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithPersistence.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "refresh",
                "description": [],
                "signature": [
                  "boolean | \"wait_for\""
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RacApiRequestHandlerContext",
        "type": "Interface",
        "tags": [],
        "label": "RacApiRequestHandlerContext",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RacApiRequestHandlerContext.getAlertsClient",
            "type": "Function",
            "tags": [],
            "label": "getAlertsClient",
            "description": [],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertsClient",
                "text": "AlertsClient"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertAuditAction",
        "type": "Enum",
        "tags": [],
        "label": "AlertAuditAction",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Dataset",
        "type": "Enum",
        "tags": [],
        "label": "Dataset",
        "description": [
          "\nDataset suffix restricted to a few values. All alerts-as-data indices\nare designed to contain only documents of these \"kinds\"."
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertTypeWithExecutor",
        "type": "Type",
        "tags": [],
        "label": "AlertTypeWithExecutor",
        "description": [],
        "signature": [
          "Pick<",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.AlertType",
            "text": "AlertType"
          },
          "<TParams, TParams, TState, { [x: string]: unknown; }, TAlertInstanceContext, string, string>, \"name\" | \"id\" | \"validate\" | \"actionGroups\" | \"defaultActionGroupId\" | \"recoveryActionGroup\" | \"producer\" | \"actionVariables\" | \"minimumLicenseRequired\" | \"useSavedObjectReferences\" | \"isExportable\" | \"defaultScheduleInterval\" | \"minimumScheduleInterval\" | \"ruleTaskTimeout\" | \"cancelAlertsOnRuleTimeout\"> & { executor: ",
          "AlertTypeExecutor",
          "<TState, TParams, TAlertInstanceContext, TServices>; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.CreatePersistenceRuleTypeWrapper",
        "type": "Type",
        "tags": [],
        "label": "CreatePersistenceRuleTypeWrapper",
        "description": [],
        "signature": [
          "(options: { ruleDataClient: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "server",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-server.Logger",
            "text": "Logger"
          },
          "; }) => <TParams extends Record<string, unknown>, TState extends Record<string, unknown>, TInstanceContext extends { [x: string]: unknown; } = {}, TActionGroupIds extends string = never>(type: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertType",
            "text": "PersistenceAlertType"
          },
          "<TParams, TState, TInstanceContext, TActionGroupIds>) => ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.AlertType",
            "text": "AlertType"
          },
          "<TParams, TParams, TState, { [x: string]: unknown; }, TInstanceContext, TActionGroupIds, never>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.CreatePersistenceRuleTypeWrapper.$1",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "{ ruleDataClient: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              },
              "; logger: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.Logger",
                "text": "Logger"
              },
              "; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IlmPolicyOptions",
        "type": "Type",
        "tags": [],
        "label": "IlmPolicyOptions",
        "description": [
          "\nWhen initializing an index, a plugin/solution can provide a custom\nILM policy that will be applied to concrete indices of this index.\n\nNote that policy will be shared between all namespaces of the index."
        ],
        "signature": [
          "{ phases: ",
          "IlmPhases",
          "; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.INDEX_PREFIX",
        "type": "string",
        "tags": [],
        "label": "INDEX_PREFIX",
        "description": [],
        "signature": [
          "\".alerts\""
        ],
        "path": "x-pack/plugins/rule_registry/server/config.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.INDEX_PREFIX_FOR_BACKING_INDICES",
        "type": "string",
        "tags": [],
        "label": "INDEX_PREFIX_FOR_BACKING_INDICES",
        "description": [],
        "signature": [
          "\".internal.alerts\""
        ],
        "path": "x-pack/plugins/rule_registry/server/config.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.LifecycleAlertService",
        "type": "Type",
        "tags": [],
        "label": "LifecycleAlertService",
        "description": [],
        "signature": [
          "(alert: { id: string; fields: ExplicitAlertFields; }) => Pick<",
          "AlertInstance",
          "<InstanceState, InstanceContext, ActionGroupIds>, \"getState\" | \"replaceState\" | \"scheduleActions\" | \"scheduleActionsWithSubGroup\">"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertService.$1",
            "type": "Object",
            "tags": [],
            "label": "alert",
            "description": [],
            "signature": [
              "{ id: string; fields: ExplicitAlertFields; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.LifecycleRuleExecutor",
        "type": "Type",
        "tags": [],
        "label": "LifecycleRuleExecutor",
        "description": [],
        "signature": [
          "(options: ",
          "AlertExecutorOptionsWithExtraServices",
          "<Params, State, InstanceState, InstanceContext, ActionGroupIds, ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleAlertServices",
            "text": "LifecycleAlertServices"
          },
          "<InstanceState, InstanceContext, ActionGroupIds>>) => Promise<void | State>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleRuleExecutor.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "Pick<",
              {
                "pluginId": "alerting",
                "scope": "server",
                "docId": "kibAlertingPluginApi",
                "section": "def-server.AlertExecutorOptions",
                "text": "AlertExecutorOptions"
              },
              "<Params, State, InstanceState, InstanceContext, ActionGroupIds>, \"name\" | \"tags\" | \"params\" | \"spaceId\" | \"rule\" | \"createdBy\" | \"updatedBy\" | \"previousStartedAt\" | \"state\" | \"alertId\" | \"namespace\" | \"startedAt\"> & { services: ",
              {
                "pluginId": "alerting",
                "scope": "server",
                "docId": "kibAlertingPluginApi",
                "section": "def-server.AlertServices",
                "text": "AlertServices"
              },
              "<InstanceState, InstanceContext, ActionGroupIds> & ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.LifecycleAlertServices",
                "text": "LifecycleAlertServices"
              },
              "<InstanceState, InstanceContext, ActionGroupIds>; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Mappings",
        "type": "Type",
        "tags": [],
        "label": "Mappings",
        "description": [],
        "signature": [
          "MappingTypeMapping"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Meta",
        "type": "Type",
        "tags": [],
        "label": "Meta",
        "description": [],
        "signature": [
          "{ [x: string]: any; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceAlertService",
        "type": "Type",
        "tags": [],
        "label": "PersistenceAlertService",
        "description": [],
        "signature": [
          "<T>(alerts: { _id: string; _source: T; }[], refresh: ",
          "Refresh",
          ") => Promise<",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertServiceResult",
            "text": "PersistenceAlertServiceResult"
          },
          "<T>>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertService.$1",
            "type": "Array",
            "tags": [],
            "label": "alerts",
            "description": [],
            "signature": [
              "{ _id: string; _source: T; }[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertService.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "refresh",
            "description": [],
            "signature": [
              "boolean | \"wait_for\""
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceAlertType",
        "type": "Type",
        "tags": [],
        "label": "PersistenceAlertType",
        "description": [],
        "signature": [
          "Pick<",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.AlertType",
            "text": "AlertType"
          },
          "<TParams, TParams, TState, { [x: string]: unknown; }, TInstanceContext, TActionGroupIds, never>, \"name\" | \"id\" | \"validate\" | \"actionGroups\" | \"defaultActionGroupId\" | \"recoveryActionGroup\" | \"producer\" | \"actionVariables\" | \"minimumLicenseRequired\" | \"useSavedObjectReferences\" | \"isExportable\" | \"defaultScheduleInterval\" | \"minimumScheduleInterval\" | \"ruleTaskTimeout\" | \"cancelAlertsOnRuleTimeout\"> & { executor: (options: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.AlertExecutorOptions",
            "text": "AlertExecutorOptions"
          },
          "<TParams, TState, { [x: string]: unknown; }, TInstanceContext, ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.WithoutReservedActionGroups",
            "text": "WithoutReservedActionGroups"
          },
          "<TActionGroupIds, never>> & { services: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceServices",
            "text": "PersistenceServices"
          },
          "; }) => Promise<void | TState>; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataPluginService",
        "type": "Type",
        "tags": [],
        "label": "RuleDataPluginService",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataService",
            "text": "IRuleDataService"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleRegistryPluginConfig",
        "type": "Type",
        "tags": [],
        "label": "RuleRegistryPluginConfig",
        "description": [],
        "signature": [
          "any"
        ],
        "path": "x-pack/plugins/rule_registry/server/config.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Settings",
        "type": "Type",
        "tags": [],
        "label": "Settings",
        "description": [],
        "signature": [
          "IndicesIndexSettings"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Version",
        "type": "Type",
        "tags": [],
        "label": "Version",
        "description": [],
        "signature": [
          "number"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.WaitResult",
        "type": "Type",
        "tags": [],
        "label": "WaitResult",
        "description": [],
        "signature": [
          "Left",
          "<Error> | ",
          "Right",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ">"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.operationAlertAuditActionMap",
        "type": "Object",
        "tags": [],
        "label": "operationAlertAuditActionMap",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.operationAlertAuditActionMap.WriteOperations.Update",
            "type": "Enum",
            "tags": [],
            "label": "[WriteOperations.Update]",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.operationAlertAuditActionMap.ReadOperations.Find",
            "type": "Enum",
            "tags": [],
            "label": "[ReadOperations.Find]",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.operationAlertAuditActionMap.ReadOperations.Get",
            "type": "Enum",
            "tags": [],
            "label": "[ReadOperations.Get]",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "ruleRegistry",
      "id": "def-server.RuleRegistryPluginSetupContract",
      "type": "Interface",
      "tags": [],
      "label": "RuleRegistryPluginSetupContract",
      "description": [],
      "path": "x-pack/plugins/rule_registry/server/plugin.ts",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginSetupContract.ruleDataService",
          "type": "Object",
          "tags": [],
          "label": "ruleDataService",
          "description": [],
          "signature": [
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.IRuleDataService",
              "text": "IRuleDataService"
            }
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "ruleRegistry",
      "id": "def-server.RuleRegistryPluginStartContract",
      "type": "Interface",
      "tags": [],
      "label": "RuleRegistryPluginStartContract",
      "description": [],
      "path": "x-pack/plugins/rule_registry/server/plugin.ts",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginStartContract.getRacClientWithRequest",
          "type": "Function",
          "tags": [],
          "label": "getRacClientWithRequest",
          "description": [],
          "signature": [
            "(req: ",
            {
              "pluginId": "core",
              "scope": "server",
              "docId": "kibCoreHttpPluginApi",
              "section": "def-server.KibanaRequest",
              "text": "KibanaRequest"
            },
            "<unknown, unknown, unknown, any>) => Promise<",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.AlertsClient",
              "text": "AlertsClient"
            },
            ">"
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false,
          "children": [
            {
              "parentPluginId": "ruleRegistry",
              "id": "def-server.RuleRegistryPluginStartContract.getRacClientWithRequest.$1",
              "type": "Object",
              "tags": [],
              "label": "req",
              "description": [],
              "signature": [
                {
                  "pluginId": "core",
                  "scope": "server",
                  "docId": "kibCoreHttpPluginApi",
                  "section": "def-server.KibanaRequest",
                  "text": "KibanaRequest"
                },
                "<unknown, unknown, unknown, any>"
              ],
              "path": "x-pack/plugins/rule_registry/server/plugin.ts",
              "deprecated": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginStartContract.alerting",
          "type": "Object",
          "tags": [],
          "label": "alerting",
          "description": [],
          "signature": [
            {
              "pluginId": "alerting",
              "scope": "server",
              "docId": "kibAlertingPluginApi",
              "section": "def-server.PluginStartContract",
              "text": "PluginStartContract"
            }
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.parseTechnicalFields",
        "type": "Function",
        "tags": [],
        "label": "parseTechnicalFields",
        "description": [],
        "signature": [
          "(input: unknown) => OutputOf<",
          "Optional",
          "<{ readonly \"kibana.alert.rule.params\": { readonly type: \"keyword\"; readonly index: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.evaluation.threshold\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.alert.evaluation.value\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.risk_score_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.severity_mapping\": { readonly type: \"object\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }, \"tags\" | \"event.kind\" | \"ecs.version\" | \"event.action\" | \"kibana.alert.action_group\" | \"kibana.alert.duration.us\" | \"kibana.alert.end\" | \"kibana.alert.evaluation.threshold\" | \"kibana.alert.evaluation.value\" | \"kibana.alert.reason\" | \"kibana.alert.risk_score\" | \"kibana.alert.rule.author\" | \"kibana.alert.rule.created_at\" | \"kibana.alert.rule.created_by\" | \"kibana.alert.rule.description\" | \"kibana.alert.rule.enabled\" | \"kibana.alert.rule.from\" | \"kibana.alert.rule.interval\" | \"kibana.alert.rule.license\" | \"kibana.alert.rule.note\" | \"kibana.alert.rule.params\" | \"kibana.alert.rule.references\" | \"kibana.alert.rule.risk_score\" | \"kibana.alert.rule.risk_score_mapping\" | \"kibana.alert.rule.rule_id\" | \"kibana.alert.rule.rule_name_override\" | \"kibana.alert.rule.severity\" | \"kibana.alert.rule.severity_mapping\" | \"kibana.alert.rule.tags\" | \"kibana.alert.rule.to\" | \"kibana.alert.rule.type\" | \"kibana.alert.rule.updated_at\" | \"kibana.alert.rule.updated_by\" | \"kibana.alert.rule.version\" | \"kibana.alert.start\" | \"kibana.alert.severity\" | \"kibana.alert.system_status\" | \"kibana.alert.workflow_reason\" | \"kibana.alert.workflow_status\" | \"kibana.alert.workflow_user\" | \"kibana.version\">>"
        ],
        "path": "x-pack/plugins/rule_registry/common/parse_technical_fields.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.parseTechnicalFields.$1",
            "type": "Unknown",
            "tags": [],
            "label": "input",
            "description": [],
            "signature": [
              "unknown"
            ],
            "path": "x-pack/plugins/rule_registry/common/parse_technical_fields.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}