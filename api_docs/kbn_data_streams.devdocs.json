{
  "id": "@kbn/data-streams",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.DataStreamClient",
        "type": "Class",
        "tags": [],
        "label": "DataStreamClient",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.DataStreamClient",
            "text": "DataStreamClient"
          },
          "<S, SRM> implements ",
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.IDataStreamClient",
            "text": "IDataStreamClient"
          },
          "<S, SRM>"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClient.helpers",
            "type": "Object",
            "tags": [],
            "label": "helpers",
            "description": [],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.DataStreamClient.helpers.getFieldsFromHit",
                "type": "Function",
                "tags": [],
                "label": "getFieldsFromHit",
                "description": [],
                "signature": [
                  "(hit: ",
                  "SearchHit",
                  "<unknown>) => Record<keyof SRM, unknown[]>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "@kbn/data-streams",
                    "id": "def-server.DataStreamClient.helpers.getFieldsFromHit.$1",
                    "type": "Object",
                    "tags": [],
                    "label": "hit",
                    "description": [],
                    "signature": [
                      "SearchHit",
                      "<unknown>"
                    ],
                    "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
                    "deprecated": false,
                    "trackAdoption": false,
                    "isRequired": true
                  }
                ],
                "returnComment": []
              }
            ]
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClient.index",
            "type": "Function",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "(args: ",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.IDataStreamClientIndexRequest",
                "text": "IDataStreamClientIndexRequest"
              },
              "<S>) => Promise<",
              "WriteResponseBase",
              ">"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.DataStreamClient.index.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/data-streams",
                    "scope": "server",
                    "docId": "kibKbnDataStreamsPluginApi",
                    "section": "def-server.IDataStreamClientIndexRequest",
                    "text": "IDataStreamClientIndexRequest"
                  },
                  "<S>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClient.search",
            "type": "Function",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "<Agg extends Record<string, ",
              "AggregationsAggregate",
              "> = {}>(args: ",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.SearchRequestImproved",
                "text": "SearchRequestImproved"
              },
              "<SRM>, transportOpts?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined) => Promise<",
              "SearchResponse",
              "<S, Agg>>"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.DataStreamClient.search.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/data-streams",
                    "scope": "server",
                    "docId": "kibKbnDataStreamsPluginApi",
                    "section": "def-server.SearchRequestImproved",
                    "text": "SearchRequestImproved"
                  },
                  "<SRM>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.DataStreamClient.search.$2",
                "type": "Object",
                "tags": [],
                "label": "transportOpts",
                "description": [],
                "signature": [
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClient.initialize",
            "type": "Function",
            "tags": [],
            "label": "initialize",
            "description": [
              "\nThis function ensures setup has been run before returning an instance of the client.\n"
            ],
            "signature": [
              "<S extends object, SRM extends ",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.BaseSearchRuntimeMappings",
                "text": "BaseSearchRuntimeMappings"
              },
              ">(args: ",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.DataStreamClientArgs",
                "text": "DataStreamClientArgs"
              },
              "<S, SRM>) => Promise<",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.DataStreamClient",
                "text": "DataStreamClient"
              },
              "<S, SRM>>"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.DataStreamClient.initialize.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/data-streams",
                    "scope": "server",
                    "docId": "kibKbnDataStreamsPluginApi",
                    "section": "def-server.DataStreamClientArgs",
                    "text": "DataStreamClientArgs"
                  },
                  "<S, SRM>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.BaseSearchRuntimeMappings",
        "type": "Interface",
        "tags": [],
        "label": "BaseSearchRuntimeMappings",
        "description": [],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.BaseSearchRuntimeMappings.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[objectPath: string]: MappingRuntimeField",
            "description": [],
            "signature": [
              "[objectPath: string]:  ",
              "MappingRuntimeField"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.ClientHelpers",
        "type": "Interface",
        "tags": [],
        "label": "ClientHelpers",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.ClientHelpers",
            "text": "ClientHelpers"
          },
          "<SRM>"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.ClientHelpers.getFieldsFromHit",
            "type": "Function",
            "tags": [],
            "label": "getFieldsFromHit",
            "description": [
              "A helper to get types from your search runtime fields"
            ],
            "signature": [
              "(response: ",
              "SearchHit",
              "<unknown>) => { [key in Exclude<keyof SRM, number | symbol>]: unknown[]; }"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.ClientHelpers.getFieldsFromHit.$1",
                "type": "Object",
                "tags": [],
                "label": "response",
                "description": [],
                "signature": [
                  "SearchHit",
                  "<unknown>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.DataStreamClientArgs",
        "type": "Interface",
        "tags": [],
        "label": "DataStreamClientArgs",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.DataStreamClientArgs",
            "text": "DataStreamClientArgs"
          },
          "<S, SRM>"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClientArgs.dataStreams",
            "type": "Object",
            "tags": [],
            "label": "dataStreams",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.DataStreamDefinition",
                "text": "DataStreamDefinition"
              },
              "<S, SRM>"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClientArgs.elasticsearchClient",
            "type": "Object",
            "tags": [],
            "label": "elasticsearchClient",
            "description": [],
            "signature": [
              "{ create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; helpers: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kStreams]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; asyncSearch: ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; capabilities: { (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; cluster: ",
              "default",
              "; connector: ",
              "default",
              "; count: { (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; eql: ",
              "default",
              "; esql: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; healthReport: { (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "HealthReportResponse",
              ", unknown>>; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; }; ilm: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; indices: ",
              "default",
              "; inference: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; monitoring: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; profiling: ",
              "default",
              "; putScript: { (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; queryRules: ",
              "default",
              "; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchApplication: ",
              "default",
              "; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; security: ",
              "default",
              "; shutdown: ",
              "default",
              "; simulate: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; streams: ",
              "default",
              "; synonyms: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamClientArgs.logger",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.DataStreamDefinition",
        "type": "Interface",
        "tags": [],
        "label": "DataStreamDefinition",
        "description": [
          "\nA definition of a data stream that encompasses the data stream and the index template.\n\nTODO: design/expose definition component templates."
        ],
        "signature": [
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.DataStreamDefinition",
            "text": "DataStreamDefinition"
          },
          "<Schema, SearchRuntimeMappings>"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamDefinition.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamDefinition.searchRuntimeMappings",
            "type": "Uncategorized",
            "tags": [],
            "label": "searchRuntimeMappings",
            "description": [],
            "signature": [
              "SearchRuntimeMappings | undefined"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamDefinition.hidden",
            "type": "CompoundType",
            "tags": [
              "default"
            ],
            "label": "hidden",
            "description": [
              "\nIs this a hidden data stream?"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.DataStreamDefinition.template",
            "type": "CompoundType",
            "tags": [],
            "label": "template",
            "description": [
              "\nThe index template definition for the data stream.\n\nThis template definition corresponds to types from ES:\n - api.IndicesPutIndexTemplateRequest\n - api.IndicesIndexTemplate\n - api.IndicesIndexTemplateSummary"
            ],
            "signature": [
              "Pick<",
              "IndicesIndexTemplateSummary",
              ", \"aliases\"> & { priority?: number | undefined; _meta?: { [key: string]: unknown; } | undefined; mappings?: DataStreamDefinitionMappings<Schema> | undefined; settings?: ",
              "IndicesIndexSettings",
              " | undefined; composedOf?: string[] | undefined; }"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.IDataStreamClient",
        "type": "Interface",
        "tags": [],
        "label": "IDataStreamClient",
        "description": [
          "\nA client for interacting with data streams in Elasticsearch.\n\nFollows the Elasticsearch JS client interface as closely as possible."
        ],
        "signature": [
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.IDataStreamClient",
            "text": "IDataStreamClient"
          },
          "<S, SRM>"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.IDataStreamClient.search",
            "type": "Function",
            "tags": [],
            "label": "search",
            "description": [
              "\nThe Elasticsearch JS client search interface"
            ],
            "signature": [
              "<Agg extends Record<string, ",
              "AggregationsAggregate",
              "> = {}>(req: ",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.SearchRequestImproved",
                "text": "SearchRequestImproved"
              },
              "<SRM>, transportOpts?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined) => Promise<",
              "SearchResponse",
              "<S, Agg>>"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.IDataStreamClient.search.$1",
                "type": "Object",
                "tags": [],
                "label": "req",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/data-streams",
                    "scope": "server",
                    "docId": "kibKbnDataStreamsPluginApi",
                    "section": "def-server.SearchRequestImproved",
                    "text": "SearchRequestImproved"
                  },
                  "<SRM>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.IDataStreamClient.search.$2",
                "type": "Object",
                "tags": [],
                "label": "transportOpts",
                "description": [],
                "signature": [
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.IDataStreamClient.index",
            "type": "Function",
            "tags": [],
            "label": "index",
            "description": [
              "\nThe Elasticsearch JS client index interface."
            ],
            "signature": [
              "(req: ",
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.IDataStreamClientIndexRequest",
                "text": "IDataStreamClientIndexRequest"
              },
              "<S>) => Promise<",
              "WriteResponseBase",
              ">"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/data-streams",
                "id": "def-server.IDataStreamClient.index.$1",
                "type": "Object",
                "tags": [],
                "label": "req",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/data-streams",
                    "scope": "server",
                    "docId": "kibKbnDataStreamsPluginApi",
                    "section": "def-server.IDataStreamClientIndexRequest",
                    "text": "IDataStreamClientIndexRequest"
                  },
                  "<S>"
                ],
                "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.IDataStreamClient.helpers",
            "type": "Object",
            "tags": [],
            "label": "helpers",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/data-streams",
                "scope": "server",
                "docId": "kibKbnDataStreamsPluginApi",
                "section": "def-server.ClientHelpers",
                "text": "ClientHelpers"
              },
              "<SRM>"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.SearchRequestImproved",
        "type": "Interface",
        "tags": [],
        "label": "SearchRequestImproved",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/data-streams",
            "scope": "server",
            "docId": "kibKbnDataStreamsPluginApi",
            "section": "def-server.SearchRequestImproved",
            "text": "SearchRequestImproved"
          },
          "<SearchRuntimeMappings> extends Omit<",
          "SearchRequest",
          ", \"index\" | \"fields\">"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/data-streams",
            "id": "def-server.SearchRequestImproved.fields",
            "type": "Array",
            "tags": [],
            "label": "fields",
            "description": [],
            "signature": [
              "Exclude<keyof SearchRuntimeMappings, number | symbol>[] | undefined"
            ],
            "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.BooleanMapping",
        "type": "Type",
        "tags": [],
        "label": "BooleanMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingBooleanProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.DateMapping",
        "type": "Type",
        "tags": [],
        "label": "DateMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingDateProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.DateNanosMapping",
        "type": "Type",
        "tags": [],
        "label": "DateNanosMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingDateNanosProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.FlattenedMapping",
        "type": "Type",
        "tags": [],
        "label": "FlattenedMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingFlattenedProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.IDataStreamClientIndexRequest",
        "type": "Type",
        "tags": [],
        "label": "IDataStreamClientIndexRequest",
        "description": [],
        "signature": [
          "{ id?: string | undefined; version?: number | undefined; timeout?: ",
          "Duration",
          " | undefined; routing?: string | undefined; body?: string | ({ [key: string]: any; } & { id?: undefined; index?: undefined; if_primary_term?: undefined; if_seq_no?: undefined; include_source_on_error?: undefined; op_type?: undefined; pipeline?: undefined; refresh?: undefined; routing?: undefined; timeout?: undefined; version?: undefined; version_type?: undefined; wait_for_active_shards?: undefined; require_alias?: undefined; require_data_stream?: undefined; document?: undefined; }) | undefined; querystring?: ({ [key: string]: any; } & { id?: undefined; index?: undefined; if_primary_term?: undefined; if_seq_no?: undefined; include_source_on_error?: undefined; op_type?: undefined; pipeline?: undefined; refresh?: undefined; routing?: undefined; timeout?: undefined; version?: undefined; version_type?: undefined; wait_for_active_shards?: undefined; require_alias?: undefined; require_data_stream?: undefined; document?: undefined; }) | undefined; error_trace?: boolean | undefined; filter_path?: string | string[] | undefined; human?: boolean | undefined; pretty?: boolean | undefined; document?: S | undefined; pipeline?: string | undefined; refresh?: ",
          "Refresh",
          " | undefined; wait_for_active_shards?: ",
          "WaitForActiveShards",
          " | undefined; include_source_on_error?: boolean | undefined; require_alias?: boolean | undefined; require_data_stream?: boolean | undefined; if_primary_term?: number | undefined; if_seq_no?: number | undefined; op_type?: ",
          "OpType",
          " | undefined; version_type?: ",
          "VersionType",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.IntegerMapping",
        "type": "Type",
        "tags": [],
        "label": "IntegerMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingIntegerNumberProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.KeywordMapping",
        "type": "Type",
        "tags": [],
        "label": "KeywordMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingKeywordProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.LongMapping",
        "type": "Type",
        "tags": [],
        "label": "LongMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingLongNumberProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.ShortMapping",
        "type": "Type",
        "tags": [],
        "label": "ShortMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingShortNumberProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.Strict",
        "type": "Type",
        "tags": [],
        "label": "Strict",
        "description": [],
        "signature": [
          "Omit<P, \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/data-streams",
        "id": "def-server.TextMapping",
        "type": "Type",
        "tags": [],
        "label": "TextMapping",
        "description": [],
        "signature": [
          "Omit<",
          "MappingTextProperty",
          ", \"properties\"> & { dynamic?: ",
          "StrictDynamic",
          " | undefined; }"
        ],
        "path": "src/platform/packages/private/kbn-data-streams/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}