{
  "id": "@kbn/securitysolution-es-utils",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.BadRequestError",
        "type": "Class",
        "tags": [],
        "label": "BadRequestError",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/securitysolution-es-utils",
            "scope": "server",
            "docId": "kibKbnSecuritysolutionEsUtilsPluginApi",
            "section": "def-server.BadRequestError",
            "text": "BadRequestError"
          },
          " extends Error"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/bad_request_error/index.ts",
        "deprecated": false,
        "children": [],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.createBootstrapIndex",
        "type": "Function",
        "tags": [],
        "label": "createBootstrapIndex",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/create_boostrap_index/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.createBootstrapIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/create_boostrap_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.createBootstrapIndex.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/create_boostrap_index/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.decodeVersion",
        "type": "Function",
        "tags": [],
        "label": "decodeVersion",
        "description": [],
        "signature": [
          "(version: string | undefined) => {} | { ifSeqNo: number; ifPrimaryTerm: number; }"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/decode_version/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.decodeVersion.$1",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/decode_version/index.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.deleteAllIndex",
        "type": "Function",
        "tags": [],
        "label": "deleteAllIndex",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, pattern: string, maxAttempts?: number) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteAllIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteAllIndex.$2",
            "type": "string",
            "tags": [],
            "label": "pattern",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteAllIndex.$3",
            "type": "number",
            "tags": [],
            "label": "maxAttempts",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.deletePolicy",
        "type": "Function",
        "tags": [],
        "label": "deletePolicy",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, policy: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/delete_policy/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deletePolicy.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deletePolicy.$2",
            "type": "string",
            "tags": [],
            "label": "policy",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.deleteTemplate",
        "type": "Function",
        "tags": [],
        "label": "deleteTemplate",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/delete_template/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteTemplate.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_template/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteTemplate.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_template/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.encodeHitVersion",
        "type": "Function",
        "tags": [],
        "label": "encodeHitVersion",
        "description": [
          "\nVery similar to the encode_hit_version from saved object system from here:\nsrc/core/server/saved_objects/version/encode_hit_version.ts\n\nwith the most notably change is that it doesn't do any throws but rather just returns undefined\nif _seq_no or _primary_term does not exist."
        ],
        "signature": [
          "<T>(hit: T) => string | undefined"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/encode_hit_version/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.encodeHitVersion.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "hit",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/encode_hit_version/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getIndexAliases",
        "type": "Function",
        "tags": [],
        "label": "getIndexAliases",
        "description": [
          "\nRetrieves all index aliases for a given alias name\n"
        ],
        "signature": [
          "({ esClient, alias, }: { esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">; alias: string; }) => Promise<IndexAlias[]>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexAliases.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esClient,\n  alias,\n}",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexAliases.$1.esClient",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  "{ monitoring: { bulk<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; security: { authenticate<TContext = unknown>(params?: ",
                  "SecurityAuthenticateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityAuthenticateResponse",
                  ", TContext>>; changePassword<TContext = unknown>(params?: ",
                  "SecurityChangePasswordRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityChangePasswordResponse",
                  ", TContext>>; clearApiKeyCache<TContext = unknown>(params?: ",
                  "SecurityClearApiKeyCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearApiKeyCacheResponse",
                  ", TContext>>; clearCachedPrivileges<TContext = unknown>(params: ",
                  "SecurityClearCachedPrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedPrivilegesResponse",
                  ", TContext>>; clearCachedRealms<TContext = unknown>(params: ",
                  "SecurityClearCachedRealmsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedRealmsResponse",
                  ", TContext>>; clearCachedRoles<TContext = unknown>(params: ",
                  "SecurityClearCachedRolesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedRolesResponse",
                  ", TContext>>; clearCachedServiceTokens<TContext = unknown>(params: ",
                  "SecurityClearCachedServiceTokensRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedServiceTokensResponse",
                  ", TContext>>; createApiKey<TContext = unknown>(params?: ",
                  "SecurityCreateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityCreateApiKeyResponse",
                  ", TContext>>; createServiceToken<TContext = unknown>(params: ",
                  "SecurityCreateServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityCreateServiceTokenResponse",
                  ", TContext>>; deletePrivileges<TContext = unknown>(params: ",
                  "SecurityDeletePrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeletePrivilegesResponse",
                  ", TContext>>; deleteRole<TContext = unknown>(params: ",
                  "SecurityDeleteRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteRoleResponse",
                  ", TContext>>; deleteRoleMapping<TContext = unknown>(params: ",
                  "SecurityDeleteRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteRoleMappingResponse",
                  ", TContext>>; deleteServiceToken<TContext = unknown>(params: ",
                  "SecurityDeleteServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteServiceTokenResponse",
                  ", TContext>>; deleteUser<TContext = unknown>(params: ",
                  "SecurityDeleteUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteUserResponse",
                  ", TContext>>; disableUser<TContext = unknown>(params: ",
                  "SecurityDisableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDisableUserResponse",
                  ", TContext>>; enableUser<TContext = unknown>(params: ",
                  "SecurityEnableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityEnableUserResponse",
                  ", TContext>>; getApiKey<TContext = unknown>(params?: ",
                  "SecurityGetApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetApiKeyResponse",
                  ", TContext>>; getBuiltinPrivileges<TContext = unknown>(params?: ",
                  "SecurityGetBuiltinPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetBuiltinPrivilegesResponse",
                  ", TContext>>; getPrivileges<TContext = unknown>(params?: ",
                  "SecurityGetPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetPrivilegesResponse",
                  ", TContext>>; getRole<TContext = unknown>(params?: ",
                  "SecurityGetRoleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetRoleResponse",
                  ", TContext>>; getRoleMapping<TContext = unknown>(params?: ",
                  "SecurityGetRoleMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetRoleMappingResponse",
                  ", TContext>>; getServiceAccounts<TContext = unknown>(params?: ",
                  "SecurityGetServiceAccountsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetServiceAccountsResponse",
                  ", TContext>>; getServiceCredentials<TContext = unknown>(params: ",
                  "SecurityGetServiceCredentialsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetServiceCredentialsResponse",
                  ", TContext>>; getToken<TContext = unknown>(params?: ",
                  "SecurityGetTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetTokenResponse",
                  ", TContext>>; getUser<TContext = unknown>(params?: ",
                  "SecurityGetUserRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetUserResponse",
                  ", TContext>>; getUserPrivileges<TContext = unknown>(params?: ",
                  "SecurityGetUserPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetUserPrivilegesResponse",
                  ", TContext>>; grantApiKey<TContext = unknown>(params?: ",
                  "SecurityGrantApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGrantApiKeyResponse",
                  ", TContext>>; hasPrivileges<TContext = unknown>(params?: ",
                  "SecurityHasPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityHasPrivilegesResponse",
                  ", TContext>>; invalidateApiKey<TContext = unknown>(params?: ",
                  "SecurityInvalidateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityInvalidateApiKeyResponse",
                  ", TContext>>; invalidateToken<TContext = unknown>(params?: ",
                  "SecurityInvalidateTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityInvalidateTokenResponse",
                  ", TContext>>; putPrivileges<TContext = unknown>(params?: ",
                  "SecurityPutPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutPrivilegesResponse",
                  ", TContext>>; putRole<TContext = unknown>(params: ",
                  "SecurityPutRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutRoleResponse",
                  ", TContext>>; putRoleMapping<TContext = unknown>(params: ",
                  "SecurityPutRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutRoleMappingResponse",
                  ", TContext>>; putUser<TContext = unknown>(params: ",
                  "SecurityPutUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutUserResponse",
                  ", TContext>>; samlAuthenticate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlCompleteLogout<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlInvalidate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlLogout<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlPrepareAuthentication<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlServiceProviderMetadata<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; create: <TDocument = unknown, TContext = unknown>(params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CreateResponse",
                  ", TContext>>; index: <TDocument = unknown, TContext = unknown>(params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndexResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteResponse",
                  ", TContext>>; get: <TDocument = unknown, TContext = unknown>(params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetResponse",
                  "<TDocument>, TContext>>; update: <TDocumentR = unknown, TDocument = unknown, TPartialDocument = unknown, TContext = unknown>(params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, TContext>>; closePointInTime: <TContext = unknown>(params?: ",
                  "ClosePointInTimeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClosePointInTimeResponse",
                  ", TContext>>; search: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchResponse",
                  "<TDocument>, TContext>>; transform: { deleteTransform<TContext = unknown>(params: ",
                  "TransformDeleteTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformDeleteTransformResponse",
                  ", TContext>>; getTransform<TContext = unknown>(params?: ",
                  "TransformGetTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformGetTransformResponse",
                  ", TContext>>; getTransformStats<TContext = unknown>(params: ",
                  "TransformGetTransformStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformGetTransformStatsResponse",
                  ", TContext>>; previewTransform<TTransform = unknown, TContext = unknown>(params?: ",
                  "TransformPreviewTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformPreviewTransformResponse",
                  "<TTransform>, TContext>>; putTransform<TContext = unknown>(params: ",
                  "TransformPutTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformPutTransformResponse",
                  ", TContext>>; startTransform<TContext = unknown>(params: ",
                  "TransformStartTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformStartTransformResponse",
                  ", TContext>>; stopTransform<TContext = unknown>(params: ",
                  "TransformStopTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformStopTransformResponse",
                  ", TContext>>; updateTransform<TContext = unknown>(params?: ",
                  "TransformUpdateTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformUpdateTransformResponse",
                  ", TContext>>; }; eql: { delete<TContext = unknown>(params: ",
                  "EqlDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlDeleteResponse",
                  ", TContext>>; get<TEvent = unknown, TContext = unknown>(params: ",
                  "EqlGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlGetResponse",
                  "<TEvent>, TContext>>; getStatus<TContext = unknown>(params: ",
                  "EqlGetStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlGetStatusResponse",
                  ", TContext>>; search<TEvent = unknown, TContext = unknown>(params: ",
                  "EqlSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlSearchResponse",
                  "<TEvent>, TContext>>; }; helpers: ",
                  "default",
                  "; emit: (event: string | symbol, ...args: any[]) => boolean; on: { (event: \"request\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"response\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"sniff\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"resurrect\", listener: (err: null, meta: ",
                  "ResurrectEvent",
                  ") => void): ",
                  "KibanaClient",
                  "; }; once: { (event: \"request\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"response\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"sniff\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"resurrect\", listener: (err: null, meta: ",
                  "ResurrectEvent",
                  ") => void): ",
                  "KibanaClient",
                  "; }; off: (event: string | symbol, listener: (...args: any[]) => void) => ",
                  "KibanaClient",
                  "; asyncSearch: { delete<TContext = unknown>(params: ",
                  "AsyncSearchDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchDeleteResponse",
                  ", TContext>>; get<TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchGetResponse",
                  "<TDocument>, TContext>>; status<TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchStatusResponse",
                  "<TDocument>, TContext>>; submit<TDocument = unknown, TContext = unknown>(params?: ",
                  "AsyncSearchSubmitRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchSubmitResponse",
                  "<TDocument>, TContext>>; }; autoscaling: { deleteAutoscalingPolicy<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAutoscalingCapacity<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAutoscalingPolicy<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putAutoscalingPolicy<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; bulk: <TSource = unknown, TContext = unknown>(params: ",
                  "BulkRequest",
                  "<TSource>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "BulkResponse",
                  ", TContext>>; cat: { aliases<TContext = unknown>(params?: ",
                  "CatAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatAliasesResponse",
                  ", TContext>>; allocation<TContext = unknown>(params?: ",
                  "CatAllocationRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatAllocationResponse",
                  ", TContext>>; count<TContext = unknown>(params?: ",
                  "CatCountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatCountResponse",
                  ", TContext>>; fielddata<TContext = unknown>(params?: ",
                  "CatFielddataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatFielddataResponse",
                  ", TContext>>; health<TContext = unknown>(params?: ",
                  "CatHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatHealthResponse",
                  ", TContext>>; help<TContext = unknown>(params?: ",
                  "CatHelpRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatHelpResponse",
                  ", TContext>>; indices<TContext = unknown>(params?: ",
                  "CatIndicesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatIndicesResponse",
                  ", TContext>>; master<TContext = unknown>(params?: ",
                  "CatMasterRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatMasterResponse",
                  ", TContext>>; mlDataFrameAnalytics<TContext = unknown>(params?: ",
                  "CatDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatDataFrameAnalyticsResponse",
                  ", TContext>>; mlDatafeeds<TContext = unknown>(params?: ",
                  "CatDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatDatafeedsResponse",
                  ", TContext>>; mlJobs<TContext = unknown>(params?: ",
                  "CatJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatJobsResponse",
                  ", TContext>>; mlTrainedModels<TContext = unknown>(params?: ",
                  "CatTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTrainedModelsResponse",
                  ", TContext>>; nodeattrs<TContext = unknown>(params?: ",
                  "CatNodeAttributesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatNodeAttributesResponse",
                  ", TContext>>; nodes<TContext = unknown>(params?: ",
                  "CatNodesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatNodesResponse",
                  ", TContext>>; pendingTasks<TContext = unknown>(params?: ",
                  "CatPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatPendingTasksResponse",
                  ", TContext>>; plugins<TContext = unknown>(params?: ",
                  "CatPluginsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatPluginsResponse",
                  ", TContext>>; recovery<TContext = unknown>(params?: ",
                  "CatRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatRecoveryResponse",
                  ", TContext>>; repositories<TContext = unknown>(params?: ",
                  "CatRepositoriesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatRepositoriesResponse",
                  ", TContext>>; segments<TContext = unknown>(params?: ",
                  "CatSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatSegmentsResponse",
                  ", TContext>>; shards<TContext = unknown>(params?: ",
                  "CatShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatShardsResponse",
                  ", TContext>>; snapshots<TContext = unknown>(params?: ",
                  "CatSnapshotsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatSnapshotsResponse",
                  ", TContext>>; tasks<TContext = unknown>(params?: ",
                  "CatTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTasksResponse",
                  ", TContext>>; templates<TContext = unknown>(params?: ",
                  "CatTemplatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTemplatesResponse",
                  ", TContext>>; threadPool<TContext = unknown>(params?: ",
                  "CatThreadPoolRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatThreadPoolResponse",
                  ", TContext>>; transforms<TContext = unknown>(params?: ",
                  "CatTransformsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTransformsResponse",
                  ", TContext>>; }; ccr: { deleteAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrDeleteAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrDeleteAutoFollowPatternResponse",
                  ", TContext>>; follow<TContext = unknown>(params: ",
                  "CcrCreateFollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrCreateFollowIndexResponse",
                  ", TContext>>; followInfo<TContext = unknown>(params: ",
                  "CcrFollowInfoRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrFollowInfoResponse",
                  ", TContext>>; followStats<TContext = unknown>(params: ",
                  "CcrFollowIndexStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrFollowIndexStatsResponse",
                  ", TContext>>; forgetFollower<TContext = unknown>(params: ",
                  "CcrForgetFollowerIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrForgetFollowerIndexResponse",
                  ", TContext>>; getAutoFollowPattern<TContext = unknown>(params?: ",
                  "CcrGetAutoFollowPatternRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrGetAutoFollowPatternResponse",
                  ", TContext>>; pauseAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrPauseAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrPauseAutoFollowPatternResponse",
                  ", TContext>>; pauseFollow<TContext = unknown>(params: ",
                  "CcrPauseFollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrPauseFollowIndexResponse",
                  ", TContext>>; putAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrPutAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrPutAutoFollowPatternResponse",
                  ", TContext>>; resumeAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrResumeAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrResumeAutoFollowPatternResponse",
                  ", TContext>>; resumeFollow<TContext = unknown>(params: ",
                  "CcrResumeFollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrResumeFollowIndexResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "CcrStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrStatsResponse",
                  ", TContext>>; unfollow<TContext = unknown>(params: ",
                  "CcrUnfollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrUnfollowIndexResponse",
                  ", TContext>>; }; clearScroll: <TContext = unknown>(params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClearScrollResponse",
                  ", TContext>>; cluster: { allocationExplain<TContext = unknown>(params?: ",
                  "ClusterAllocationExplainRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterAllocationExplainResponse",
                  ", TContext>>; deleteComponentTemplate<TContext = unknown>(params: ",
                  "ClusterDeleteComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterDeleteComponentTemplateResponse",
                  ", TContext>>; deleteVotingConfigExclusions<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; existsComponentTemplate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getComponentTemplate<TContext = unknown>(params?: ",
                  "ClusterGetComponentTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterGetComponentTemplateResponse",
                  ", TContext>>; getSettings<TContext = unknown>(params?: ",
                  "ClusterGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterGetSettingsResponse",
                  ", TContext>>; health<TContext = unknown>(params?: ",
                  "ClusterHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterHealthResponse",
                  ", TContext>>; pendingTasks<TContext = unknown>(params?: ",
                  "ClusterPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterPendingTasksResponse",
                  ", TContext>>; postVotingConfigExclusions<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putComponentTemplate<TContext = unknown>(params: ",
                  "ClusterPutComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterPutComponentTemplateResponse",
                  ", TContext>>; putSettings<TContext = unknown>(params?: ",
                  "ClusterPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterPutSettingsResponse",
                  ", TContext>>; remoteInfo<TContext = unknown>(params?: ",
                  "ClusterRemoteInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterRemoteInfoResponse",
                  ", TContext>>; reroute<TContext = unknown>(params?: ",
                  "ClusterRerouteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterRerouteResponse",
                  ", TContext>>; state<TContext = unknown>(params?: ",
                  "ClusterStateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterStateResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "ClusterStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterStatsResponse",
                  ", TContext>>; }; count: <TContext = unknown>(params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CountResponse",
                  ", TContext>>; danglingIndices: { deleteDanglingIndex<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; importDanglingIndex<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; listDanglingIndices<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; dataFrameTransformDeprecated: { deleteTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getTransformStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; previewTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; startTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; stopTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; updateTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; deleteByQuery: <TContext = unknown>(params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteByQueryResponse",
                  ", TContext>>; deleteByQueryRethrottle: <TContext = unknown>(params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteByQueryRethrottleResponse",
                  ", TContext>>; deleteScript: <TContext = unknown>(params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteScriptResponse",
                  ", TContext>>; enrich: { deletePolicy<TContext = unknown>(params: ",
                  "EnrichDeletePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichDeletePolicyResponse",
                  ", TContext>>; executePolicy<TContext = unknown>(params: ",
                  "EnrichExecutePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichExecutePolicyResponse",
                  ", TContext>>; getPolicy<TContext = unknown>(params?: ",
                  "EnrichGetPolicyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichGetPolicyResponse",
                  ", TContext>>; putPolicy<TContext = unknown>(params: ",
                  "EnrichPutPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichPutPolicyResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "EnrichStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichStatsResponse",
                  ", TContext>>; }; exists: <TContext = unknown>(params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsSource: <TContext = unknown>(params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; explain: <TDocument = unknown, TContext = unknown>(params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, TContext>>; features: { getFeatures<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; resetFeatures<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; fieldCaps: <TContext = unknown>(params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "FieldCapsResponse",
                  ", TContext>>; fleet: { globalCheckpoints<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; getScript: <TContext = unknown>(params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetScriptResponse",
                  ", TContext>>; getScriptContext: <TContext = unknown>(params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetScriptContextResponse",
                  ", TContext>>; getScriptLanguages: <TContext = unknown>(params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", TContext>>; getSource: <TDocument = unknown, TContext = unknown>(params?: ",
                  "GetSourceRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<TDocument, TContext>>; graph: { explore<TContext = unknown>(params: ",
                  "GraphExploreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GraphExploreResponse",
                  ", TContext>>; }; ilm: { deleteLifecycle<TContext = unknown>(params: ",
                  "IlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmDeleteLifecycleResponse",
                  ", TContext>>; explainLifecycle<TContext = unknown>(params: ",
                  "IlmExplainLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmExplainLifecycleResponse",
                  ", TContext>>; getLifecycle<TContext = unknown>(params?: ",
                  "IlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmGetLifecycleResponse",
                  ", TContext>>; getStatus<TContext = unknown>(params?: ",
                  "IlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmGetStatusResponse",
                  ", TContext>>; migrateToDataTiers<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; moveToStep<TContext = unknown>(params: ",
                  "IlmMoveToStepRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmMoveToStepResponse",
                  ", TContext>>; putLifecycle<TContext = unknown>(params?: ",
                  "IlmPutLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmPutLifecycleResponse",
                  ", TContext>>; removePolicy<TContext = unknown>(params: ",
                  "IlmRemovePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmRemovePolicyResponse",
                  ", TContext>>; retry<TContext = unknown>(params: ",
                  "IlmRetryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmRetryResponse",
                  ", TContext>>; start<TContext = unknown>(params?: ",
                  "IlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmStartResponse",
                  ", TContext>>; stop<TContext = unknown>(params?: ",
                  "IlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmStopResponse",
                  ", TContext>>; }; indices: { addBlock<TContext = unknown>(params: ",
                  "IndicesAddBlockRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesAddBlockResponse",
                  ", TContext>>; analyze<TContext = unknown>(params?: ",
                  "IndicesAnalyzeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesAnalyzeResponse",
                  ", TContext>>; clearCache<TContext = unknown>(params?: ",
                  "IndicesClearCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesClearCacheResponse",
                  ", TContext>>; clone<TContext = unknown>(params: ",
                  "IndicesCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCloneResponse",
                  ", TContext>>; close<TContext = unknown>(params: ",
                  "IndicesCloseRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCloseResponse",
                  ", TContext>>; create<TContext = unknown>(params: ",
                  "IndicesCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCreateResponse",
                  ", TContext>>; createDataStream<TContext = unknown>(params: ",
                  "IndicesCreateDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCreateDataStreamResponse",
                  ", TContext>>; dataStreamsStats<TContext = unknown>(params?: ",
                  "IndicesDataStreamsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDataStreamsStatsResponse",
                  ", TContext>>; delete<TContext = unknown>(params: ",
                  "IndicesDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteResponse",
                  ", TContext>>; deleteAlias<TContext = unknown>(params: ",
                  "IndicesDeleteAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteAliasResponse",
                  ", TContext>>; deleteDataStream<TContext = unknown>(params: ",
                  "IndicesDeleteDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteDataStreamResponse",
                  ", TContext>>; deleteIndexTemplate<TContext = unknown>(params: ",
                  "IndicesDeleteIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteIndexTemplateResponse",
                  ", TContext>>; deleteTemplate<TContext = unknown>(params: ",
                  "IndicesDeleteTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteTemplateResponse",
                  ", TContext>>; diskUsage<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; exists<TContext = unknown>(params: ",
                  "IndicesExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsAlias<TContext = unknown>(params: ",
                  "IndicesExistsAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsIndexTemplate<TContext = unknown>(params: ",
                  "IndicesExistsIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsTemplate<TContext = unknown>(params: ",
                  "IndicesExistsTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsType<TContext = unknown>(params: ",
                  "IndicesExistsTypeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; fieldUsageStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; flush<TContext = unknown>(params?: ",
                  "IndicesFlushRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesFlushResponse",
                  ", TContext>>; flushSynced<TContext = unknown>(params?: ",
                  "IndicesFlushSyncedRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesFlushSyncedResponse",
                  ", TContext>>; forcemerge<TContext = unknown>(params?: ",
                  "IndicesForcemergeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesForcemergeResponse",
                  ", TContext>>; freeze<TContext = unknown>(params: ",
                  "IndicesFreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesFreezeResponse",
                  ", TContext>>; get<TContext = unknown>(params: ",
                  "IndicesGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetResponse",
                  ", TContext>>; getAlias<TContext = unknown>(params?: ",
                  "IndicesGetAliasRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetAliasResponse",
                  ", TContext>>; getDataStream<TContext = unknown>(params?: ",
                  "IndicesGetDataStreamRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetDataStreamResponse",
                  ", TContext>>; getFieldMapping<TContext = unknown>(params: ",
                  "IndicesGetFieldMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetFieldMappingResponse",
                  ", TContext>>; getIndexTemplate<TContext = unknown>(params?: ",
                  "IndicesGetIndexTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetIndexTemplateResponse",
                  ", TContext>>; getMapping<TContext = unknown>(params?: ",
                  "IndicesGetMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetMappingResponse",
                  ", TContext>>; getSettings<TContext = unknown>(params?: ",
                  "IndicesGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetSettingsResponse",
                  ", TContext>>; getTemplate<TContext = unknown>(params?: ",
                  "IndicesGetTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetTemplateResponse",
                  ", TContext>>; getUpgrade<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; migrateToDataStream<TContext = unknown>(params: ",
                  "IndicesMigrateToDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesMigrateToDataStreamResponse",
                  ", TContext>>; open<TContext = unknown>(params: ",
                  "IndicesOpenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesOpenResponse",
                  ", TContext>>; promoteDataStream<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putAlias<TContext = unknown>(params: ",
                  "IndicesPutAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutAliasResponse",
                  ", TContext>>; putIndexTemplate<TContext = unknown>(params: ",
                  "IndicesPutIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutIndexTemplateResponse",
                  ", TContext>>; putMapping<TContext = unknown>(params?: ",
                  "IndicesPutMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutMappingResponse",
                  ", TContext>>; putSettings<TContext = unknown>(params?: ",
                  "IndicesPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutSettingsResponse",
                  ", TContext>>; putTemplate<TContext = unknown>(params: ",
                  "IndicesPutTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutTemplateResponse",
                  ", TContext>>; recovery<TContext = unknown>(params?: ",
                  "IndicesRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesRecoveryResponse",
                  ", TContext>>; refresh<TContext = unknown>(params?: ",
                  "IndicesRefreshRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesRefreshResponse",
                  ", TContext>>; reloadSearchAnalyzers<TContext = unknown>(params: ",
                  "IndicesReloadSearchAnalyzersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesReloadSearchAnalyzersResponse",
                  ", TContext>>; resolveIndex<TContext = unknown>(params: ",
                  "IndicesResolveIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesResolveIndexResponse",
                  ", TContext>>; rollover<TContext = unknown>(params: ",
                  "IndicesRolloverRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesRolloverResponse",
                  ", TContext>>; segments<TContext = unknown>(params?: ",
                  "IndicesSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesSegmentsResponse",
                  ", TContext>>; shardStores<TContext = unknown>(params?: ",
                  "IndicesShardStoresRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesShardStoresResponse",
                  ", TContext>>; shrink<TContext = unknown>(params: ",
                  "IndicesShrinkRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesShrinkResponse",
                  ", TContext>>; simulateIndexTemplate<TContext = unknown>(params?: ",
                  "IndicesSimulateIndexTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesSimulateIndexTemplateResponse",
                  ", TContext>>; simulateTemplate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; split<TContext = unknown>(params: ",
                  "IndicesSplitRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesSplitResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "IndicesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesStatsResponse",
                  ", TContext>>; unfreeze<TContext = unknown>(params: ",
                  "IndicesUnfreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesUnfreezeResponse",
                  ", TContext>>; updateAliases<TContext = unknown>(params?: ",
                  "IndicesUpdateAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesUpdateAliasesResponse",
                  ", TContext>>; upgrade<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; validateQuery<TContext = unknown>(params?: ",
                  "IndicesValidateQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesValidateQueryResponse",
                  ", TContext>>; }; info: <TContext = unknown>(params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "InfoResponse",
                  ", TContext>>; ingest: { deletePipeline<TContext = unknown>(params: ",
                  "IngestDeletePipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestDeletePipelineResponse",
                  ", TContext>>; geoIpStats<TContext = unknown>(params?: ",
                  "IngestGeoIpStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestGeoIpStatsResponse",
                  ", TContext>>; getPipeline<TContext = unknown>(params?: ",
                  "IngestGetPipelineRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestGetPipelineResponse",
                  ", TContext>>; processorGrok<TContext = unknown>(params?: ",
                  "IngestProcessorGrokRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestProcessorGrokResponse",
                  ", TContext>>; putPipeline<TContext = unknown>(params: ",
                  "IngestPutPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestPutPipelineResponse",
                  ", TContext>>; simulate<TContext = unknown>(params?: ",
                  "IngestSimulatePipelineRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestSimulatePipelineResponse",
                  ", TContext>>; }; license: { delete<TContext = unknown>(params?: ",
                  "LicenseDeleteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseDeleteResponse",
                  ", TContext>>; get<TContext = unknown>(params?: ",
                  "LicenseGetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseGetResponse",
                  ", TContext>>; getBasicStatus<TContext = unknown>(params?: ",
                  "LicenseGetBasicStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseGetBasicStatusResponse",
                  ", TContext>>; getTrialStatus<TContext = unknown>(params?: ",
                  "LicenseGetTrialStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseGetTrialStatusResponse",
                  ", TContext>>; post<TContext = unknown>(params?: ",
                  "LicensePostRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicensePostResponse",
                  ", TContext>>; postStartBasic<TContext = unknown>(params?: ",
                  "LicensePostStartBasicRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicensePostStartBasicResponse",
                  ", TContext>>; postStartTrial<TContext = unknown>(params?: ",
                  "LicensePostStartTrialRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicensePostStartTrialResponse",
                  ", TContext>>; }; logstash: { deletePipeline<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getPipeline<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putPipeline<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; mget: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MgetResponse",
                  "<TDocument>, TContext>>; migration: { deprecations<TContext = unknown>(params?: ",
                  "MigrationDeprecationInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MigrationDeprecationInfoResponse",
                  ", TContext>>; }; ml: { closeJob<TContext = unknown>(params: ",
                  "MlCloseJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlCloseJobResponse",
                  ", TContext>>; deleteCalendar<TContext = unknown>(params: ",
                  "MlDeleteCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteCalendarResponse",
                  ", TContext>>; deleteCalendarEvent<TContext = unknown>(params: ",
                  "MlDeleteCalendarEventRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteCalendarEventResponse",
                  ", TContext>>; deleteCalendarJob<TContext = unknown>(params: ",
                  "MlDeleteCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteCalendarJobResponse",
                  ", TContext>>; deleteDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlDeleteDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteDataFrameAnalyticsResponse",
                  ", TContext>>; deleteDatafeed<TContext = unknown>(params: ",
                  "MlDeleteDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteDatafeedResponse",
                  ", TContext>>; deleteExpiredData<TContext = unknown>(params?: ",
                  "MlDeleteExpiredDataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteExpiredDataResponse",
                  ", TContext>>; deleteFilter<TContext = unknown>(params: ",
                  "MlDeleteFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteFilterResponse",
                  ", TContext>>; deleteForecast<TContext = unknown>(params: ",
                  "MlDeleteForecastRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteForecastResponse",
                  ", TContext>>; deleteJob<TContext = unknown>(params: ",
                  "MlDeleteJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteJobResponse",
                  ", TContext>>; deleteModelSnapshot<TContext = unknown>(params: ",
                  "MlDeleteModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteModelSnapshotResponse",
                  ", TContext>>; deleteTrainedModel<TContext = unknown>(params: ",
                  "MlDeleteTrainedModelRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteTrainedModelResponse",
                  ", TContext>>; deleteTrainedModelAlias<TContext = unknown>(params: ",
                  "MlDeleteTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteTrainedModelAliasResponse",
                  ", TContext>>; estimateModelMemory<TContext = unknown>(params?: ",
                  "MlEstimateModelMemoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlEstimateModelMemoryResponse",
                  ", TContext>>; evaluateDataFrame<TContext = unknown>(params?: ",
                  "MlEvaluateDataFrameRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlEvaluateDataFrameResponse",
                  ", TContext>>; explainDataFrameAnalytics<TContext = unknown>(params?: ",
                  "MlExplainDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlExplainDataFrameAnalyticsResponse",
                  ", TContext>>; findFileStructure<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; flushJob<TContext = unknown>(params: ",
                  "MlFlushJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlFlushJobResponse",
                  ", TContext>>; forecast<TContext = unknown>(params: ",
                  "MlForecastJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlForecastJobResponse",
                  ", TContext>>; getBuckets<TContext = unknown>(params: ",
                  "MlGetBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetBucketsResponse",
                  ", TContext>>; getCalendarEvents<TContext = unknown>(params: ",
                  "MlGetCalendarEventsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetCalendarEventsResponse",
                  ", TContext>>; getCalendars<TContext = unknown>(params?: ",
                  "MlGetCalendarsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetCalendarsResponse",
                  ", TContext>>; getCategories<TContext = unknown>(params: ",
                  "MlGetCategoriesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetCategoriesResponse",
                  ", TContext>>; getDataFrameAnalytics<TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDataFrameAnalyticsResponse",
                  ", TContext>>; getDataFrameAnalyticsStats<TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDataFrameAnalyticsStatsResponse",
                  ", TContext>>; getDatafeedStats<TContext = unknown>(params?: ",
                  "MlGetDatafeedStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDatafeedStatsResponse",
                  ", TContext>>; getDatafeeds<TContext = unknown>(params?: ",
                  "MlGetDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDatafeedsResponse",
                  ", TContext>>; getFilters<TContext = unknown>(params?: ",
                  "MlGetFiltersRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetFiltersResponse",
                  ", TContext>>; getInfluencers<TContext = unknown>(params: ",
                  "MlGetInfluencersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetInfluencersResponse",
                  ", TContext>>; getJobStats<TContext = unknown>(params?: ",
                  "MlGetJobStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetJobStatsResponse",
                  ", TContext>>; getJobs<TContext = unknown>(params?: ",
                  "MlGetJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetJobsResponse",
                  ", TContext>>; getModelSnapshots<TContext = unknown>(params: ",
                  "MlGetModelSnapshotsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetModelSnapshotsResponse",
                  ", TContext>>; getOverallBuckets<TContext = unknown>(params: ",
                  "MlGetOverallBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetOverallBucketsResponse",
                  ", TContext>>; getRecords<TContext = unknown>(params: ",
                  "MlGetAnomalyRecordsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetAnomalyRecordsResponse",
                  ", TContext>>; getTrainedModels<TContext = unknown>(params?: ",
                  "MlGetTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetTrainedModelsResponse",
                  ", TContext>>; getTrainedModelsStats<TContext = unknown>(params?: ",
                  "MlGetTrainedModelsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetTrainedModelsStatsResponse",
                  ", TContext>>; info<TContext = unknown>(params?: ",
                  "MlInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlInfoResponse",
                  ", TContext>>; openJob<TContext = unknown>(params: ",
                  "MlOpenJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlOpenJobResponse",
                  ", TContext>>; postCalendarEvents<TContext = unknown>(params?: ",
                  "MlPostCalendarEventsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPostCalendarEventsResponse",
                  ", TContext>>; postData<TContext = unknown>(params: ",
                  "MlPostJobDataRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPostJobDataResponse",
                  ", TContext>>; previewDataFrameAnalytics<TContext = unknown>(params?: ",
                  "MlPreviewDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPreviewDataFrameAnalyticsResponse",
                  ", TContext>>; previewDatafeed<TDocument = unknown, TContext = unknown>(params?: ",
                  "MlPreviewDatafeedRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPreviewDatafeedResponse",
                  "<TDocument>, TContext>>; putCalendar<TContext = unknown>(params: ",
                  "MlPutCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutCalendarResponse",
                  ", TContext>>; putCalendarJob<TContext = unknown>(params: ",
                  "MlPutCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutCalendarJobResponse",
                  ", TContext>>; putDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlPutDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutDataFrameAnalyticsResponse",
                  ", TContext>>; putDatafeed<TContext = unknown>(params: ",
                  "MlPutDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutDatafeedResponse",
                  ", TContext>>; putFilter<TContext = unknown>(params: ",
                  "MlPutFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutFilterResponse",
                  ", TContext>>; putJob<TContext = unknown>(params: ",
                  "MlPutJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutJobResponse",
                  ", TContext>>; putTrainedModel<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putTrainedModelAlias<TContext = unknown>(params: ",
                  "MlPutTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutTrainedModelAliasResponse",
                  ", TContext>>; resetJob<TContext = unknown>(params: ",
                  "MlResetJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlResetJobResponse",
                  ", TContext>>; revertModelSnapshot<TContext = unknown>(params: ",
                  "MlRevertModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlRevertModelSnapshotResponse",
                  ", TContext>>; setUpgradeMode<TContext = unknown>(params?: ",
                  "MlSetUpgradeModeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlSetUpgradeModeResponse",
                  ", TContext>>; startDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlStartDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStartDataFrameAnalyticsResponse",
                  ", TContext>>; startDatafeed<TContext = unknown>(params: ",
                  "MlStartDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStartDatafeedResponse",
                  ", TContext>>; stopDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlStopDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStopDataFrameAnalyticsResponse",
                  ", TContext>>; stopDatafeed<TContext = unknown>(params: ",
                  "MlStopDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStopDatafeedResponse",
                  ", TContext>>; updateDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlUpdateDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpdateDataFrameAnalyticsResponse",
                  ", TContext>>; updateDatafeed<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; updateFilter<TContext = unknown>(params: ",
                  "MlUpdateFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpdateFilterResponse",
                  ", TContext>>; updateJob<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; updateModelSnapshot<TContext = unknown>(params: ",
                  "MlUpdateModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpdateModelSnapshotResponse",
                  ", TContext>>; upgradeJobSnapshot<TContext = unknown>(params: ",
                  "MlUpgradeJobSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpgradeJobSnapshotResponse",
                  ", TContext>>; validate<TContext = unknown>(params?: ",
                  "MlValidateJobRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlValidateJobResponse",
                  ", TContext>>; validateDetector<TContext = unknown>(params?: ",
                  "MlValidateDetectorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlValidateDetectorResponse",
                  ", TContext>>; }; msearch: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MsearchResponse",
                  "<TDocument>, TContext>>; msearchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument>, TContext>>; mtermvectors: <TContext = unknown>(params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MtermvectorsResponse",
                  ", TContext>>; nodes: { clearMeteringArchive<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getMeteringInfo<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; hotThreads<TContext = unknown>(params?: ",
                  "NodesHotThreadsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesHotThreadsResponse",
                  ", TContext>>; info<TContext = unknown>(params?: ",
                  "NodesInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesInfoResponse",
                  ", TContext>>; reloadSecureSettings<TContext = unknown>(params?: ",
                  "NodesReloadSecureSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesReloadSecureSettingsResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "NodesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesStatsResponse",
                  ", TContext>>; usage<TContext = unknown>(params?: ",
                  "NodesUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesUsageResponse",
                  ", TContext>>; }; openPointInTime: <TContext = unknown>(params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "OpenPointInTimeResponse",
                  ", TContext>>; ping: <TContext = unknown>(params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; putScript: <TContext = unknown>(params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "PutScriptResponse",
                  ", TContext>>; rankEval: <TContext = unknown>(params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RankEvalResponse",
                  ", TContext>>; reindex: <TContext = unknown>(params?: ",
                  "ReindexRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ReindexResponse",
                  ", TContext>>; reindexRethrottle: <TContext = unknown>(params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ReindexRethrottleResponse",
                  ", TContext>>; renderSearchTemplate: <TContext = unknown>(params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", TContext>>; rollup: { deleteJob<TContext = unknown>(params: ",
                  "RollupDeleteRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupDeleteRollupJobResponse",
                  ", TContext>>; getJobs<TContext = unknown>(params?: ",
                  "RollupGetRollupJobRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupGetRollupJobResponse",
                  ", TContext>>; getRollupCaps<TContext = unknown>(params?: ",
                  "RollupGetRollupCapabilitiesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupGetRollupCapabilitiesResponse",
                  ", TContext>>; getRollupIndexCaps<TContext = unknown>(params: ",
                  "RollupGetRollupIndexCapabilitiesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupGetRollupIndexCapabilitiesResponse",
                  ", TContext>>; putJob<TContext = unknown>(params: ",
                  "RollupCreateRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupCreateRollupJobResponse",
                  ", TContext>>; rollup<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; rollupSearch<TDocument = unknown, TContext = unknown>(params: ",
                  "RollupRollupSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupRollupSearchResponse",
                  "<TDocument>, TContext>>; startJob<TContext = unknown>(params: ",
                  "RollupStartRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupStartRollupJobResponse",
                  ", TContext>>; stopJob<TContext = unknown>(params: ",
                  "RollupStopRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupStopRollupJobResponse",
                  ", TContext>>; }; scriptsPainlessExecute: <TResult = unknown, TContext = unknown>(params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, TContext>>; scroll: <TDocument = unknown, TContext = unknown>(params?: ",
                  "ScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ScrollResponse",
                  "<TDocument>, TContext>>; searchShards: <TContext = unknown>(params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchShardsResponse",
                  ", TContext>>; searchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, TContext>>; searchableSnapshots: { cacheStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; clearCache<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; mount<TContext = unknown>(params: ",
                  "SearchableSnapshotsMountRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchableSnapshotsMountResponse",
                  ", TContext>>; repositoryStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; stats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; shutdown: { deleteNode<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getNode<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putNode<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; slm: { deleteLifecycle<TContext = unknown>(params: ",
                  "SlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmDeleteLifecycleResponse",
                  ", TContext>>; executeLifecycle<TContext = unknown>(params: ",
                  "SlmExecuteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmExecuteLifecycleResponse",
                  ", TContext>>; executeRetention<TContext = unknown>(params?: ",
                  "SlmExecuteRetentionRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmExecuteRetentionResponse",
                  ", TContext>>; getLifecycle<TContext = unknown>(params?: ",
                  "SlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmGetLifecycleResponse",
                  ", TContext>>; getStats<TContext = unknown>(params?: ",
                  "SlmGetStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmGetStatsResponse",
                  ", TContext>>; getStatus<TContext = unknown>(params?: ",
                  "SlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmGetStatusResponse",
                  ", TContext>>; putLifecycle<TContext = unknown>(params: ",
                  "SlmPutLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmPutLifecycleResponse",
                  ", TContext>>; start<TContext = unknown>(params?: ",
                  "SlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmStartResponse",
                  ", TContext>>; stop<TContext = unknown>(params?: ",
                  "SlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmStopResponse",
                  ", TContext>>; }; snapshot: { cleanupRepository<TContext = unknown>(params: ",
                  "SnapshotCleanupRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCleanupRepositoryResponse",
                  ", TContext>>; clone<TContext = unknown>(params: ",
                  "SnapshotCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCloneResponse",
                  ", TContext>>; create<TContext = unknown>(params: ",
                  "SnapshotCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCreateResponse",
                  ", TContext>>; createRepository<TContext = unknown>(params: ",
                  "SnapshotCreateRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCreateRepositoryResponse",
                  ", TContext>>; delete<TContext = unknown>(params: ",
                  "SnapshotDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotDeleteResponse",
                  ", TContext>>; deleteRepository<TContext = unknown>(params: ",
                  "SnapshotDeleteRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotDeleteRepositoryResponse",
                  ", TContext>>; get<TContext = unknown>(params: ",
                  "SnapshotGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotGetResponse",
                  ", TContext>>; getRepository<TContext = unknown>(params?: ",
                  "SnapshotGetRepositoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotGetRepositoryResponse",
                  ", TContext>>; repositoryAnalyze<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; restore<TContext = unknown>(params: ",
                  "SnapshotRestoreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotRestoreResponse",
                  ", TContext>>; status<TContext = unknown>(params?: ",
                  "SnapshotStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotStatusResponse",
                  ", TContext>>; verifyRepository<TContext = unknown>(params: ",
                  "SnapshotVerifyRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotVerifyRepositoryResponse",
                  ", TContext>>; }; sql: { clearCursor<TContext = unknown>(params?: ",
                  "SqlClearCursorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SqlClearCursorResponse",
                  ", TContext>>; deleteAsync<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAsync<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAsyncStatus<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; query<TContext = unknown>(params?: ",
                  "SqlQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SqlQueryResponse",
                  ", TContext>>; translate<TContext = unknown>(params?: ",
                  "SqlTranslateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SqlTranslateResponse",
                  ", TContext>>; }; ssl: { certificates<TContext = unknown>(params?: ",
                  "SslGetCertificatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SslGetCertificatesResponse",
                  ", TContext>>; }; tasks: { cancel<TContext = unknown>(params?: ",
                  "TaskCancelRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TaskCancelResponse",
                  ", TContext>>; get<TContext = unknown>(params: ",
                  "TaskGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TaskGetResponse",
                  ", TContext>>; list<TContext = unknown>(params?: ",
                  "TaskListRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TaskListResponse",
                  ", TContext>>; }; termsEnum: <TContext = unknown>(params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TermsEnumResponse",
                  ", TContext>>; termvectors: <TDocument = unknown, TContext = unknown>(params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TermvectorsResponse",
                  ", TContext>>; textStructure: { findStructure<TJsonDocument = unknown, TContext = unknown>(params: ",
                  "TextStructureFindStructureRequest",
                  "<TJsonDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TextStructureFindStructureResponse",
                  ", TContext>>; }; updateByQuery: <TContext = unknown>(params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "UpdateByQueryResponse",
                  ", TContext>>; updateByQueryRethrottle: <TContext = unknown>(params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", TContext>>; watcher: { ackWatch<TContext = unknown>(params: ",
                  "WatcherAckWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherAckWatchResponse",
                  ", TContext>>; activateWatch<TContext = unknown>(params: ",
                  "WatcherActivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherActivateWatchResponse",
                  ", TContext>>; deactivateWatch<TContext = unknown>(params: ",
                  "WatcherDeactivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherDeactivateWatchResponse",
                  ", TContext>>; deleteWatch<TContext = unknown>(params: ",
                  "WatcherDeleteWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherDeleteWatchResponse",
                  ", TContext>>; executeWatch<TContext = unknown>(params?: ",
                  "WatcherExecuteWatchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherExecuteWatchResponse",
                  ", TContext>>; getWatch<TContext = unknown>(params: ",
                  "WatcherGetWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherGetWatchResponse",
                  ", TContext>>; putWatch<TContext = unknown>(params: ",
                  "WatcherPutWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherPutWatchResponse",
                  ", TContext>>; queryWatches<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; start<TContext = unknown>(params?: ",
                  "WatcherStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherStartResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "WatcherStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherStatsResponse",
                  ", TContext>>; stop<TContext = unknown>(params?: ",
                  "WatcherStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherStopResponse",
                  ", TContext>>; }; xpack: { info<TContext = unknown>(params?: ",
                  "XpackInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "XpackInfoResponse",
                  ", TContext>>; usage<TContext = unknown>(params?: ",
                  "XpackUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "XpackUsageResponse",
                  ", TContext>>; }; }"
                ],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexAliases.$1.alias",
                "type": "string",
                "tags": [],
                "label": "alias",
                "description": [],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [
          "an array of {@link IndexAlias} objects"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getIndexCount",
        "type": "Function",
        "tags": [],
        "label": "getIndexCount",
        "description": [
          "\nRetrieves the count of documents in a given index\n"
        ],
        "signature": [
          "({ esClient, index, }: { esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">; index: string; }) => Promise<number>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexCount.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esClient,\n  index,\n}",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexCount.$1.esClient",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  "{ monitoring: { bulk<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; security: { authenticate<TContext = unknown>(params?: ",
                  "SecurityAuthenticateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityAuthenticateResponse",
                  ", TContext>>; changePassword<TContext = unknown>(params?: ",
                  "SecurityChangePasswordRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityChangePasswordResponse",
                  ", TContext>>; clearApiKeyCache<TContext = unknown>(params?: ",
                  "SecurityClearApiKeyCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearApiKeyCacheResponse",
                  ", TContext>>; clearCachedPrivileges<TContext = unknown>(params: ",
                  "SecurityClearCachedPrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedPrivilegesResponse",
                  ", TContext>>; clearCachedRealms<TContext = unknown>(params: ",
                  "SecurityClearCachedRealmsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedRealmsResponse",
                  ", TContext>>; clearCachedRoles<TContext = unknown>(params: ",
                  "SecurityClearCachedRolesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedRolesResponse",
                  ", TContext>>; clearCachedServiceTokens<TContext = unknown>(params: ",
                  "SecurityClearCachedServiceTokensRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityClearCachedServiceTokensResponse",
                  ", TContext>>; createApiKey<TContext = unknown>(params?: ",
                  "SecurityCreateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityCreateApiKeyResponse",
                  ", TContext>>; createServiceToken<TContext = unknown>(params: ",
                  "SecurityCreateServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityCreateServiceTokenResponse",
                  ", TContext>>; deletePrivileges<TContext = unknown>(params: ",
                  "SecurityDeletePrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeletePrivilegesResponse",
                  ", TContext>>; deleteRole<TContext = unknown>(params: ",
                  "SecurityDeleteRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteRoleResponse",
                  ", TContext>>; deleteRoleMapping<TContext = unknown>(params: ",
                  "SecurityDeleteRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteRoleMappingResponse",
                  ", TContext>>; deleteServiceToken<TContext = unknown>(params: ",
                  "SecurityDeleteServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteServiceTokenResponse",
                  ", TContext>>; deleteUser<TContext = unknown>(params: ",
                  "SecurityDeleteUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDeleteUserResponse",
                  ", TContext>>; disableUser<TContext = unknown>(params: ",
                  "SecurityDisableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityDisableUserResponse",
                  ", TContext>>; enableUser<TContext = unknown>(params: ",
                  "SecurityEnableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityEnableUserResponse",
                  ", TContext>>; getApiKey<TContext = unknown>(params?: ",
                  "SecurityGetApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetApiKeyResponse",
                  ", TContext>>; getBuiltinPrivileges<TContext = unknown>(params?: ",
                  "SecurityGetBuiltinPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetBuiltinPrivilegesResponse",
                  ", TContext>>; getPrivileges<TContext = unknown>(params?: ",
                  "SecurityGetPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetPrivilegesResponse",
                  ", TContext>>; getRole<TContext = unknown>(params?: ",
                  "SecurityGetRoleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetRoleResponse",
                  ", TContext>>; getRoleMapping<TContext = unknown>(params?: ",
                  "SecurityGetRoleMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetRoleMappingResponse",
                  ", TContext>>; getServiceAccounts<TContext = unknown>(params?: ",
                  "SecurityGetServiceAccountsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetServiceAccountsResponse",
                  ", TContext>>; getServiceCredentials<TContext = unknown>(params: ",
                  "SecurityGetServiceCredentialsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetServiceCredentialsResponse",
                  ", TContext>>; getToken<TContext = unknown>(params?: ",
                  "SecurityGetTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetTokenResponse",
                  ", TContext>>; getUser<TContext = unknown>(params?: ",
                  "SecurityGetUserRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetUserResponse",
                  ", TContext>>; getUserPrivileges<TContext = unknown>(params?: ",
                  "SecurityGetUserPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGetUserPrivilegesResponse",
                  ", TContext>>; grantApiKey<TContext = unknown>(params?: ",
                  "SecurityGrantApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityGrantApiKeyResponse",
                  ", TContext>>; hasPrivileges<TContext = unknown>(params?: ",
                  "SecurityHasPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityHasPrivilegesResponse",
                  ", TContext>>; invalidateApiKey<TContext = unknown>(params?: ",
                  "SecurityInvalidateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityInvalidateApiKeyResponse",
                  ", TContext>>; invalidateToken<TContext = unknown>(params?: ",
                  "SecurityInvalidateTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityInvalidateTokenResponse",
                  ", TContext>>; putPrivileges<TContext = unknown>(params?: ",
                  "SecurityPutPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutPrivilegesResponse",
                  ", TContext>>; putRole<TContext = unknown>(params: ",
                  "SecurityPutRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutRoleResponse",
                  ", TContext>>; putRoleMapping<TContext = unknown>(params: ",
                  "SecurityPutRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutRoleMappingResponse",
                  ", TContext>>; putUser<TContext = unknown>(params: ",
                  "SecurityPutUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SecurityPutUserResponse",
                  ", TContext>>; samlAuthenticate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlCompleteLogout<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlInvalidate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlLogout<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlPrepareAuthentication<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; samlServiceProviderMetadata<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; create: <TDocument = unknown, TContext = unknown>(params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CreateResponse",
                  ", TContext>>; index: <TDocument = unknown, TContext = unknown>(params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndexResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteResponse",
                  ", TContext>>; get: <TDocument = unknown, TContext = unknown>(params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetResponse",
                  "<TDocument>, TContext>>; update: <TDocumentR = unknown, TDocument = unknown, TPartialDocument = unknown, TContext = unknown>(params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, TContext>>; closePointInTime: <TContext = unknown>(params?: ",
                  "ClosePointInTimeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClosePointInTimeResponse",
                  ", TContext>>; search: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchResponse",
                  "<TDocument>, TContext>>; transform: { deleteTransform<TContext = unknown>(params: ",
                  "TransformDeleteTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformDeleteTransformResponse",
                  ", TContext>>; getTransform<TContext = unknown>(params?: ",
                  "TransformGetTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformGetTransformResponse",
                  ", TContext>>; getTransformStats<TContext = unknown>(params: ",
                  "TransformGetTransformStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformGetTransformStatsResponse",
                  ", TContext>>; previewTransform<TTransform = unknown, TContext = unknown>(params?: ",
                  "TransformPreviewTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformPreviewTransformResponse",
                  "<TTransform>, TContext>>; putTransform<TContext = unknown>(params: ",
                  "TransformPutTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformPutTransformResponse",
                  ", TContext>>; startTransform<TContext = unknown>(params: ",
                  "TransformStartTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformStartTransformResponse",
                  ", TContext>>; stopTransform<TContext = unknown>(params: ",
                  "TransformStopTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformStopTransformResponse",
                  ", TContext>>; updateTransform<TContext = unknown>(params?: ",
                  "TransformUpdateTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TransformUpdateTransformResponse",
                  ", TContext>>; }; eql: { delete<TContext = unknown>(params: ",
                  "EqlDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlDeleteResponse",
                  ", TContext>>; get<TEvent = unknown, TContext = unknown>(params: ",
                  "EqlGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlGetResponse",
                  "<TEvent>, TContext>>; getStatus<TContext = unknown>(params: ",
                  "EqlGetStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlGetStatusResponse",
                  ", TContext>>; search<TEvent = unknown, TContext = unknown>(params: ",
                  "EqlSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EqlSearchResponse",
                  "<TEvent>, TContext>>; }; helpers: ",
                  "default",
                  "; emit: (event: string | symbol, ...args: any[]) => boolean; on: { (event: \"request\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"response\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"sniff\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"resurrect\", listener: (err: null, meta: ",
                  "ResurrectEvent",
                  ") => void): ",
                  "KibanaClient",
                  "; }; once: { (event: \"request\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"response\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"sniff\", listener: (err: ",
                  "ApiError",
                  ", meta: ",
                  "RequestEvent",
                  "<Record<string, any>, unknown>) => void): ",
                  "KibanaClient",
                  "; (event: \"resurrect\", listener: (err: null, meta: ",
                  "ResurrectEvent",
                  ") => void): ",
                  "KibanaClient",
                  "; }; off: (event: string | symbol, listener: (...args: any[]) => void) => ",
                  "KibanaClient",
                  "; asyncSearch: { delete<TContext = unknown>(params: ",
                  "AsyncSearchDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchDeleteResponse",
                  ", TContext>>; get<TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchGetResponse",
                  "<TDocument>, TContext>>; status<TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchStatusResponse",
                  "<TDocument>, TContext>>; submit<TDocument = unknown, TContext = unknown>(params?: ",
                  "AsyncSearchSubmitRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "AsyncSearchSubmitResponse",
                  "<TDocument>, TContext>>; }; autoscaling: { deleteAutoscalingPolicy<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAutoscalingCapacity<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAutoscalingPolicy<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putAutoscalingPolicy<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; bulk: <TSource = unknown, TContext = unknown>(params: ",
                  "BulkRequest",
                  "<TSource>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "BulkResponse",
                  ", TContext>>; cat: { aliases<TContext = unknown>(params?: ",
                  "CatAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatAliasesResponse",
                  ", TContext>>; allocation<TContext = unknown>(params?: ",
                  "CatAllocationRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatAllocationResponse",
                  ", TContext>>; count<TContext = unknown>(params?: ",
                  "CatCountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatCountResponse",
                  ", TContext>>; fielddata<TContext = unknown>(params?: ",
                  "CatFielddataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatFielddataResponse",
                  ", TContext>>; health<TContext = unknown>(params?: ",
                  "CatHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatHealthResponse",
                  ", TContext>>; help<TContext = unknown>(params?: ",
                  "CatHelpRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatHelpResponse",
                  ", TContext>>; indices<TContext = unknown>(params?: ",
                  "CatIndicesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatIndicesResponse",
                  ", TContext>>; master<TContext = unknown>(params?: ",
                  "CatMasterRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatMasterResponse",
                  ", TContext>>; mlDataFrameAnalytics<TContext = unknown>(params?: ",
                  "CatDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatDataFrameAnalyticsResponse",
                  ", TContext>>; mlDatafeeds<TContext = unknown>(params?: ",
                  "CatDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatDatafeedsResponse",
                  ", TContext>>; mlJobs<TContext = unknown>(params?: ",
                  "CatJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatJobsResponse",
                  ", TContext>>; mlTrainedModels<TContext = unknown>(params?: ",
                  "CatTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTrainedModelsResponse",
                  ", TContext>>; nodeattrs<TContext = unknown>(params?: ",
                  "CatNodeAttributesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatNodeAttributesResponse",
                  ", TContext>>; nodes<TContext = unknown>(params?: ",
                  "CatNodesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatNodesResponse",
                  ", TContext>>; pendingTasks<TContext = unknown>(params?: ",
                  "CatPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatPendingTasksResponse",
                  ", TContext>>; plugins<TContext = unknown>(params?: ",
                  "CatPluginsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatPluginsResponse",
                  ", TContext>>; recovery<TContext = unknown>(params?: ",
                  "CatRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatRecoveryResponse",
                  ", TContext>>; repositories<TContext = unknown>(params?: ",
                  "CatRepositoriesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatRepositoriesResponse",
                  ", TContext>>; segments<TContext = unknown>(params?: ",
                  "CatSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatSegmentsResponse",
                  ", TContext>>; shards<TContext = unknown>(params?: ",
                  "CatShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatShardsResponse",
                  ", TContext>>; snapshots<TContext = unknown>(params?: ",
                  "CatSnapshotsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatSnapshotsResponse",
                  ", TContext>>; tasks<TContext = unknown>(params?: ",
                  "CatTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTasksResponse",
                  ", TContext>>; templates<TContext = unknown>(params?: ",
                  "CatTemplatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTemplatesResponse",
                  ", TContext>>; threadPool<TContext = unknown>(params?: ",
                  "CatThreadPoolRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatThreadPoolResponse",
                  ", TContext>>; transforms<TContext = unknown>(params?: ",
                  "CatTransformsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CatTransformsResponse",
                  ", TContext>>; }; ccr: { deleteAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrDeleteAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrDeleteAutoFollowPatternResponse",
                  ", TContext>>; follow<TContext = unknown>(params: ",
                  "CcrCreateFollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrCreateFollowIndexResponse",
                  ", TContext>>; followInfo<TContext = unknown>(params: ",
                  "CcrFollowInfoRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrFollowInfoResponse",
                  ", TContext>>; followStats<TContext = unknown>(params: ",
                  "CcrFollowIndexStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrFollowIndexStatsResponse",
                  ", TContext>>; forgetFollower<TContext = unknown>(params: ",
                  "CcrForgetFollowerIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrForgetFollowerIndexResponse",
                  ", TContext>>; getAutoFollowPattern<TContext = unknown>(params?: ",
                  "CcrGetAutoFollowPatternRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrGetAutoFollowPatternResponse",
                  ", TContext>>; pauseAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrPauseAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrPauseAutoFollowPatternResponse",
                  ", TContext>>; pauseFollow<TContext = unknown>(params: ",
                  "CcrPauseFollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrPauseFollowIndexResponse",
                  ", TContext>>; putAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrPutAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrPutAutoFollowPatternResponse",
                  ", TContext>>; resumeAutoFollowPattern<TContext = unknown>(params: ",
                  "CcrResumeAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrResumeAutoFollowPatternResponse",
                  ", TContext>>; resumeFollow<TContext = unknown>(params: ",
                  "CcrResumeFollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrResumeFollowIndexResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "CcrStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrStatsResponse",
                  ", TContext>>; unfollow<TContext = unknown>(params: ",
                  "CcrUnfollowIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CcrUnfollowIndexResponse",
                  ", TContext>>; }; clearScroll: <TContext = unknown>(params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClearScrollResponse",
                  ", TContext>>; cluster: { allocationExplain<TContext = unknown>(params?: ",
                  "ClusterAllocationExplainRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterAllocationExplainResponse",
                  ", TContext>>; deleteComponentTemplate<TContext = unknown>(params: ",
                  "ClusterDeleteComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterDeleteComponentTemplateResponse",
                  ", TContext>>; deleteVotingConfigExclusions<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; existsComponentTemplate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getComponentTemplate<TContext = unknown>(params?: ",
                  "ClusterGetComponentTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterGetComponentTemplateResponse",
                  ", TContext>>; getSettings<TContext = unknown>(params?: ",
                  "ClusterGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterGetSettingsResponse",
                  ", TContext>>; health<TContext = unknown>(params?: ",
                  "ClusterHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterHealthResponse",
                  ", TContext>>; pendingTasks<TContext = unknown>(params?: ",
                  "ClusterPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterPendingTasksResponse",
                  ", TContext>>; postVotingConfigExclusions<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putComponentTemplate<TContext = unknown>(params: ",
                  "ClusterPutComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterPutComponentTemplateResponse",
                  ", TContext>>; putSettings<TContext = unknown>(params?: ",
                  "ClusterPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterPutSettingsResponse",
                  ", TContext>>; remoteInfo<TContext = unknown>(params?: ",
                  "ClusterRemoteInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterRemoteInfoResponse",
                  ", TContext>>; reroute<TContext = unknown>(params?: ",
                  "ClusterRerouteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterRerouteResponse",
                  ", TContext>>; state<TContext = unknown>(params?: ",
                  "ClusterStateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterStateResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "ClusterStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ClusterStatsResponse",
                  ", TContext>>; }; count: <TContext = unknown>(params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "CountResponse",
                  ", TContext>>; danglingIndices: { deleteDanglingIndex<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; importDanglingIndex<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; listDanglingIndices<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; dataFrameTransformDeprecated: { deleteTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getTransformStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; previewTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; startTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; stopTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; updateTransform<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; deleteByQuery: <TContext = unknown>(params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteByQueryResponse",
                  ", TContext>>; deleteByQueryRethrottle: <TContext = unknown>(params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteByQueryRethrottleResponse",
                  ", TContext>>; deleteScript: <TContext = unknown>(params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "DeleteScriptResponse",
                  ", TContext>>; enrich: { deletePolicy<TContext = unknown>(params: ",
                  "EnrichDeletePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichDeletePolicyResponse",
                  ", TContext>>; executePolicy<TContext = unknown>(params: ",
                  "EnrichExecutePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichExecutePolicyResponse",
                  ", TContext>>; getPolicy<TContext = unknown>(params?: ",
                  "EnrichGetPolicyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichGetPolicyResponse",
                  ", TContext>>; putPolicy<TContext = unknown>(params: ",
                  "EnrichPutPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichPutPolicyResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "EnrichStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "EnrichStatsResponse",
                  ", TContext>>; }; exists: <TContext = unknown>(params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsSource: <TContext = unknown>(params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; explain: <TDocument = unknown, TContext = unknown>(params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, TContext>>; features: { getFeatures<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; resetFeatures<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; fieldCaps: <TContext = unknown>(params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "FieldCapsResponse",
                  ", TContext>>; fleet: { globalCheckpoints<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; getScript: <TContext = unknown>(params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetScriptResponse",
                  ", TContext>>; getScriptContext: <TContext = unknown>(params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetScriptContextResponse",
                  ", TContext>>; getScriptLanguages: <TContext = unknown>(params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", TContext>>; getSource: <TDocument = unknown, TContext = unknown>(params?: ",
                  "GetSourceRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<TDocument, TContext>>; graph: { explore<TContext = unknown>(params: ",
                  "GraphExploreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "GraphExploreResponse",
                  ", TContext>>; }; ilm: { deleteLifecycle<TContext = unknown>(params: ",
                  "IlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmDeleteLifecycleResponse",
                  ", TContext>>; explainLifecycle<TContext = unknown>(params: ",
                  "IlmExplainLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmExplainLifecycleResponse",
                  ", TContext>>; getLifecycle<TContext = unknown>(params?: ",
                  "IlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmGetLifecycleResponse",
                  ", TContext>>; getStatus<TContext = unknown>(params?: ",
                  "IlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmGetStatusResponse",
                  ", TContext>>; migrateToDataTiers<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; moveToStep<TContext = unknown>(params: ",
                  "IlmMoveToStepRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmMoveToStepResponse",
                  ", TContext>>; putLifecycle<TContext = unknown>(params?: ",
                  "IlmPutLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmPutLifecycleResponse",
                  ", TContext>>; removePolicy<TContext = unknown>(params: ",
                  "IlmRemovePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmRemovePolicyResponse",
                  ", TContext>>; retry<TContext = unknown>(params: ",
                  "IlmRetryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmRetryResponse",
                  ", TContext>>; start<TContext = unknown>(params?: ",
                  "IlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmStartResponse",
                  ", TContext>>; stop<TContext = unknown>(params?: ",
                  "IlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IlmStopResponse",
                  ", TContext>>; }; indices: { addBlock<TContext = unknown>(params: ",
                  "IndicesAddBlockRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesAddBlockResponse",
                  ", TContext>>; analyze<TContext = unknown>(params?: ",
                  "IndicesAnalyzeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesAnalyzeResponse",
                  ", TContext>>; clearCache<TContext = unknown>(params?: ",
                  "IndicesClearCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesClearCacheResponse",
                  ", TContext>>; clone<TContext = unknown>(params: ",
                  "IndicesCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCloneResponse",
                  ", TContext>>; close<TContext = unknown>(params: ",
                  "IndicesCloseRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCloseResponse",
                  ", TContext>>; create<TContext = unknown>(params: ",
                  "IndicesCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCreateResponse",
                  ", TContext>>; createDataStream<TContext = unknown>(params: ",
                  "IndicesCreateDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesCreateDataStreamResponse",
                  ", TContext>>; dataStreamsStats<TContext = unknown>(params?: ",
                  "IndicesDataStreamsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDataStreamsStatsResponse",
                  ", TContext>>; delete<TContext = unknown>(params: ",
                  "IndicesDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteResponse",
                  ", TContext>>; deleteAlias<TContext = unknown>(params: ",
                  "IndicesDeleteAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteAliasResponse",
                  ", TContext>>; deleteDataStream<TContext = unknown>(params: ",
                  "IndicesDeleteDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteDataStreamResponse",
                  ", TContext>>; deleteIndexTemplate<TContext = unknown>(params: ",
                  "IndicesDeleteIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteIndexTemplateResponse",
                  ", TContext>>; deleteTemplate<TContext = unknown>(params: ",
                  "IndicesDeleteTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesDeleteTemplateResponse",
                  ", TContext>>; diskUsage<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; exists<TContext = unknown>(params: ",
                  "IndicesExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsAlias<TContext = unknown>(params: ",
                  "IndicesExistsAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsIndexTemplate<TContext = unknown>(params: ",
                  "IndicesExistsIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsTemplate<TContext = unknown>(params: ",
                  "IndicesExistsTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; existsType<TContext = unknown>(params: ",
                  "IndicesExistsTypeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; fieldUsageStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; flush<TContext = unknown>(params?: ",
                  "IndicesFlushRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesFlushResponse",
                  ", TContext>>; flushSynced<TContext = unknown>(params?: ",
                  "IndicesFlushSyncedRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesFlushSyncedResponse",
                  ", TContext>>; forcemerge<TContext = unknown>(params?: ",
                  "IndicesForcemergeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesForcemergeResponse",
                  ", TContext>>; freeze<TContext = unknown>(params: ",
                  "IndicesFreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesFreezeResponse",
                  ", TContext>>; get<TContext = unknown>(params: ",
                  "IndicesGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetResponse",
                  ", TContext>>; getAlias<TContext = unknown>(params?: ",
                  "IndicesGetAliasRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetAliasResponse",
                  ", TContext>>; getDataStream<TContext = unknown>(params?: ",
                  "IndicesGetDataStreamRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetDataStreamResponse",
                  ", TContext>>; getFieldMapping<TContext = unknown>(params: ",
                  "IndicesGetFieldMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetFieldMappingResponse",
                  ", TContext>>; getIndexTemplate<TContext = unknown>(params?: ",
                  "IndicesGetIndexTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetIndexTemplateResponse",
                  ", TContext>>; getMapping<TContext = unknown>(params?: ",
                  "IndicesGetMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetMappingResponse",
                  ", TContext>>; getSettings<TContext = unknown>(params?: ",
                  "IndicesGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetSettingsResponse",
                  ", TContext>>; getTemplate<TContext = unknown>(params?: ",
                  "IndicesGetTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesGetTemplateResponse",
                  ", TContext>>; getUpgrade<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; migrateToDataStream<TContext = unknown>(params: ",
                  "IndicesMigrateToDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesMigrateToDataStreamResponse",
                  ", TContext>>; open<TContext = unknown>(params: ",
                  "IndicesOpenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesOpenResponse",
                  ", TContext>>; promoteDataStream<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putAlias<TContext = unknown>(params: ",
                  "IndicesPutAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutAliasResponse",
                  ", TContext>>; putIndexTemplate<TContext = unknown>(params: ",
                  "IndicesPutIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutIndexTemplateResponse",
                  ", TContext>>; putMapping<TContext = unknown>(params?: ",
                  "IndicesPutMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutMappingResponse",
                  ", TContext>>; putSettings<TContext = unknown>(params?: ",
                  "IndicesPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutSettingsResponse",
                  ", TContext>>; putTemplate<TContext = unknown>(params: ",
                  "IndicesPutTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesPutTemplateResponse",
                  ", TContext>>; recovery<TContext = unknown>(params?: ",
                  "IndicesRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesRecoveryResponse",
                  ", TContext>>; refresh<TContext = unknown>(params?: ",
                  "IndicesRefreshRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesRefreshResponse",
                  ", TContext>>; reloadSearchAnalyzers<TContext = unknown>(params: ",
                  "IndicesReloadSearchAnalyzersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesReloadSearchAnalyzersResponse",
                  ", TContext>>; resolveIndex<TContext = unknown>(params: ",
                  "IndicesResolveIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesResolveIndexResponse",
                  ", TContext>>; rollover<TContext = unknown>(params: ",
                  "IndicesRolloverRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesRolloverResponse",
                  ", TContext>>; segments<TContext = unknown>(params?: ",
                  "IndicesSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesSegmentsResponse",
                  ", TContext>>; shardStores<TContext = unknown>(params?: ",
                  "IndicesShardStoresRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesShardStoresResponse",
                  ", TContext>>; shrink<TContext = unknown>(params: ",
                  "IndicesShrinkRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesShrinkResponse",
                  ", TContext>>; simulateIndexTemplate<TContext = unknown>(params?: ",
                  "IndicesSimulateIndexTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesSimulateIndexTemplateResponse",
                  ", TContext>>; simulateTemplate<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; split<TContext = unknown>(params: ",
                  "IndicesSplitRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesSplitResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "IndicesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesStatsResponse",
                  ", TContext>>; unfreeze<TContext = unknown>(params: ",
                  "IndicesUnfreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesUnfreezeResponse",
                  ", TContext>>; updateAliases<TContext = unknown>(params?: ",
                  "IndicesUpdateAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesUpdateAliasesResponse",
                  ", TContext>>; upgrade<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; validateQuery<TContext = unknown>(params?: ",
                  "IndicesValidateQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IndicesValidateQueryResponse",
                  ", TContext>>; }; info: <TContext = unknown>(params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "InfoResponse",
                  ", TContext>>; ingest: { deletePipeline<TContext = unknown>(params: ",
                  "IngestDeletePipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestDeletePipelineResponse",
                  ", TContext>>; geoIpStats<TContext = unknown>(params?: ",
                  "IngestGeoIpStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestGeoIpStatsResponse",
                  ", TContext>>; getPipeline<TContext = unknown>(params?: ",
                  "IngestGetPipelineRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestGetPipelineResponse",
                  ", TContext>>; processorGrok<TContext = unknown>(params?: ",
                  "IngestProcessorGrokRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestProcessorGrokResponse",
                  ", TContext>>; putPipeline<TContext = unknown>(params: ",
                  "IngestPutPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestPutPipelineResponse",
                  ", TContext>>; simulate<TContext = unknown>(params?: ",
                  "IngestSimulatePipelineRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "IngestSimulatePipelineResponse",
                  ", TContext>>; }; license: { delete<TContext = unknown>(params?: ",
                  "LicenseDeleteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseDeleteResponse",
                  ", TContext>>; get<TContext = unknown>(params?: ",
                  "LicenseGetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseGetResponse",
                  ", TContext>>; getBasicStatus<TContext = unknown>(params?: ",
                  "LicenseGetBasicStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseGetBasicStatusResponse",
                  ", TContext>>; getTrialStatus<TContext = unknown>(params?: ",
                  "LicenseGetTrialStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicenseGetTrialStatusResponse",
                  ", TContext>>; post<TContext = unknown>(params?: ",
                  "LicensePostRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicensePostResponse",
                  ", TContext>>; postStartBasic<TContext = unknown>(params?: ",
                  "LicensePostStartBasicRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicensePostStartBasicResponse",
                  ", TContext>>; postStartTrial<TContext = unknown>(params?: ",
                  "LicensePostStartTrialRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "LicensePostStartTrialResponse",
                  ", TContext>>; }; logstash: { deletePipeline<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getPipeline<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putPipeline<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; mget: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MgetResponse",
                  "<TDocument>, TContext>>; migration: { deprecations<TContext = unknown>(params?: ",
                  "MigrationDeprecationInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MigrationDeprecationInfoResponse",
                  ", TContext>>; }; ml: { closeJob<TContext = unknown>(params: ",
                  "MlCloseJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlCloseJobResponse",
                  ", TContext>>; deleteCalendar<TContext = unknown>(params: ",
                  "MlDeleteCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteCalendarResponse",
                  ", TContext>>; deleteCalendarEvent<TContext = unknown>(params: ",
                  "MlDeleteCalendarEventRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteCalendarEventResponse",
                  ", TContext>>; deleteCalendarJob<TContext = unknown>(params: ",
                  "MlDeleteCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteCalendarJobResponse",
                  ", TContext>>; deleteDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlDeleteDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteDataFrameAnalyticsResponse",
                  ", TContext>>; deleteDatafeed<TContext = unknown>(params: ",
                  "MlDeleteDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteDatafeedResponse",
                  ", TContext>>; deleteExpiredData<TContext = unknown>(params?: ",
                  "MlDeleteExpiredDataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteExpiredDataResponse",
                  ", TContext>>; deleteFilter<TContext = unknown>(params: ",
                  "MlDeleteFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteFilterResponse",
                  ", TContext>>; deleteForecast<TContext = unknown>(params: ",
                  "MlDeleteForecastRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteForecastResponse",
                  ", TContext>>; deleteJob<TContext = unknown>(params: ",
                  "MlDeleteJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteJobResponse",
                  ", TContext>>; deleteModelSnapshot<TContext = unknown>(params: ",
                  "MlDeleteModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteModelSnapshotResponse",
                  ", TContext>>; deleteTrainedModel<TContext = unknown>(params: ",
                  "MlDeleteTrainedModelRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteTrainedModelResponse",
                  ", TContext>>; deleteTrainedModelAlias<TContext = unknown>(params: ",
                  "MlDeleteTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlDeleteTrainedModelAliasResponse",
                  ", TContext>>; estimateModelMemory<TContext = unknown>(params?: ",
                  "MlEstimateModelMemoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlEstimateModelMemoryResponse",
                  ", TContext>>; evaluateDataFrame<TContext = unknown>(params?: ",
                  "MlEvaluateDataFrameRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlEvaluateDataFrameResponse",
                  ", TContext>>; explainDataFrameAnalytics<TContext = unknown>(params?: ",
                  "MlExplainDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlExplainDataFrameAnalyticsResponse",
                  ", TContext>>; findFileStructure<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; flushJob<TContext = unknown>(params: ",
                  "MlFlushJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlFlushJobResponse",
                  ", TContext>>; forecast<TContext = unknown>(params: ",
                  "MlForecastJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlForecastJobResponse",
                  ", TContext>>; getBuckets<TContext = unknown>(params: ",
                  "MlGetBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetBucketsResponse",
                  ", TContext>>; getCalendarEvents<TContext = unknown>(params: ",
                  "MlGetCalendarEventsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetCalendarEventsResponse",
                  ", TContext>>; getCalendars<TContext = unknown>(params?: ",
                  "MlGetCalendarsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetCalendarsResponse",
                  ", TContext>>; getCategories<TContext = unknown>(params: ",
                  "MlGetCategoriesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetCategoriesResponse",
                  ", TContext>>; getDataFrameAnalytics<TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDataFrameAnalyticsResponse",
                  ", TContext>>; getDataFrameAnalyticsStats<TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDataFrameAnalyticsStatsResponse",
                  ", TContext>>; getDatafeedStats<TContext = unknown>(params?: ",
                  "MlGetDatafeedStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDatafeedStatsResponse",
                  ", TContext>>; getDatafeeds<TContext = unknown>(params?: ",
                  "MlGetDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetDatafeedsResponse",
                  ", TContext>>; getFilters<TContext = unknown>(params?: ",
                  "MlGetFiltersRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetFiltersResponse",
                  ", TContext>>; getInfluencers<TContext = unknown>(params: ",
                  "MlGetInfluencersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetInfluencersResponse",
                  ", TContext>>; getJobStats<TContext = unknown>(params?: ",
                  "MlGetJobStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetJobStatsResponse",
                  ", TContext>>; getJobs<TContext = unknown>(params?: ",
                  "MlGetJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetJobsResponse",
                  ", TContext>>; getModelSnapshots<TContext = unknown>(params: ",
                  "MlGetModelSnapshotsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetModelSnapshotsResponse",
                  ", TContext>>; getOverallBuckets<TContext = unknown>(params: ",
                  "MlGetOverallBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetOverallBucketsResponse",
                  ", TContext>>; getRecords<TContext = unknown>(params: ",
                  "MlGetAnomalyRecordsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetAnomalyRecordsResponse",
                  ", TContext>>; getTrainedModels<TContext = unknown>(params?: ",
                  "MlGetTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetTrainedModelsResponse",
                  ", TContext>>; getTrainedModelsStats<TContext = unknown>(params?: ",
                  "MlGetTrainedModelsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlGetTrainedModelsStatsResponse",
                  ", TContext>>; info<TContext = unknown>(params?: ",
                  "MlInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlInfoResponse",
                  ", TContext>>; openJob<TContext = unknown>(params: ",
                  "MlOpenJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlOpenJobResponse",
                  ", TContext>>; postCalendarEvents<TContext = unknown>(params?: ",
                  "MlPostCalendarEventsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPostCalendarEventsResponse",
                  ", TContext>>; postData<TContext = unknown>(params: ",
                  "MlPostJobDataRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPostJobDataResponse",
                  ", TContext>>; previewDataFrameAnalytics<TContext = unknown>(params?: ",
                  "MlPreviewDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPreviewDataFrameAnalyticsResponse",
                  ", TContext>>; previewDatafeed<TDocument = unknown, TContext = unknown>(params?: ",
                  "MlPreviewDatafeedRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPreviewDatafeedResponse",
                  "<TDocument>, TContext>>; putCalendar<TContext = unknown>(params: ",
                  "MlPutCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutCalendarResponse",
                  ", TContext>>; putCalendarJob<TContext = unknown>(params: ",
                  "MlPutCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutCalendarJobResponse",
                  ", TContext>>; putDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlPutDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutDataFrameAnalyticsResponse",
                  ", TContext>>; putDatafeed<TContext = unknown>(params: ",
                  "MlPutDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutDatafeedResponse",
                  ", TContext>>; putFilter<TContext = unknown>(params: ",
                  "MlPutFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutFilterResponse",
                  ", TContext>>; putJob<TContext = unknown>(params: ",
                  "MlPutJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutJobResponse",
                  ", TContext>>; putTrainedModel<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putTrainedModelAlias<TContext = unknown>(params: ",
                  "MlPutTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlPutTrainedModelAliasResponse",
                  ", TContext>>; resetJob<TContext = unknown>(params: ",
                  "MlResetJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlResetJobResponse",
                  ", TContext>>; revertModelSnapshot<TContext = unknown>(params: ",
                  "MlRevertModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlRevertModelSnapshotResponse",
                  ", TContext>>; setUpgradeMode<TContext = unknown>(params?: ",
                  "MlSetUpgradeModeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlSetUpgradeModeResponse",
                  ", TContext>>; startDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlStartDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStartDataFrameAnalyticsResponse",
                  ", TContext>>; startDatafeed<TContext = unknown>(params: ",
                  "MlStartDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStartDatafeedResponse",
                  ", TContext>>; stopDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlStopDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStopDataFrameAnalyticsResponse",
                  ", TContext>>; stopDatafeed<TContext = unknown>(params: ",
                  "MlStopDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlStopDatafeedResponse",
                  ", TContext>>; updateDataFrameAnalytics<TContext = unknown>(params: ",
                  "MlUpdateDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpdateDataFrameAnalyticsResponse",
                  ", TContext>>; updateDatafeed<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; updateFilter<TContext = unknown>(params: ",
                  "MlUpdateFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpdateFilterResponse",
                  ", TContext>>; updateJob<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; updateModelSnapshot<TContext = unknown>(params: ",
                  "MlUpdateModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpdateModelSnapshotResponse",
                  ", TContext>>; upgradeJobSnapshot<TContext = unknown>(params: ",
                  "MlUpgradeJobSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlUpgradeJobSnapshotResponse",
                  ", TContext>>; validate<TContext = unknown>(params?: ",
                  "MlValidateJobRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlValidateJobResponse",
                  ", TContext>>; validateDetector<TContext = unknown>(params?: ",
                  "MlValidateDetectorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MlValidateDetectorResponse",
                  ", TContext>>; }; msearch: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MsearchResponse",
                  "<TDocument>, TContext>>; msearchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument>, TContext>>; mtermvectors: <TContext = unknown>(params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "MtermvectorsResponse",
                  ", TContext>>; nodes: { clearMeteringArchive<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getMeteringInfo<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; hotThreads<TContext = unknown>(params?: ",
                  "NodesHotThreadsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesHotThreadsResponse",
                  ", TContext>>; info<TContext = unknown>(params?: ",
                  "NodesInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesInfoResponse",
                  ", TContext>>; reloadSecureSettings<TContext = unknown>(params?: ",
                  "NodesReloadSecureSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesReloadSecureSettingsResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "NodesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesStatsResponse",
                  ", TContext>>; usage<TContext = unknown>(params?: ",
                  "NodesUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "NodesUsageResponse",
                  ", TContext>>; }; openPointInTime: <TContext = unknown>(params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "OpenPointInTimeResponse",
                  ", TContext>>; ping: <TContext = unknown>(params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<boolean, TContext>>; putScript: <TContext = unknown>(params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "PutScriptResponse",
                  ", TContext>>; rankEval: <TContext = unknown>(params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RankEvalResponse",
                  ", TContext>>; reindex: <TContext = unknown>(params?: ",
                  "ReindexRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ReindexResponse",
                  ", TContext>>; reindexRethrottle: <TContext = unknown>(params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ReindexRethrottleResponse",
                  ", TContext>>; renderSearchTemplate: <TContext = unknown>(params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", TContext>>; rollup: { deleteJob<TContext = unknown>(params: ",
                  "RollupDeleteRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupDeleteRollupJobResponse",
                  ", TContext>>; getJobs<TContext = unknown>(params?: ",
                  "RollupGetRollupJobRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupGetRollupJobResponse",
                  ", TContext>>; getRollupCaps<TContext = unknown>(params?: ",
                  "RollupGetRollupCapabilitiesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupGetRollupCapabilitiesResponse",
                  ", TContext>>; getRollupIndexCaps<TContext = unknown>(params: ",
                  "RollupGetRollupIndexCapabilitiesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupGetRollupIndexCapabilitiesResponse",
                  ", TContext>>; putJob<TContext = unknown>(params: ",
                  "RollupCreateRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupCreateRollupJobResponse",
                  ", TContext>>; rollup<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; rollupSearch<TDocument = unknown, TContext = unknown>(params: ",
                  "RollupRollupSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupRollupSearchResponse",
                  "<TDocument>, TContext>>; startJob<TContext = unknown>(params: ",
                  "RollupStartRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupStartRollupJobResponse",
                  ", TContext>>; stopJob<TContext = unknown>(params: ",
                  "RollupStopRollupJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "RollupStopRollupJobResponse",
                  ", TContext>>; }; scriptsPainlessExecute: <TResult = unknown, TContext = unknown>(params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, TContext>>; scroll: <TDocument = unknown, TContext = unknown>(params?: ",
                  "ScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "ScrollResponse",
                  "<TDocument>, TContext>>; searchShards: <TContext = unknown>(params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchShardsResponse",
                  ", TContext>>; searchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, TContext>>; searchableSnapshots: { cacheStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; clearCache<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; mount<TContext = unknown>(params: ",
                  "SearchableSnapshotsMountRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SearchableSnapshotsMountResponse",
                  ", TContext>>; repositoryStats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; stats<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; shutdown: { deleteNode<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getNode<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; putNode<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; }; slm: { deleteLifecycle<TContext = unknown>(params: ",
                  "SlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmDeleteLifecycleResponse",
                  ", TContext>>; executeLifecycle<TContext = unknown>(params: ",
                  "SlmExecuteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmExecuteLifecycleResponse",
                  ", TContext>>; executeRetention<TContext = unknown>(params?: ",
                  "SlmExecuteRetentionRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmExecuteRetentionResponse",
                  ", TContext>>; getLifecycle<TContext = unknown>(params?: ",
                  "SlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmGetLifecycleResponse",
                  ", TContext>>; getStats<TContext = unknown>(params?: ",
                  "SlmGetStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmGetStatsResponse",
                  ", TContext>>; getStatus<TContext = unknown>(params?: ",
                  "SlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmGetStatusResponse",
                  ", TContext>>; putLifecycle<TContext = unknown>(params: ",
                  "SlmPutLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmPutLifecycleResponse",
                  ", TContext>>; start<TContext = unknown>(params?: ",
                  "SlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmStartResponse",
                  ", TContext>>; stop<TContext = unknown>(params?: ",
                  "SlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SlmStopResponse",
                  ", TContext>>; }; snapshot: { cleanupRepository<TContext = unknown>(params: ",
                  "SnapshotCleanupRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCleanupRepositoryResponse",
                  ", TContext>>; clone<TContext = unknown>(params: ",
                  "SnapshotCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCloneResponse",
                  ", TContext>>; create<TContext = unknown>(params: ",
                  "SnapshotCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCreateResponse",
                  ", TContext>>; createRepository<TContext = unknown>(params: ",
                  "SnapshotCreateRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotCreateRepositoryResponse",
                  ", TContext>>; delete<TContext = unknown>(params: ",
                  "SnapshotDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotDeleteResponse",
                  ", TContext>>; deleteRepository<TContext = unknown>(params: ",
                  "SnapshotDeleteRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotDeleteRepositoryResponse",
                  ", TContext>>; get<TContext = unknown>(params: ",
                  "SnapshotGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotGetResponse",
                  ", TContext>>; getRepository<TContext = unknown>(params?: ",
                  "SnapshotGetRepositoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotGetRepositoryResponse",
                  ", TContext>>; repositoryAnalyze<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; restore<TContext = unknown>(params: ",
                  "SnapshotRestoreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotRestoreResponse",
                  ", TContext>>; status<TContext = unknown>(params?: ",
                  "SnapshotStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotStatusResponse",
                  ", TContext>>; verifyRepository<TContext = unknown>(params: ",
                  "SnapshotVerifyRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SnapshotVerifyRepositoryResponse",
                  ", TContext>>; }; sql: { clearCursor<TContext = unknown>(params?: ",
                  "SqlClearCursorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SqlClearCursorResponse",
                  ", TContext>>; deleteAsync<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAsync<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; getAsyncStatus<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; query<TContext = unknown>(params?: ",
                  "SqlQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SqlQueryResponse",
                  ", TContext>>; translate<TContext = unknown>(params?: ",
                  "SqlTranslateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SqlTranslateResponse",
                  ", TContext>>; }; ssl: { certificates<TContext = unknown>(params?: ",
                  "SslGetCertificatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "SslGetCertificatesResponse",
                  ", TContext>>; }; tasks: { cancel<TContext = unknown>(params?: ",
                  "TaskCancelRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TaskCancelResponse",
                  ", TContext>>; get<TContext = unknown>(params: ",
                  "TaskGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TaskGetResponse",
                  ", TContext>>; list<TContext = unknown>(params?: ",
                  "TaskListRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TaskListResponse",
                  ", TContext>>; }; termsEnum: <TContext = unknown>(params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TermsEnumResponse",
                  ", TContext>>; termvectors: <TDocument = unknown, TContext = unknown>(params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TermvectorsResponse",
                  ", TContext>>; textStructure: { findStructure<TJsonDocument = unknown, TContext = unknown>(params: ",
                  "TextStructureFindStructureRequest",
                  "<TJsonDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "TextStructureFindStructureResponse",
                  ", TContext>>; }; updateByQuery: <TContext = unknown>(params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "UpdateByQueryResponse",
                  ", TContext>>; updateByQueryRethrottle: <TContext = unknown>(params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", TContext>>; watcher: { ackWatch<TContext = unknown>(params: ",
                  "WatcherAckWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherAckWatchResponse",
                  ", TContext>>; activateWatch<TContext = unknown>(params: ",
                  "WatcherActivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherActivateWatchResponse",
                  ", TContext>>; deactivateWatch<TContext = unknown>(params: ",
                  "WatcherDeactivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherDeactivateWatchResponse",
                  ", TContext>>; deleteWatch<TContext = unknown>(params: ",
                  "WatcherDeleteWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherDeleteWatchResponse",
                  ", TContext>>; executeWatch<TContext = unknown>(params?: ",
                  "WatcherExecuteWatchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherExecuteWatchResponse",
                  ", TContext>>; getWatch<TContext = unknown>(params: ",
                  "WatcherGetWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherGetWatchResponse",
                  ", TContext>>; putWatch<TContext = unknown>(params: ",
                  "WatcherPutWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherPutWatchResponse",
                  ", TContext>>; queryWatches<TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<Record<string, any>, TContext>>; start<TContext = unknown>(params?: ",
                  "WatcherStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherStartResponse",
                  ", TContext>>; stats<TContext = unknown>(params?: ",
                  "WatcherStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherStatsResponse",
                  ", TContext>>; stop<TContext = unknown>(params?: ",
                  "WatcherStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "WatcherStopResponse",
                  ", TContext>>; }; xpack: { info<TContext = unknown>(params?: ",
                  "XpackInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "XpackInfoResponse",
                  ", TContext>>; usage<TContext = unknown>(params?: ",
                  "XpackUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): ",
                  "TransportRequestPromise",
                  "<",
                  "ApiResponse",
                  "<",
                  "XpackUsageResponse",
                  ", TContext>>; }; }"
                ],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexCount.$1.index",
                "type": "string",
                "tags": [],
                "label": "index",
                "description": [],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [
          "the document count"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getIndexExists",
        "type": "Function",
        "tags": [],
        "label": "getIndexExists",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_index_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexExists.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getPolicyExists",
        "type": "Function",
        "tags": [],
        "label": "getPolicyExists",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, policy: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_policy_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getPolicyExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_policy_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getPolicyExists.$2",
            "type": "string",
            "tags": [],
            "label": "policy",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_policy_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getTemplateExists",
        "type": "Function",
        "tags": [],
        "label": "getTemplateExists",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, template: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_template_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getTemplateExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_template_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getTemplateExists.$2",
            "type": "string",
            "tags": [],
            "label": "template",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_template_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.readIndex",
        "type": "Function",
        "tags": [],
        "label": "readIndex",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/read_index/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readIndex.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_index/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.readPrivileges",
        "type": "Function",
        "tags": [],
        "label": "readPrivileges",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/read_privileges/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readPrivileges.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_privileges/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readPrivileges.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_privileges/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.setPolicy",
        "type": "Function",
        "tags": [],
        "label": "setPolicy",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, policy: string, body: Record<string, unknown>) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setPolicy.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setPolicy.$2",
            "type": "string",
            "tags": [],
            "label": "policy",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setPolicy.$3",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "Record<string, unknown>"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.setTemplate",
        "type": "Function",
        "tags": [],
        "label": "setTemplate",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string, body: Record<string, unknown>) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setTemplate.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"monitoring\" | \"security\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"transform\" | \"eql\" | \"helpers\" | \"emit\" | \"on\" | \"once\" | \"off\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"dataFrameTransformDeprecated\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setTemplate.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setTemplate.$3",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "Record<string, unknown>"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.transformError",
        "type": "Function",
        "tags": [],
        "label": "transformError",
        "description": [],
        "signature": [
          "(err: Error & Partial<",
          "ResponseError",
          "<Record<string, any>, unknown>>) => ",
          {
            "pluginId": "@kbn/securitysolution-es-utils",
            "scope": "server",
            "docId": "kibKbnSecuritysolutionEsUtilsPluginApi",
            "section": "def-server.OutputError",
            "text": "OutputError"
          }
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.transformError.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "err",
            "description": [],
            "signature": [
              "Error & Partial<",
              "ResponseError",
              "<Record<string, any>, unknown>>"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.OutputError",
        "type": "Interface",
        "tags": [],
        "label": "OutputError",
        "description": [],
        "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.OutputError.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.OutputError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}