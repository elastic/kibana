{
  "id": "@kbn/securitysolution-es-utils",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.BadRequestError",
        "type": "Class",
        "tags": [],
        "label": "BadRequestError",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/securitysolution-es-utils",
            "scope": "server",
            "docId": "kibKbnSecuritysolutionEsUtilsPluginApi",
            "section": "def-server.BadRequestError",
            "text": "BadRequestError"
          },
          " extends Error"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/bad_request_error/index.ts",
        "deprecated": false,
        "children": [],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.createBootstrapIndex",
        "type": "Function",
        "tags": [],
        "label": "createBootstrapIndex",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/create_boostrap_index/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.createBootstrapIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/create_boostrap_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.createBootstrapIndex.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/create_boostrap_index/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.decodeVersion",
        "type": "Function",
        "tags": [],
        "label": "decodeVersion",
        "description": [],
        "signature": [
          "(version: string | undefined) => {} | { ifSeqNo: number; ifPrimaryTerm: number; }"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/decode_version/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.decodeVersion.$1",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/decode_version/index.ts",
            "deprecated": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.deleteAllIndex",
        "type": "Function",
        "tags": [],
        "label": "deleteAllIndex",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, pattern: string, maxAttempts?: number) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteAllIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteAllIndex.$2",
            "type": "string",
            "tags": [],
            "label": "pattern",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteAllIndex.$3",
            "type": "number",
            "tags": [],
            "label": "maxAttempts",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_all_index/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.deletePolicy",
        "type": "Function",
        "tags": [],
        "label": "deletePolicy",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/delete_policy/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deletePolicy.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deletePolicy.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.deleteTemplate",
        "type": "Function",
        "tags": [],
        "label": "deleteTemplate",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/delete_template/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteTemplate.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_template/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.deleteTemplate.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/delete_template/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.encodeHitVersion",
        "type": "Function",
        "tags": [],
        "label": "encodeHitVersion",
        "description": [
          "\nVery similar to the encode_hit_version from saved object system from here:\nsrc/core/server/saved_objects/version/encode_hit_version.ts\n\nwith the most notably change is that it doesn't do any throws but rather just returns undefined\nif _seq_no or _primary_term does not exist."
        ],
        "signature": [
          "<T>(hit: T) => string | undefined"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/encode_hit_version/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.encodeHitVersion.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "hit",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/encode_hit_version/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getBootstrapIndexExists",
        "type": "Function",
        "tags": [],
        "label": "getBootstrapIndexExists",
        "description": [
          "\nThis function is similar to getIndexExists, but is limited to searching indices that match\nthe index pattern used as concrete backing indices (e.g. .siem-signals-default-000001).\nThis allows us to separate the indices that are actually .siem-signals indices from\nalerts as data indices that only share the .siem-signals alias.\n"
        ],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_bootstrap_index_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getBootstrapIndexExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [
              "Elasticsearch client to use to make the request"
            ],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_bootstrap_index_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getBootstrapIndexExists.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [
              "Index alias name to check for existence"
            ],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_bootstrap_index_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getIndexAliases",
        "type": "Function",
        "tags": [],
        "label": "getIndexAliases",
        "description": [
          "\nRetrieves all index aliases for a given alias name\n"
        ],
        "signature": [
          "({ esClient, alias, }: { esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">; alias: string; }) => Promise<IndexAlias[]>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexAliases.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esClient,\n  alias,\n}",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexAliases.$1.esClient",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  "{ name: string | symbol; create: <TDocument = unknown, TContext = unknown>(params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CreateResponse",
                  ", TContext>>; index: <TDocument = unknown, TContext = unknown>(params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndexResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteResponse",
                  ", TContext>>; get: <TDocument = unknown, TContext = unknown>(params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, TContext>>; update: <TDocumentR = unknown, TDocument = unknown, TPartialDocument = unknown, TContext = unknown>(params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, TContext>>; closePointInTime: <TContext = unknown>(params?: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", TContext>>; search: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument>, TContext>>; security: { authenticate: <TContext = unknown>(params?: ",
                  "SecurityAuthenticateRequest",
                  " | ",
                  "SecurityAuthenticateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityAuthenticateResponse",
                  ", TContext>>; changePassword: <TContext = unknown>(params?: ",
                  "SecurityChangePasswordRequest",
                  " | ",
                  "SecurityChangePasswordRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityChangePasswordResponse",
                  ", TContext>>; clearApiKeyCache: <TContext = unknown>(params: ",
                  "SecurityClearApiKeyCacheRequest",
                  " | ",
                  "SecurityClearApiKeyCacheRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearApiKeyCacheResponse",
                  ", TContext>>; clearCachedPrivileges: <TContext = unknown>(params: ",
                  "SecurityClearCachedPrivilegesRequest",
                  " | ",
                  "SecurityClearCachedPrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedPrivilegesResponse",
                  ", TContext>>; clearCachedRealms: <TContext = unknown>(params: ",
                  "SecurityClearCachedRealmsRequest",
                  " | ",
                  "SecurityClearCachedRealmsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedRealmsResponse",
                  ", TContext>>; clearCachedRoles: <TContext = unknown>(params: ",
                  "SecurityClearCachedRolesRequest",
                  " | ",
                  "SecurityClearCachedRolesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedRolesResponse",
                  ", TContext>>; clearCachedServiceTokens: <TContext = unknown>(params: ",
                  "SecurityClearCachedServiceTokensRequest",
                  " | ",
                  "SecurityClearCachedServiceTokensRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedServiceTokensResponse",
                  ", TContext>>; createApiKey: <TContext = unknown>(params?: ",
                  "SecurityCreateApiKeyRequest",
                  " | ",
                  "SecurityCreateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityCreateApiKeyResponse",
                  ", TContext>>; createServiceToken: <TContext = unknown>(params: ",
                  "SecurityCreateServiceTokenRequest",
                  " | ",
                  "SecurityCreateServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityCreateServiceTokenResponse",
                  ", TContext>>; deletePrivileges: <TContext = unknown>(params: ",
                  "SecurityDeletePrivilegesRequest",
                  " | ",
                  "SecurityDeletePrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeletePrivilegesResponse",
                  ", TContext>>; deleteRole: <TContext = unknown>(params: ",
                  "SecurityDeleteRoleRequest",
                  " | ",
                  "SecurityDeleteRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteRoleResponse",
                  ", TContext>>; deleteRoleMapping: <TContext = unknown>(params: ",
                  "SecurityDeleteRoleMappingRequest",
                  " | ",
                  "SecurityDeleteRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteRoleMappingResponse",
                  ", TContext>>; deleteServiceToken: <TContext = unknown>(params: ",
                  "SecurityDeleteServiceTokenRequest",
                  " | ",
                  "SecurityDeleteServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteServiceTokenResponse",
                  ", TContext>>; deleteUser: <TContext = unknown>(params: ",
                  "SecurityDeleteUserRequest",
                  " | ",
                  "SecurityDeleteUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteUserResponse",
                  ", TContext>>; disableUser: <TContext = unknown>(params: ",
                  "SecurityDisableUserRequest",
                  " | ",
                  "SecurityDisableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDisableUserResponse",
                  ", TContext>>; enableUser: <TContext = unknown>(params: ",
                  "SecurityEnableUserRequest",
                  " | ",
                  "SecurityEnableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityEnableUserResponse",
                  ", TContext>>; enrollKibana: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; enrollNode: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getApiKey: <TContext = unknown>(params?: ",
                  "SecurityGetApiKeyRequest",
                  " | ",
                  "SecurityGetApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetApiKeyResponse",
                  ", TContext>>; getBuiltinPrivileges: <TContext = unknown>(params?: ",
                  "SecurityGetBuiltinPrivilegesRequest",
                  " | ",
                  "SecurityGetBuiltinPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetBuiltinPrivilegesResponse",
                  ", TContext>>; getPrivileges: <TContext = unknown>(params?: ",
                  "SecurityGetPrivilegesRequest",
                  " | ",
                  "SecurityGetPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetPrivilegesResponse",
                  ", TContext>>; getRole: <TContext = unknown>(params?: ",
                  "SecurityGetRoleRequest",
                  " | ",
                  "SecurityGetRoleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetRoleResponse",
                  ", TContext>>; getRoleMapping: <TContext = unknown>(params?: ",
                  "SecurityGetRoleMappingRequest",
                  " | ",
                  "SecurityGetRoleMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetRoleMappingResponse",
                  ", TContext>>; getServiceAccounts: <TContext = unknown>(params?: ",
                  "SecurityGetServiceAccountsRequest",
                  " | ",
                  "SecurityGetServiceAccountsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetServiceAccountsResponse",
                  ", TContext>>; getServiceCredentials: <TContext = unknown>(params: ",
                  "SecurityGetServiceCredentialsRequest",
                  " | ",
                  "SecurityGetServiceCredentialsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetServiceCredentialsResponse",
                  ", TContext>>; getToken: <TContext = unknown>(params?: ",
                  "SecurityGetTokenRequest",
                  " | ",
                  "SecurityGetTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetTokenResponse",
                  ", TContext>>; getUser: <TContext = unknown>(params?: ",
                  "SecurityGetUserRequest",
                  " | ",
                  "SecurityGetUserRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetUserResponse",
                  ", TContext>>; getUserPrivileges: <TContext = unknown>(params?: ",
                  "SecurityGetUserPrivilegesRequest",
                  " | ",
                  "SecurityGetUserPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetUserPrivilegesResponse",
                  ", TContext>>; grantApiKey: <TContext = unknown>(params?: ",
                  "SecurityGrantApiKeyRequest",
                  " | ",
                  "SecurityGrantApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGrantApiKeyResponse",
                  ", TContext>>; hasPrivileges: <TContext = unknown>(params?: ",
                  "SecurityHasPrivilegesRequest",
                  " | ",
                  "SecurityHasPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityHasPrivilegesResponse",
                  ", TContext>>; invalidateApiKey: <TContext = unknown>(params?: ",
                  "SecurityInvalidateApiKeyRequest",
                  " | ",
                  "SecurityInvalidateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityInvalidateApiKeyResponse",
                  ", TContext>>; invalidateToken: <TContext = unknown>(params?: ",
                  "SecurityInvalidateTokenRequest",
                  " | ",
                  "SecurityInvalidateTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityInvalidateTokenResponse",
                  ", TContext>>; putPrivileges: <TContext = unknown>(params?: ",
                  "SecurityPutPrivilegesRequest",
                  " | ",
                  "SecurityPutPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutPrivilegesResponse",
                  ", TContext>>; putRole: <TContext = unknown>(params: ",
                  "SecurityPutRoleRequest",
                  " | ",
                  "SecurityPutRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutRoleResponse",
                  ", TContext>>; putRoleMapping: <TContext = unknown>(params: ",
                  "SecurityPutRoleMappingRequest",
                  " | ",
                  "SecurityPutRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutRoleMappingResponse",
                  ", TContext>>; putUser: <TContext = unknown>(params: ",
                  "SecurityPutUserRequest",
                  " | ",
                  "SecurityPutUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutUserResponse",
                  ", TContext>>; queryApiKeys: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlAuthenticate: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlCompleteLogout: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlInvalidate: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlLogout: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlPrepareAuthentication: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlServiceProviderMetadata: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; transform: { deleteTransform: <TContext = unknown>(params: ",
                  "TransformDeleteTransformRequest",
                  " | ",
                  "TransformDeleteTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformDeleteTransformResponse",
                  ", TContext>>; getTransform: <TContext = unknown>(params?: ",
                  "TransformGetTransformRequest",
                  " | ",
                  "TransformGetTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformGetTransformResponse",
                  ", TContext>>; getTransformStats: <TContext = unknown>(params: ",
                  "TransformGetTransformStatsRequest",
                  " | ",
                  "TransformGetTransformStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformGetTransformStatsResponse",
                  ", TContext>>; previewTransform: <TTransform = unknown, TContext = unknown>(params?: ",
                  "TransformPreviewTransformRequest",
                  " | ",
                  "TransformPreviewTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformPreviewTransformResponse",
                  "<TTransform>, TContext>>; putTransform: <TContext = unknown>(params: ",
                  "TransformPutTransformRequest",
                  " | ",
                  "TransformPutTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformPutTransformResponse",
                  ", TContext>>; startTransform: <TContext = unknown>(params: ",
                  "TransformStartTransformRequest",
                  " | ",
                  "TransformStartTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformStartTransformResponse",
                  ", TContext>>; stopTransform: <TContext = unknown>(params: ",
                  "TransformStopTransformRequest",
                  " | ",
                  "TransformStopTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformStopTransformResponse",
                  ", TContext>>; updateTransform: <TContext = unknown>(params: ",
                  "TransformUpdateTransformRequest",
                  " | ",
                  "TransformUpdateTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformUpdateTransformResponse",
                  ", TContext>>; upgradeTransforms: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; eql: { delete: <TContext = unknown>(params: ",
                  "EqlDeleteRequest",
                  " | ",
                  "EqlDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlDeleteResponse",
                  ", TContext>>; get: <TEvent = unknown, TContext = unknown>(params: ",
                  "EqlGetRequest",
                  " | ",
                  "EqlGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlGetResponse",
                  "<TEvent>, TContext>>; getStatus: <TContext = unknown>(params: ",
                  "EqlGetStatusRequest",
                  " | ",
                  "EqlGetStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlGetStatusResponse",
                  ", TContext>>; search: <TEvent = unknown, TContext = unknown>(params: ",
                  "EqlSearchRequest",
                  " | ",
                  "EqlSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlSearchResponse",
                  "<TEvent>, TContext>>; }; helpers: ",
                  "default",
                  "; asyncSearch: { delete: <TContext = unknown>(params: ",
                  "AsyncSearchDeleteRequest",
                  " | ",
                  "AsyncSearchDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchDeleteResponse",
                  ", TContext>>; get: <TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchGetRequest",
                  " | ",
                  "AsyncSearchGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchGetResponse",
                  "<TDocument>, TContext>>; status: <TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchStatusRequest",
                  " | ",
                  "AsyncSearchStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchStatusResponse",
                  "<TDocument>, TContext>>; submit: <TDocument = unknown, TContext = unknown>(params?: ",
                  "AsyncSearchSubmitRequest",
                  " | ",
                  "AsyncSearchSubmitRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchSubmitResponse",
                  "<TDocument>, TContext>>; }; autoscaling: { deleteAutoscalingPolicy: <TContext = unknown>(params: ",
                  "AutoscalingDeleteAutoscalingPolicyRequest",
                  " | ",
                  "AutoscalingDeleteAutoscalingPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingDeleteAutoscalingPolicyResponse",
                  ", TContext>>; getAutoscalingCapacity: <TContext = unknown>(params?: ",
                  "AutoscalingGetAutoscalingCapacityRequest",
                  " | ",
                  "AutoscalingGetAutoscalingCapacityRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingGetAutoscalingCapacityResponse",
                  ", TContext>>; getAutoscalingPolicy: <TContext = unknown>(params: ",
                  "AutoscalingGetAutoscalingPolicyRequest",
                  " | ",
                  "AutoscalingGetAutoscalingPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingAutoscalingPolicy",
                  ", TContext>>; putAutoscalingPolicy: <TContext = unknown>(params: ",
                  "AutoscalingPutAutoscalingPolicyRequest",
                  " | ",
                  "AutoscalingPutAutoscalingPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingPutAutoscalingPolicyResponse",
                  ", TContext>>; }; bulk: <TSource = unknown, TContext = unknown>(params: ",
                  "BulkRequest",
                  "<TSource> | ",
                  "BulkRequest",
                  "<TSource>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", TContext>>; cat: { aliases: <TContext = unknown>(params?: ",
                  "CatAliasesRequest",
                  " | ",
                  "CatAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatAliasesResponse",
                  ", TContext>>; allocation: <TContext = unknown>(params?: ",
                  "CatAllocationRequest",
                  " | ",
                  "CatAllocationRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatAllocationResponse",
                  ", TContext>>; count: <TContext = unknown>(params?: ",
                  "CatCountRequest",
                  " | ",
                  "CatCountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatCountResponse",
                  ", TContext>>; fielddata: <TContext = unknown>(params?: ",
                  "CatFielddataRequest",
                  " | ",
                  "CatFielddataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatFielddataResponse",
                  ", TContext>>; health: <TContext = unknown>(params?: ",
                  "CatHealthRequest",
                  " | ",
                  "CatHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatHealthResponse",
                  ", TContext>>; help: <TContext = unknown>(params?: ",
                  "CatHelpRequest",
                  " | ",
                  "CatHelpRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatHelpResponse",
                  ", TContext>>; indices: <TContext = unknown>(params?: ",
                  "CatIndicesRequest",
                  " | ",
                  "CatIndicesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatIndicesResponse",
                  ", TContext>>; master: <TContext = unknown>(params?: ",
                  "CatMasterRequest",
                  " | ",
                  "CatMasterRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMasterResponse",
                  ", TContext>>; mlDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "CatMlDataFrameAnalyticsRequest",
                  " | ",
                  "CatMlDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlDataFrameAnalyticsResponse",
                  ", TContext>>; mlDatafeeds: <TContext = unknown>(params?: ",
                  "CatMlDatafeedsRequest",
                  " | ",
                  "CatMlDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlDatafeedsResponse",
                  ", TContext>>; mlJobs: <TContext = unknown>(params?: ",
                  "CatMlJobsRequest",
                  " | ",
                  "CatMlJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlJobsResponse",
                  ", TContext>>; mlTrainedModels: <TContext = unknown>(params?: ",
                  "CatMlTrainedModelsRequest",
                  " | ",
                  "CatMlTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlTrainedModelsResponse",
                  ", TContext>>; nodeattrs: <TContext = unknown>(params?: ",
                  "CatNodeattrsRequest",
                  " | ",
                  "CatNodeattrsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatNodeattrsResponse",
                  ", TContext>>; nodes: <TContext = unknown>(params?: ",
                  "CatNodesRequest",
                  " | ",
                  "CatNodesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatNodesResponse",
                  ", TContext>>; pendingTasks: <TContext = unknown>(params?: ",
                  "CatPendingTasksRequest",
                  " | ",
                  "CatPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatPendingTasksResponse",
                  ", TContext>>; plugins: <TContext = unknown>(params?: ",
                  "CatPluginsRequest",
                  " | ",
                  "CatPluginsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatPluginsResponse",
                  ", TContext>>; recovery: <TContext = unknown>(params?: ",
                  "CatRecoveryRequest",
                  " | ",
                  "CatRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatRecoveryResponse",
                  ", TContext>>; repositories: <TContext = unknown>(params?: ",
                  "CatRepositoriesRequest",
                  " | ",
                  "CatRepositoriesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatRepositoriesResponse",
                  ", TContext>>; segments: <TContext = unknown>(params?: ",
                  "CatSegmentsRequest",
                  " | ",
                  "CatSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatSegmentsResponse",
                  ", TContext>>; shards: <TContext = unknown>(params?: ",
                  "CatShardsRequest",
                  " | ",
                  "CatShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatShardsResponse",
                  ", TContext>>; snapshots: <TContext = unknown>(params?: ",
                  "CatSnapshotsRequest",
                  " | ",
                  "CatSnapshotsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatSnapshotsResponse",
                  ", TContext>>; tasks: <TContext = unknown>(params?: ",
                  "CatTasksRequest",
                  " | ",
                  "CatTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatTasksResponse",
                  ", TContext>>; templates: <TContext = unknown>(params?: ",
                  "CatTemplatesRequest",
                  " | ",
                  "CatTemplatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatTemplatesResponse",
                  ", TContext>>; threadPool: <TContext = unknown>(params?: ",
                  "CatThreadPoolRequest",
                  " | ",
                  "CatThreadPoolRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatThreadPoolResponse",
                  ", TContext>>; transforms: <TContext = unknown>(params?: ",
                  "CatTransformsRequest",
                  " | ",
                  "CatTransformsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatTransformsResponse",
                  ", TContext>>; }; ccr: { deleteAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrDeleteAutoFollowPatternRequest",
                  " | ",
                  "CcrDeleteAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrDeleteAutoFollowPatternResponse",
                  ", TContext>>; follow: <TContext = unknown>(params: ",
                  "CcrFollowRequest",
                  " | ",
                  "CcrFollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrFollowResponse",
                  ", TContext>>; followInfo: <TContext = unknown>(params: ",
                  "CcrFollowInfoRequest",
                  " | ",
                  "CcrFollowInfoRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrFollowInfoResponse",
                  ", TContext>>; followStats: <TContext = unknown>(params: ",
                  "CcrFollowStatsRequest",
                  " | ",
                  "CcrFollowStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrFollowStatsResponse",
                  ", TContext>>; forgetFollower: <TContext = unknown>(params: ",
                  "CcrForgetFollowerRequest",
                  " | ",
                  "CcrForgetFollowerRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrForgetFollowerResponse",
                  ", TContext>>; getAutoFollowPattern: <TContext = unknown>(params?: ",
                  "CcrGetAutoFollowPatternRequest",
                  " | ",
                  "CcrGetAutoFollowPatternRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrGetAutoFollowPatternResponse",
                  ", TContext>>; pauseAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrPauseAutoFollowPatternRequest",
                  " | ",
                  "CcrPauseAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrPauseAutoFollowPatternResponse",
                  ", TContext>>; pauseFollow: <TContext = unknown>(params: ",
                  "CcrPauseFollowRequest",
                  " | ",
                  "CcrPauseFollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrPauseFollowResponse",
                  ", TContext>>; putAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrPutAutoFollowPatternRequest",
                  " | ",
                  "CcrPutAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrPutAutoFollowPatternResponse",
                  ", TContext>>; resumeAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrResumeAutoFollowPatternRequest",
                  " | ",
                  "CcrResumeAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrResumeAutoFollowPatternResponse",
                  ", TContext>>; resumeFollow: <TContext = unknown>(params: ",
                  "CcrResumeFollowRequest",
                  " | ",
                  "CcrResumeFollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrResumeFollowResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "CcrStatsRequest",
                  " | ",
                  "CcrStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrStatsResponse",
                  ", TContext>>; unfollow: <TContext = unknown>(params: ",
                  "CcrUnfollowRequest",
                  " | ",
                  "CcrUnfollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrUnfollowResponse",
                  ", TContext>>; }; clearScroll: <TContext = unknown>(params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", TContext>>; cluster: { allocationExplain: <TContext = unknown>(params?: ",
                  "ClusterAllocationExplainRequest",
                  " | ",
                  "ClusterAllocationExplainRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterAllocationExplainResponse",
                  ", TContext>>; deleteComponentTemplate: <TContext = unknown>(params: ",
                  "ClusterDeleteComponentTemplateRequest",
                  " | ",
                  "ClusterDeleteComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterDeleteComponentTemplateResponse",
                  ", TContext>>; deleteVotingConfigExclusions: <TContext = unknown>(params?: ",
                  "ClusterDeleteVotingConfigExclusionsRequest",
                  " | ",
                  "ClusterDeleteVotingConfigExclusionsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsComponentTemplate: <TContext = unknown>(params: ",
                  "ClusterExistsComponentTemplateRequest",
                  " | ",
                  "ClusterExistsComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; getComponentTemplate: <TContext = unknown>(params?: ",
                  "ClusterGetComponentTemplateRequest",
                  " | ",
                  "ClusterGetComponentTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterGetComponentTemplateResponse",
                  ", TContext>>; getSettings: <TContext = unknown>(params?: ",
                  "ClusterGetSettingsRequest",
                  " | ",
                  "ClusterGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterGetSettingsResponse",
                  ", TContext>>; health: <TContext = unknown>(params?: ",
                  "ClusterHealthRequest",
                  " | ",
                  "ClusterHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterHealthResponse",
                  ", TContext>>; pendingTasks: <TContext = unknown>(params?: ",
                  "ClusterPendingTasksRequest",
                  " | ",
                  "ClusterPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterPendingTasksResponse",
                  ", TContext>>; postVotingConfigExclusions: <TContext = unknown>(params?: ",
                  "ClusterPostVotingConfigExclusionsRequest",
                  " | ",
                  "ClusterPostVotingConfigExclusionsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; putComponentTemplate: <TContext = unknown>(params: ",
                  "ClusterPutComponentTemplateRequest",
                  " | ",
                  "ClusterPutComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterPutComponentTemplateResponse",
                  ", TContext>>; putSettings: <TContext = unknown>(params?: ",
                  "ClusterPutSettingsRequest",
                  " | ",
                  "ClusterPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterPutSettingsResponse",
                  ", TContext>>; remoteInfo: <TContext = unknown>(params?: ",
                  "ClusterRemoteInfoRequest",
                  " | ",
                  "ClusterRemoteInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterRemoteInfoResponse",
                  ", TContext>>; reroute: <TContext = unknown>(params?: ",
                  "ClusterRerouteRequest",
                  " | ",
                  "ClusterRerouteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterRerouteResponse",
                  ", TContext>>; state: <TContext = unknown>(params?: ",
                  "ClusterStateRequest",
                  " | ",
                  "ClusterStateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; stats: <TContext = unknown>(params?: ",
                  "ClusterStatsRequest",
                  " | ",
                  "ClusterStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterStatsResponse",
                  ", TContext>>; }; count: <TContext = unknown>(params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", TContext>>; danglingIndices: { deleteDanglingIndex: <TContext = unknown>(params: ",
                  "DanglingIndicesDeleteDanglingIndexRequest",
                  " | ",
                  "DanglingIndicesDeleteDanglingIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DanglingIndicesDeleteDanglingIndexResponse",
                  ", TContext>>; importDanglingIndex: <TContext = unknown>(params: ",
                  "DanglingIndicesImportDanglingIndexRequest",
                  " | ",
                  "DanglingIndicesImportDanglingIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DanglingIndicesImportDanglingIndexResponse",
                  ", TContext>>; listDanglingIndices: <TContext = unknown>(params?: ",
                  "DanglingIndicesListDanglingIndicesRequest",
                  " | ",
                  "DanglingIndicesListDanglingIndicesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DanglingIndicesListDanglingIndicesResponse",
                  ", TContext>>; }; deleteByQuery: <TContext = unknown>(params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", TContext>>; deleteByQueryRethrottle: <TContext = unknown>(params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryRethrottleResponse",
                  ", TContext>>; deleteScript: <TContext = unknown>(params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteScriptResponse",
                  ", TContext>>; enrich: { deletePolicy: <TContext = unknown>(params: ",
                  "EnrichDeletePolicyRequest",
                  " | ",
                  "EnrichDeletePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichDeletePolicyResponse",
                  ", TContext>>; executePolicy: <TContext = unknown>(params: ",
                  "EnrichExecutePolicyRequest",
                  " | ",
                  "EnrichExecutePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichExecutePolicyResponse",
                  ", TContext>>; getPolicy: <TContext = unknown>(params?: ",
                  "EnrichGetPolicyRequest",
                  " | ",
                  "EnrichGetPolicyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichGetPolicyResponse",
                  ", TContext>>; putPolicy: <TContext = unknown>(params: ",
                  "EnrichPutPolicyRequest",
                  " | ",
                  "EnrichPutPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichPutPolicyResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "EnrichStatsRequest",
                  " | ",
                  "EnrichStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichStatsResponse",
                  ", TContext>>; }; exists: <TContext = unknown>(params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsSource: <TContext = unknown>(params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; explain: <TDocument = unknown, TContext = unknown>(params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, TContext>>; features: { getFeatures: <TContext = unknown>(params?: ",
                  "FeaturesGetFeaturesRequest",
                  " | ",
                  "FeaturesGetFeaturesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "FeaturesGetFeaturesResponse",
                  ", TContext>>; resetFeatures: <TContext = unknown>(params?: ",
                  "FeaturesResetFeaturesRequest",
                  " | ",
                  "FeaturesResetFeaturesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "FeaturesResetFeaturesResponse",
                  ", TContext>>; }; fieldCaps: <TContext = unknown>(params?: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", TContext>>; fleet: { globalCheckpoints: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; msearch: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; search: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; getScript: <TContext = unknown>(params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", TContext>>; getScriptContext: <TContext = unknown>(params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", TContext>>; getScriptLanguages: <TContext = unknown>(params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", TContext>>; getSource: <TDocument = unknown, TContext = unknown>(params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<TDocument, TContext>>; graph: { explore: <TContext = unknown>(params: ",
                  "GraphExploreRequest",
                  " | ",
                  "GraphExploreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GraphExploreResponse",
                  ", TContext>>; }; ilm: { deleteLifecycle: <TContext = unknown>(params: ",
                  "IlmDeleteLifecycleRequest",
                  " | ",
                  "IlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmDeleteLifecycleResponse",
                  ", TContext>>; explainLifecycle: <TContext = unknown>(params: ",
                  "IlmExplainLifecycleRequest",
                  " | ",
                  "IlmExplainLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmExplainLifecycleResponse",
                  ", TContext>>; getLifecycle: <TContext = unknown>(params?: ",
                  "IlmGetLifecycleRequest",
                  " | ",
                  "IlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmGetLifecycleResponse",
                  ", TContext>>; getStatus: <TContext = unknown>(params?: ",
                  "IlmGetStatusRequest",
                  " | ",
                  "IlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmGetStatusResponse",
                  ", TContext>>; migrateToDataTiers: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; moveToStep: <TContext = unknown>(params: ",
                  "IlmMoveToStepRequest",
                  " | ",
                  "IlmMoveToStepRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmMoveToStepResponse",
                  ", TContext>>; putLifecycle: <TContext = unknown>(params: ",
                  "IlmPutLifecycleRequest",
                  " | ",
                  "IlmPutLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmPutLifecycleResponse",
                  ", TContext>>; removePolicy: <TContext = unknown>(params: ",
                  "IlmRemovePolicyRequest",
                  " | ",
                  "IlmRemovePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmRemovePolicyResponse",
                  ", TContext>>; retry: <TContext = unknown>(params: ",
                  "IlmRetryRequest",
                  " | ",
                  "IlmRetryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmRetryResponse",
                  ", TContext>>; start: <TContext = unknown>(params?: ",
                  "IlmStartRequest",
                  " | ",
                  "IlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmStartResponse",
                  ", TContext>>; stop: <TContext = unknown>(params?: ",
                  "IlmStopRequest",
                  " | ",
                  "IlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmStopResponse",
                  ", TContext>>; }; indices: { addBlock: <TContext = unknown>(params: ",
                  "IndicesAddBlockRequest",
                  " | ",
                  "IndicesAddBlockRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesAddBlockResponse",
                  ", TContext>>; analyze: <TContext = unknown>(params?: ",
                  "IndicesAnalyzeRequest",
                  " | ",
                  "IndicesAnalyzeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesAnalyzeResponse",
                  ", TContext>>; clearCache: <TContext = unknown>(params?: ",
                  "IndicesClearCacheRequest",
                  " | ",
                  "IndicesClearCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesClearCacheResponse",
                  ", TContext>>; clone: <TContext = unknown>(params: ",
                  "IndicesCloneRequest",
                  " | ",
                  "IndicesCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCloneResponse",
                  ", TContext>>; close: <TContext = unknown>(params: ",
                  "IndicesCloseRequest",
                  " | ",
                  "IndicesCloseRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCloseResponse",
                  ", TContext>>; create: <TContext = unknown>(params: ",
                  "IndicesCreateRequest",
                  " | ",
                  "IndicesCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCreateResponse",
                  ", TContext>>; createDataStream: <TContext = unknown>(params: ",
                  "IndicesCreateDataStreamRequest",
                  " | ",
                  "IndicesCreateDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCreateDataStreamResponse",
                  ", TContext>>; dataStreamsStats: <TContext = unknown>(params?: ",
                  "IndicesDataStreamsStatsRequest",
                  " | ",
                  "IndicesDataStreamsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDataStreamsStatsResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "IndicesDeleteRequest",
                  " | ",
                  "IndicesDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteResponse",
                  ", TContext>>; deleteAlias: <TContext = unknown>(params: ",
                  "IndicesDeleteAliasRequest",
                  " | ",
                  "IndicesDeleteAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteAliasResponse",
                  ", TContext>>; deleteDataStream: <TContext = unknown>(params: ",
                  "IndicesDeleteDataStreamRequest",
                  " | ",
                  "IndicesDeleteDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteDataStreamResponse",
                  ", TContext>>; deleteIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesDeleteIndexTemplateRequest",
                  " | ",
                  "IndicesDeleteIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteIndexTemplateResponse",
                  ", TContext>>; deleteTemplate: <TContext = unknown>(params: ",
                  "IndicesDeleteTemplateRequest",
                  " | ",
                  "IndicesDeleteTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteTemplateResponse",
                  ", TContext>>; diskUsage: <TContext = unknown>(params: ",
                  "IndicesDiskUsageRequest",
                  " | ",
                  "IndicesDiskUsageRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; exists: <TContext = unknown>(params: ",
                  "IndicesExistsRequest",
                  " | ",
                  "IndicesExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsAlias: <TContext = unknown>(params: ",
                  "IndicesExistsAliasRequest",
                  " | ",
                  "IndicesExistsAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesExistsIndexTemplateRequest",
                  " | ",
                  "IndicesExistsIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsTemplate: <TContext = unknown>(params: ",
                  "IndicesExistsTemplateRequest",
                  " | ",
                  "IndicesExistsTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsType: <TContext = unknown>(params: ",
                  "IndicesExistsTypeRequest",
                  " | ",
                  "IndicesExistsTypeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; fieldUsageStats: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; flush: <TContext = unknown>(params?: ",
                  "IndicesFlushRequest",
                  " | ",
                  "IndicesFlushRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesFlushResponse",
                  ", TContext>>; forcemerge: <TContext = unknown>(params?: ",
                  "IndicesForcemergeRequest",
                  " | ",
                  "IndicesForcemergeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesForcemergeResponse",
                  ", TContext>>; freeze: <TContext = unknown>(params: ",
                  "IndicesFreezeRequest",
                  " | ",
                  "IndicesFreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesFreezeResponse",
                  ", TContext>>; get: <TContext = unknown>(params: ",
                  "IndicesGetRequest",
                  " | ",
                  "IndicesGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetResponse",
                  ", TContext>>; getAlias: <TContext = unknown>(params?: ",
                  "IndicesGetAliasRequest",
                  " | ",
                  "IndicesGetAliasRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetAliasResponse",
                  ", TContext>>; getDataStream: <TContext = unknown>(params?: ",
                  "IndicesGetDataStreamRequest",
                  " | ",
                  "IndicesGetDataStreamRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetDataStreamResponse",
                  ", TContext>>; getFieldMapping: <TContext = unknown>(params: ",
                  "IndicesGetFieldMappingRequest",
                  " | ",
                  "IndicesGetFieldMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetFieldMappingResponse",
                  ", TContext>>; getIndexTemplate: <TContext = unknown>(params?: ",
                  "IndicesGetIndexTemplateRequest",
                  " | ",
                  "IndicesGetIndexTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetIndexTemplateResponse",
                  ", TContext>>; getMapping: <TContext = unknown>(params?: ",
                  "IndicesGetMappingRequest",
                  " | ",
                  "IndicesGetMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetMappingResponse",
                  ", TContext>>; getSettings: <TContext = unknown>(params?: ",
                  "IndicesGetSettingsRequest",
                  " | ",
                  "IndicesGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetSettingsResponse",
                  ", TContext>>; getTemplate: <TContext = unknown>(params?: ",
                  "IndicesGetTemplateRequest",
                  " | ",
                  "IndicesGetTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetTemplateResponse",
                  ", TContext>>; migrateToDataStream: <TContext = unknown>(params: ",
                  "IndicesMigrateToDataStreamRequest",
                  " | ",
                  "IndicesMigrateToDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesMigrateToDataStreamResponse",
                  ", TContext>>; modifyDataStream: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; open: <TContext = unknown>(params: ",
                  "IndicesOpenRequest",
                  " | ",
                  "IndicesOpenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesOpenResponse",
                  ", TContext>>; promoteDataStream: <TContext = unknown>(params: ",
                  "IndicesPromoteDataStreamRequest",
                  " | ",
                  "IndicesPromoteDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; putAlias: <TContext = unknown>(params: ",
                  "IndicesPutAliasRequest",
                  " | ",
                  "IndicesPutAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutAliasResponse",
                  ", TContext>>; putIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesPutIndexTemplateRequest",
                  " | ",
                  "IndicesPutIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutIndexTemplateResponse",
                  ", TContext>>; putMapping: <TContext = unknown>(params: ",
                  "IndicesPutMappingRequest",
                  " | ",
                  "IndicesPutMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutMappingResponse",
                  ", TContext>>; putSettings: <TContext = unknown>(params?: ",
                  "IndicesPutSettingsRequest",
                  " | ",
                  "IndicesPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutSettingsResponse",
                  ", TContext>>; putTemplate: <TContext = unknown>(params: ",
                  "IndicesPutTemplateRequest",
                  " | ",
                  "IndicesPutTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutTemplateResponse",
                  ", TContext>>; recovery: <TContext = unknown>(params?: ",
                  "IndicesRecoveryRequest",
                  " | ",
                  "IndicesRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesRecoveryResponse",
                  ", TContext>>; refresh: <TContext = unknown>(params?: ",
                  "IndicesRefreshRequest",
                  " | ",
                  "IndicesRefreshRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesRefreshResponse",
                  ", TContext>>; reloadSearchAnalyzers: <TContext = unknown>(params: ",
                  "IndicesReloadSearchAnalyzersRequest",
                  " | ",
                  "IndicesReloadSearchAnalyzersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesReloadSearchAnalyzersResponse",
                  ", TContext>>; resolveIndex: <TContext = unknown>(params: ",
                  "IndicesResolveIndexRequest",
                  " | ",
                  "IndicesResolveIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesResolveIndexResponse",
                  ", TContext>>; rollover: <TContext = unknown>(params: ",
                  "IndicesRolloverRequest",
                  " | ",
                  "IndicesRolloverRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesRolloverResponse",
                  ", TContext>>; segments: <TContext = unknown>(params?: ",
                  "IndicesSegmentsRequest",
                  " | ",
                  "IndicesSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSegmentsResponse",
                  ", TContext>>; shardStores: <TContext = unknown>(params?: ",
                  "IndicesShardStoresRequest",
                  " | ",
                  "IndicesShardStoresRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesShardStoresResponse",
                  ", TContext>>; shrink: <TContext = unknown>(params: ",
                  "IndicesShrinkRequest",
                  " | ",
                  "IndicesShrinkRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesShrinkResponse",
                  ", TContext>>; simulateIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesSimulateIndexTemplateRequest",
                  " | ",
                  "IndicesSimulateIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSimulateIndexTemplateResponse",
                  ", TContext>>; simulateTemplate: <TContext = unknown>(params?: ",
                  "IndicesSimulateTemplateRequest",
                  " | ",
                  "IndicesSimulateTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSimulateTemplateResponse",
                  ", TContext>>; split: <TContext = unknown>(params: ",
                  "IndicesSplitRequest",
                  " | ",
                  "IndicesSplitRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSplitResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "IndicesStatsRequest",
                  " | ",
                  "IndicesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesStatsResponse",
                  ", TContext>>; unfreeze: <TContext = unknown>(params: ",
                  "IndicesUnfreezeRequest",
                  " | ",
                  "IndicesUnfreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesUnfreezeResponse",
                  ", TContext>>; updateAliases: <TContext = unknown>(params?: ",
                  "IndicesUpdateAliasesRequest",
                  " | ",
                  "IndicesUpdateAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesUpdateAliasesResponse",
                  ", TContext>>; validateQuery: <TContext = unknown>(params?: ",
                  "IndicesValidateQueryRequest",
                  " | ",
                  "IndicesValidateQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesValidateQueryResponse",
                  ", TContext>>; }; info: <TContext = unknown>(params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", TContext>>; ingest: { deletePipeline: <TContext = unknown>(params: ",
                  "IngestDeletePipelineRequest",
                  " | ",
                  "IngestDeletePipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestDeletePipelineResponse",
                  ", TContext>>; geoIpStats: <TContext = unknown>(params?: ",
                  "IngestGeoIpStatsRequest",
                  " | ",
                  "IngestGeoIpStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestGeoIpStatsResponse",
                  ", TContext>>; getPipeline: <TContext = unknown>(params?: ",
                  "IngestGetPipelineRequest",
                  " | ",
                  "IngestGetPipelineRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestGetPipelineResponse",
                  ", TContext>>; processorGrok: <TContext = unknown>(params?: ",
                  "IngestProcessorGrokRequest",
                  " | ",
                  "IngestProcessorGrokRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestProcessorGrokResponse",
                  ", TContext>>; putPipeline: <TContext = unknown>(params: ",
                  "IngestPutPipelineRequest",
                  " | ",
                  "IngestPutPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestPutPipelineResponse",
                  ", TContext>>; simulate: <TContext = unknown>(params?: ",
                  "IngestSimulateRequest",
                  " | ",
                  "IngestSimulateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestSimulateResponse",
                  ", TContext>>; }; knnSearch: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; license: { delete: <TContext = unknown>(params?: ",
                  "LicenseDeleteRequest",
                  " | ",
                  "LicenseDeleteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseDeleteResponse",
                  ", TContext>>; get: <TContext = unknown>(params?: ",
                  "LicenseGetRequest",
                  " | ",
                  "LicenseGetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseGetResponse",
                  ", TContext>>; getBasicStatus: <TContext = unknown>(params?: ",
                  "LicenseGetBasicStatusRequest",
                  " | ",
                  "LicenseGetBasicStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseGetBasicStatusResponse",
                  ", TContext>>; getTrialStatus: <TContext = unknown>(params?: ",
                  "LicenseGetTrialStatusRequest",
                  " | ",
                  "LicenseGetTrialStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseGetTrialStatusResponse",
                  ", TContext>>; post: <TContext = unknown>(params?: ",
                  "LicensePostRequest",
                  " | ",
                  "LicensePostRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicensePostResponse",
                  ", TContext>>; postStartBasic: <TContext = unknown>(params?: ",
                  "LicensePostStartBasicRequest",
                  " | ",
                  "LicensePostStartBasicRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicensePostStartBasicResponse",
                  ", TContext>>; postStartTrial: <TContext = unknown>(params?: ",
                  "LicensePostStartTrialRequest",
                  " | ",
                  "LicensePostStartTrialRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicensePostStartTrialResponse",
                  ", TContext>>; }; logstash: { deletePipeline: <TContext = unknown>(params: ",
                  "LogstashDeletePipelineRequest",
                  " | ",
                  "LogstashDeletePipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; getPipeline: <TContext = unknown>(params: ",
                  "LogstashGetPipelineRequest",
                  " | ",
                  "LogstashGetPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, ",
                  "LogstashPipeline",
                  ">, TContext>>; putPipeline: <TContext = unknown>(params: ",
                  "LogstashPutPipelineRequest",
                  " | ",
                  "LogstashPutPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; }; mget: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, TContext>>; migration: { deprecations: <TContext = unknown>(params?: ",
                  "MigrationDeprecationsRequest",
                  " | ",
                  "MigrationDeprecationsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MigrationDeprecationsResponse",
                  ", TContext>>; getFeatureUpgradeStatus: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; postFeatureUpgrade: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; ml: { closeJob: <TContext = unknown>(params: ",
                  "MlCloseJobRequest",
                  " | ",
                  "MlCloseJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlCloseJobResponse",
                  ", TContext>>; deleteCalendar: <TContext = unknown>(params: ",
                  "MlDeleteCalendarRequest",
                  " | ",
                  "MlDeleteCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteCalendarResponse",
                  ", TContext>>; deleteCalendarEvent: <TContext = unknown>(params: ",
                  "MlDeleteCalendarEventRequest",
                  " | ",
                  "MlDeleteCalendarEventRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteCalendarEventResponse",
                  ", TContext>>; deleteCalendarJob: <TContext = unknown>(params: ",
                  "MlDeleteCalendarJobRequest",
                  " | ",
                  "MlDeleteCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteCalendarJobResponse",
                  ", TContext>>; deleteDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlDeleteDataFrameAnalyticsRequest",
                  " | ",
                  "MlDeleteDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteDataFrameAnalyticsResponse",
                  ", TContext>>; deleteDatafeed: <TContext = unknown>(params: ",
                  "MlDeleteDatafeedRequest",
                  " | ",
                  "MlDeleteDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteDatafeedResponse",
                  ", TContext>>; deleteExpiredData: <TContext = unknown>(params?: ",
                  "MlDeleteExpiredDataRequest",
                  " | ",
                  "MlDeleteExpiredDataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteExpiredDataResponse",
                  ", TContext>>; deleteFilter: <TContext = unknown>(params: ",
                  "MlDeleteFilterRequest",
                  " | ",
                  "MlDeleteFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteFilterResponse",
                  ", TContext>>; deleteForecast: <TContext = unknown>(params: ",
                  "MlDeleteForecastRequest",
                  " | ",
                  "MlDeleteForecastRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteForecastResponse",
                  ", TContext>>; deleteJob: <TContext = unknown>(params: ",
                  "MlDeleteJobRequest",
                  " | ",
                  "MlDeleteJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteJobResponse",
                  ", TContext>>; deleteModelSnapshot: <TContext = unknown>(params: ",
                  "MlDeleteModelSnapshotRequest",
                  " | ",
                  "MlDeleteModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteModelSnapshotResponse",
                  ", TContext>>; deleteTrainedModel: <TContext = unknown>(params: ",
                  "MlDeleteTrainedModelRequest",
                  " | ",
                  "MlDeleteTrainedModelRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteTrainedModelResponse",
                  ", TContext>>; deleteTrainedModelAlias: <TContext = unknown>(params: ",
                  "MlDeleteTrainedModelAliasRequest",
                  " | ",
                  "MlDeleteTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteTrainedModelAliasResponse",
                  ", TContext>>; estimateModelMemory: <TContext = unknown>(params?: ",
                  "MlEstimateModelMemoryRequest",
                  " | ",
                  "MlEstimateModelMemoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlEstimateModelMemoryResponse",
                  ", TContext>>; evaluateDataFrame: <TContext = unknown>(params?: ",
                  "MlEvaluateDataFrameRequest",
                  " | ",
                  "MlEvaluateDataFrameRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlEvaluateDataFrameResponse",
                  ", TContext>>; explainDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "MlExplainDataFrameAnalyticsRequest",
                  " | ",
                  "MlExplainDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlExplainDataFrameAnalyticsResponse",
                  ", TContext>>; flushJob: <TContext = unknown>(params: ",
                  "MlFlushJobRequest",
                  " | ",
                  "MlFlushJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlFlushJobResponse",
                  ", TContext>>; forecast: <TContext = unknown>(params: ",
                  "MlForecastRequest",
                  " | ",
                  "MlForecastRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlForecastResponse",
                  ", TContext>>; getBuckets: <TContext = unknown>(params: ",
                  "MlGetBucketsRequest",
                  " | ",
                  "MlGetBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetBucketsResponse",
                  ", TContext>>; getCalendarEvents: <TContext = unknown>(params: ",
                  "MlGetCalendarEventsRequest",
                  " | ",
                  "MlGetCalendarEventsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetCalendarEventsResponse",
                  ", TContext>>; getCalendars: <TContext = unknown>(params?: ",
                  "MlGetCalendarsRequest",
                  " | ",
                  "MlGetCalendarsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetCalendarsResponse",
                  ", TContext>>; getCategories: <TContext = unknown>(params: ",
                  "MlGetCategoriesRequest",
                  " | ",
                  "MlGetCategoriesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetCategoriesResponse",
                  ", TContext>>; getDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsRequest",
                  " | ",
                  "MlGetDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDataFrameAnalyticsResponse",
                  ", TContext>>; getDataFrameAnalyticsStats: <TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsStatsRequest",
                  " | ",
                  "MlGetDataFrameAnalyticsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDataFrameAnalyticsStatsResponse",
                  ", TContext>>; getDatafeedStats: <TContext = unknown>(params?: ",
                  "MlGetDatafeedStatsRequest",
                  " | ",
                  "MlGetDatafeedStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDatafeedStatsResponse",
                  ", TContext>>; getDatafeeds: <TContext = unknown>(params?: ",
                  "MlGetDatafeedsRequest",
                  " | ",
                  "MlGetDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDatafeedsResponse",
                  ", TContext>>; getFilters: <TContext = unknown>(params?: ",
                  "MlGetFiltersRequest",
                  " | ",
                  "MlGetFiltersRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetFiltersResponse",
                  ", TContext>>; getInfluencers: <TContext = unknown>(params: ",
                  "MlGetInfluencersRequest",
                  " | ",
                  "MlGetInfluencersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetInfluencersResponse",
                  ", TContext>>; getJobStats: <TContext = unknown>(params?: ",
                  "MlGetJobStatsRequest",
                  " | ",
                  "MlGetJobStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetJobStatsResponse",
                  ", TContext>>; getJobs: <TContext = unknown>(params?: ",
                  "MlGetJobsRequest",
                  " | ",
                  "MlGetJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetJobsResponse",
                  ", TContext>>; getModelSnapshots: <TContext = unknown>(params: ",
                  "MlGetModelSnapshotsRequest",
                  " | ",
                  "MlGetModelSnapshotsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetModelSnapshotsResponse",
                  ", TContext>>; getOverallBuckets: <TContext = unknown>(params: ",
                  "MlGetOverallBucketsRequest",
                  " | ",
                  "MlGetOverallBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetOverallBucketsResponse",
                  ", TContext>>; getRecords: <TContext = unknown>(params: ",
                  "MlGetRecordsRequest",
                  " | ",
                  "MlGetRecordsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetRecordsResponse",
                  ", TContext>>; getTrainedModelDeploymentStats: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getTrainedModels: <TContext = unknown>(params?: ",
                  "MlGetTrainedModelsRequest",
                  " | ",
                  "MlGetTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetTrainedModelsResponse",
                  ", TContext>>; getTrainedModelsStats: <TContext = unknown>(params?: ",
                  "MlGetTrainedModelsStatsRequest",
                  " | ",
                  "MlGetTrainedModelsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetTrainedModelsStatsResponse",
                  ", TContext>>; inferTrainedModelDeployment: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; info: <TContext = unknown>(params?: ",
                  "MlInfoRequest",
                  " | ",
                  "MlInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlInfoResponse",
                  ", TContext>>; openJob: <TContext = unknown>(params: ",
                  "MlOpenJobRequest",
                  " | ",
                  "MlOpenJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlOpenJobResponse",
                  ", TContext>>; postCalendarEvents: <TContext = unknown>(params: ",
                  "MlPostCalendarEventsRequest",
                  " | ",
                  "MlPostCalendarEventsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPostCalendarEventsResponse",
                  ", TContext>>; postData: <TData = unknown, TContext = unknown>(params: ",
                  "MlPostDataRequest",
                  "<TData> | ",
                  "MlPostDataRequest",
                  "<TData>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPostDataResponse",
                  ", TContext>>; previewDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "MlPreviewDataFrameAnalyticsRequest",
                  " | ",
                  "MlPreviewDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPreviewDataFrameAnalyticsResponse",
                  ", TContext>>; previewDatafeed: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MlPreviewDatafeedRequest",
                  " | ",
                  "MlPreviewDatafeedRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPreviewDatafeedResponse",
                  "<TDocument>, TContext>>; putCalendar: <TContext = unknown>(params: ",
                  "MlPutCalendarRequest",
                  " | ",
                  "MlPutCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutCalendarResponse",
                  ", TContext>>; putCalendarJob: <TContext = unknown>(params: ",
                  "MlPutCalendarJobRequest",
                  " | ",
                  "MlPutCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutCalendarJobResponse",
                  ", TContext>>; putDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlPutDataFrameAnalyticsRequest",
                  " | ",
                  "MlPutDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutDataFrameAnalyticsResponse",
                  ", TContext>>; putDatafeed: <TContext = unknown>(params: ",
                  "MlPutDatafeedRequest",
                  " | ",
                  "MlPutDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutDatafeedResponse",
                  ", TContext>>; putFilter: <TContext = unknown>(params: ",
                  "MlPutFilterRequest",
                  " | ",
                  "MlPutFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutFilterResponse",
                  ", TContext>>; putJob: <TContext = unknown>(params: ",
                  "MlPutJobRequest",
                  " | ",
                  "MlPutJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutJobResponse",
                  ", TContext>>; putTrainedModel: <TContext = unknown>(params: ",
                  "MlPutTrainedModelRequest",
                  " | ",
                  "MlPutTrainedModelRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlTrainedModelConfig",
                  ", TContext>>; putTrainedModelAlias: <TContext = unknown>(params: ",
                  "MlPutTrainedModelAliasRequest",
                  " | ",
                  "MlPutTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutTrainedModelAliasResponse",
                  ", TContext>>; putTrainedModelDefinitionPart: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; putTrainedModelVocabulary: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; resetJob: <TContext = unknown>(params: ",
                  "MlResetJobRequest",
                  " | ",
                  "MlResetJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlResetJobResponse",
                  ", TContext>>; revertModelSnapshot: <TContext = unknown>(params: ",
                  "MlRevertModelSnapshotRequest",
                  " | ",
                  "MlRevertModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlRevertModelSnapshotResponse",
                  ", TContext>>; setUpgradeMode: <TContext = unknown>(params?: ",
                  "MlSetUpgradeModeRequest",
                  " | ",
                  "MlSetUpgradeModeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlSetUpgradeModeResponse",
                  ", TContext>>; startDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlStartDataFrameAnalyticsRequest",
                  " | ",
                  "MlStartDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStartDataFrameAnalyticsResponse",
                  ", TContext>>; startDatafeed: <TContext = unknown>(params: ",
                  "MlStartDatafeedRequest",
                  " | ",
                  "MlStartDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStartDatafeedResponse",
                  ", TContext>>; startTrainedModelDeployment: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; stopDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlStopDataFrameAnalyticsRequest",
                  " | ",
                  "MlStopDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStopDataFrameAnalyticsResponse",
                  ", TContext>>; stopDatafeed: <TContext = unknown>(params: ",
                  "MlStopDatafeedRequest",
                  " | ",
                  "MlStopDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStopDatafeedResponse",
                  ", TContext>>; stopTrainedModelDeployment: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; updateDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlUpdateDataFrameAnalyticsRequest",
                  " | ",
                  "MlUpdateDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateDataFrameAnalyticsResponse",
                  ", TContext>>; updateDatafeed: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; updateFilter: <TContext = unknown>(params: ",
                  "MlUpdateFilterRequest",
                  " | ",
                  "MlUpdateFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateFilterResponse",
                  ", TContext>>; updateJob: <TContext = unknown>(params: ",
                  "MlUpdateJobRequest",
                  " | ",
                  "MlUpdateJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateJobResponse",
                  ", TContext>>; updateModelSnapshot: <TContext = unknown>(params: ",
                  "MlUpdateModelSnapshotRequest",
                  " | ",
                  "MlUpdateModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateModelSnapshotResponse",
                  ", TContext>>; upgradeJobSnapshot: <TContext = unknown>(params: ",
                  "MlUpgradeJobSnapshotRequest",
                  " | ",
                  "MlUpgradeJobSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpgradeJobSnapshotResponse",
                  ", TContext>>; validate: <TContext = unknown>(params?: ",
                  "MlValidateRequest",
                  " | ",
                  "MlValidateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlValidateResponse",
                  ", TContext>>; validateDetector: <TContext = unknown>(params?: ",
                  "MlValidateDetectorRequest",
                  " | ",
                  "MlValidateDetectorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlValidateDetectorResponse",
                  ", TContext>>; }; monitoring: { bulk: <TSource = unknown, TContext = unknown>(params: ",
                  "MonitoringBulkRequest",
                  "<TSource> | ",
                  "MonitoringBulkRequest",
                  "<TSource>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MonitoringBulkResponse",
                  ", TContext>>; }; msearch: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument>, TContext>>; msearchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument>, TContext>>; mtermvectors: <TContext = unknown>(params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", TContext>>; nodes: { clearRepositoriesMeteringArchive: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getRepositoriesMeteringInfo: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; hotThreads: <TContext = unknown>(params?: ",
                  "NodesHotThreadsRequest",
                  " | ",
                  "NodesHotThreadsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesHotThreadsResponse",
                  ", TContext>>; info: <TContext = unknown>(params?: ",
                  "NodesInfoRequest",
                  " | ",
                  "NodesInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesInfoResponse",
                  ", TContext>>; reloadSecureSettings: <TContext = unknown>(params?: ",
                  "NodesReloadSecureSettingsRequest",
                  " | ",
                  "NodesReloadSecureSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesReloadSecureSettingsResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "NodesStatsRequest",
                  " | ",
                  "NodesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesStatsResponse",
                  ", TContext>>; usage: <TContext = unknown>(params?: ",
                  "NodesUsageRequest",
                  " | ",
                  "NodesUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesUsageResponse",
                  ", TContext>>; }; openPointInTime: <TContext = unknown>(params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", TContext>>; ping: <TContext = unknown>(params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; putScript: <TContext = unknown>(params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "PutScriptResponse",
                  ", TContext>>; rankEval: <TContext = unknown>(params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", TContext>>; reindex: <TContext = unknown>(params?: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", TContext>>; reindexRethrottle: <TContext = unknown>(params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", TContext>>; renderSearchTemplate: <TContext = unknown>(params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", TContext>>; rollup: { deleteJob: <TContext = unknown>(params: ",
                  "RollupDeleteJobRequest",
                  " | ",
                  "RollupDeleteJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupDeleteJobResponse",
                  ", TContext>>; getJobs: <TContext = unknown>(params?: ",
                  "RollupGetJobsRequest",
                  " | ",
                  "RollupGetJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupGetJobsResponse",
                  ", TContext>>; getRollupCaps: <TContext = unknown>(params?: ",
                  "RollupGetRollupCapsRequest",
                  " | ",
                  "RollupGetRollupCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupGetRollupCapsResponse",
                  ", TContext>>; getRollupIndexCaps: <TContext = unknown>(params: ",
                  "RollupGetRollupIndexCapsRequest",
                  " | ",
                  "RollupGetRollupIndexCapsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupGetRollupIndexCapsResponse",
                  ", TContext>>; putJob: <TContext = unknown>(params: ",
                  "RollupPutJobRequest",
                  " | ",
                  "RollupPutJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupPutJobResponse",
                  ", TContext>>; rollup: <TContext = unknown>(params: ",
                  "RollupRollupRequest",
                  " | ",
                  "RollupRollupRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; rollupSearch: <TDocument = unknown, TContext = unknown>(params: ",
                  "RollupRollupSearchRequest",
                  " | ",
                  "RollupRollupSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupRollupSearchResponse",
                  "<TDocument>, TContext>>; startJob: <TContext = unknown>(params: ",
                  "RollupStartJobRequest",
                  " | ",
                  "RollupStartJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupStartJobResponse",
                  ", TContext>>; stopJob: <TContext = unknown>(params: ",
                  "RollupStopJobRequest",
                  " | ",
                  "RollupStopJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupStopJobResponse",
                  ", TContext>>; }; scriptsPainlessExecute: <TResult = unknown, TContext = unknown>(params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, TContext>>; scroll: <TDocument = unknown, TContext = unknown>(params?: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument>, TContext>>; searchMvt: <TContext = unknown>(params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<ArrayBuffer, TContext>>; searchShards: <TContext = unknown>(params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", TContext>>; searchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, TContext>>; searchableSnapshots: { cacheStats: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; clearCache: <TContext = unknown>(params?: ",
                  "SearchableSnapshotsClearCacheRequest",
                  " | ",
                  "SearchableSnapshotsClearCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; mount: <TContext = unknown>(params: ",
                  "SearchableSnapshotsMountRequest",
                  " | ",
                  "SearchableSnapshotsMountRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchableSnapshotsMountResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "SearchableSnapshotsStatsRequest",
                  " | ",
                  "SearchableSnapshotsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchableSnapshotsStatsResponse",
                  ", TContext>>; }; shutdown: { deleteNode: <TContext = unknown>(params: ",
                  "ShutdownDeleteNodeRequest",
                  " | ",
                  "ShutdownDeleteNodeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ShutdownDeleteNodeResponse",
                  ", TContext>>; getNode: <TContext = unknown>(params?: ",
                  "ShutdownGetNodeRequest",
                  " | ",
                  "ShutdownGetNodeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ShutdownGetNodeResponse",
                  ", TContext>>; putNode: <TContext = unknown>(params: ",
                  "ShutdownPutNodeRequest",
                  " | ",
                  "ShutdownPutNodeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ShutdownPutNodeResponse",
                  ", TContext>>; }; slm: { deleteLifecycle: <TContext = unknown>(params: ",
                  "SlmDeleteLifecycleRequest",
                  " | ",
                  "SlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmDeleteLifecycleResponse",
                  ", TContext>>; executeLifecycle: <TContext = unknown>(params: ",
                  "SlmExecuteLifecycleRequest",
                  " | ",
                  "SlmExecuteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmExecuteLifecycleResponse",
                  ", TContext>>; executeRetention: <TContext = unknown>(params?: ",
                  "SlmExecuteRetentionRequest",
                  " | ",
                  "SlmExecuteRetentionRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmExecuteRetentionResponse",
                  ", TContext>>; getLifecycle: <TContext = unknown>(params?: ",
                  "SlmGetLifecycleRequest",
                  " | ",
                  "SlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmGetLifecycleResponse",
                  ", TContext>>; getStats: <TContext = unknown>(params?: ",
                  "SlmGetStatsRequest",
                  " | ",
                  "SlmGetStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmGetStatsResponse",
                  ", TContext>>; getStatus: <TContext = unknown>(params?: ",
                  "SlmGetStatusRequest",
                  " | ",
                  "SlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmGetStatusResponse",
                  ", TContext>>; putLifecycle: <TContext = unknown>(params: ",
                  "SlmPutLifecycleRequest",
                  " | ",
                  "SlmPutLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmPutLifecycleResponse",
                  ", TContext>>; start: <TContext = unknown>(params?: ",
                  "SlmStartRequest",
                  " | ",
                  "SlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmStartResponse",
                  ", TContext>>; stop: <TContext = unknown>(params?: ",
                  "SlmStopRequest",
                  " | ",
                  "SlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmStopResponse",
                  ", TContext>>; }; snapshot: { cleanupRepository: <TContext = unknown>(params: ",
                  "SnapshotCleanupRepositoryRequest",
                  " | ",
                  "SnapshotCleanupRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCleanupRepositoryResponse",
                  ", TContext>>; clone: <TContext = unknown>(params: ",
                  "SnapshotCloneRequest",
                  " | ",
                  "SnapshotCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCloneResponse",
                  ", TContext>>; create: <TContext = unknown>(params: ",
                  "SnapshotCreateRequest",
                  " | ",
                  "SnapshotCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCreateResponse",
                  ", TContext>>; createRepository: <TContext = unknown>(params: ",
                  "SnapshotCreateRepositoryRequest",
                  " | ",
                  "SnapshotCreateRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCreateRepositoryResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "SnapshotDeleteRequest",
                  " | ",
                  "SnapshotDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotDeleteResponse",
                  ", TContext>>; deleteRepository: <TContext = unknown>(params: ",
                  "SnapshotDeleteRepositoryRequest",
                  " | ",
                  "SnapshotDeleteRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotDeleteRepositoryResponse",
                  ", TContext>>; get: <TContext = unknown>(params: ",
                  "SnapshotGetRequest",
                  " | ",
                  "SnapshotGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotGetResponse",
                  ", TContext>>; getRepository: <TContext = unknown>(params?: ",
                  "SnapshotGetRepositoryRequest",
                  " | ",
                  "SnapshotGetRepositoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotGetRepositoryResponse",
                  ", TContext>>; repositoryAnalyze: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; restore: <TContext = unknown>(params: ",
                  "SnapshotRestoreRequest",
                  " | ",
                  "SnapshotRestoreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotRestoreResponse",
                  ", TContext>>; status: <TContext = unknown>(params?: ",
                  "SnapshotStatusRequest",
                  " | ",
                  "SnapshotStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotStatusResponse",
                  ", TContext>>; verifyRepository: <TContext = unknown>(params: ",
                  "SnapshotVerifyRepositoryRequest",
                  " | ",
                  "SnapshotVerifyRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotVerifyRepositoryResponse",
                  ", TContext>>; }; sql: { clearCursor: <TContext = unknown>(params?: ",
                  "SqlClearCursorRequest",
                  " | ",
                  "SqlClearCursorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SqlClearCursorResponse",
                  ", TContext>>; deleteAsync: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getAsync: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getAsyncStatus: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; query: <TContext = unknown>(params?: ",
                  "SqlQueryRequest",
                  " | ",
                  "SqlQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SqlQueryResponse",
                  ", TContext>>; translate: <TContext = unknown>(params?: ",
                  "SqlTranslateRequest",
                  " | ",
                  "SqlTranslateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SqlTranslateResponse",
                  ", TContext>>; }; ssl: { certificates: <TContext = unknown>(params?: ",
                  "SslCertificatesRequest",
                  " | ",
                  "SslCertificatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SslCertificatesResponse",
                  ", TContext>>; }; tasks: { cancel: <TContext = unknown>(params?: ",
                  "TasksCancelRequest",
                  " | ",
                  "TasksCancelRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TasksCancelResponse",
                  ", TContext>>; get: <TContext = unknown>(params: ",
                  "TasksGetRequest",
                  " | ",
                  "TasksGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TasksGetResponse",
                  ", TContext>>; list: <TContext = unknown>(params?: ",
                  "TasksListRequest",
                  " | ",
                  "TasksListRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TasksListResponse",
                  ", TContext>>; }; termsEnum: <TContext = unknown>(params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", TContext>>; termvectors: <TDocument = unknown, TContext = unknown>(params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", TContext>>; textStructure: { findStructure: <TJsonDocument = unknown, TContext = unknown>(params: ",
                  "TextStructureFindStructureRequest",
                  "<TJsonDocument> | ",
                  "TextStructureFindStructureRequest",
                  "<TJsonDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TextStructureFindStructureResponse",
                  ", TContext>>; }; updateByQuery: <TContext = unknown>(params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", TContext>>; updateByQueryRethrottle: <TContext = unknown>(params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", TContext>>; watcher: { ackWatch: <TContext = unknown>(params: ",
                  "WatcherAckWatchRequest",
                  " | ",
                  "WatcherAckWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherAckWatchResponse",
                  ", TContext>>; activateWatch: <TContext = unknown>(params: ",
                  "WatcherActivateWatchRequest",
                  " | ",
                  "WatcherActivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherActivateWatchResponse",
                  ", TContext>>; deactivateWatch: <TContext = unknown>(params: ",
                  "WatcherDeactivateWatchRequest",
                  " | ",
                  "WatcherDeactivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherDeactivateWatchResponse",
                  ", TContext>>; deleteWatch: <TContext = unknown>(params: ",
                  "WatcherDeleteWatchRequest",
                  " | ",
                  "WatcherDeleteWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherDeleteWatchResponse",
                  ", TContext>>; executeWatch: <TContext = unknown>(params?: ",
                  "WatcherExecuteWatchRequest",
                  " | ",
                  "WatcherExecuteWatchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherExecuteWatchResponse",
                  ", TContext>>; getWatch: <TContext = unknown>(params: ",
                  "WatcherGetWatchRequest",
                  " | ",
                  "WatcherGetWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherGetWatchResponse",
                  ", TContext>>; putWatch: <TContext = unknown>(params: ",
                  "WatcherPutWatchRequest",
                  " | ",
                  "WatcherPutWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherPutWatchResponse",
                  ", TContext>>; queryWatches: <TContext = unknown>(params?: ",
                  "WatcherQueryWatchesRequest",
                  " | ",
                  "WatcherQueryWatchesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherQueryWatchesResponse",
                  ", TContext>>; start: <TContext = unknown>(params?: ",
                  "WatcherStartRequest",
                  " | ",
                  "WatcherStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherStartResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "WatcherStatsRequest",
                  " | ",
                  "WatcherStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherStatsResponse",
                  ", TContext>>; stop: <TContext = unknown>(params?: ",
                  "WatcherStopRequest",
                  " | ",
                  "WatcherStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherStopResponse",
                  ", TContext>>; }; xpack: { info: <TContext = unknown>(params?: ",
                  "XpackInfoRequest",
                  " | ",
                  "XpackInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "XpackInfoResponse",
                  ", TContext>>; usage: <TContext = unknown>(params?: ",
                  "XpackUsageRequest",
                  " | ",
                  "XpackUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "XpackUsageResponse",
                  ", TContext>>; }; }"
                ],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexAliases.$1.alias",
                "type": "string",
                "tags": [],
                "label": "alias",
                "description": [],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_aliases/index.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [
          "an array of {@link IndexAlias} objects"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getIndexCount",
        "type": "Function",
        "tags": [],
        "label": "getIndexCount",
        "description": [
          "\nRetrieves the count of documents in a given index\n"
        ],
        "signature": [
          "({ esClient, index, }: { esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">; index: string; }) => Promise<number>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexCount.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esClient,\n  index,\n}",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexCount.$1.esClient",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  "{ name: string | symbol; create: <TDocument = unknown, TContext = unknown>(params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CreateResponse",
                  ", TContext>>; index: <TDocument = unknown, TContext = unknown>(params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndexResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteResponse",
                  ", TContext>>; get: <TDocument = unknown, TContext = unknown>(params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, TContext>>; update: <TDocumentR = unknown, TDocument = unknown, TPartialDocument = unknown, TContext = unknown>(params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, TContext>>; closePointInTime: <TContext = unknown>(params?: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", TContext>>; search: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument>, TContext>>; security: { authenticate: <TContext = unknown>(params?: ",
                  "SecurityAuthenticateRequest",
                  " | ",
                  "SecurityAuthenticateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityAuthenticateResponse",
                  ", TContext>>; changePassword: <TContext = unknown>(params?: ",
                  "SecurityChangePasswordRequest",
                  " | ",
                  "SecurityChangePasswordRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityChangePasswordResponse",
                  ", TContext>>; clearApiKeyCache: <TContext = unknown>(params: ",
                  "SecurityClearApiKeyCacheRequest",
                  " | ",
                  "SecurityClearApiKeyCacheRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearApiKeyCacheResponse",
                  ", TContext>>; clearCachedPrivileges: <TContext = unknown>(params: ",
                  "SecurityClearCachedPrivilegesRequest",
                  " | ",
                  "SecurityClearCachedPrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedPrivilegesResponse",
                  ", TContext>>; clearCachedRealms: <TContext = unknown>(params: ",
                  "SecurityClearCachedRealmsRequest",
                  " | ",
                  "SecurityClearCachedRealmsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedRealmsResponse",
                  ", TContext>>; clearCachedRoles: <TContext = unknown>(params: ",
                  "SecurityClearCachedRolesRequest",
                  " | ",
                  "SecurityClearCachedRolesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedRolesResponse",
                  ", TContext>>; clearCachedServiceTokens: <TContext = unknown>(params: ",
                  "SecurityClearCachedServiceTokensRequest",
                  " | ",
                  "SecurityClearCachedServiceTokensRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityClearCachedServiceTokensResponse",
                  ", TContext>>; createApiKey: <TContext = unknown>(params?: ",
                  "SecurityCreateApiKeyRequest",
                  " | ",
                  "SecurityCreateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityCreateApiKeyResponse",
                  ", TContext>>; createServiceToken: <TContext = unknown>(params: ",
                  "SecurityCreateServiceTokenRequest",
                  " | ",
                  "SecurityCreateServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityCreateServiceTokenResponse",
                  ", TContext>>; deletePrivileges: <TContext = unknown>(params: ",
                  "SecurityDeletePrivilegesRequest",
                  " | ",
                  "SecurityDeletePrivilegesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeletePrivilegesResponse",
                  ", TContext>>; deleteRole: <TContext = unknown>(params: ",
                  "SecurityDeleteRoleRequest",
                  " | ",
                  "SecurityDeleteRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteRoleResponse",
                  ", TContext>>; deleteRoleMapping: <TContext = unknown>(params: ",
                  "SecurityDeleteRoleMappingRequest",
                  " | ",
                  "SecurityDeleteRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteRoleMappingResponse",
                  ", TContext>>; deleteServiceToken: <TContext = unknown>(params: ",
                  "SecurityDeleteServiceTokenRequest",
                  " | ",
                  "SecurityDeleteServiceTokenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteServiceTokenResponse",
                  ", TContext>>; deleteUser: <TContext = unknown>(params: ",
                  "SecurityDeleteUserRequest",
                  " | ",
                  "SecurityDeleteUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDeleteUserResponse",
                  ", TContext>>; disableUser: <TContext = unknown>(params: ",
                  "SecurityDisableUserRequest",
                  " | ",
                  "SecurityDisableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityDisableUserResponse",
                  ", TContext>>; enableUser: <TContext = unknown>(params: ",
                  "SecurityEnableUserRequest",
                  " | ",
                  "SecurityEnableUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityEnableUserResponse",
                  ", TContext>>; enrollKibana: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; enrollNode: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getApiKey: <TContext = unknown>(params?: ",
                  "SecurityGetApiKeyRequest",
                  " | ",
                  "SecurityGetApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetApiKeyResponse",
                  ", TContext>>; getBuiltinPrivileges: <TContext = unknown>(params?: ",
                  "SecurityGetBuiltinPrivilegesRequest",
                  " | ",
                  "SecurityGetBuiltinPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetBuiltinPrivilegesResponse",
                  ", TContext>>; getPrivileges: <TContext = unknown>(params?: ",
                  "SecurityGetPrivilegesRequest",
                  " | ",
                  "SecurityGetPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetPrivilegesResponse",
                  ", TContext>>; getRole: <TContext = unknown>(params?: ",
                  "SecurityGetRoleRequest",
                  " | ",
                  "SecurityGetRoleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetRoleResponse",
                  ", TContext>>; getRoleMapping: <TContext = unknown>(params?: ",
                  "SecurityGetRoleMappingRequest",
                  " | ",
                  "SecurityGetRoleMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetRoleMappingResponse",
                  ", TContext>>; getServiceAccounts: <TContext = unknown>(params?: ",
                  "SecurityGetServiceAccountsRequest",
                  " | ",
                  "SecurityGetServiceAccountsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetServiceAccountsResponse",
                  ", TContext>>; getServiceCredentials: <TContext = unknown>(params: ",
                  "SecurityGetServiceCredentialsRequest",
                  " | ",
                  "SecurityGetServiceCredentialsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetServiceCredentialsResponse",
                  ", TContext>>; getToken: <TContext = unknown>(params?: ",
                  "SecurityGetTokenRequest",
                  " | ",
                  "SecurityGetTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetTokenResponse",
                  ", TContext>>; getUser: <TContext = unknown>(params?: ",
                  "SecurityGetUserRequest",
                  " | ",
                  "SecurityGetUserRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetUserResponse",
                  ", TContext>>; getUserPrivileges: <TContext = unknown>(params?: ",
                  "SecurityGetUserPrivilegesRequest",
                  " | ",
                  "SecurityGetUserPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGetUserPrivilegesResponse",
                  ", TContext>>; grantApiKey: <TContext = unknown>(params?: ",
                  "SecurityGrantApiKeyRequest",
                  " | ",
                  "SecurityGrantApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityGrantApiKeyResponse",
                  ", TContext>>; hasPrivileges: <TContext = unknown>(params?: ",
                  "SecurityHasPrivilegesRequest",
                  " | ",
                  "SecurityHasPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityHasPrivilegesResponse",
                  ", TContext>>; invalidateApiKey: <TContext = unknown>(params?: ",
                  "SecurityInvalidateApiKeyRequest",
                  " | ",
                  "SecurityInvalidateApiKeyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityInvalidateApiKeyResponse",
                  ", TContext>>; invalidateToken: <TContext = unknown>(params?: ",
                  "SecurityInvalidateTokenRequest",
                  " | ",
                  "SecurityInvalidateTokenRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityInvalidateTokenResponse",
                  ", TContext>>; putPrivileges: <TContext = unknown>(params?: ",
                  "SecurityPutPrivilegesRequest",
                  " | ",
                  "SecurityPutPrivilegesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutPrivilegesResponse",
                  ", TContext>>; putRole: <TContext = unknown>(params: ",
                  "SecurityPutRoleRequest",
                  " | ",
                  "SecurityPutRoleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutRoleResponse",
                  ", TContext>>; putRoleMapping: <TContext = unknown>(params: ",
                  "SecurityPutRoleMappingRequest",
                  " | ",
                  "SecurityPutRoleMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutRoleMappingResponse",
                  ", TContext>>; putUser: <TContext = unknown>(params: ",
                  "SecurityPutUserRequest",
                  " | ",
                  "SecurityPutUserRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SecurityPutUserResponse",
                  ", TContext>>; queryApiKeys: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlAuthenticate: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlCompleteLogout: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlInvalidate: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlLogout: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlPrepareAuthentication: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; samlServiceProviderMetadata: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; transform: { deleteTransform: <TContext = unknown>(params: ",
                  "TransformDeleteTransformRequest",
                  " | ",
                  "TransformDeleteTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformDeleteTransformResponse",
                  ", TContext>>; getTransform: <TContext = unknown>(params?: ",
                  "TransformGetTransformRequest",
                  " | ",
                  "TransformGetTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformGetTransformResponse",
                  ", TContext>>; getTransformStats: <TContext = unknown>(params: ",
                  "TransformGetTransformStatsRequest",
                  " | ",
                  "TransformGetTransformStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformGetTransformStatsResponse",
                  ", TContext>>; previewTransform: <TTransform = unknown, TContext = unknown>(params?: ",
                  "TransformPreviewTransformRequest",
                  " | ",
                  "TransformPreviewTransformRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformPreviewTransformResponse",
                  "<TTransform>, TContext>>; putTransform: <TContext = unknown>(params: ",
                  "TransformPutTransformRequest",
                  " | ",
                  "TransformPutTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformPutTransformResponse",
                  ", TContext>>; startTransform: <TContext = unknown>(params: ",
                  "TransformStartTransformRequest",
                  " | ",
                  "TransformStartTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformStartTransformResponse",
                  ", TContext>>; stopTransform: <TContext = unknown>(params: ",
                  "TransformStopTransformRequest",
                  " | ",
                  "TransformStopTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformStopTransformResponse",
                  ", TContext>>; updateTransform: <TContext = unknown>(params: ",
                  "TransformUpdateTransformRequest",
                  " | ",
                  "TransformUpdateTransformRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TransformUpdateTransformResponse",
                  ", TContext>>; upgradeTransforms: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; eql: { delete: <TContext = unknown>(params: ",
                  "EqlDeleteRequest",
                  " | ",
                  "EqlDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlDeleteResponse",
                  ", TContext>>; get: <TEvent = unknown, TContext = unknown>(params: ",
                  "EqlGetRequest",
                  " | ",
                  "EqlGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlGetResponse",
                  "<TEvent>, TContext>>; getStatus: <TContext = unknown>(params: ",
                  "EqlGetStatusRequest",
                  " | ",
                  "EqlGetStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlGetStatusResponse",
                  ", TContext>>; search: <TEvent = unknown, TContext = unknown>(params: ",
                  "EqlSearchRequest",
                  " | ",
                  "EqlSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EqlSearchResponse",
                  "<TEvent>, TContext>>; }; helpers: ",
                  "default",
                  "; asyncSearch: { delete: <TContext = unknown>(params: ",
                  "AsyncSearchDeleteRequest",
                  " | ",
                  "AsyncSearchDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchDeleteResponse",
                  ", TContext>>; get: <TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchGetRequest",
                  " | ",
                  "AsyncSearchGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchGetResponse",
                  "<TDocument>, TContext>>; status: <TDocument = unknown, TContext = unknown>(params: ",
                  "AsyncSearchStatusRequest",
                  " | ",
                  "AsyncSearchStatusRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchStatusResponse",
                  "<TDocument>, TContext>>; submit: <TDocument = unknown, TContext = unknown>(params?: ",
                  "AsyncSearchSubmitRequest",
                  " | ",
                  "AsyncSearchSubmitRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AsyncSearchSubmitResponse",
                  "<TDocument>, TContext>>; }; autoscaling: { deleteAutoscalingPolicy: <TContext = unknown>(params: ",
                  "AutoscalingDeleteAutoscalingPolicyRequest",
                  " | ",
                  "AutoscalingDeleteAutoscalingPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingDeleteAutoscalingPolicyResponse",
                  ", TContext>>; getAutoscalingCapacity: <TContext = unknown>(params?: ",
                  "AutoscalingGetAutoscalingCapacityRequest",
                  " | ",
                  "AutoscalingGetAutoscalingCapacityRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingGetAutoscalingCapacityResponse",
                  ", TContext>>; getAutoscalingPolicy: <TContext = unknown>(params: ",
                  "AutoscalingGetAutoscalingPolicyRequest",
                  " | ",
                  "AutoscalingGetAutoscalingPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingAutoscalingPolicy",
                  ", TContext>>; putAutoscalingPolicy: <TContext = unknown>(params: ",
                  "AutoscalingPutAutoscalingPolicyRequest",
                  " | ",
                  "AutoscalingPutAutoscalingPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "AutoscalingPutAutoscalingPolicyResponse",
                  ", TContext>>; }; bulk: <TSource = unknown, TContext = unknown>(params: ",
                  "BulkRequest",
                  "<TSource> | ",
                  "BulkRequest",
                  "<TSource>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", TContext>>; cat: { aliases: <TContext = unknown>(params?: ",
                  "CatAliasesRequest",
                  " | ",
                  "CatAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatAliasesResponse",
                  ", TContext>>; allocation: <TContext = unknown>(params?: ",
                  "CatAllocationRequest",
                  " | ",
                  "CatAllocationRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatAllocationResponse",
                  ", TContext>>; count: <TContext = unknown>(params?: ",
                  "CatCountRequest",
                  " | ",
                  "CatCountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatCountResponse",
                  ", TContext>>; fielddata: <TContext = unknown>(params?: ",
                  "CatFielddataRequest",
                  " | ",
                  "CatFielddataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatFielddataResponse",
                  ", TContext>>; health: <TContext = unknown>(params?: ",
                  "CatHealthRequest",
                  " | ",
                  "CatHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatHealthResponse",
                  ", TContext>>; help: <TContext = unknown>(params?: ",
                  "CatHelpRequest",
                  " | ",
                  "CatHelpRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatHelpResponse",
                  ", TContext>>; indices: <TContext = unknown>(params?: ",
                  "CatIndicesRequest",
                  " | ",
                  "CatIndicesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatIndicesResponse",
                  ", TContext>>; master: <TContext = unknown>(params?: ",
                  "CatMasterRequest",
                  " | ",
                  "CatMasterRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMasterResponse",
                  ", TContext>>; mlDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "CatMlDataFrameAnalyticsRequest",
                  " | ",
                  "CatMlDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlDataFrameAnalyticsResponse",
                  ", TContext>>; mlDatafeeds: <TContext = unknown>(params?: ",
                  "CatMlDatafeedsRequest",
                  " | ",
                  "CatMlDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlDatafeedsResponse",
                  ", TContext>>; mlJobs: <TContext = unknown>(params?: ",
                  "CatMlJobsRequest",
                  " | ",
                  "CatMlJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlJobsResponse",
                  ", TContext>>; mlTrainedModels: <TContext = unknown>(params?: ",
                  "CatMlTrainedModelsRequest",
                  " | ",
                  "CatMlTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatMlTrainedModelsResponse",
                  ", TContext>>; nodeattrs: <TContext = unknown>(params?: ",
                  "CatNodeattrsRequest",
                  " | ",
                  "CatNodeattrsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatNodeattrsResponse",
                  ", TContext>>; nodes: <TContext = unknown>(params?: ",
                  "CatNodesRequest",
                  " | ",
                  "CatNodesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatNodesResponse",
                  ", TContext>>; pendingTasks: <TContext = unknown>(params?: ",
                  "CatPendingTasksRequest",
                  " | ",
                  "CatPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatPendingTasksResponse",
                  ", TContext>>; plugins: <TContext = unknown>(params?: ",
                  "CatPluginsRequest",
                  " | ",
                  "CatPluginsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatPluginsResponse",
                  ", TContext>>; recovery: <TContext = unknown>(params?: ",
                  "CatRecoveryRequest",
                  " | ",
                  "CatRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatRecoveryResponse",
                  ", TContext>>; repositories: <TContext = unknown>(params?: ",
                  "CatRepositoriesRequest",
                  " | ",
                  "CatRepositoriesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatRepositoriesResponse",
                  ", TContext>>; segments: <TContext = unknown>(params?: ",
                  "CatSegmentsRequest",
                  " | ",
                  "CatSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatSegmentsResponse",
                  ", TContext>>; shards: <TContext = unknown>(params?: ",
                  "CatShardsRequest",
                  " | ",
                  "CatShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatShardsResponse",
                  ", TContext>>; snapshots: <TContext = unknown>(params?: ",
                  "CatSnapshotsRequest",
                  " | ",
                  "CatSnapshotsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatSnapshotsResponse",
                  ", TContext>>; tasks: <TContext = unknown>(params?: ",
                  "CatTasksRequest",
                  " | ",
                  "CatTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatTasksResponse",
                  ", TContext>>; templates: <TContext = unknown>(params?: ",
                  "CatTemplatesRequest",
                  " | ",
                  "CatTemplatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatTemplatesResponse",
                  ", TContext>>; threadPool: <TContext = unknown>(params?: ",
                  "CatThreadPoolRequest",
                  " | ",
                  "CatThreadPoolRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatThreadPoolResponse",
                  ", TContext>>; transforms: <TContext = unknown>(params?: ",
                  "CatTransformsRequest",
                  " | ",
                  "CatTransformsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CatTransformsResponse",
                  ", TContext>>; }; ccr: { deleteAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrDeleteAutoFollowPatternRequest",
                  " | ",
                  "CcrDeleteAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrDeleteAutoFollowPatternResponse",
                  ", TContext>>; follow: <TContext = unknown>(params: ",
                  "CcrFollowRequest",
                  " | ",
                  "CcrFollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrFollowResponse",
                  ", TContext>>; followInfo: <TContext = unknown>(params: ",
                  "CcrFollowInfoRequest",
                  " | ",
                  "CcrFollowInfoRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrFollowInfoResponse",
                  ", TContext>>; followStats: <TContext = unknown>(params: ",
                  "CcrFollowStatsRequest",
                  " | ",
                  "CcrFollowStatsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrFollowStatsResponse",
                  ", TContext>>; forgetFollower: <TContext = unknown>(params: ",
                  "CcrForgetFollowerRequest",
                  " | ",
                  "CcrForgetFollowerRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrForgetFollowerResponse",
                  ", TContext>>; getAutoFollowPattern: <TContext = unknown>(params?: ",
                  "CcrGetAutoFollowPatternRequest",
                  " | ",
                  "CcrGetAutoFollowPatternRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrGetAutoFollowPatternResponse",
                  ", TContext>>; pauseAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrPauseAutoFollowPatternRequest",
                  " | ",
                  "CcrPauseAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrPauseAutoFollowPatternResponse",
                  ", TContext>>; pauseFollow: <TContext = unknown>(params: ",
                  "CcrPauseFollowRequest",
                  " | ",
                  "CcrPauseFollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrPauseFollowResponse",
                  ", TContext>>; putAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrPutAutoFollowPatternRequest",
                  " | ",
                  "CcrPutAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrPutAutoFollowPatternResponse",
                  ", TContext>>; resumeAutoFollowPattern: <TContext = unknown>(params: ",
                  "CcrResumeAutoFollowPatternRequest",
                  " | ",
                  "CcrResumeAutoFollowPatternRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrResumeAutoFollowPatternResponse",
                  ", TContext>>; resumeFollow: <TContext = unknown>(params: ",
                  "CcrResumeFollowRequest",
                  " | ",
                  "CcrResumeFollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrResumeFollowResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "CcrStatsRequest",
                  " | ",
                  "CcrStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrStatsResponse",
                  ", TContext>>; unfollow: <TContext = unknown>(params: ",
                  "CcrUnfollowRequest",
                  " | ",
                  "CcrUnfollowRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CcrUnfollowResponse",
                  ", TContext>>; }; clearScroll: <TContext = unknown>(params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", TContext>>; cluster: { allocationExplain: <TContext = unknown>(params?: ",
                  "ClusterAllocationExplainRequest",
                  " | ",
                  "ClusterAllocationExplainRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterAllocationExplainResponse",
                  ", TContext>>; deleteComponentTemplate: <TContext = unknown>(params: ",
                  "ClusterDeleteComponentTemplateRequest",
                  " | ",
                  "ClusterDeleteComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterDeleteComponentTemplateResponse",
                  ", TContext>>; deleteVotingConfigExclusions: <TContext = unknown>(params?: ",
                  "ClusterDeleteVotingConfigExclusionsRequest",
                  " | ",
                  "ClusterDeleteVotingConfigExclusionsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsComponentTemplate: <TContext = unknown>(params: ",
                  "ClusterExistsComponentTemplateRequest",
                  " | ",
                  "ClusterExistsComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; getComponentTemplate: <TContext = unknown>(params?: ",
                  "ClusterGetComponentTemplateRequest",
                  " | ",
                  "ClusterGetComponentTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterGetComponentTemplateResponse",
                  ", TContext>>; getSettings: <TContext = unknown>(params?: ",
                  "ClusterGetSettingsRequest",
                  " | ",
                  "ClusterGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterGetSettingsResponse",
                  ", TContext>>; health: <TContext = unknown>(params?: ",
                  "ClusterHealthRequest",
                  " | ",
                  "ClusterHealthRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterHealthResponse",
                  ", TContext>>; pendingTasks: <TContext = unknown>(params?: ",
                  "ClusterPendingTasksRequest",
                  " | ",
                  "ClusterPendingTasksRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterPendingTasksResponse",
                  ", TContext>>; postVotingConfigExclusions: <TContext = unknown>(params?: ",
                  "ClusterPostVotingConfigExclusionsRequest",
                  " | ",
                  "ClusterPostVotingConfigExclusionsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; putComponentTemplate: <TContext = unknown>(params: ",
                  "ClusterPutComponentTemplateRequest",
                  " | ",
                  "ClusterPutComponentTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterPutComponentTemplateResponse",
                  ", TContext>>; putSettings: <TContext = unknown>(params?: ",
                  "ClusterPutSettingsRequest",
                  " | ",
                  "ClusterPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterPutSettingsResponse",
                  ", TContext>>; remoteInfo: <TContext = unknown>(params?: ",
                  "ClusterRemoteInfoRequest",
                  " | ",
                  "ClusterRemoteInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterRemoteInfoResponse",
                  ", TContext>>; reroute: <TContext = unknown>(params?: ",
                  "ClusterRerouteRequest",
                  " | ",
                  "ClusterRerouteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterRerouteResponse",
                  ", TContext>>; state: <TContext = unknown>(params?: ",
                  "ClusterStateRequest",
                  " | ",
                  "ClusterStateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; stats: <TContext = unknown>(params?: ",
                  "ClusterStatsRequest",
                  " | ",
                  "ClusterStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ClusterStatsResponse",
                  ", TContext>>; }; count: <TContext = unknown>(params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", TContext>>; danglingIndices: { deleteDanglingIndex: <TContext = unknown>(params: ",
                  "DanglingIndicesDeleteDanglingIndexRequest",
                  " | ",
                  "DanglingIndicesDeleteDanglingIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DanglingIndicesDeleteDanglingIndexResponse",
                  ", TContext>>; importDanglingIndex: <TContext = unknown>(params: ",
                  "DanglingIndicesImportDanglingIndexRequest",
                  " | ",
                  "DanglingIndicesImportDanglingIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DanglingIndicesImportDanglingIndexResponse",
                  ", TContext>>; listDanglingIndices: <TContext = unknown>(params?: ",
                  "DanglingIndicesListDanglingIndicesRequest",
                  " | ",
                  "DanglingIndicesListDanglingIndicesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DanglingIndicesListDanglingIndicesResponse",
                  ", TContext>>; }; deleteByQuery: <TContext = unknown>(params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", TContext>>; deleteByQueryRethrottle: <TContext = unknown>(params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryRethrottleResponse",
                  ", TContext>>; deleteScript: <TContext = unknown>(params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "DeleteScriptResponse",
                  ", TContext>>; enrich: { deletePolicy: <TContext = unknown>(params: ",
                  "EnrichDeletePolicyRequest",
                  " | ",
                  "EnrichDeletePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichDeletePolicyResponse",
                  ", TContext>>; executePolicy: <TContext = unknown>(params: ",
                  "EnrichExecutePolicyRequest",
                  " | ",
                  "EnrichExecutePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichExecutePolicyResponse",
                  ", TContext>>; getPolicy: <TContext = unknown>(params?: ",
                  "EnrichGetPolicyRequest",
                  " | ",
                  "EnrichGetPolicyRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichGetPolicyResponse",
                  ", TContext>>; putPolicy: <TContext = unknown>(params: ",
                  "EnrichPutPolicyRequest",
                  " | ",
                  "EnrichPutPolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichPutPolicyResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "EnrichStatsRequest",
                  " | ",
                  "EnrichStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "EnrichStatsResponse",
                  ", TContext>>; }; exists: <TContext = unknown>(params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsSource: <TContext = unknown>(params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; explain: <TDocument = unknown, TContext = unknown>(params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, TContext>>; features: { getFeatures: <TContext = unknown>(params?: ",
                  "FeaturesGetFeaturesRequest",
                  " | ",
                  "FeaturesGetFeaturesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "FeaturesGetFeaturesResponse",
                  ", TContext>>; resetFeatures: <TContext = unknown>(params?: ",
                  "FeaturesResetFeaturesRequest",
                  " | ",
                  "FeaturesResetFeaturesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "FeaturesResetFeaturesResponse",
                  ", TContext>>; }; fieldCaps: <TContext = unknown>(params?: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", TContext>>; fleet: { globalCheckpoints: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; msearch: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; search: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; getScript: <TContext = unknown>(params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", TContext>>; getScriptContext: <TContext = unknown>(params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", TContext>>; getScriptLanguages: <TContext = unknown>(params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", TContext>>; getSource: <TDocument = unknown, TContext = unknown>(params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<TDocument, TContext>>; graph: { explore: <TContext = unknown>(params: ",
                  "GraphExploreRequest",
                  " | ",
                  "GraphExploreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "GraphExploreResponse",
                  ", TContext>>; }; ilm: { deleteLifecycle: <TContext = unknown>(params: ",
                  "IlmDeleteLifecycleRequest",
                  " | ",
                  "IlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmDeleteLifecycleResponse",
                  ", TContext>>; explainLifecycle: <TContext = unknown>(params: ",
                  "IlmExplainLifecycleRequest",
                  " | ",
                  "IlmExplainLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmExplainLifecycleResponse",
                  ", TContext>>; getLifecycle: <TContext = unknown>(params?: ",
                  "IlmGetLifecycleRequest",
                  " | ",
                  "IlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmGetLifecycleResponse",
                  ", TContext>>; getStatus: <TContext = unknown>(params?: ",
                  "IlmGetStatusRequest",
                  " | ",
                  "IlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmGetStatusResponse",
                  ", TContext>>; migrateToDataTiers: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; moveToStep: <TContext = unknown>(params: ",
                  "IlmMoveToStepRequest",
                  " | ",
                  "IlmMoveToStepRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmMoveToStepResponse",
                  ", TContext>>; putLifecycle: <TContext = unknown>(params: ",
                  "IlmPutLifecycleRequest",
                  " | ",
                  "IlmPutLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmPutLifecycleResponse",
                  ", TContext>>; removePolicy: <TContext = unknown>(params: ",
                  "IlmRemovePolicyRequest",
                  " | ",
                  "IlmRemovePolicyRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmRemovePolicyResponse",
                  ", TContext>>; retry: <TContext = unknown>(params: ",
                  "IlmRetryRequest",
                  " | ",
                  "IlmRetryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmRetryResponse",
                  ", TContext>>; start: <TContext = unknown>(params?: ",
                  "IlmStartRequest",
                  " | ",
                  "IlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmStartResponse",
                  ", TContext>>; stop: <TContext = unknown>(params?: ",
                  "IlmStopRequest",
                  " | ",
                  "IlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IlmStopResponse",
                  ", TContext>>; }; indices: { addBlock: <TContext = unknown>(params: ",
                  "IndicesAddBlockRequest",
                  " | ",
                  "IndicesAddBlockRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesAddBlockResponse",
                  ", TContext>>; analyze: <TContext = unknown>(params?: ",
                  "IndicesAnalyzeRequest",
                  " | ",
                  "IndicesAnalyzeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesAnalyzeResponse",
                  ", TContext>>; clearCache: <TContext = unknown>(params?: ",
                  "IndicesClearCacheRequest",
                  " | ",
                  "IndicesClearCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesClearCacheResponse",
                  ", TContext>>; clone: <TContext = unknown>(params: ",
                  "IndicesCloneRequest",
                  " | ",
                  "IndicesCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCloneResponse",
                  ", TContext>>; close: <TContext = unknown>(params: ",
                  "IndicesCloseRequest",
                  " | ",
                  "IndicesCloseRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCloseResponse",
                  ", TContext>>; create: <TContext = unknown>(params: ",
                  "IndicesCreateRequest",
                  " | ",
                  "IndicesCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCreateResponse",
                  ", TContext>>; createDataStream: <TContext = unknown>(params: ",
                  "IndicesCreateDataStreamRequest",
                  " | ",
                  "IndicesCreateDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesCreateDataStreamResponse",
                  ", TContext>>; dataStreamsStats: <TContext = unknown>(params?: ",
                  "IndicesDataStreamsStatsRequest",
                  " | ",
                  "IndicesDataStreamsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDataStreamsStatsResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "IndicesDeleteRequest",
                  " | ",
                  "IndicesDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteResponse",
                  ", TContext>>; deleteAlias: <TContext = unknown>(params: ",
                  "IndicesDeleteAliasRequest",
                  " | ",
                  "IndicesDeleteAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteAliasResponse",
                  ", TContext>>; deleteDataStream: <TContext = unknown>(params: ",
                  "IndicesDeleteDataStreamRequest",
                  " | ",
                  "IndicesDeleteDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteDataStreamResponse",
                  ", TContext>>; deleteIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesDeleteIndexTemplateRequest",
                  " | ",
                  "IndicesDeleteIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteIndexTemplateResponse",
                  ", TContext>>; deleteTemplate: <TContext = unknown>(params: ",
                  "IndicesDeleteTemplateRequest",
                  " | ",
                  "IndicesDeleteTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesDeleteTemplateResponse",
                  ", TContext>>; diskUsage: <TContext = unknown>(params: ",
                  "IndicesDiskUsageRequest",
                  " | ",
                  "IndicesDiskUsageRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; exists: <TContext = unknown>(params: ",
                  "IndicesExistsRequest",
                  " | ",
                  "IndicesExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsAlias: <TContext = unknown>(params: ",
                  "IndicesExistsAliasRequest",
                  " | ",
                  "IndicesExistsAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesExistsIndexTemplateRequest",
                  " | ",
                  "IndicesExistsIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsTemplate: <TContext = unknown>(params: ",
                  "IndicesExistsTemplateRequest",
                  " | ",
                  "IndicesExistsTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; existsType: <TContext = unknown>(params: ",
                  "IndicesExistsTypeRequest",
                  " | ",
                  "IndicesExistsTypeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; fieldUsageStats: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; flush: <TContext = unknown>(params?: ",
                  "IndicesFlushRequest",
                  " | ",
                  "IndicesFlushRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesFlushResponse",
                  ", TContext>>; forcemerge: <TContext = unknown>(params?: ",
                  "IndicesForcemergeRequest",
                  " | ",
                  "IndicesForcemergeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesForcemergeResponse",
                  ", TContext>>; freeze: <TContext = unknown>(params: ",
                  "IndicesFreezeRequest",
                  " | ",
                  "IndicesFreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesFreezeResponse",
                  ", TContext>>; get: <TContext = unknown>(params: ",
                  "IndicesGetRequest",
                  " | ",
                  "IndicesGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetResponse",
                  ", TContext>>; getAlias: <TContext = unknown>(params?: ",
                  "IndicesGetAliasRequest",
                  " | ",
                  "IndicesGetAliasRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetAliasResponse",
                  ", TContext>>; getDataStream: <TContext = unknown>(params?: ",
                  "IndicesGetDataStreamRequest",
                  " | ",
                  "IndicesGetDataStreamRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetDataStreamResponse",
                  ", TContext>>; getFieldMapping: <TContext = unknown>(params: ",
                  "IndicesGetFieldMappingRequest",
                  " | ",
                  "IndicesGetFieldMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetFieldMappingResponse",
                  ", TContext>>; getIndexTemplate: <TContext = unknown>(params?: ",
                  "IndicesGetIndexTemplateRequest",
                  " | ",
                  "IndicesGetIndexTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetIndexTemplateResponse",
                  ", TContext>>; getMapping: <TContext = unknown>(params?: ",
                  "IndicesGetMappingRequest",
                  " | ",
                  "IndicesGetMappingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetMappingResponse",
                  ", TContext>>; getSettings: <TContext = unknown>(params?: ",
                  "IndicesGetSettingsRequest",
                  " | ",
                  "IndicesGetSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetSettingsResponse",
                  ", TContext>>; getTemplate: <TContext = unknown>(params?: ",
                  "IndicesGetTemplateRequest",
                  " | ",
                  "IndicesGetTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesGetTemplateResponse",
                  ", TContext>>; migrateToDataStream: <TContext = unknown>(params: ",
                  "IndicesMigrateToDataStreamRequest",
                  " | ",
                  "IndicesMigrateToDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesMigrateToDataStreamResponse",
                  ", TContext>>; modifyDataStream: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; open: <TContext = unknown>(params: ",
                  "IndicesOpenRequest",
                  " | ",
                  "IndicesOpenRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesOpenResponse",
                  ", TContext>>; promoteDataStream: <TContext = unknown>(params: ",
                  "IndicesPromoteDataStreamRequest",
                  " | ",
                  "IndicesPromoteDataStreamRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; putAlias: <TContext = unknown>(params: ",
                  "IndicesPutAliasRequest",
                  " | ",
                  "IndicesPutAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutAliasResponse",
                  ", TContext>>; putIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesPutIndexTemplateRequest",
                  " | ",
                  "IndicesPutIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutIndexTemplateResponse",
                  ", TContext>>; putMapping: <TContext = unknown>(params: ",
                  "IndicesPutMappingRequest",
                  " | ",
                  "IndicesPutMappingRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutMappingResponse",
                  ", TContext>>; putSettings: <TContext = unknown>(params?: ",
                  "IndicesPutSettingsRequest",
                  " | ",
                  "IndicesPutSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutSettingsResponse",
                  ", TContext>>; putTemplate: <TContext = unknown>(params: ",
                  "IndicesPutTemplateRequest",
                  " | ",
                  "IndicesPutTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesPutTemplateResponse",
                  ", TContext>>; recovery: <TContext = unknown>(params?: ",
                  "IndicesRecoveryRequest",
                  " | ",
                  "IndicesRecoveryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesRecoveryResponse",
                  ", TContext>>; refresh: <TContext = unknown>(params?: ",
                  "IndicesRefreshRequest",
                  " | ",
                  "IndicesRefreshRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesRefreshResponse",
                  ", TContext>>; reloadSearchAnalyzers: <TContext = unknown>(params: ",
                  "IndicesReloadSearchAnalyzersRequest",
                  " | ",
                  "IndicesReloadSearchAnalyzersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesReloadSearchAnalyzersResponse",
                  ", TContext>>; resolveIndex: <TContext = unknown>(params: ",
                  "IndicesResolveIndexRequest",
                  " | ",
                  "IndicesResolveIndexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesResolveIndexResponse",
                  ", TContext>>; rollover: <TContext = unknown>(params: ",
                  "IndicesRolloverRequest",
                  " | ",
                  "IndicesRolloverRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesRolloverResponse",
                  ", TContext>>; segments: <TContext = unknown>(params?: ",
                  "IndicesSegmentsRequest",
                  " | ",
                  "IndicesSegmentsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSegmentsResponse",
                  ", TContext>>; shardStores: <TContext = unknown>(params?: ",
                  "IndicesShardStoresRequest",
                  " | ",
                  "IndicesShardStoresRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesShardStoresResponse",
                  ", TContext>>; shrink: <TContext = unknown>(params: ",
                  "IndicesShrinkRequest",
                  " | ",
                  "IndicesShrinkRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesShrinkResponse",
                  ", TContext>>; simulateIndexTemplate: <TContext = unknown>(params: ",
                  "IndicesSimulateIndexTemplateRequest",
                  " | ",
                  "IndicesSimulateIndexTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSimulateIndexTemplateResponse",
                  ", TContext>>; simulateTemplate: <TContext = unknown>(params?: ",
                  "IndicesSimulateTemplateRequest",
                  " | ",
                  "IndicesSimulateTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSimulateTemplateResponse",
                  ", TContext>>; split: <TContext = unknown>(params: ",
                  "IndicesSplitRequest",
                  " | ",
                  "IndicesSplitRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesSplitResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "IndicesStatsRequest",
                  " | ",
                  "IndicesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesStatsResponse",
                  ", TContext>>; unfreeze: <TContext = unknown>(params: ",
                  "IndicesUnfreezeRequest",
                  " | ",
                  "IndicesUnfreezeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesUnfreezeResponse",
                  ", TContext>>; updateAliases: <TContext = unknown>(params?: ",
                  "IndicesUpdateAliasesRequest",
                  " | ",
                  "IndicesUpdateAliasesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesUpdateAliasesResponse",
                  ", TContext>>; validateQuery: <TContext = unknown>(params?: ",
                  "IndicesValidateQueryRequest",
                  " | ",
                  "IndicesValidateQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IndicesValidateQueryResponse",
                  ", TContext>>; }; info: <TContext = unknown>(params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", TContext>>; ingest: { deletePipeline: <TContext = unknown>(params: ",
                  "IngestDeletePipelineRequest",
                  " | ",
                  "IngestDeletePipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestDeletePipelineResponse",
                  ", TContext>>; geoIpStats: <TContext = unknown>(params?: ",
                  "IngestGeoIpStatsRequest",
                  " | ",
                  "IngestGeoIpStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestGeoIpStatsResponse",
                  ", TContext>>; getPipeline: <TContext = unknown>(params?: ",
                  "IngestGetPipelineRequest",
                  " | ",
                  "IngestGetPipelineRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestGetPipelineResponse",
                  ", TContext>>; processorGrok: <TContext = unknown>(params?: ",
                  "IngestProcessorGrokRequest",
                  " | ",
                  "IngestProcessorGrokRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestProcessorGrokResponse",
                  ", TContext>>; putPipeline: <TContext = unknown>(params: ",
                  "IngestPutPipelineRequest",
                  " | ",
                  "IngestPutPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestPutPipelineResponse",
                  ", TContext>>; simulate: <TContext = unknown>(params?: ",
                  "IngestSimulateRequest",
                  " | ",
                  "IngestSimulateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "IngestSimulateResponse",
                  ", TContext>>; }; knnSearch: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; license: { delete: <TContext = unknown>(params?: ",
                  "LicenseDeleteRequest",
                  " | ",
                  "LicenseDeleteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseDeleteResponse",
                  ", TContext>>; get: <TContext = unknown>(params?: ",
                  "LicenseGetRequest",
                  " | ",
                  "LicenseGetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseGetResponse",
                  ", TContext>>; getBasicStatus: <TContext = unknown>(params?: ",
                  "LicenseGetBasicStatusRequest",
                  " | ",
                  "LicenseGetBasicStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseGetBasicStatusResponse",
                  ", TContext>>; getTrialStatus: <TContext = unknown>(params?: ",
                  "LicenseGetTrialStatusRequest",
                  " | ",
                  "LicenseGetTrialStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicenseGetTrialStatusResponse",
                  ", TContext>>; post: <TContext = unknown>(params?: ",
                  "LicensePostRequest",
                  " | ",
                  "LicensePostRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicensePostResponse",
                  ", TContext>>; postStartBasic: <TContext = unknown>(params?: ",
                  "LicensePostStartBasicRequest",
                  " | ",
                  "LicensePostStartBasicRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicensePostStartBasicResponse",
                  ", TContext>>; postStartTrial: <TContext = unknown>(params?: ",
                  "LicensePostStartTrialRequest",
                  " | ",
                  "LicensePostStartTrialRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "LicensePostStartTrialResponse",
                  ", TContext>>; }; logstash: { deletePipeline: <TContext = unknown>(params: ",
                  "LogstashDeletePipelineRequest",
                  " | ",
                  "LogstashDeletePipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; getPipeline: <TContext = unknown>(params: ",
                  "LogstashGetPipelineRequest",
                  " | ",
                  "LogstashGetPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, ",
                  "LogstashPipeline",
                  ">, TContext>>; putPipeline: <TContext = unknown>(params: ",
                  "LogstashPutPipelineRequest",
                  " | ",
                  "LogstashPutPipelineRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; }; mget: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, TContext>>; migration: { deprecations: <TContext = unknown>(params?: ",
                  "MigrationDeprecationsRequest",
                  " | ",
                  "MigrationDeprecationsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MigrationDeprecationsResponse",
                  ", TContext>>; getFeatureUpgradeStatus: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; postFeatureUpgrade: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; }; ml: { closeJob: <TContext = unknown>(params: ",
                  "MlCloseJobRequest",
                  " | ",
                  "MlCloseJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlCloseJobResponse",
                  ", TContext>>; deleteCalendar: <TContext = unknown>(params: ",
                  "MlDeleteCalendarRequest",
                  " | ",
                  "MlDeleteCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteCalendarResponse",
                  ", TContext>>; deleteCalendarEvent: <TContext = unknown>(params: ",
                  "MlDeleteCalendarEventRequest",
                  " | ",
                  "MlDeleteCalendarEventRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteCalendarEventResponse",
                  ", TContext>>; deleteCalendarJob: <TContext = unknown>(params: ",
                  "MlDeleteCalendarJobRequest",
                  " | ",
                  "MlDeleteCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteCalendarJobResponse",
                  ", TContext>>; deleteDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlDeleteDataFrameAnalyticsRequest",
                  " | ",
                  "MlDeleteDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteDataFrameAnalyticsResponse",
                  ", TContext>>; deleteDatafeed: <TContext = unknown>(params: ",
                  "MlDeleteDatafeedRequest",
                  " | ",
                  "MlDeleteDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteDatafeedResponse",
                  ", TContext>>; deleteExpiredData: <TContext = unknown>(params?: ",
                  "MlDeleteExpiredDataRequest",
                  " | ",
                  "MlDeleteExpiredDataRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteExpiredDataResponse",
                  ", TContext>>; deleteFilter: <TContext = unknown>(params: ",
                  "MlDeleteFilterRequest",
                  " | ",
                  "MlDeleteFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteFilterResponse",
                  ", TContext>>; deleteForecast: <TContext = unknown>(params: ",
                  "MlDeleteForecastRequest",
                  " | ",
                  "MlDeleteForecastRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteForecastResponse",
                  ", TContext>>; deleteJob: <TContext = unknown>(params: ",
                  "MlDeleteJobRequest",
                  " | ",
                  "MlDeleteJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteJobResponse",
                  ", TContext>>; deleteModelSnapshot: <TContext = unknown>(params: ",
                  "MlDeleteModelSnapshotRequest",
                  " | ",
                  "MlDeleteModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteModelSnapshotResponse",
                  ", TContext>>; deleteTrainedModel: <TContext = unknown>(params: ",
                  "MlDeleteTrainedModelRequest",
                  " | ",
                  "MlDeleteTrainedModelRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteTrainedModelResponse",
                  ", TContext>>; deleteTrainedModelAlias: <TContext = unknown>(params: ",
                  "MlDeleteTrainedModelAliasRequest",
                  " | ",
                  "MlDeleteTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlDeleteTrainedModelAliasResponse",
                  ", TContext>>; estimateModelMemory: <TContext = unknown>(params?: ",
                  "MlEstimateModelMemoryRequest",
                  " | ",
                  "MlEstimateModelMemoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlEstimateModelMemoryResponse",
                  ", TContext>>; evaluateDataFrame: <TContext = unknown>(params?: ",
                  "MlEvaluateDataFrameRequest",
                  " | ",
                  "MlEvaluateDataFrameRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlEvaluateDataFrameResponse",
                  ", TContext>>; explainDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "MlExplainDataFrameAnalyticsRequest",
                  " | ",
                  "MlExplainDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlExplainDataFrameAnalyticsResponse",
                  ", TContext>>; flushJob: <TContext = unknown>(params: ",
                  "MlFlushJobRequest",
                  " | ",
                  "MlFlushJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlFlushJobResponse",
                  ", TContext>>; forecast: <TContext = unknown>(params: ",
                  "MlForecastRequest",
                  " | ",
                  "MlForecastRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlForecastResponse",
                  ", TContext>>; getBuckets: <TContext = unknown>(params: ",
                  "MlGetBucketsRequest",
                  " | ",
                  "MlGetBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetBucketsResponse",
                  ", TContext>>; getCalendarEvents: <TContext = unknown>(params: ",
                  "MlGetCalendarEventsRequest",
                  " | ",
                  "MlGetCalendarEventsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetCalendarEventsResponse",
                  ", TContext>>; getCalendars: <TContext = unknown>(params?: ",
                  "MlGetCalendarsRequest",
                  " | ",
                  "MlGetCalendarsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetCalendarsResponse",
                  ", TContext>>; getCategories: <TContext = unknown>(params: ",
                  "MlGetCategoriesRequest",
                  " | ",
                  "MlGetCategoriesRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetCategoriesResponse",
                  ", TContext>>; getDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsRequest",
                  " | ",
                  "MlGetDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDataFrameAnalyticsResponse",
                  ", TContext>>; getDataFrameAnalyticsStats: <TContext = unknown>(params?: ",
                  "MlGetDataFrameAnalyticsStatsRequest",
                  " | ",
                  "MlGetDataFrameAnalyticsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDataFrameAnalyticsStatsResponse",
                  ", TContext>>; getDatafeedStats: <TContext = unknown>(params?: ",
                  "MlGetDatafeedStatsRequest",
                  " | ",
                  "MlGetDatafeedStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDatafeedStatsResponse",
                  ", TContext>>; getDatafeeds: <TContext = unknown>(params?: ",
                  "MlGetDatafeedsRequest",
                  " | ",
                  "MlGetDatafeedsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetDatafeedsResponse",
                  ", TContext>>; getFilters: <TContext = unknown>(params?: ",
                  "MlGetFiltersRequest",
                  " | ",
                  "MlGetFiltersRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetFiltersResponse",
                  ", TContext>>; getInfluencers: <TContext = unknown>(params: ",
                  "MlGetInfluencersRequest",
                  " | ",
                  "MlGetInfluencersRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetInfluencersResponse",
                  ", TContext>>; getJobStats: <TContext = unknown>(params?: ",
                  "MlGetJobStatsRequest",
                  " | ",
                  "MlGetJobStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetJobStatsResponse",
                  ", TContext>>; getJobs: <TContext = unknown>(params?: ",
                  "MlGetJobsRequest",
                  " | ",
                  "MlGetJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetJobsResponse",
                  ", TContext>>; getModelSnapshots: <TContext = unknown>(params: ",
                  "MlGetModelSnapshotsRequest",
                  " | ",
                  "MlGetModelSnapshotsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetModelSnapshotsResponse",
                  ", TContext>>; getOverallBuckets: <TContext = unknown>(params: ",
                  "MlGetOverallBucketsRequest",
                  " | ",
                  "MlGetOverallBucketsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetOverallBucketsResponse",
                  ", TContext>>; getRecords: <TContext = unknown>(params: ",
                  "MlGetRecordsRequest",
                  " | ",
                  "MlGetRecordsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetRecordsResponse",
                  ", TContext>>; getTrainedModelDeploymentStats: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getTrainedModels: <TContext = unknown>(params?: ",
                  "MlGetTrainedModelsRequest",
                  " | ",
                  "MlGetTrainedModelsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetTrainedModelsResponse",
                  ", TContext>>; getTrainedModelsStats: <TContext = unknown>(params?: ",
                  "MlGetTrainedModelsStatsRequest",
                  " | ",
                  "MlGetTrainedModelsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlGetTrainedModelsStatsResponse",
                  ", TContext>>; inferTrainedModelDeployment: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; info: <TContext = unknown>(params?: ",
                  "MlInfoRequest",
                  " | ",
                  "MlInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlInfoResponse",
                  ", TContext>>; openJob: <TContext = unknown>(params: ",
                  "MlOpenJobRequest",
                  " | ",
                  "MlOpenJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlOpenJobResponse",
                  ", TContext>>; postCalendarEvents: <TContext = unknown>(params: ",
                  "MlPostCalendarEventsRequest",
                  " | ",
                  "MlPostCalendarEventsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPostCalendarEventsResponse",
                  ", TContext>>; postData: <TData = unknown, TContext = unknown>(params: ",
                  "MlPostDataRequest",
                  "<TData> | ",
                  "MlPostDataRequest",
                  "<TData>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPostDataResponse",
                  ", TContext>>; previewDataFrameAnalytics: <TContext = unknown>(params?: ",
                  "MlPreviewDataFrameAnalyticsRequest",
                  " | ",
                  "MlPreviewDataFrameAnalyticsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPreviewDataFrameAnalyticsResponse",
                  ", TContext>>; previewDatafeed: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MlPreviewDatafeedRequest",
                  " | ",
                  "MlPreviewDatafeedRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPreviewDatafeedResponse",
                  "<TDocument>, TContext>>; putCalendar: <TContext = unknown>(params: ",
                  "MlPutCalendarRequest",
                  " | ",
                  "MlPutCalendarRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutCalendarResponse",
                  ", TContext>>; putCalendarJob: <TContext = unknown>(params: ",
                  "MlPutCalendarJobRequest",
                  " | ",
                  "MlPutCalendarJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutCalendarJobResponse",
                  ", TContext>>; putDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlPutDataFrameAnalyticsRequest",
                  " | ",
                  "MlPutDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutDataFrameAnalyticsResponse",
                  ", TContext>>; putDatafeed: <TContext = unknown>(params: ",
                  "MlPutDatafeedRequest",
                  " | ",
                  "MlPutDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutDatafeedResponse",
                  ", TContext>>; putFilter: <TContext = unknown>(params: ",
                  "MlPutFilterRequest",
                  " | ",
                  "MlPutFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutFilterResponse",
                  ", TContext>>; putJob: <TContext = unknown>(params: ",
                  "MlPutJobRequest",
                  " | ",
                  "MlPutJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutJobResponse",
                  ", TContext>>; putTrainedModel: <TContext = unknown>(params: ",
                  "MlPutTrainedModelRequest",
                  " | ",
                  "MlPutTrainedModelRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlTrainedModelConfig",
                  ", TContext>>; putTrainedModelAlias: <TContext = unknown>(params: ",
                  "MlPutTrainedModelAliasRequest",
                  " | ",
                  "MlPutTrainedModelAliasRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlPutTrainedModelAliasResponse",
                  ", TContext>>; putTrainedModelDefinitionPart: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; putTrainedModelVocabulary: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; resetJob: <TContext = unknown>(params: ",
                  "MlResetJobRequest",
                  " | ",
                  "MlResetJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlResetJobResponse",
                  ", TContext>>; revertModelSnapshot: <TContext = unknown>(params: ",
                  "MlRevertModelSnapshotRequest",
                  " | ",
                  "MlRevertModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlRevertModelSnapshotResponse",
                  ", TContext>>; setUpgradeMode: <TContext = unknown>(params?: ",
                  "MlSetUpgradeModeRequest",
                  " | ",
                  "MlSetUpgradeModeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlSetUpgradeModeResponse",
                  ", TContext>>; startDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlStartDataFrameAnalyticsRequest",
                  " | ",
                  "MlStartDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStartDataFrameAnalyticsResponse",
                  ", TContext>>; startDatafeed: <TContext = unknown>(params: ",
                  "MlStartDatafeedRequest",
                  " | ",
                  "MlStartDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStartDatafeedResponse",
                  ", TContext>>; startTrainedModelDeployment: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; stopDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlStopDataFrameAnalyticsRequest",
                  " | ",
                  "MlStopDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStopDataFrameAnalyticsResponse",
                  ", TContext>>; stopDatafeed: <TContext = unknown>(params: ",
                  "MlStopDatafeedRequest",
                  " | ",
                  "MlStopDatafeedRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlStopDatafeedResponse",
                  ", TContext>>; stopTrainedModelDeployment: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; updateDataFrameAnalytics: <TContext = unknown>(params: ",
                  "MlUpdateDataFrameAnalyticsRequest",
                  " | ",
                  "MlUpdateDataFrameAnalyticsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateDataFrameAnalyticsResponse",
                  ", TContext>>; updateDatafeed: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; updateFilter: <TContext = unknown>(params: ",
                  "MlUpdateFilterRequest",
                  " | ",
                  "MlUpdateFilterRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateFilterResponse",
                  ", TContext>>; updateJob: <TContext = unknown>(params: ",
                  "MlUpdateJobRequest",
                  " | ",
                  "MlUpdateJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateJobResponse",
                  ", TContext>>; updateModelSnapshot: <TContext = unknown>(params: ",
                  "MlUpdateModelSnapshotRequest",
                  " | ",
                  "MlUpdateModelSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpdateModelSnapshotResponse",
                  ", TContext>>; upgradeJobSnapshot: <TContext = unknown>(params: ",
                  "MlUpgradeJobSnapshotRequest",
                  " | ",
                  "MlUpgradeJobSnapshotRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlUpgradeJobSnapshotResponse",
                  ", TContext>>; validate: <TContext = unknown>(params?: ",
                  "MlValidateRequest",
                  " | ",
                  "MlValidateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlValidateResponse",
                  ", TContext>>; validateDetector: <TContext = unknown>(params?: ",
                  "MlValidateDetectorRequest",
                  " | ",
                  "MlValidateDetectorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MlValidateDetectorResponse",
                  ", TContext>>; }; monitoring: { bulk: <TSource = unknown, TContext = unknown>(params: ",
                  "MonitoringBulkRequest",
                  "<TSource> | ",
                  "MonitoringBulkRequest",
                  "<TSource>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MonitoringBulkResponse",
                  ", TContext>>; }; msearch: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument>, TContext>>; msearchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument>, TContext>>; mtermvectors: <TContext = unknown>(params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", TContext>>; nodes: { clearRepositoriesMeteringArchive: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getRepositoriesMeteringInfo: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; hotThreads: <TContext = unknown>(params?: ",
                  "NodesHotThreadsRequest",
                  " | ",
                  "NodesHotThreadsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesHotThreadsResponse",
                  ", TContext>>; info: <TContext = unknown>(params?: ",
                  "NodesInfoRequest",
                  " | ",
                  "NodesInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesInfoResponse",
                  ", TContext>>; reloadSecureSettings: <TContext = unknown>(params?: ",
                  "NodesReloadSecureSettingsRequest",
                  " | ",
                  "NodesReloadSecureSettingsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesReloadSecureSettingsResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "NodesStatsRequest",
                  " | ",
                  "NodesStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesStatsResponse",
                  ", TContext>>; usage: <TContext = unknown>(params?: ",
                  "NodesUsageRequest",
                  " | ",
                  "NodesUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "NodesUsageResponse",
                  ", TContext>>; }; openPointInTime: <TContext = unknown>(params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", TContext>>; ping: <TContext = unknown>(params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<boolean, TContext>>; putScript: <TContext = unknown>(params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "PutScriptResponse",
                  ", TContext>>; rankEval: <TContext = unknown>(params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", TContext>>; reindex: <TContext = unknown>(params?: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", TContext>>; reindexRethrottle: <TContext = unknown>(params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", TContext>>; renderSearchTemplate: <TContext = unknown>(params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", TContext>>; rollup: { deleteJob: <TContext = unknown>(params: ",
                  "RollupDeleteJobRequest",
                  " | ",
                  "RollupDeleteJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupDeleteJobResponse",
                  ", TContext>>; getJobs: <TContext = unknown>(params?: ",
                  "RollupGetJobsRequest",
                  " | ",
                  "RollupGetJobsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupGetJobsResponse",
                  ", TContext>>; getRollupCaps: <TContext = unknown>(params?: ",
                  "RollupGetRollupCapsRequest",
                  " | ",
                  "RollupGetRollupCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupGetRollupCapsResponse",
                  ", TContext>>; getRollupIndexCaps: <TContext = unknown>(params: ",
                  "RollupGetRollupIndexCapsRequest",
                  " | ",
                  "RollupGetRollupIndexCapsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupGetRollupIndexCapsResponse",
                  ", TContext>>; putJob: <TContext = unknown>(params: ",
                  "RollupPutJobRequest",
                  " | ",
                  "RollupPutJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupPutJobResponse",
                  ", TContext>>; rollup: <TContext = unknown>(params: ",
                  "RollupRollupRequest",
                  " | ",
                  "RollupRollupRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; rollupSearch: <TDocument = unknown, TContext = unknown>(params: ",
                  "RollupRollupSearchRequest",
                  " | ",
                  "RollupRollupSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupRollupSearchResponse",
                  "<TDocument>, TContext>>; startJob: <TContext = unknown>(params: ",
                  "RollupStartJobRequest",
                  " | ",
                  "RollupStartJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupStartJobResponse",
                  ", TContext>>; stopJob: <TContext = unknown>(params: ",
                  "RollupStopJobRequest",
                  " | ",
                  "RollupStopJobRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "RollupStopJobResponse",
                  ", TContext>>; }; scriptsPainlessExecute: <TResult = unknown, TContext = unknown>(params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, TContext>>; scroll: <TDocument = unknown, TContext = unknown>(params?: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument>, TContext>>; searchMvt: <TContext = unknown>(params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<ArrayBuffer, TContext>>; searchShards: <TContext = unknown>(params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", TContext>>; searchTemplate: <TDocument = unknown, TContext = unknown>(params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, TContext>>; searchableSnapshots: { cacheStats: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; clearCache: <TContext = unknown>(params?: ",
                  "SearchableSnapshotsClearCacheRequest",
                  " | ",
                  "SearchableSnapshotsClearCacheRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<any, TContext>>; mount: <TContext = unknown>(params: ",
                  "SearchableSnapshotsMountRequest",
                  " | ",
                  "SearchableSnapshotsMountRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchableSnapshotsMountResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "SearchableSnapshotsStatsRequest",
                  " | ",
                  "SearchableSnapshotsStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SearchableSnapshotsStatsResponse",
                  ", TContext>>; }; shutdown: { deleteNode: <TContext = unknown>(params: ",
                  "ShutdownDeleteNodeRequest",
                  " | ",
                  "ShutdownDeleteNodeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ShutdownDeleteNodeResponse",
                  ", TContext>>; getNode: <TContext = unknown>(params?: ",
                  "ShutdownGetNodeRequest",
                  " | ",
                  "ShutdownGetNodeRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ShutdownGetNodeResponse",
                  ", TContext>>; putNode: <TContext = unknown>(params: ",
                  "ShutdownPutNodeRequest",
                  " | ",
                  "ShutdownPutNodeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "ShutdownPutNodeResponse",
                  ", TContext>>; }; slm: { deleteLifecycle: <TContext = unknown>(params: ",
                  "SlmDeleteLifecycleRequest",
                  " | ",
                  "SlmDeleteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmDeleteLifecycleResponse",
                  ", TContext>>; executeLifecycle: <TContext = unknown>(params: ",
                  "SlmExecuteLifecycleRequest",
                  " | ",
                  "SlmExecuteLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmExecuteLifecycleResponse",
                  ", TContext>>; executeRetention: <TContext = unknown>(params?: ",
                  "SlmExecuteRetentionRequest",
                  " | ",
                  "SlmExecuteRetentionRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmExecuteRetentionResponse",
                  ", TContext>>; getLifecycle: <TContext = unknown>(params?: ",
                  "SlmGetLifecycleRequest",
                  " | ",
                  "SlmGetLifecycleRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmGetLifecycleResponse",
                  ", TContext>>; getStats: <TContext = unknown>(params?: ",
                  "SlmGetStatsRequest",
                  " | ",
                  "SlmGetStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmGetStatsResponse",
                  ", TContext>>; getStatus: <TContext = unknown>(params?: ",
                  "SlmGetStatusRequest",
                  " | ",
                  "SlmGetStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmGetStatusResponse",
                  ", TContext>>; putLifecycle: <TContext = unknown>(params: ",
                  "SlmPutLifecycleRequest",
                  " | ",
                  "SlmPutLifecycleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmPutLifecycleResponse",
                  ", TContext>>; start: <TContext = unknown>(params?: ",
                  "SlmStartRequest",
                  " | ",
                  "SlmStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmStartResponse",
                  ", TContext>>; stop: <TContext = unknown>(params?: ",
                  "SlmStopRequest",
                  " | ",
                  "SlmStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SlmStopResponse",
                  ", TContext>>; }; snapshot: { cleanupRepository: <TContext = unknown>(params: ",
                  "SnapshotCleanupRepositoryRequest",
                  " | ",
                  "SnapshotCleanupRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCleanupRepositoryResponse",
                  ", TContext>>; clone: <TContext = unknown>(params: ",
                  "SnapshotCloneRequest",
                  " | ",
                  "SnapshotCloneRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCloneResponse",
                  ", TContext>>; create: <TContext = unknown>(params: ",
                  "SnapshotCreateRequest",
                  " | ",
                  "SnapshotCreateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCreateResponse",
                  ", TContext>>; createRepository: <TContext = unknown>(params: ",
                  "SnapshotCreateRepositoryRequest",
                  " | ",
                  "SnapshotCreateRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotCreateRepositoryResponse",
                  ", TContext>>; delete: <TContext = unknown>(params: ",
                  "SnapshotDeleteRequest",
                  " | ",
                  "SnapshotDeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotDeleteResponse",
                  ", TContext>>; deleteRepository: <TContext = unknown>(params: ",
                  "SnapshotDeleteRepositoryRequest",
                  " | ",
                  "SnapshotDeleteRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotDeleteRepositoryResponse",
                  ", TContext>>; get: <TContext = unknown>(params: ",
                  "SnapshotGetRequest",
                  " | ",
                  "SnapshotGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotGetResponse",
                  ", TContext>>; getRepository: <TContext = unknown>(params?: ",
                  "SnapshotGetRepositoryRequest",
                  " | ",
                  "SnapshotGetRepositoryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotGetRepositoryResponse",
                  ", TContext>>; repositoryAnalyze: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; restore: <TContext = unknown>(params: ",
                  "SnapshotRestoreRequest",
                  " | ",
                  "SnapshotRestoreRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotRestoreResponse",
                  ", TContext>>; status: <TContext = unknown>(params?: ",
                  "SnapshotStatusRequest",
                  " | ",
                  "SnapshotStatusRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotStatusResponse",
                  ", TContext>>; verifyRepository: <TContext = unknown>(params: ",
                  "SnapshotVerifyRepositoryRequest",
                  " | ",
                  "SnapshotVerifyRepositoryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SnapshotVerifyRepositoryResponse",
                  ", TContext>>; }; sql: { clearCursor: <TContext = unknown>(params?: ",
                  "SqlClearCursorRequest",
                  " | ",
                  "SqlClearCursorRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SqlClearCursorResponse",
                  ", TContext>>; deleteAsync: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getAsync: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; getAsyncStatus: <TContext = unknown>(params?: Record<string, any> | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<Record<string, any>, unknown>>; query: <TContext = unknown>(params?: ",
                  "SqlQueryRequest",
                  " | ",
                  "SqlQueryRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SqlQueryResponse",
                  ", TContext>>; translate: <TContext = unknown>(params?: ",
                  "SqlTranslateRequest",
                  " | ",
                  "SqlTranslateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SqlTranslateResponse",
                  ", TContext>>; }; ssl: { certificates: <TContext = unknown>(params?: ",
                  "SslCertificatesRequest",
                  " | ",
                  "SslCertificatesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "SslCertificatesResponse",
                  ", TContext>>; }; tasks: { cancel: <TContext = unknown>(params?: ",
                  "TasksCancelRequest",
                  " | ",
                  "TasksCancelRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TasksCancelResponse",
                  ", TContext>>; get: <TContext = unknown>(params: ",
                  "TasksGetRequest",
                  " | ",
                  "TasksGetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TasksGetResponse",
                  ", TContext>>; list: <TContext = unknown>(params?: ",
                  "TasksListRequest",
                  " | ",
                  "TasksListRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TasksListResponse",
                  ", TContext>>; }; termsEnum: <TContext = unknown>(params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", TContext>>; termvectors: <TDocument = unknown, TContext = unknown>(params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", TContext>>; textStructure: { findStructure: <TJsonDocument = unknown, TContext = unknown>(params: ",
                  "TextStructureFindStructureRequest",
                  "<TJsonDocument> | ",
                  "TextStructureFindStructureRequest",
                  "<TJsonDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "TextStructureFindStructureResponse",
                  ", TContext>>; }; updateByQuery: <TContext = unknown>(params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", TContext>>; updateByQueryRethrottle: <TContext = unknown>(params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", TContext>>; watcher: { ackWatch: <TContext = unknown>(params: ",
                  "WatcherAckWatchRequest",
                  " | ",
                  "WatcherAckWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherAckWatchResponse",
                  ", TContext>>; activateWatch: <TContext = unknown>(params: ",
                  "WatcherActivateWatchRequest",
                  " | ",
                  "WatcherActivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherActivateWatchResponse",
                  ", TContext>>; deactivateWatch: <TContext = unknown>(params: ",
                  "WatcherDeactivateWatchRequest",
                  " | ",
                  "WatcherDeactivateWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherDeactivateWatchResponse",
                  ", TContext>>; deleteWatch: <TContext = unknown>(params: ",
                  "WatcherDeleteWatchRequest",
                  " | ",
                  "WatcherDeleteWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherDeleteWatchResponse",
                  ", TContext>>; executeWatch: <TContext = unknown>(params?: ",
                  "WatcherExecuteWatchRequest",
                  " | ",
                  "WatcherExecuteWatchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherExecuteWatchResponse",
                  ", TContext>>; getWatch: <TContext = unknown>(params: ",
                  "WatcherGetWatchRequest",
                  " | ",
                  "WatcherGetWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherGetWatchResponse",
                  ", TContext>>; putWatch: <TContext = unknown>(params: ",
                  "WatcherPutWatchRequest",
                  " | ",
                  "WatcherPutWatchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherPutWatchResponse",
                  ", TContext>>; queryWatches: <TContext = unknown>(params?: ",
                  "WatcherQueryWatchesRequest",
                  " | ",
                  "WatcherQueryWatchesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherQueryWatchesResponse",
                  ", TContext>>; start: <TContext = unknown>(params?: ",
                  "WatcherStartRequest",
                  " | ",
                  "WatcherStartRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherStartResponse",
                  ", TContext>>; stats: <TContext = unknown>(params?: ",
                  "WatcherStatsRequest",
                  " | ",
                  "WatcherStatsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherStatsResponse",
                  ", TContext>>; stop: <TContext = unknown>(params?: ",
                  "WatcherStopRequest",
                  " | ",
                  "WatcherStopRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "WatcherStopResponse",
                  ", TContext>>; }; xpack: { info: <TContext = unknown>(params?: ",
                  "XpackInfoRequest",
                  " | ",
                  "XpackInfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "XpackInfoResponse",
                  ", TContext>>; usage: <TContext = unknown>(params?: ",
                  "XpackUsageRequest",
                  " | ",
                  "XpackUsageRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined) => Promise<",
                  "TransportResult",
                  "<",
                  "XpackUsageResponse",
                  ", TContext>>; }; }"
                ],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
                "deprecated": false
              },
              {
                "parentPluginId": "@kbn/securitysolution-es-utils",
                "id": "def-server.getIndexCount.$1.index",
                "type": "string",
                "tags": [],
                "label": "index",
                "description": [],
                "path": "packages/kbn-securitysolution-es-utils/src/get_index_count/index.ts",
                "deprecated": false
              }
            ]
          }
        ],
        "returnComment": [
          "the document count"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getIndexExists",
        "type": "Function",
        "tags": [],
        "label": "getIndexExists",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_index_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getIndexExists.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_index_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getPolicyExists",
        "type": "Function",
        "tags": [],
        "label": "getPolicyExists",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_policy_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getPolicyExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_policy_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getPolicyExists.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_policy_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.getTemplateExists",
        "type": "Function",
        "tags": [],
        "label": "getTemplateExists",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, template: string) => Promise<boolean>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/get_template_exists/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getTemplateExists.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_template_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.getTemplateExists.$2",
            "type": "string",
            "tags": [],
            "label": "template",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/get_template_exists/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.readIndex",
        "type": "Function",
        "tags": [],
        "label": "readIndex",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/read_index/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_index/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readIndex.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_index/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.readPrivileges",
        "type": "Function",
        "tags": [],
        "label": "readPrivileges",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, index: string) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/read_privileges/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readPrivileges.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_privileges/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.readPrivileges.$2",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/read_privileges/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.setPolicy",
        "type": "Function",
        "tags": [],
        "label": "setPolicy",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string, body: Record<string, unknown>) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setPolicy.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setPolicy.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setPolicy.$3",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "Record<string, unknown>"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_policy/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.setTemplate",
        "type": "Function",
        "tags": [],
        "label": "setTemplate",
        "description": [],
        "signature": [
          "(esClient: Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">, name: string, body: Record<string, unknown>) => Promise<unknown>"
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setTemplate.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setTemplate.$2",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
            "deprecated": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.setTemplate.$3",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "Record<string, unknown>"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/set_template/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.transformError",
        "type": "Function",
        "tags": [],
        "label": "transformError",
        "description": [],
        "signature": [
          "(err: Error & Partial<",
          "ResponseError",
          ">) => ",
          {
            "pluginId": "@kbn/securitysolution-es-utils",
            "scope": "server",
            "docId": "kibKbnSecuritysolutionEsUtilsPluginApi",
            "section": "def-server.OutputError",
            "text": "OutputError"
          }
        ],
        "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.transformError.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "err",
            "description": [],
            "signature": [
              "Error & Partial<",
              "ResponseError",
              ">"
            ],
            "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
            "deprecated": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/securitysolution-es-utils",
        "id": "def-server.OutputError",
        "type": "Interface",
        "tags": [],
        "label": "OutputError",
        "description": [],
        "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.OutputError.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "@kbn/securitysolution-es-utils",
            "id": "def-server.OutputError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "packages/kbn-securitysolution-es-utils/src/transform_error/index.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}