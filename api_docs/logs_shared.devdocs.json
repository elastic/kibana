{
  "id": "logsShared",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "logsShared",
        "id": "def-public.getLogViewReferenceFromUrl",
        "type": "Function",
        "tags": [],
        "label": "getLogViewReferenceFromUrl",
        "description": [],
        "signature": [
          "({ logViewKey, sourceIdKey, toastsService, urlStateStorage, }: LogViewUrlStateDependencies) => { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } | null"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.getLogViewReferenceFromUrl.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  logViewKey,\n  sourceIdKey,\n  toastsService,\n  urlStateStorage,\n}",
            "description": [],
            "signature": [
              "LogViewUrlStateDependencies"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.initializeFromUrl",
        "type": "Function",
        "tags": [],
        "label": "initializeFromUrl",
        "description": [],
        "signature": [
          "({ logViewKey, sourceIdKey, toastsService, urlStateStorage, }: LogViewUrlStateDependencies) => ",
          "InvokeCreator",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, any, ",
          "LogViewEvent",
          ">"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.initializeFromUrl.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n    logViewKey = defaultLogViewKey,\n    sourceIdKey = defaultLegacySourceIdKey,\n    toastsService,\n    urlStateStorage,\n  }",
            "description": [],
            "signature": [
              "LogViewUrlStateDependencies"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.listenForUrlChanges",
        "type": "Function",
        "tags": [],
        "label": "listenForUrlChanges",
        "description": [],
        "signature": [
          "({ urlStateStorage, logViewKey, }: { urlStateStorage: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "public",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-public.IKbnUrlStateStorage",
            "text": "IKbnUrlStateStorage"
          },
          "; logViewKey?: string | undefined; }) => ",
          "InvokeCreator",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, any, ",
          "LogViewEvent",
          ">"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.listenForUrlChanges.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n    urlStateStorage,\n    logViewKey = defaultLogViewKey,\n  }",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-public.listenForUrlChanges.$1.urlStateStorage",
                "type": "Object",
                "tags": [],
                "label": "urlStateStorage",
                "description": [],
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "public",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-public.IKbnUrlStateStorage",
                    "text": "IKbnUrlStateStorage"
                  }
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-public.listenForUrlChanges.$1.logViewKey",
                "type": "string",
                "tags": [],
                "label": "logViewKey",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogAIAssistant",
        "type": "Function",
        "tags": [],
        "label": "LogAIAssistant",
        "description": [],
        "signature": [
          "React.ForwardRefExoticComponent<",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogAIAssistantProps",
            "text": "LogAIAssistantProps"
          },
          " & React.RefAttributes<{}>>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogAIAssistant.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "P"
            ],
            "path": "node_modules/@types/react/ts5.0/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogEntryFlyout",
        "type": "Function",
        "tags": [],
        "label": "LogEntryFlyout",
        "description": [],
        "signature": [
          "React.ForwardRefExoticComponent<",
          "LogEntryFlyoutProps",
          " & React.RefAttributes<{}>>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogEntryFlyout.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "P"
            ],
            "path": "node_modules/@types/react/ts5.0/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogViewProvider",
        "type": "Function",
        "tags": [],
        "label": "LogViewProvider",
        "description": [],
        "signature": [
          "React.FunctionComponent<React.PropsWithChildren<{ initialLogViewReference?: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } | undefined; logViews: ",
          "ILogViewsClient",
          "; useDevTools?: boolean | undefined; initializeFromUrl?: ",
          "InvokeCreator",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, any, ",
          "LogViewEvent",
          "> | undefined; updateContextInUrl?: ((context: ",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), _event: ",
          "LogViewEvent",
          ") => void) | undefined; listenForUrlChanges?: ",
          "InvokeCreator",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, any, ",
          "LogViewEvent",
          "> | undefined; }>>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogViewProvider.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "P"
            ],
            "path": "node_modules/@types/react/ts5.0/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogViewProvider.$2",
            "type": "Any",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "node_modules/@types/react/ts5.0/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.OpenInLogsExplorerButton",
        "type": "Function",
        "tags": [],
        "label": "OpenInLogsExplorerButton",
        "description": [],
        "signature": [
          "React.ForwardRefExoticComponent<Pick<(",
          "DisambiguateSet",
          "<EuiButtonEmptyPropsForAnchor, ",
          "EuiButtonEmptyPropsForButton",
          "> & ",
          "CommonEuiButtonEmptyProps",
          " & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; } & React.ButtonHTMLAttributes<HTMLButtonElement>) | (",
          "DisambiguateSet",
          "<",
          "EuiButtonEmptyPropsForButton",
          ", EuiButtonEmptyPropsForAnchor> & ",
          "CommonEuiButtonEmptyProps",
          " & { href?: string | undefined; onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined; } & React.AnchorHTMLAttributes<HTMLAnchorElement>), \"size\" | \"flush\" | \"href\"> & { testSubject: string; } & React.RefAttributes<{}>>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.OpenInLogsExplorerButton.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "P"
            ],
            "path": "node_modules/@types/react/ts5.0/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.updateContextInUrl",
        "type": "Function",
        "tags": [],
        "label": "updateContextInUrl",
        "description": [],
        "signature": [
          "({ urlStateStorage, logViewKey }: LogViewUrlStateDependencies) => (context: ",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), _event: ",
          "LogViewEvent",
          ") => void"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.updateContextInUrl.$1",
            "type": "Object",
            "tags": [],
            "label": "{ urlStateStorage, logViewKey = defaultLogViewKey }",
            "description": [],
            "signature": [
              "LogViewUrlStateDependencies"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/url_state_storage_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.useLogView",
        "type": "Function",
        "tags": [],
        "label": "useLogView",
        "description": [],
        "signature": [
          "({ initialLogViewReference, logViews, useDevTools, initializeFromUrl, updateContextInUrl, listenForUrlChanges, }: { initialLogViewReference?: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } | undefined; logViews: ",
          "ILogViewsClient",
          "; useDevTools?: boolean | undefined; initializeFromUrl?: ",
          "InvokeCreator",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, any, ",
          "LogViewEvent",
          "> | undefined; updateContextInUrl?: ((context: ",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), _event: ",
          "LogViewEvent",
          ") => void) | undefined; listenForUrlChanges?: ",
          "InvokeCreator",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, any, ",
          "LogViewEvent",
          "> | undefined; }) => { logViewStateService: ",
          "Interpreter",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), any, ",
          "LogViewEvent",
          ", ",
          "LogViewTypestate",
          ", ",
          "ResolveTypegenMeta",
          "<",
          "TypegenDisabled",
          ", ",
          "LogViewEvent",
          ", ",
          "BaseActionObject",
          ", ",
          "ServiceMap",
          ">>; logViewStateNotifications: ",
          {
            "pluginId": "@kbn/xstate-utils",
            "scope": "public",
            "docId": "kibKbnXstateUtilsPluginApi",
            "section": "def-public.NotificationChannel",
            "text": "NotificationChannel"
          },
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewNotificationEvent",
            "text": "LogViewNotificationEvent"
          },
          ">; hasFailedLoading: boolean; hasFailedLoadingLogView: boolean; hasFailedLoadingLogViewStatus: boolean; hasFailedResolvingLogView: boolean; latestLoadLogViewFailures: Error[]; isUninitialized: boolean; isLoading: boolean; isLoadingLogView: boolean; isLoadingLogViewStatus: boolean; isResolvingLogView: boolean; logViewReference: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }; logView: ({ id: string; origin: \"inline\" | \"internal\" | \"stored\" | \"infra-source-stored\" | \"infra-source-internal\" | \"infra-source-fallback\"; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } & { updatedAt?: number | undefined; version?: string | undefined; }) | undefined; resolvedLogView: ",
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.ResolvedLogView",
            "text": "ResolvedLogView"
          },
          "<",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataView",
            "text": "DataView"
          },
          "> | undefined; logViewStatus: { index: \"unknown\" | \"missing\" | \"empty\" | \"available\"; } | undefined; derivedDataView: ",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataView",
            "text": "DataView"
          },
          " | undefined; isInlineLogView: boolean; isPersistedLogView: boolean; load: () => ",
          "State",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, ",
          "LogViewTypestate",
          ", ",
          "ResolveTypegenMeta",
          "<",
          "TypegenDisabled",
          ", ",
          "LogViewEvent",
          ", ",
          "BaseActionObject",
          ", ",
          "ServiceMap",
          ">>; retry: () => ",
          "State",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, ",
          "LogViewTypestate",
          ", ",
          "ResolveTypegenMeta",
          "<",
          "TypegenDisabled",
          ", ",
          "LogViewEvent",
          ", ",
          "BaseActionObject",
          ", ",
          "ServiceMap",
          ">>; update: (logViewAttributes: Partial<{ name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }>) => Promise<void>; changeLogViewReference: (logViewReference: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }) => void; revertToDefaultLogView: () => void; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.useLogView.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  initialLogViewReference,\n  logViews,\n  useDevTools = isDevMode(),\n  initializeFromUrl,\n  updateContextInUrl,\n  listenForUrlChanges,\n}",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-public.useLogView.$1.initialLogViewReference",
                "type": "CompoundType",
                "tags": [],
                "label": "initialLogViewReference",
                "description": [],
                "signature": [
                  "{ logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-public.useLogView.$1.logViews",
                "type": "Object",
                "tags": [],
                "label": "logViews",
                "description": [],
                "signature": [
                  "ILogViewsClient"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-public.useLogView.$1.useDevTools",
                "type": "CompoundType",
                "tags": [],
                "label": "useDevTools",
                "description": [],
                "signature": [
                  "boolean | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-public.useLogView.$1.initializeFromUrl",
                "type": "Function",
                "tags": [],
                "label": "initializeFromUrl",
                "description": [],
                "signature": [
                  "InvokeCreator",
                  "<",
                  "LogViewContextWithReference",
                  " | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithResolvedLogView",
                    "text": "LogViewContextWithResolvedLogView"
                  },
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithResolvedLogView",
                    "text": "LogViewContextWithResolvedLogView"
                  },
                  " & ",
                  "LogViewContextWithStatus",
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithError",
                    "text": "LogViewContextWithError"
                  },
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithError",
                    "text": "LogViewContextWithError"
                  },
                  "), ",
                  "LogViewEvent",
                  ", any, any, ",
                  "LogViewEvent",
                  "> | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-public.useLogView.$1.updateContextInUrl",
                "type": "Function",
                "tags": [],
                "label": "updateContextInUrl",
                "description": [],
                "signature": [
                  "((context: ",
                  "LogViewContextWithReference",
                  " | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithResolvedLogView",
                    "text": "LogViewContextWithResolvedLogView"
                  },
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithResolvedLogView",
                    "text": "LogViewContextWithResolvedLogView"
                  },
                  " & ",
                  "LogViewContextWithStatus",
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithError",
                    "text": "LogViewContextWithError"
                  },
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithError",
                    "text": "LogViewContextWithError"
                  },
                  "), _event: ",
                  "LogViewEvent",
                  ") => void) | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-public.useLogView.$1.listenForUrlChanges",
                "type": "Function",
                "tags": [],
                "label": "listenForUrlChanges",
                "description": [],
                "signature": [
                  "InvokeCreator",
                  "<",
                  "LogViewContextWithReference",
                  " | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithResolvedLogView",
                    "text": "LogViewContextWithResolvedLogView"
                  },
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithResolvedLogView",
                    "text": "LogViewContextWithResolvedLogView"
                  },
                  " & ",
                  "LogViewContextWithStatus",
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithError",
                    "text": "LogViewContextWithError"
                  },
                  ") | (",
                  "LogViewContextWithReference",
                  " & ",
                  "LogViewContextWithLogView",
                  " & ",
                  {
                    "pluginId": "logsShared",
                    "scope": "public",
                    "docId": "kibLogsSharedPluginApi",
                    "section": "def-public.LogViewContextWithError",
                    "text": "LogViewContextWithError"
                  },
                  "), ",
                  "LogViewEvent",
                  ", any, any, ",
                  "LogViewEvent",
                  "> | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.useLogViewContext",
        "type": "Function",
        "tags": [],
        "label": "useLogViewContext",
        "description": [],
        "signature": [
          "() => { logViewStateService: ",
          "Interpreter",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), any, ",
          "LogViewEvent",
          ", ",
          "LogViewTypestate",
          ", ",
          "ResolveTypegenMeta",
          "<",
          "TypegenDisabled",
          ", ",
          "LogViewEvent",
          ", ",
          "BaseActionObject",
          ", ",
          "ServiceMap",
          ">>; logViewStateNotifications: ",
          {
            "pluginId": "@kbn/xstate-utils",
            "scope": "public",
            "docId": "kibKbnXstateUtilsPluginApi",
            "section": "def-public.NotificationChannel",
            "text": "NotificationChannel"
          },
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewNotificationEvent",
            "text": "LogViewNotificationEvent"
          },
          ">; hasFailedLoading: boolean; hasFailedLoadingLogView: boolean; hasFailedLoadingLogViewStatus: boolean; hasFailedResolvingLogView: boolean; latestLoadLogViewFailures: Error[]; isUninitialized: boolean; isLoading: boolean; isLoadingLogView: boolean; isLoadingLogViewStatus: boolean; isResolvingLogView: boolean; logViewReference: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }; logView: ({ id: string; origin: \"inline\" | \"internal\" | \"stored\" | \"infra-source-stored\" | \"infra-source-internal\" | \"infra-source-fallback\"; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } & { updatedAt?: number | undefined; version?: string | undefined; }) | undefined; resolvedLogView: ",
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.ResolvedLogView",
            "text": "ResolvedLogView"
          },
          "<",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataView",
            "text": "DataView"
          },
          "> | undefined; logViewStatus: { index: \"unknown\" | \"missing\" | \"empty\" | \"available\"; } | undefined; derivedDataView: ",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataView",
            "text": "DataView"
          },
          " | undefined; isInlineLogView: boolean; isPersistedLogView: boolean; load: () => ",
          "State",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, ",
          "LogViewTypestate",
          ", ",
          "ResolveTypegenMeta",
          "<",
          "TypegenDisabled",
          ", ",
          "LogViewEvent",
          ", ",
          "BaseActionObject",
          ", ",
          "ServiceMap",
          ">>; retry: () => ",
          "State",
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", any, ",
          "LogViewTypestate",
          ", ",
          "ResolveTypegenMeta",
          "<",
          "TypegenDisabled",
          ", ",
          "LogViewEvent",
          ", ",
          "BaseActionObject",
          ", ",
          "ServiceMap",
          ">>; update: (logViewAttributes: Partial<{ name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }>) => Promise<void>; changeLogViewReference: (logViewReference: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }) => void; revertToDefaultLogView: () => void; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/hooks/use_log_view.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogAIAssistantDocument",
        "type": "Interface",
        "tags": [],
        "label": "LogAIAssistantDocument",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/components/log_ai_assistant/log_ai_assistant.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogAIAssistantDocument.fields",
            "type": "Array",
            "tags": [],
            "label": "fields",
            "description": [],
            "signature": [
              "{ field: string; value: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonArray",
                "text": "JsonArray"
              },
              "; }[]"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/components/log_ai_assistant/log_ai_assistant.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogAIAssistantProps",
        "type": "Interface",
        "tags": [],
        "label": "LogAIAssistantProps",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/components/log_ai_assistant/log_ai_assistant.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogAIAssistantProps.observabilityAIAssistant",
            "type": "Object",
            "tags": [],
            "label": "observabilityAIAssistant",
            "description": [],
            "signature": [
              {
                "pluginId": "observabilityAIAssistant",
                "scope": "public",
                "docId": "kibObservabilityAIAssistantPluginApi",
                "section": "def-public.ObservabilityAIAssistantPublicStart",
                "text": "ObservabilityAIAssistantPublicStart"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/components/log_ai_assistant/log_ai_assistant.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogAIAssistantProps.doc",
            "type": "Object",
            "tags": [],
            "label": "doc",
            "description": [],
            "signature": [
              {
                "pluginId": "logsShared",
                "scope": "public",
                "docId": "kibLogsSharedPluginApi",
                "section": "def-public.LogAIAssistantDocument",
                "text": "LogAIAssistantDocument"
              },
              " | undefined"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/components/log_ai_assistant/log_ai_assistant.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogsSharedClientSetupDeps",
        "type": "Interface",
        "tags": [],
        "label": "LogsSharedClientSetupDeps",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientSetupDeps.share",
            "type": "Object",
            "tags": [],
            "label": "share",
            "description": [],
            "signature": [
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.SharePublicSetup",
                "text": "SharePublicSetup"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientSetupDeps.dataViews",
            "type": "Object",
            "tags": [],
            "label": "dataViews",
            "description": [],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "public",
                "docId": "kibDataViewsPluginApi",
                "section": "def-public.DataViewsPublicPluginSetup",
                "text": "DataViewsPublicPluginSetup"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientSetupDeps.logsDataAccess",
            "type": "Uncategorized",
            "tags": [],
            "label": "logsDataAccess",
            "description": [],
            "signature": [
              "void"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogsSharedClientStartDeps",
        "type": "Interface",
        "tags": [],
        "label": "LogsSharedClientStartDeps",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.charts",
            "type": "CompoundType",
            "tags": [],
            "label": "charts",
            "description": [],
            "signature": [
              {
                "pluginId": "charts",
                "scope": "public",
                "docId": "kibChartsPluginApi",
                "section": "def-public.ChartsPluginSetup",
                "text": "ChartsPluginSetup"
              },
              " & { activeCursor: ",
              "ActiveCursor",
              "; }"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.data",
            "type": "Object",
            "tags": [],
            "label": "data",
            "description": [],
            "signature": [
              {
                "pluginId": "data",
                "scope": "public",
                "docId": "kibDataPluginApi",
                "section": "def-public.DataPublicPluginStart",
                "text": "DataPublicPluginStart"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.dataViews",
            "type": "Object",
            "tags": [],
            "label": "dataViews",
            "description": [],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "public",
                "docId": "kibDataViewsPluginApi",
                "section": "def-public.DataViewsServicePublic",
                "text": "DataViewsServicePublic"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.discoverShared",
            "type": "Object",
            "tags": [],
            "label": "discoverShared",
            "description": [],
            "signature": [
              {
                "pluginId": "discoverShared",
                "scope": "public",
                "docId": "kibDiscoverSharedPluginApi",
                "section": "def-public.DiscoverSharedPublicStart",
                "text": "DiscoverSharedPublicStart"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.logsDataAccess",
            "type": "Object",
            "tags": [],
            "label": "logsDataAccess",
            "description": [],
            "signature": [
              "{ services: { logSourcesService: ",
              "LogSourcesService",
              "; logDataService: ",
              "LogDataService",
              "; }; }"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.observabilityAIAssistant",
            "type": "Object",
            "tags": [],
            "label": "observabilityAIAssistant",
            "description": [],
            "signature": [
              {
                "pluginId": "observabilityAIAssistant",
                "scope": "public",
                "docId": "kibObservabilityAIAssistantPluginApi",
                "section": "def-public.ObservabilityAIAssistantPublicStart",
                "text": "ObservabilityAIAssistantPublicStart"
              },
              " | undefined"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.share",
            "type": "CompoundType",
            "tags": [],
            "label": "share",
            "description": [],
            "signature": [
              "{ toggleShareContextMenu: (options: ",
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.ShowShareMenuOptions",
                "text": "ShowShareMenuOptions"
              },
              ") => Promise<void>; } & { url: ",
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.BrowserUrlService",
                "text": "BrowserUrlService"
              },
              "; navigate(options: ",
              "RedirectOptions",
              "<",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.SerializableRecord",
                "text": "SerializableRecord"
              },
              ">): void; availableIntegrations: (objectType: string, groupId?: string | undefined) => ",
              "ShareActionIntents",
              "[]; }"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.uiActions",
            "type": "Object",
            "tags": [],
            "label": "uiActions",
            "description": [],
            "signature": [
              "{ readonly registerTrigger: (trigger: ",
              {
                "pluginId": "@kbn/ui-actions-browser",
                "scope": "common",
                "docId": "kibKbnUiActionsBrowserPluginApi",
                "section": "def-common.Trigger",
                "text": "Trigger"
              },
              ") => void; readonly hasTrigger: (triggerId: string) => boolean; readonly getTrigger: (triggerId: string) => ",
              "TriggerContract",
              "<object>; readonly registerAction: <Context extends object>(definition: ",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.ActionDefinition",
                "text": "ActionDefinition"
              },
              "<Context>) => ",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.Action",
                "text": "Action"
              },
              "<Context>; readonly registerActionAsync: <Context extends object>(id: string, getDefinition: () => Promise<",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.ActionDefinition",
                "text": "ActionDefinition"
              },
              "<Context>>) => void; readonly unregisterAction: (actionId: string) => void; readonly hasAction: (actionId: string) => boolean; readonly attachAction: (triggerId: string, actionId: string) => void; readonly detachAction: (triggerId: string, actionId: string) => void; readonly addTriggerAction: (triggerId: string, action: ",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.ActionDefinition",
                "text": "ActionDefinition"
              },
              "<any>) => void; readonly addTriggerActionAsync: (triggerId: string, actionId: string, getDefinition: () => Promise<",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.ActionDefinition",
                "text": "ActionDefinition"
              },
              "<any>>) => void; readonly getAction: (id: string) => Promise<",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.Action",
                "text": "Action"
              },
              "<object>>; readonly getTriggerActions: (triggerId: string) => Promise<",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.Action",
                "text": "Action"
              },
              "<object>[]>; readonly getTriggerCompatibleActions: (triggerId: string, context: object) => Promise<",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.Action",
                "text": "Action"
              },
              "<object>[]>; readonly getFrequentlyChangingActionsForTrigger: (triggerId: string, context: object) => Promise<",
              {
                "pluginId": "uiActions",
                "scope": "public",
                "docId": "kibUiActionsPluginApi",
                "section": "def-public.FrequentCompatibilityChangeAction",
                "text": "FrequentCompatibilityChangeAction"
              },
              "<object>[]>; readonly executeTriggerActions: (triggerId: string, context: object) => Promise<void>; readonly clear: () => void; readonly fork: () => ",
              "UiActionsService",
              "; }"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.fieldFormats",
            "type": "CompoundType",
            "tags": [],
            "label": "fieldFormats",
            "description": [],
            "signature": [
              "Omit<",
              {
                "pluginId": "fieldFormats",
                "scope": "common",
                "docId": "kibFieldFormatsPluginApi",
                "section": "def-common.FieldFormatsRegistry",
                "text": "FieldFormatsRegistry"
              },
              ", \"init\" | \"register\"> & { deserialize: ",
              {
                "pluginId": "fieldFormats",
                "scope": "common",
                "docId": "kibFieldFormatsPluginApi",
                "section": "def-common.FormatFactory",
                "text": "FormatFactory"
              },
              "; }"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.embeddable",
            "type": "Object",
            "tags": [],
            "label": "embeddable",
            "description": [],
            "signature": [
              {
                "pluginId": "embeddable",
                "scope": "public",
                "docId": "kibEmbeddablePluginApi",
                "section": "def-public.EmbeddableStart",
                "text": "EmbeddableStart"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.savedSearch",
            "type": "Object",
            "tags": [],
            "label": "savedSearch",
            "description": [],
            "signature": [
              {
                "pluginId": "savedSearch",
                "scope": "public",
                "docId": "kibSavedSearchPluginApi",
                "section": "def-public.SavedSearchPublicPluginStart",
                "text": "SavedSearchPublicPluginStart"
              }
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogsSharedClientStartDeps.ml",
            "type": "Object",
            "tags": [],
            "label": "ml",
            "description": [],
            "signature": [
              "{ locator?: ",
              {
                "pluginId": "share",
                "scope": "common",
                "docId": "kibSharePluginApi",
                "section": "def-common.LocatorPublic",
                "text": "LocatorPublic"
              },
              "<",
              "MlLocatorParams",
              "> | undefined; managementLocator?: ",
              {
                "pluginId": "ml",
                "scope": "public",
                "docId": "kibMlPluginApi",
                "section": "def-public.MlManagementLocatorInternal",
                "text": "MlManagementLocatorInternal"
              },
              " | undefined; elasticModels?: ",
              "ElasticModels",
              " | undefined; mlApi?: { getJobs(obj?: { jobId?: string | undefined; } | undefined): Promise<{ jobs: ",
              "MlJob",
              "[]; count: number; }>; getJobs$(obj?: { jobId?: string | undefined; } | undefined): ",
              "Observable",
              "<{ count: number; jobs: ",
              "MlJob",
              "[]; }>; getJobStats(obj: { jobId?: string | undefined; }): Promise<{ jobs: ",
              "MlJobStats",
              "[]; count: number; }>; addJob({ jobId, job }: { jobId: string; job: ",
              "MlJob",
              "; }): Promise<",
              "MlPutJobResponse",
              ">; openJob({ jobId }: { jobId: string; }): Promise<any>; closeJob({ jobId }: { jobId: string; }): Promise<any>; forceCloseJob({ jobId }: { jobId: string; }): Promise<any>; deleteJob({ jobId }: { jobId: string; }): Promise<",
              "AcknowledgedResponseBase",
              ">; forceDeleteJob({ jobId }: { jobId: string; }): Promise<",
              "AcknowledgedResponseBase",
              ">; updateJob({ jobId, job }: { jobId: string; job: ",
              "MlJob",
              "; }): Promise<any>; estimateBucketSpan(obj: ",
              "BucketSpanEstimatorData",
              "): Promise<",
              "BucketSpanEstimatorResponse",
              ">; validateJob(payload: { job: ",
              "CombinedJob",
              "; duration: { start?: number | undefined; end?: number | undefined; }; fields?: any[] | undefined; }): Promise<any>; validateDatafeedPreview(payload: { job: ",
              "CombinedJob",
              "; start?: number | undefined; end?: number | undefined; }): Promise<",
              "DatafeedValidationResponse",
              ">; validateCardinality$(job: ",
              "CombinedJob",
              "): ",
              "Observable",
              "<",
              "CardinalityValidationResults",
              ">; getDatafeeds(obj: { datafeedId: string; }): Promise<any>; getDatafeedStats(obj: { datafeedId: string; }): Promise<any>; addDatafeed({ datafeedId, datafeedConfig }: { datafeedId: string; datafeedConfig: ",
              "MlDatafeed",
              "; }): Promise<",
              "MlPutDatafeedResponse",
              ">; updateDatafeed({ datafeedId, datafeedConfig, }: { datafeedId: string; datafeedConfig: Partial<",
              "MlDatafeed",
              ">; }): Promise<any>; deleteDatafeed({ datafeedId }: { datafeedId: string; }): Promise<any>; forceDeleteDatafeed({ datafeedId }: { datafeedId: string; }): Promise<any>; startDatafeed({ datafeedId, start, end, }: { datafeedId: string; start?: number | undefined; end?: number | undefined; }): Promise<any>; stopDatafeed({ datafeedId }: { datafeedId: string; }): Promise<any>; forceStopDatafeed({ datafeedId }: { datafeedId: string; }): Promise<any>; datafeedPreview({ datafeedId }: { datafeedId: string; }): Promise<any>; forecast({ jobId, duration, neverExpires, }: { jobId: string; duration?: string | undefined; neverExpires?: boolean | undefined; }): Promise<any>; deleteForecast({ jobId, forecastId }: { jobId: string; forecastId: string; }): Promise<",
              "DeleteForecastResponse",
              ">; overallBuckets({ jobId, topN, bucketSpan, start, end, overallScore, }: { jobId: string[]; topN: string; bucketSpan: string; start: number; end: number; overallScore?: number | undefined; }): Promise<",
              "MlGetOverallBucketsResponse",
              ">; hasPrivileges(obj: any): Promise<",
              "MlHasPrivilegesResponse",
              ">; checkMlCapabilities(): Promise<",
              "MlCapabilitiesResponse",
              ">; checkIndicesExists({ indices }: { indices: string[]; }): Promise<Record<string, { exists: boolean; }>>; recognizeIndex({ indexPatternTitle, filter, }: { indexPatternTitle: string; filter?: string[] | undefined; }): Promise<",
              "RecognizeResult",
              "[]>; recognizeModule({ moduleId, size }: { moduleId: string; size?: number | undefined; }): Promise<",
              "RecognizeModuleResult",
              ">; listDataRecognizerModules(filter?: string[] | undefined): Promise<any>; getDataRecognizerModule(params?: { moduleId: string; filter?: string[] | undefined; } | undefined): Promise<",
              "Module",
              " | ",
              "Module",
              "[]>; dataRecognizerModuleJobsExist({ moduleId }: { moduleId: string; }): Promise<any>; setupDataRecognizerConfig({ moduleId, prefix, groups, indexPatternName, query, useDedicatedIndex, startDatafeed, start, end, jobOverrides, estimateModelMemory, }: { moduleId: string; prefix?: string | undefined; groups?: string[] | undefined; indexPatternName?: string | undefined; query?: any; useDedicatedIndex?: boolean | undefined; startDatafeed?: boolean | undefined; start?: number | undefined; end?: number | undefined; jobOverrides?: Partial<",
              "MlJob",
              ">[] | undefined; estimateModelMemory?: boolean | undefined; }): Promise<",
              "DataRecognizerConfigResponse",
              ">; getVisualizerFieldHistograms({ indexPattern, query, fields, samplerShardSize, runtimeMappings, }: { indexPattern: string; query: any; fields: ",
              "FieldHistogramRequestConfig",
              "[]; samplerShardSize?: number | undefined; runtimeMappings?: ",
              "MappingRuntimeFields",
              " | undefined; }): Promise<any>; calendars(obj?: { calendarId?: string | undefined; calendarIds?: string[] | undefined; } | undefined): Promise<",
              "MlCalendar",
              "[]>; addCalendar(obj: ",
              "MlCalendar",
              "): Promise<any>; updateCalendar(obj: ",
              "UpdateCalendar",
              "): Promise<any>; deleteCalendar({ calendarId }: { calendarId?: string | undefined; }): Promise<any>; mlNodeCount(): Promise<",
              "MlNodeCount",
              ">; mlInfo(): Promise<",
              "MlInfoResponse",
              ">; calculateModelMemoryLimit$({ datafeedConfig, analysisConfig, indexPattern, query, timeFieldName, earliestMs, latestMs, }: { datafeedConfig?: ",
              "MlDatafeed",
              " | undefined; analysisConfig: ",
              "MlAnalysisConfig",
              "; indexPattern: string; query: any; timeFieldName: string; earliestMs: number; latestMs: number; }): ",
              "Observable",
              "<{ modelMemoryLimit: string; }>; getCardinalityOfFields({ index, fieldNames, query, timeFieldName, earliestMs, latestMs, }: { index: string; fieldNames: string[]; query: any; timeFieldName: string; earliestMs: number; latestMs: number; }): Promise<any>; getTimeFieldRange({ index, timeFieldName, query, runtimeMappings, indicesOptions, allowFutureTime, }: { index: string; timeFieldName?: string | undefined; query: any; runtimeMappings?: ",
              "MappingRuntimeFields",
              " | undefined; indicesOptions?: ",
              "IndicesOptions",
              " | undefined; allowFutureTime?: boolean | undefined; }): Promise<",
              "GetTimeFieldRangeResponse",
              ">; esSearch(obj: any): Promise<any>; esSearch$(obj: any): ",
              "Observable",
              "<any>; getIndices(): Promise<{ name: string; }[]>; getModelSnapshots(jobId: string, snapshotId?: string | undefined): Promise<",
              "GetModelSnapshotsResponse",
              ">; updateModelSnapshot(jobId: string, snapshotId: string, body: { description?: string | undefined; retain?: boolean | undefined; }): Promise<any>; deleteModelSnapshot(jobId: string, snapshotId: string): Promise<any>; reindexWithPipeline(pipelineName: string, sourceIndex: string, destinationIndex: string): Promise<",
              "ReindexResponse",
              ">; annotations: { getAnnotations$(obj: { jobIds: string[]; earliestMs: number; latestMs: number; maxAnnotations: number; detectorIndex?: number | undefined; entities?: any[] | undefined; }): ",
              "Observable",
              "<",
              "GetAnnotationsResponse",
              ">; getAnnotations(obj: { jobIds: string[]; earliestMs: number | null; latestMs: number | null; maxAnnotations: number; detectorIndex?: number | undefined; entities?: any[] | undefined; }): Promise<",
              "GetAnnotationsResponse",
              ">; indexAnnotation(obj: ",
              "Annotation",
              "): Promise<any>; deleteAnnotation(id: string): Promise<any>; }; dataFrameAnalytics: { getDataFrameAnalytics(analyticsId?: string | undefined, excludeGenerated?: boolean | undefined, size?: number | undefined): Promise<",
              "GetDataFrameAnalyticsResponse",
              ">; getDataFrameAnalyticsStats(analyticsId?: string | undefined): Promise<",
              "GetDataFrameAnalyticsStatsResponse",
              ">; createDataFrameAnalytics(analyticsId: string, analyticsConfig: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.DeepPartialObject",
                "text": "DeepPartialObject"
              },
              "<",
              {
                "pluginId": "@kbn/ml-data-frame-analytics-utils",
                "scope": "common",
                "docId": "kibKbnMlDataFrameAnalyticsUtilsPluginApi",
                "section": "def-common.DataFrameAnalyticsConfig",
                "text": "DataFrameAnalyticsConfig"
              },
              ">, createDataView?: boolean, timeFieldName?: string | undefined): Promise<",
              "PutDataFrameAnalyticsResponseSchema",
              ">; updateDataFrameAnalytics(analyticsId: string, updateConfig: ",
              {
                "pluginId": "@kbn/ml-data-frame-analytics-utils",
                "scope": "common",
                "docId": "kibKbnMlDataFrameAnalyticsUtilsPluginApi",
                "section": "def-common.UpdateDataFrameAnalyticsConfig",
                "text": "UpdateDataFrameAnalyticsConfig"
              },
              "): Promise<any>; getDataFrameAnalyticsMap(id: string, treatAsRoot: boolean, type?: string | undefined): Promise<",
              {
                "pluginId": "@kbn/ml-data-frame-analytics-utils",
                "scope": "common",
                "docId": "kibKbnMlDataFrameAnalyticsUtilsPluginApi",
                "section": "def-common.AnalyticsMapReturnType",
                "text": "AnalyticsMapReturnType"
              },
              ">; jobsExist(analyticsIds: string[], allSpaces?: boolean): Promise<",
              "JobsExistsResponse",
              ">; evaluateDataFrameAnalytics(evaluateConfig: any): Promise<any>; explainDataFrameAnalytics(jobConfig: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.DeepPartialObject",
                "text": "DeepPartialObject"
              },
              "<",
              {
                "pluginId": "@kbn/ml-data-frame-analytics-utils",
                "scope": "common",
                "docId": "kibKbnMlDataFrameAnalyticsUtilsPluginApi",
                "section": "def-common.DataFrameAnalyticsConfig",
                "text": "DataFrameAnalyticsConfig"
              },
              ">): Promise<any>; deleteDataFrameAnalytics(analyticsId: string, force?: boolean): Promise<any>; deleteDataFrameAnalyticsAndDestIndex(analyticsId: string, deleteDestIndex: boolean, deleteDestDataView: boolean, force?: boolean): Promise<",
              "DeleteDataFrameAnalyticsWithIndexResponse",
              ">; startDataFrameAnalytics(analyticsId: string): Promise<any>; stopDataFrameAnalytics(analyticsId: string, force?: boolean): Promise<any>; getAnalyticsAuditMessages(analyticsId: string): Promise<",
              "JobMessage",
              "[]>; validateDataFrameAnalytics(analyticsConfig: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.DeepPartialObject",
                "text": "DeepPartialObject"
              },
              "<",
              {
                "pluginId": "@kbn/ml-data-frame-analytics-utils",
                "scope": "common",
                "docId": "kibKbnMlDataFrameAnalyticsUtilsPluginApi",
                "section": "def-common.DataFrameAnalyticsConfig",
                "text": "DataFrameAnalyticsConfig"
              },
              ">): Promise<",
              {
                "pluginId": "@kbn/ml-validators",
                "scope": "common",
                "docId": "kibKbnMlValidatorsPluginApi",
                "section": "def-common.ValidateAnalyticsJobResponse",
                "text": "ValidateAnalyticsJobResponse"
              },
              ">; newJobCapsAnalytics(indexPatternTitle: string, isRollup?: boolean): Promise<",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.NewJobCapsResponse",
                "text": "NewJobCapsResponse"
              },
              ">; }; filters: { filters(obj?: { filterId?: string | undefined; } | undefined): Promise<",
              "Filter",
              "[]>; filtersStats(): Promise<",
              "FilterStats",
              "[]>; addFilter(filterId: string, description: string, items: string[]): Promise<",
              "Filter",
              ">; updateFilter(filterId: string, description: string, addItems: string[], removeItems: string[]): Promise<",
              "Filter",
              ">; deleteFilter(filterId: string): Promise<{ acknowledged: boolean; }>; }; results: { getAnomaliesTableData(jobIds: string[], criteriaFields: string[], influencers: ",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.MlEntityField",
                "text": "MlEntityField"
              },
              "[], aggregationInterval: string, threshold: ",
              "SeverityThreshold",
              "[], earliestMs: number, latestMs: number, dateFormatTz: string, maxRecords: number, maxExamples?: number | undefined, influencersFilterQuery?: any, functionDescription?: string | undefined): ",
              "Observable",
              "<",
              "GetAnomaliesTableDataResult",
              ">; getMaxAnomalyScore(jobIds: string[], earliestMs: number, latestMs: number): Promise<any>; getCategoryDefinition(jobId: string, categoryId: string): Promise<",
              "CategoryDefinition",
              ">; getCategoryExamples(jobId: string, categoryIds: string[], maxExamples: number): Promise<any>; fetchPartitionFieldsValues(jobId: string, searchTerm: Record<string, string>, criteriaFields: { fieldName: string; fieldValue: any; }[], earliestMs: number, latestMs: number, fieldsConfig?: ",
              "PartitionFieldsConfig",
              "): ",
              "Observable",
              "<",
              "PartitionFieldsDefinition",
              ">; anomalySearch(query: ",
              "SearchRequest",
              ", jobIds: string[]): Promise<",
              {
                "pluginId": "@kbn/es-types",
                "scope": "common",
                "docId": "kibKbnEsTypesPluginApi",
                "section": "def-common.ESSearchResponse",
                "text": "ESSearchResponse"
              },
              "<",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.MlAnomalyRecordDoc",
                "text": "MlAnomalyRecordDoc"
              },
              ", ",
              "SearchRequest",
              ", { restTotalHitsAsInt: false; }>>; anomalySearch$(query: ",
              "SearchRequest",
              ", jobIds: string[]): ",
              "Observable",
              "<",
              {
                "pluginId": "@kbn/es-types",
                "scope": "common",
                "docId": "kibKbnEsTypesPluginApi",
                "section": "def-common.ESSearchResponse",
                "text": "ESSearchResponse"
              },
              "<",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.MlAnomalyRecordDoc",
                "text": "MlAnomalyRecordDoc"
              },
              ", ",
              "SearchRequest",
              ", { restTotalHitsAsInt: false; }>>; getCategoryStoppedPartitions(jobIds: string[], fieldToBucket?: \"job_id\" | \"partition_field_value\" | undefined): Promise<",
              "GetStoppedPartitionResult",
              ">; getDatafeedResultChartData(jobId: string, start: number, end: number): Promise<",
              "GetDatafeedResultsChartDataResult",
              ">; getAnomalyCharts$(jobIds: string[], influencers: ",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.MlEntityField",
                "text": "MlEntityField"
              },
              "[], threshold: ",
              "SeverityThreshold",
              "[], earliestMs: number, latestMs: number, timeBounds: { min?: number | undefined; max?: number | undefined; }, maxResults: number, numberOfPoints: number, influencersFilterQuery?: ",
              "QueryDslQueryContainer",
              " | undefined): ",
              "Observable",
              "<",
              "ExplorerChartsData",
              ">; getAnomalyRecords$(jobIds: string[], criteriaFields: ",
              "CriteriaField",
              "[], severity: number, earliestMs: number | null, latestMs: number | null, interval: string, functionDescription?: string | undefined): ",
              "Observable",
              "<{ success: boolean; records: ",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.MlAnomalyRecordDoc",
                "text": "MlAnomalyRecordDoc"
              },
              "[]; }>; getTopInfluencers(payload: ",
              "GetTopInfluencersRequest",
              "): Promise<",
              "InfluencersByFieldResponse",
              ">; getScoresByBucket(payload: { jobIds: string[]; earliestMs: number; latestMs: number; intervalMs: number; perPage?: number | undefined; fromPage?: number | undefined; swimLaneSeverity?: { min: number; max?: number | undefined; }[] | undefined; }): Promise<",
              "ViewByResponse",
              ">; getInfluencerValueMaxScoreByTime(payload: { jobIds: string[]; influencerFieldName: string; influencerFieldValues?: string[] | undefined; earliestMs: number; latestMs: number; intervalMs: number; maxResults?: number | undefined; perPage?: number | undefined; fromPage?: number | undefined; influencersFilterQuery?: unknown; swimLaneSeverity?: { min: number; max?: number | undefined; }[] | undefined; }): Promise<",
              "ViewByResponse",
              ">; }; jobs: { jobsSummary(jobIds: string[]): Promise<",
              "MlSummaryJobs",
              ">; jobIdsWithGeo(): Promise<string[]>; jobsWithTimerange(dateFormatTz: string): Promise<{ jobs: ",
              "MlJobWithTimeRange",
              "[]; jobsMap: ",
              "Dictionary",
              "<",
              "MlJobWithTimeRange",
              ">; }>; jobForCloning(jobId: string, retainCreatedBy?: boolean): Promise<{ job?: ",
              "MlJob",
              " | undefined; datafeed?: ",
              "MlDatafeed",
              " | undefined; } | undefined>; jobs(jobIds: string[]): Promise<",
              "CombinedJobWithStats",
              "[]>; groups(): Promise<",
              "Group",
              "[]>; updateGroups(updatedJobs: { jobId: string; groups: string[]; }[]): Promise<any>; forceStartDatafeeds(datafeedIds: string[], start: string, end: string): Promise<any>; stopDatafeeds(datafeedIds: string[]): Promise<any>; deleteJobs(jobIds: string[], deleteUserAnnotations?: boolean | undefined, deleteAlertingRules?: boolean | undefined): Promise<any>; closeJobs(jobIds: string[]): Promise<any>; resetJobs(jobIds: string[], deleteUserAnnotations?: boolean | undefined): Promise<",
              "ResetJobsResponse",
              ">; forceStopAndCloseJob(jobId: string): Promise<{ success: boolean; }>; jobAuditMessages({ jobId, from, start, end, }: { jobId: string; from?: number | undefined; start?: string | undefined; end?: string | undefined; }): Promise<{ messages: ",
              "JobMessage",
              "[]; notificationIndices: string[]; }>; clearJobAuditMessages(jobId: string, notificationIndices: string[]): Promise<{ success: boolean; latest_cleared: number; }>; blockingJobTasks(): Promise<Record<string, ",
              "JobAction",
              ">>; jobsExist(jobIds: string[], allSpaces?: boolean): Promise<",
              "JobsExistResponse",
              ">; jobsExist$(jobIds: string[], allSpaces?: boolean): ",
              "Observable",
              "<",
              "JobsExistResponse",
              ">; newJobCaps(indexPatternTitle: string, isRollup?: boolean): Promise<any>; newJobLineChart(indexPatternTitle: string, timeField: string, start: number, end: number, intervalMs: number, query: any, aggFieldNamePairs: ",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.AggFieldNamePair",
                "text": "AggFieldNamePair"
              },
              "[], splitFieldName: string | null, splitFieldValue: string | null, runtimeMappings?: ",
              "MappingRuntimeFields",
              " | undefined, indicesOptions?: ",
              "IndicesOptions",
              " | undefined): Promise<any>; newJobPopulationsChart(indexPatternTitle: string, timeField: string, start: number, end: number, intervalMs: number, query: any, aggFieldNamePairs: ",
              {
                "pluginId": "@kbn/ml-anomaly-utils",
                "scope": "common",
                "docId": "kibKbnMlAnomalyUtilsPluginApi",
                "section": "def-common.AggFieldNamePair",
                "text": "AggFieldNamePair"
              },
              "[], splitFieldName: string, runtimeMappings?: ",
              "MappingRuntimeFields",
              " | undefined, indicesOptions?: ",
              "IndicesOptions",
              " | undefined): Promise<any>; getAllJobAndGroupIds(): Promise<",
              "ExistingJobsAndGroups",
              ">; getLookBackProgress(jobId: string, start: number, end: number): Promise<{ progress: number; isRunning: boolean; isJobClosed: boolean; }>; categorizationFieldExamples(indexPatternTitle: string, query: any, size: number, field: string, timeField: string, start: number, end: number, analyzer: ",
              {
                "pluginId": "@kbn/ml-category-validator",
                "scope": "common",
                "docId": "kibKbnMlCategoryValidatorPluginApi",
                "section": "def-common.CategorizationAnalyzer",
                "text": "CategorizationAnalyzer"
              },
              ", runtimeMappings?: ",
              "MappingRuntimeFields",
              " | undefined, indicesOptions?: ",
              "IndicesOptions",
              " | undefined, includeExamples?: boolean | undefined): Promise<",
              {
                "pluginId": "@kbn/ml-category-validator",
                "scope": "common",
                "docId": "kibKbnMlCategoryValidatorPluginApi",
                "section": "def-common.FieldValidationResults",
                "text": "FieldValidationResults"
              },
              ">; topCategories(jobId: string, count: number): Promise<{ total: number; categories: { count?: number | undefined; category: ",
              "Category",
              "; }[]; }>; revertModelSnapshot(jobId: string, snapshotId: string, replay: boolean, end?: number | undefined, calendarEvents?: { start: number; end: number; description: string; }[] | undefined): Promise<{ success: boolean; }>; datafeedPreview(datafeedId?: string | undefined, job?: ",
              "MlJob",
              " | undefined, datafeed?: ",
              "MlDatafeed",
              " | undefined): Promise<unknown[]>; bulkCreateJobs(jobs: { job: ",
              "MlJob",
              "; datafeed: ",
              "MlDatafeed",
              "; } | { job: ",
              "MlJob",
              "; datafeed: ",
              "MlDatafeed",
              "; }[]): Promise<",
              "BulkCreateResults",
              ">; }; savedObjects: { jobsSpaces(): Promise<",
              "JobsSpacesResponse",
              ">; updateJobsSpaces(jobType: ",
              "JobType",
              ", jobIds: string[], spacesToAdd: string[], spacesToRemove: string[]): Promise<",
              "SavedObjectResult",
              ">; removeItemFromCurrentSpace(mlSavedObjectType: ",
              "MlSavedObjectType",
              ", ids: string[]): Promise<",
              "SavedObjectResult",
              ">; syncSavedObjects(simulate?: boolean, addToAllSpaces?: boolean | undefined): Promise<",
              "SyncSavedObjectResponse",
              ">; initSavedObjects(simulate?: boolean): Promise<",
              "InitializeSavedObjectResponse",
              ">; syncCheck(mlSavedObjectType?: ",
              "MlSavedObjectType",
              " | undefined): Promise<",
              "SyncCheckResponse",
              ">; canDeleteMLSpaceAwareItems(mlSavedObjectType: ",
              "MlSavedObjectType",
              ", ids: string[]): Promise<",
              "CanDeleteMLSpaceAwareItemsResponse",
              ">; canSyncToAllSpaces(mlSavedObjectType?: ",
              "MlSavedObjectType",
              " | undefined): Promise<",
              "CanSyncToAllSpacesResponse",
              ">; trainedModelsSpaces(): Promise<",
              "TrainedModelsSpacesResponse",
              ">; updateModelsSpaces(modelIds: string[], spacesToAdd: string[], spacesToRemove: string[]): Promise<",
              "SavedObjectResult",
              ">; }; trainedModels: { getTrainedModelDownloads(): Promise<",
              {
                "pluginId": "@kbn/ml-trained-models-utils",
                "scope": "common",
                "docId": "kibKbnMlTrainedModelsUtilsPluginApi",
                "section": "def-common.ModelDefinitionResponse",
                "text": "ModelDefinitionResponse"
              },
              "[]>; getElserConfig(options?: ",
              {
                "pluginId": "@kbn/ml-trained-models-utils",
                "scope": "common",
                "docId": "kibKbnMlTrainedModelsUtilsPluginApi",
                "section": "def-common.GetModelDownloadConfigOptions",
                "text": "GetModelDownloadConfigOptions"
              },
              " | undefined): Promise<",
              {
                "pluginId": "@kbn/ml-trained-models-utils",
                "scope": "common",
                "docId": "kibKbnMlTrainedModelsUtilsPluginApi",
                "section": "def-common.ModelDefinitionResponse",
                "text": "ModelDefinitionResponse"
              },
              ">; getTrainedModels(modelId?: string | string[] | undefined, params?: ",
              "InferenceQueryParams",
              " | undefined): Promise<",
              "TrainedModelConfigResponse",
              "[]>; getTrainedModelsList(): Promise<",
              "TrainedModelUIItem",
              "[]>; getTrainedModelStats(modelId?: string | string[] | undefined, params?: ",
              "InferenceStatsQueryParams",
              " | undefined): Promise<",
              "InferenceStatsResponse",
              ">; getTrainedModelPipelines(modelId: string | string[]): Promise<",
              "ModelPipelines",
              "[]>; getAllIngestPipelines(): Promise<string[]>; createInferencePipeline(pipelineName: string, pipeline: ",
              "IngestPipeline",
              "): Promise<",
              "IngestSimulateResponse",
              ">; deleteTrainedModel({ modelId, options, }: ",
              "DeleteModelParams",
              "): Promise<{ acknowledge: boolean; }>; getCuratedModelConfig(modelName: string, options?: ",
              {
                "pluginId": "@kbn/ml-trained-models-utils",
                "scope": "common",
                "docId": "kibKbnMlTrainedModelsUtilsPluginApi",
                "section": "def-common.GetModelDownloadConfigOptions",
                "text": "GetModelDownloadConfigOptions"
              },
              " | undefined): Promise<",
              {
                "pluginId": "@kbn/ml-trained-models-utils",
                "scope": "common",
                "docId": "kibKbnMlTrainedModelsUtilsPluginApi",
                "section": "def-common.ModelDefinitionResponse",
                "text": "ModelDefinitionResponse"
              },
              ">; getTrainedModelsNodesOverview(): Promise<",
              "NodesOverviewResponse",
              ">; startModelAllocation({ modelId, deploymentParams, adaptiveAllocationsParams, }: ",
              "StartAllocationParams",
              "): ",
              "Observable",
              "<",
              "StartTrainedModelDeploymentResponse",
              ">; stopModelAllocation(modelId: string, deploymentsIds: string[], options?: { force: boolean; }): Promise<Record<string, { acknowledge: boolean; error?: ",
              {
                "pluginId": "@kbn/ml-error-utils",
                "scope": "common",
                "docId": "kibKbnMlErrorUtilsPluginApi",
                "section": "def-common.ErrorType",
                "text": "ErrorType"
              },
              "; }>>; updateModelDeployment(modelId: string, deploymentId: string, params: ",
              "UpdateAllocationParams",
              "): Promise<",
              "MlUpdateTrainedModelDeploymentResponse",
              ">; inferTrainedModel(modelId: string, deploymentsId: string, payload: Omit<",
              "MlInferTrainedModelRequest",
              ", \"model_id\">, timeout?: string | undefined): Promise<",
              "MlInferTrainedModelResponse",
              ">; trainedModelPipelineSimulate(pipeline: ",
              "IngestPipeline",
              ", docs: ",
              "IngestDocument",
              "[]): Promise<",
              "IngestSimulateResponse",
              ">; memoryUsage(type?: ",
              "MlSavedObjectType",
              " | undefined, node?: string | undefined, showClosedJobs?: boolean): Promise<",
              "MemoryUsageInfo",
              "[]>; putTrainedModelConfig(modelId: string, config: object): Promise<",
              "MlTrainedModelConfig",
              ">; installElasticTrainedModelConfig(modelId: string): Promise<",
              "MlTrainedModelConfig",
              ">; getModelsDownloadStatus(): Promise<Record<string, ",
              "ModelDownloadState",
              ">>; }; inferenceModels: { getAllInferenceEndpoints(): Promise<",
              "InferenceGetResponse",
              ">; }; notifications: { findMessages(params: ",
              "NotificationsQueryParams",
              "): Promise<",
              "NotificationsSearchResponse",
              ">; countMessages$(params: ",
              "NotificationsCountQueryParams",
              "): ",
              "Observable",
              "<",
              "NotificationsCountResponse",
              ">; }; jsonSchema: { getSchemaDefinition(params: ",
              "GetSchemaDefinitionParams",
              "): Promise<object>; }; } | undefined; components: { AnomalySwimLane: React.ForwardRefExoticComponent<",
              "AnomalySwimLaneProps",
              " & React.RefAttributes<{}>>; }; } | undefined"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogViewContextWithError",
        "type": "Interface",
        "tags": [],
        "label": "LogViewContextWithError",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogViewContextWithError.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "Error"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogViewContextWithResolvedLogView",
        "type": "Interface",
        "tags": [],
        "label": "LogViewContextWithResolvedLogView",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-public.LogViewContextWithResolvedLogView.resolvedLogView",
            "type": "Object",
            "tags": [],
            "label": "resolvedLogView",
            "description": [],
            "signature": [
              {
                "pluginId": "logsShared",
                "scope": "common",
                "docId": "kibLogsSharedPluginApi",
                "section": "def-common.ResolvedLogView",
                "text": "ResolvedLogView"
              },
              "<",
              {
                "pluginId": "dataViews",
                "scope": "common",
                "docId": "kibDataViewsPluginApi",
                "section": "def-common.DataView",
                "text": "DataView"
              },
              ">"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogsOverviewProps",
        "type": "Type",
        "tags": [],
        "label": "LogsOverviewProps",
        "description": [],
        "signature": [
          "{ timeRange: { start: string; end: string; } & { start: string; end: string; } & { start: string; end: string; } & { start: string; end: string; }; height?: ",
          "Property",
          ".Height<string | number> | undefined; logsSource?: ",
          {
            "pluginId": "@kbn/logs-overview",
            "scope": "public",
            "docId": "kibKbnLogsOverviewPluginApi",
            "section": "def-public.LogsSourceConfiguration",
            "text": "LogsSourceConfiguration"
          },
          " | undefined; documentFilters?: ",
          "QueryDslQueryContainer",
          "[] | undefined; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/components/logs_overview/logs_overview.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogViewNotificationChannel",
        "type": "Type",
        "tags": [],
        "label": "LogViewNotificationChannel",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/xstate-utils",
            "scope": "public",
            "docId": "kibKbnXstateUtilsPluginApi",
            "section": "def-public.NotificationChannel",
            "text": "NotificationChannel"
          },
          "<",
          "LogViewContextWithReference",
          " | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithResolvedLogView",
            "text": "LogViewContextWithResolvedLogView"
          },
          " & ",
          "LogViewContextWithStatus",
          ") | (",
          "LogViewContextWithReference",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          ") | (",
          "LogViewContextWithReference",
          " & ",
          "LogViewContextWithLogView",
          " & ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewContextWithError",
            "text": "LogViewContextWithError"
          },
          "), ",
          "LogViewEvent",
          ", ",
          {
            "pluginId": "logsShared",
            "scope": "public",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-public.LogViewNotificationEvent",
            "text": "LogViewNotificationEvent"
          },
          ">"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-public.LogViewNotificationEvent",
        "type": "Type",
        "tags": [],
        "label": "LogViewNotificationEvent",
        "description": [],
        "signature": [
          "{ type: \"LOADING_LOG_VIEW_STARTED\"; logViewReference: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }; } | { type: \"LOADING_LOG_VIEW_SUCCEEDED\"; resolvedLogView: ",
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.ResolvedLogView",
            "text": "ResolvedLogView"
          },
          "<",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataView",
            "text": "DataView"
          },
          ">; status: { index: \"unknown\" | \"missing\" | \"empty\" | \"available\"; }; } | { type: \"LOADING_LOG_VIEW_FAILED\"; error: Error; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/public/observability_logs/log_view_state/src/notifications.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "logsShared",
      "id": "def-public.LogsSharedClientSetupExports",
      "type": "Interface",
      "tags": [],
      "label": "LogsSharedClientSetupExports",
      "description": [],
      "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "logsShared",
          "id": "def-public.LogsSharedClientSetupExports.logViews",
          "type": "Object",
          "tags": [],
          "label": "logViews",
          "description": [],
          "signature": [
            "LogViewsServiceSetup"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "logsShared",
          "id": "def-public.LogsSharedClientSetupExports.locators",
          "type": "Object",
          "tags": [],
          "label": "locators",
          "description": [],
          "signature": [
            "LogsSharedLocators"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
          "deprecated": false,
          "trackAdoption": false
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "logsShared",
      "id": "def-public.LogsSharedClientStartExports",
      "type": "Interface",
      "tags": [],
      "label": "LogsSharedClientStartExports",
      "description": [],
      "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "logsShared",
          "id": "def-public.LogsSharedClientStartExports.logViews",
          "type": "Object",
          "tags": [],
          "label": "logViews",
          "description": [],
          "signature": [
            "LogViewsServiceStart"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "logsShared",
          "id": "def-public.LogsSharedClientStartExports.LogAIAssistant",
          "type": "Function",
          "tags": [],
          "label": "LogAIAssistant",
          "description": [],
          "signature": [
            "((props: Omit<",
            {
              "pluginId": "logsShared",
              "scope": "public",
              "docId": "kibLogsSharedPluginApi",
              "section": "def-public.LogAIAssistantProps",
              "text": "LogAIAssistantProps"
            },
            ", \"observabilityAIAssistant\">) => JSX.Element) | undefined"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "logsShared",
              "id": "def-public.LogsSharedClientStartExports.LogAIAssistant.$1",
              "type": "Object",
              "tags": [],
              "label": "props",
              "description": [],
              "signature": [
                "Omit<",
                {
                  "pluginId": "logsShared",
                  "scope": "public",
                  "docId": "kibLogsSharedPluginApi",
                  "section": "def-public.LogAIAssistantProps",
                  "text": "LogAIAssistantProps"
                },
                ", \"observabilityAIAssistant\">"
              ],
              "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "logsShared",
          "id": "def-public.LogsSharedClientStartExports.LogsOverview",
          "type": "CompoundType",
          "tags": [],
          "label": "LogsOverview",
          "description": [],
          "signature": [
            "SelfContainedLogsOverviewComponent",
            " & ",
            "SelfContainedLogsOverviewHelpers"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/public/types.ts",
          "deprecated": false,
          "trackAdoption": false
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "logsShared",
        "id": "def-server.LogsSharedLogEntriesDomain",
        "type": "Class",
        "tags": [],
        "label": "LogsSharedLogEntriesDomain",
        "description": [],
        "signature": [
          {
            "pluginId": "logsShared",
            "scope": "server",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-server.LogsSharedLogEntriesDomain",
            "text": "LogsSharedLogEntriesDomain"
          },
          " implements ",
          {
            "pluginId": "logsShared",
            "scope": "server",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-server.ILogsSharedLogEntriesDomain",
            "text": "ILogsSharedLogEntriesDomain"
          }
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-server.LogsSharedLogEntriesDomain.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "adapter",
                "description": [],
                "signature": [
                  "LogEntriesAdapter"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.Unnamed.$2",
                "type": "Object",
                "tags": [],
                "label": "libs",
                "description": [],
                "signature": [
                  "Pick<",
                  "LogsSharedBackendLibs",
                  ", \"framework\" | \"getStartServices\">"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-server.LogsSharedLogEntriesDomain.getLogEntries",
            "type": "Function",
            "tags": [],
            "label": "getLogEntries",
            "description": [],
            "signature": [
              "(requestContext: ",
              "RequestHandlerContext",
              ", logView: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }, params: ",
              "LogEntriesParams",
              ", columnOverrides?: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[] | undefined) => Promise<{ entries: { id: string; index: string; cursor: { time: string; tiebreaker: number; }; columns: ({ columnId: string; time: string; } | { columnId: string; field: string; value: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonArray",
                "text": "JsonArray"
              },
              "; highlights: string[]; } | { columnId: string; message: ({ constant: string; } | { field: string; value: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonArray",
                "text": "JsonArray"
              },
              "; highlights: string[]; })[]; })[]; context: {} | { 'container.id': string; } | { 'host.name': string; 'log.file.path': string; }; }[]; hasMoreBefore?: boolean | undefined; hasMoreAfter?: boolean | undefined; }>"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntries.$1",
                "type": "Object",
                "tags": [],
                "label": "requestContext",
                "description": [],
                "signature": [
                  "RequestHandlerContext"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntries.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "logView",
                "description": [],
                "signature": [
                  "{ logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntries.$3",
                "type": "Object",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "LogEntriesParams"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntries.$4",
                "type": "Array",
                "tags": [],
                "label": "columnOverrides",
                "description": [],
                "signature": [
                  "({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[] | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets",
            "type": "Function",
            "tags": [],
            "label": "getLogEntryDatasets",
            "description": [],
            "signature": [
              "(requestContext: ",
              "RequestHandlerContext",
              ", timestampField: string, indexName: string, startTime: number, endTime: number, runtimeMappings: ",
              "MappingRuntimeFields",
              ") => Promise<string[]>"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets.$1",
                "type": "Object",
                "tags": [],
                "label": "requestContext",
                "description": [],
                "signature": [
                  "RequestHandlerContext"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets.$2",
                "type": "string",
                "tags": [],
                "label": "timestampField",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets.$3",
                "type": "string",
                "tags": [],
                "label": "indexName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets.$4",
                "type": "number",
                "tags": [],
                "label": "startTime",
                "description": [],
                "signature": [
                  "number"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets.$5",
                "type": "number",
                "tags": [],
                "label": "endTime",
                "description": [],
                "signature": [
                  "number"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.LogsSharedLogEntriesDomain.getLogEntryDatasets.$6",
                "type": "Object",
                "tags": [],
                "label": "runtimeMappings",
                "description": [],
                "signature": [
                  "MappingRuntimeFields"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "logsShared",
        "id": "def-server.ILogsSharedLogEntriesDomain",
        "type": "Interface",
        "tags": [],
        "label": "ILogsSharedLogEntriesDomain",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntries",
            "type": "Function",
            "tags": [],
            "label": "getLogEntries",
            "description": [],
            "signature": [
              "(requestContext: ",
              "RequestHandlerContext",
              ", logView: { logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }, params: ",
              "LogEntriesParams",
              ", columnOverrides?: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[] | undefined) => Promise<{ entries: { id: string; index: string; cursor: { time: string; tiebreaker: number; }; columns: ({ columnId: string; time: string; } | { columnId: string; field: string; value: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonArray",
                "text": "JsonArray"
              },
              "; highlights: string[]; } | { columnId: string; message: ({ constant: string; } | { field: string; value: ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonArray",
                "text": "JsonArray"
              },
              "; highlights: string[]; })[]; })[]; context: {} | { 'container.id': string; } | { 'host.name': string; 'log.file.path': string; }; }[]; hasMoreBefore?: boolean | undefined; hasMoreAfter?: boolean | undefined; }>"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntries.$1",
                "type": "Object",
                "tags": [],
                "label": "requestContext",
                "description": [],
                "signature": [
                  "RequestHandlerContext"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntries.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "logView",
                "description": [],
                "signature": [
                  "{ logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntries.$3",
                "type": "Object",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  "LogEntriesParams"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntries.$4",
                "type": "Array",
                "tags": [],
                "label": "columnOverrides",
                "description": [],
                "signature": [
                  "({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[] | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets",
            "type": "Function",
            "tags": [],
            "label": "getLogEntryDatasets",
            "description": [],
            "signature": [
              "(requestContext: ",
              "RequestHandlerContext",
              ", timestampField: string, indexName: string, startTime: number, endTime: number, runtimeMappings: ",
              "MappingRuntimeFields",
              ") => Promise<string[]>"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets.$1",
                "type": "Object",
                "tags": [],
                "label": "requestContext",
                "description": [],
                "signature": [
                  "RequestHandlerContext"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets.$2",
                "type": "string",
                "tags": [],
                "label": "timestampField",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets.$3",
                "type": "string",
                "tags": [],
                "label": "indexName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets.$4",
                "type": "number",
                "tags": [],
                "label": "startTime",
                "description": [],
                "signature": [
                  "number"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets.$5",
                "type": "number",
                "tags": [],
                "label": "endTime",
                "description": [],
                "signature": [
                  "number"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-server.ILogsSharedLogEntriesDomain.getLogEntryDatasets.$6",
                "type": "Object",
                "tags": [],
                "label": "runtimeMappings",
                "description": [],
                "signature": [
                  "MappingRuntimeFields"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/server/lib/domains/log_entries_domain/log_entries_domain.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "logsShared",
        "id": "def-server.logViewSavedObjectName",
        "type": "string",
        "tags": [],
        "label": "logViewSavedObjectName",
        "description": [],
        "signature": [
          "\"infrastructure-monitoring-log-view\""
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/server/saved_objects/log_view/log_view_saved_object.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "logsShared",
      "id": "def-server.LogsSharedPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "LogsSharedPluginSetup",
      "description": [],
      "signature": [
        {
          "pluginId": "logsShared",
          "scope": "server",
          "docId": "kibLogsSharedPluginApi",
          "section": "def-server.LogsSharedPluginSetup",
          "text": "LogsSharedPluginSetup"
        },
        " extends ",
        "LogsSharedDomainLibs"
      ],
      "path": "x-pack/platform/plugins/shared/logs_shared/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "logsShared",
          "id": "def-server.LogsSharedPluginSetup.logViews",
          "type": "Object",
          "tags": [],
          "label": "logViews",
          "description": [],
          "signature": [
            "LogViewsServiceSetup"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/server/types.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "logsShared",
          "id": "def-server.LogsSharedPluginSetup.registerUsageCollectorActions",
          "type": "Function",
          "tags": [],
          "label": "registerUsageCollectorActions",
          "description": [],
          "signature": [
            "(usageCollector: ",
            "UsageCollector",
            ") => void"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "logsShared",
              "id": "def-server.LogsSharedPluginSetup.registerUsageCollectorActions.$1",
              "type": "Object",
              "tags": [],
              "label": "usageCollector",
              "description": [],
              "signature": [
                "UsageCollector"
              ],
              "path": "x-pack/platform/plugins/shared/logs_shared/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "logsShared",
      "id": "def-server.LogsSharedPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "LogsSharedPluginStart",
      "description": [],
      "path": "x-pack/platform/plugins/shared/logs_shared/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "logsShared",
          "id": "def-server.LogsSharedPluginStart.logViews",
          "type": "Object",
          "tags": [],
          "label": "logViews",
          "description": [],
          "signature": [
            "LogViewsServiceStart"
          ],
          "path": "x-pack/platform/plugins/shared/logs_shared/server/types.ts",
          "deprecated": false,
          "trackAdoption": false
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [
      {
        "parentPluginId": "logsShared",
        "id": "def-common.FetchLogViewError",
        "type": "Class",
        "tags": [],
        "label": "FetchLogViewError",
        "description": [],
        "signature": [
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.FetchLogViewError",
            "text": "FetchLogViewError"
          },
          " extends Error"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.FetchLogViewError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-common.FetchLogViewError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-common.FetchLogViewError.Unnamed.$2",
                "type": "Object",
                "tags": [],
                "label": "cause",
                "description": [],
                "signature": [
                  "Error | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.FetchLogViewStatusError",
        "type": "Class",
        "tags": [],
        "label": "FetchLogViewStatusError",
        "description": [],
        "signature": [
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.FetchLogViewStatusError",
            "text": "FetchLogViewStatusError"
          },
          " extends Error"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.FetchLogViewStatusError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-common.FetchLogViewStatusError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-common.FetchLogViewStatusError.Unnamed.$2",
                "type": "Object",
                "tags": [],
                "label": "cause",
                "description": [],
                "signature": [
                  "Error | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.ResolveLogViewError",
        "type": "Class",
        "tags": [],
        "label": "ResolveLogViewError",
        "description": [],
        "signature": [
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.ResolveLogViewError",
            "text": "ResolveLogViewError"
          },
          " extends Error"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolveLogViewError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-common.ResolveLogViewError.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "logsShared",
                "id": "def-common.ResolveLogViewError.Unnamed.$2",
                "type": "Object",
                "tags": [],
                "label": "cause",
                "description": [],
                "signature": [
                  "Error | undefined"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "logsShared",
        "id": "def-common.convertISODateToNanoPrecision",
        "type": "Function",
        "tags": [],
        "label": "convertISODateToNanoPrecision",
        "description": [],
        "signature": [
          "(date: string) => string"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/utils/date_helpers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.convertISODateToNanoPrecision.$1",
            "type": "string",
            "tags": [],
            "label": "date",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/utils/date_helpers.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getLogEntryCursorFromHit",
        "type": "Function",
        "tags": [],
        "label": "getLogEntryCursorFromHit",
        "description": [],
        "signature": [
          "(hit: { sort: [string, number]; }) => { time: string; tiebreaker: number; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getLogEntryCursorFromHit.$1",
            "type": "Object",
            "tags": [],
            "label": "hit",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-common.getLogEntryCursorFromHit.$1.sort",
                "type": "Object",
                "tags": [],
                "label": "sort",
                "description": [],
                "signature": [
                  "[string, number]"
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getLogsLocatorFromUrlService",
        "type": "Function",
        "tags": [],
        "label": "getLogsLocatorFromUrlService",
        "description": [],
        "signature": [
          "(urlService: ",
          "UrlService",
          "<unknown, ",
          "IShortUrlClient",
          ">) => ",
          {
            "pluginId": "share",
            "scope": "common",
            "docId": "kibSharePluginApi",
            "section": "def-common.LocatorPublic",
            "text": "LocatorPublic"
          },
          "<",
          {
            "pluginId": "discover",
            "scope": "common",
            "docId": "kibDiscoverPluginApi",
            "section": "def-common.DiscoverAppLocatorParams",
            "text": "DiscoverAppLocatorParams"
          },
          "> | undefined"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/get_logs_locators.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getLogsLocatorFromUrlService.$1",
            "type": "Object",
            "tags": [],
            "label": "urlService",
            "description": [],
            "signature": [
              "UrlService",
              "<unknown, ",
              "IShortUrlClient",
              ">"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/get_logs_locators.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getNodeQuery",
        "type": "Function",
        "tags": [],
        "label": "getNodeQuery",
        "description": [],
        "signature": [
          "(params: ",
          "NodeLogsParams",
          ") => ",
          {
            "pluginId": "@kbn/es-query",
            "scope": "common",
            "docId": "kibKbnEsQueryPluginApi",
            "section": "def-common.Query",
            "text": "Query"
          },
          " | ",
          {
            "pluginId": "@kbn/es-query",
            "scope": "common",
            "docId": "kibKbnEsQueryPluginApi",
            "section": "def-common.AggregateQuery",
            "text": "AggregateQuery"
          },
          " | undefined"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getNodeQuery.$1",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "NodeLogsParams"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getTimeRange",
        "type": "Function",
        "tags": [],
        "label": "getTimeRange",
        "description": [],
        "signature": [
          "(time: number | undefined) => ",
          {
            "pluginId": "@kbn/es-query",
            "scope": "common",
            "docId": "kibKbnEsQueryPluginApi",
            "section": "def-common.TimeRange",
            "text": "TimeRange"
          },
          " | undefined"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getTimeRange.$1",
            "type": "number",
            "tags": [],
            "label": "time",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getTimeRangeEndFromTime",
        "type": "Function",
        "tags": [],
        "label": "getTimeRangeEndFromTime",
        "description": [],
        "signature": [
          "(time: number) => string"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getTimeRangeEndFromTime.$1",
            "type": "number",
            "tags": [],
            "label": "time",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getTimeRangeStartFromTime",
        "type": "Function",
        "tags": [],
        "label": "getTimeRangeStartFromTime",
        "description": [],
        "signature": [
          "(time: number) => string"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getTimeRangeStartFromTime.$1",
            "type": "number",
            "tags": [],
            "label": "time",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.getTraceQuery",
        "type": "Function",
        "tags": [],
        "label": "getTraceQuery",
        "description": [],
        "signature": [
          "(params: ",
          "TraceLogsParams",
          ") => ",
          {
            "pluginId": "@kbn/es-query",
            "scope": "common",
            "docId": "kibKbnEsQueryPluginApi",
            "section": "def-common.Query",
            "text": "Query"
          },
          " | ",
          {
            "pluginId": "@kbn/es-query",
            "scope": "common",
            "docId": "kibKbnEsQueryPluginApi",
            "section": "def-common.AggregateQuery",
            "text": "AggregateQuery"
          },
          " | undefined"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.getTraceQuery.$1",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "TraceLogsParams"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/helpers.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "logsShared",
        "id": "def-common.ResolvedLogView",
        "type": "Interface",
        "tags": [],
        "label": "ResolvedLogView",
        "description": [],
        "signature": [
          {
            "pluginId": "logsShared",
            "scope": "common",
            "docId": "kibLogsSharedPluginApi",
            "section": "def-common.ResolvedLogView",
            "text": "ResolvedLogView"
          },
          "<DataViewReference>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.indices",
            "type": "string",
            "tags": [],
            "label": "indices",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.timestampField",
            "type": "string",
            "tags": [],
            "label": "timestampField",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.tiebreakerField",
            "type": "string",
            "tags": [],
            "label": "tiebreakerField",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.messageField",
            "type": "Array",
            "tags": [],
            "label": "messageField",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.runtimeMappings",
            "type": "Object",
            "tags": [],
            "label": "runtimeMappings",
            "description": [],
            "signature": [
              "{ [x: string]: ",
              "MappingRuntimeField",
              "; }"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.columns",
            "type": "Array",
            "tags": [],
            "label": "columns",
            "description": [],
            "signature": [
              "({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.ResolvedLogView.dataViewReference",
            "type": "Uncategorized",
            "tags": [],
            "label": "dataViewReference",
            "description": [],
            "signature": [
              "DataViewReference"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "logsShared",
        "id": "def-common.defaultFilterStateKey",
        "type": "string",
        "tags": [],
        "label": "defaultFilterStateKey",
        "description": [],
        "signature": [
          "\"logFilter\""
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.defaultPositionStateKey",
        "type": "string",
        "tags": [],
        "label": "defaultPositionStateKey",
        "description": [],
        "signature": [
          "\"logPosition\""
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogColumn",
        "type": "Type",
        "tags": [],
        "label": "LogColumn",
        "description": [],
        "signature": [
          "{ columnId: string; time: string; } | { columnId: string; field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; } | { columnId: string; message: ({ constant: string; } | { field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; })[]; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogDataViewReference",
        "type": "Type",
        "tags": [],
        "label": "LogDataViewReference",
        "description": [],
        "signature": [
          "{ type: \"data_view\"; dataViewId: string; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntry",
        "type": "Type",
        "tags": [],
        "label": "LogEntry",
        "description": [],
        "signature": [
          "{ id: string; index: string; cursor: { time: string; tiebreaker: number; }; columns: ({ columnId: string; time: string; } | { columnId: string; field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; } | { columnId: string; message: ({ constant: string; } | { field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; })[]; })[]; context: {} | { 'container.id': string; } | { 'host.name': string; 'log.file.path': string; }; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryAfterCursor",
        "type": "Type",
        "tags": [],
        "label": "LogEntryAfterCursor",
        "description": [],
        "signature": [
          "{ after: { time: string; tiebreaker: number; } | \"first\"; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryAroundCursor",
        "type": "Type",
        "tags": [],
        "label": "LogEntryAroundCursor",
        "description": [],
        "signature": [
          "{ center: { time: string; tiebreaker: number; }; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryBeforeCursor",
        "type": "Type",
        "tags": [],
        "label": "LogEntryBeforeCursor",
        "description": [],
        "signature": [
          "{ before: { time: string; tiebreaker: number; } | \"last\"; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryContext",
        "type": "Type",
        "tags": [],
        "label": "LogEntryContext",
        "description": [],
        "signature": [
          "{} | { 'container.id': string; } | { 'host.name': string; 'log.file.path': string; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryCursor",
        "type": "Type",
        "tags": [],
        "label": "LogEntryCursor",
        "description": [],
        "signature": [
          "{ time: string; tiebreaker: number; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryField",
        "type": "Type",
        "tags": [],
        "label": "LogEntryField",
        "description": [],
        "signature": [
          "{ field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogEntryTime",
        "type": "Type",
        "tags": [],
        "label": "LogEntryTime",
        "description": [],
        "signature": [
          "{ time: string; tiebreaker: number; } & { gid?: string | undefined; fromAutoReload?: boolean | undefined; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogFieldColumn",
        "type": "Type",
        "tags": [],
        "label": "LogFieldColumn",
        "description": [],
        "signature": [
          "{ columnId: string; field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogIndexNameReference",
        "type": "Type",
        "tags": [],
        "label": "LogIndexNameReference",
        "description": [],
        "signature": [
          "{ type: \"index_name\"; indexName: string; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogIndexReference",
        "type": "Type",
        "tags": [],
        "label": "LogIndexReference",
        "description": [],
        "signature": [
          "{ type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogMessageColumn",
        "type": "Type",
        "tags": [],
        "label": "LogMessageColumn",
        "description": [],
        "signature": [
          "{ columnId: string; message: ({ constant: string; } | { field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; })[]; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogMessageConstantPart",
        "type": "Type",
        "tags": [],
        "label": "LogMessageConstantPart",
        "description": [],
        "signature": [
          "{ constant: string; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogMessageFieldPart",
        "type": "Type",
        "tags": [],
        "label": "LogMessageFieldPart",
        "description": [],
        "signature": [
          "{ field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogMessagePart",
        "type": "Type",
        "tags": [],
        "label": "LogMessagePart",
        "description": [],
        "signature": [
          "{ constant: string; } | { field: string; value: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          "; highlights: string[]; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LOGS_LOCATOR_ID",
        "type": "string",
        "tags": [],
        "label": "LOGS_LOCATOR_ID",
        "description": [
          "\nLocator used to link to all log sources in Discover."
        ],
        "signature": [
          "\"LOGS_LOCATOR\""
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/logs_locator.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogsLocatorParams",
        "type": "Type",
        "tags": [],
        "label": "LogsLocatorParams",
        "description": [
          "\nAccepts the same parameters as `DiscoverAppLocatorParams`, but automatically sets the `dataViewId` param to all log sources."
        ],
        "signature": [
          {
            "pluginId": "discover",
            "scope": "common",
            "docId": "kibDiscoverPluginApi",
            "section": "def-common.DiscoverAppLocatorParams",
            "text": "DiscoverAppLocatorParams"
          }
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/locators/logs_locator.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogSourcesKibanaAdvancedSettingReference",
        "type": "Type",
        "tags": [],
        "label": "LogSourcesKibanaAdvancedSettingReference",
        "description": [],
        "signature": [
          "{ type: \"kibana_advanced_setting\"; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogTimestampColumn",
        "type": "Type",
        "tags": [],
        "label": "LogTimestampColumn",
        "description": [],
        "signature": [
          "{ columnId: string; time: string; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogView",
        "type": "Type",
        "tags": [],
        "label": "LogView",
        "description": [],
        "signature": [
          "{ id: string; origin: \"inline\" | \"internal\" | \"stored\" | \"infra-source-stored\" | \"infra-source-internal\" | \"infra-source-fallback\"; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; } & { updatedAt?: number | undefined; version?: string | undefined; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogViewAttributes",
        "type": "Type",
        "tags": [],
        "label": "LogViewAttributes",
        "description": [],
        "signature": [
          "{ name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogViewColumnConfiguration",
        "type": "Type",
        "tags": [],
        "label": "LogViewColumnConfiguration",
        "description": [],
        "signature": [
          "{ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogViewReference",
        "type": "Type",
        "tags": [],
        "label": "LogViewReference",
        "description": [],
        "signature": [
          "{ logViewId: string; type: \"log-view-reference\"; } | { type: \"log-view-inline\"; id: string; attributes: { name: string; description: string; logIndices: { type: \"data_view\"; dataViewId: string; } | { type: \"index_name\"; indexName: string; } | { type: \"kibana_advanced_setting\"; }; logColumns: ({ timestampColumn: { id: string; }; } | { messageColumn: { id: string; }; } | { fieldColumn: { id: string; } & { field: string; }; })[]; }; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.LogViewStatus",
        "type": "Type",
        "tags": [],
        "label": "LogViewStatus",
        "description": [],
        "signature": [
          "{ index: \"unknown\" | \"missing\" | \"empty\" | \"available\"; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.PersistedLogViewReference",
        "type": "Type",
        "tags": [],
        "label": "PersistedLogViewReference",
        "description": [],
        "signature": [
          "{ logViewId: string; type: \"log-view-reference\"; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.ResolvedLogViewField",
        "type": "Type",
        "tags": [],
        "label": "ResolvedLogViewField",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/es-query",
            "scope": "common",
            "docId": "kibKbnEsQueryPluginApi",
            "section": "def-common.DataViewFieldBase",
            "text": "DataViewFieldBase"
          },
          " & { count?: number | undefined; conflictDescriptions?: Record<string, string[]> | undefined; format?: ",
          {
            "pluginId": "fieldFormats",
            "scope": "common",
            "docId": "kibFieldFormatsPluginApi",
            "section": "def-common.SerializedFieldFormat",
            "text": "SerializedFieldFormat"
          },
          "<{}, ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.SerializableRecord",
            "text": "SerializableRecord"
          },
          "> | undefined; esTypes?: string[] | undefined; searchable: boolean; aggregatable: boolean; isNull?: boolean | undefined; readFromDocValues?: boolean | undefined; indexed?: boolean | undefined; customLabel?: string | undefined; customDescription?: string | undefined; runtimeField?: ",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.RuntimeFieldSpec",
            "text": "RuntimeFieldSpec"
          },
          " | undefined; fixedInterval?: string[] | undefined; timeZone?: string[] | undefined; timeSeriesDimension?: boolean | undefined; timeSeriesMetric?: ",
          "MappingTimeSeriesMetricType",
          " | undefined; shortDotsEnable?: boolean | undefined; isMapped?: boolean | undefined; parentName?: string | undefined; defaultFormatter?: string | undefined; metadata_field?: boolean | undefined; }"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/resolved_log_view.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "logsShared",
        "id": "def-common.DEFAULT_LOG_VIEW",
        "type": "Object",
        "tags": [],
        "label": "DEFAULT_LOG_VIEW",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.DEFAULT_LOG_VIEW.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"log-view-reference\""
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.DEFAULT_LOG_VIEW.logViewId",
            "type": "string",
            "tags": [],
            "label": "logViewId",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.DEFAULT_REFRESH_INTERVAL",
        "type": "Object",
        "tags": [],
        "label": "DEFAULT_REFRESH_INTERVAL",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.DEFAULT_REFRESH_INTERVAL.pause",
            "type": "boolean",
            "tags": [],
            "label": "pause",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.DEFAULT_REFRESH_INTERVAL.value",
            "type": "number",
            "tags": [],
            "label": "value",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.defaultLogViewAttributes",
        "type": "Object",
        "tags": [],
        "label": "defaultLogViewAttributes",
        "description": [],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "logsShared",
            "id": "def-common.defaultLogViewAttributes.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.defaultLogViewAttributes.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.defaultLogViewAttributes.logIndices",
            "type": "Object",
            "tags": [],
            "label": "logIndices",
            "description": [],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "logsShared",
                "id": "def-common.defaultLogViewAttributes.logIndices.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"kibana_advanced_setting\""
                ],
                "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "logsShared",
            "id": "def-common.defaultLogViewAttributes.logColumns",
            "type": "Array",
            "tags": [],
            "label": "logColumns",
            "description": [],
            "signature": [
              "({ timestampColumn: { id: string; }; } | { fieldColumn: { id: string; field: string; }; } | { messageColumn: { id: string; }; })[]"
            ],
            "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/defaults.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logColumnRT",
        "type": "Object",
        "tags": [],
        "label": "logColumnRT",
        "description": [],
        "signature": [
          "UnionC",
          "<[",
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; time: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>, ",
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; message: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "TypeC",
          "<{ constant: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>]>>; }>]>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logDataViewReferenceRT",
        "type": "Object",
        "tags": [],
        "label": "logDataViewReferenceRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"data_view\">; dataViewId: ",
          "StringC",
          "; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryAfterCursorRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryAfterCursorRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ after: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ time: ",
          "StringC",
          "; tiebreaker: ",
          "NumberC",
          "; }>, ",
          "LiteralC",
          "<\"first\">]>; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryAroundCursorRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryAroundCursorRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ center: ",
          "TypeC",
          "<{ time: ",
          "StringC",
          "; tiebreaker: ",
          "NumberC",
          "; }>; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryBeforeCursorRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryBeforeCursorRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ before: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ time: ",
          "StringC",
          "; tiebreaker: ",
          "NumberC",
          "; }>, ",
          "LiteralC",
          "<\"last\">]>; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryContextRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryContextRT",
        "description": [
          "\nfields"
        ],
        "signature": [
          "UnionC",
          "<[",
          "TypeC",
          "<{}>, ",
          "TypeC",
          "<{ 'container.id': ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ 'host.name': ",
          "StringC",
          "; 'log.file.path': ",
          "StringC",
          "; }>]>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryCursorRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryCursorRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ time: ",
          "StringC",
          "; tiebreaker: ",
          "NumberC",
          "; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry_cursor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryFieldRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryFieldRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logEntryRT",
        "type": "Object",
        "tags": [],
        "label": "logEntryRT",
        "description": [
          "\nentry"
        ],
        "signature": [
          "TypeC",
          "<{ id: ",
          "StringC",
          "; index: ",
          "StringC",
          "; cursor: ",
          "TypeC",
          "<{ time: ",
          "StringC",
          "; tiebreaker: ",
          "NumberC",
          "; }>; columns: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; time: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>, ",
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; message: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "TypeC",
          "<{ constant: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>]>>; }>]>>; context: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{}>, ",
          "TypeC",
          "<{ 'container.id': ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ 'host.name': ",
          "StringC",
          "; 'log.file.path': ",
          "StringC",
          "; }>]>; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logFieldColumnRT",
        "type": "Object",
        "tags": [],
        "label": "logFieldColumnRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logIndexNameReferenceRT",
        "type": "Object",
        "tags": [],
        "label": "logIndexNameReferenceRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"index_name\">; indexName: ",
          "StringC",
          "; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logMessageColumnRT",
        "type": "Object",
        "tags": [],
        "label": "logMessageColumnRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; message: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "TypeC",
          "<{ constant: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>]>>; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logMessageConstantPartRT",
        "type": "Object",
        "tags": [],
        "label": "logMessageConstantPartRT",
        "description": [
          "\nmessage parts"
        ],
        "signature": [
          "TypeC",
          "<{ constant: ",
          "StringC",
          "; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logMessageFieldPartRT",
        "type": "Object",
        "tags": [],
        "label": "logMessageFieldPartRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logMessagePartRT",
        "type": "Object",
        "tags": [],
        "label": "logMessagePartRT",
        "description": [],
        "signature": [
          "UnionC",
          "<[",
          "TypeC",
          "<{ constant: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ field: ",
          "StringC",
          "; value: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonArray",
            "text": "JsonArray"
          },
          ", unknown>; highlights: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>]>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logSourcesKibanaAdvancedSettingRT",
        "type": "Object",
        "tags": [],
        "label": "logSourcesKibanaAdvancedSettingRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"kibana_advanced_setting\">; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logTimestampColumnRT",
        "type": "Object",
        "tags": [],
        "label": "logTimestampColumnRT",
        "description": [
          "\ncolumns"
        ],
        "signature": [
          "TypeC",
          "<{ columnId: ",
          "StringC",
          "; time: ",
          "StringC",
          "; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_entry/log_entry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logViewColumnConfigurationRT",
        "type": "Object",
        "tags": [],
        "label": "logViewColumnConfigurationRT",
        "description": [],
        "signature": [
          "UnionC",
          "<[",
          "ExactC",
          "<",
          "TypeC",
          "<{ timestampColumn: ",
          "ExactC",
          "<",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>>; }>>, ",
          "ExactC",
          "<",
          "TypeC",
          "<{ messageColumn: ",
          "ExactC",
          "<",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>>; }>>, ",
          "ExactC",
          "<",
          "TypeC",
          "<{ fieldColumn: ",
          "IntersectionC",
          "<[",
          "ExactC",
          "<",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>>, ",
          "ExactC",
          "<",
          "TypeC",
          "<{ field: ",
          "StringC",
          "; }>>]>; }>>]>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.logViewReferenceRT",
        "type": "Object",
        "tags": [],
        "label": "logViewReferenceRT",
        "description": [],
        "signature": [
          "UnionC",
          "<[",
          "TypeC",
          "<{ logViewId: ",
          "StringC",
          "; type: ",
          "LiteralC",
          "<\"log-view-reference\">; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"log-view-inline\">; id: ",
          "StringC",
          "; attributes: ",
          "ExactC",
          "<",
          "TypeC",
          "<{ name: ",
          "StringC",
          "; description: ",
          "StringC",
          "; logIndices: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"data_view\">; dataViewId: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"index_name\">; indexName: ",
          "StringC",
          "; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"kibana_advanced_setting\">; }>]>; logColumns: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "ExactC",
          "<",
          "TypeC",
          "<{ timestampColumn: ",
          "ExactC",
          "<",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>>; }>>, ",
          "ExactC",
          "<",
          "TypeC",
          "<{ messageColumn: ",
          "ExactC",
          "<",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>>; }>>, ",
          "ExactC",
          "<",
          "TypeC",
          "<{ fieldColumn: ",
          "IntersectionC",
          "<[",
          "ExactC",
          "<",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>>, ",
          "ExactC",
          "<",
          "TypeC",
          "<{ field: ",
          "StringC",
          "; }>>]>; }>>]>>; }>>; }>]>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "logsShared",
        "id": "def-common.persistedLogViewReferenceRT",
        "type": "Object",
        "tags": [],
        "label": "persistedLogViewReferenceRT",
        "description": [],
        "signature": [
          "TypeC",
          "<{ logViewId: ",
          "StringC",
          "; type: ",
          "LiteralC",
          "<\"log-view-reference\">; }>"
        ],
        "path": "x-pack/platform/plugins/shared/logs_shared/common/log_views/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ]
  }
}