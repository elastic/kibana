{
  "id": "@kbn/core-plugins-server",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.Plugin",
        "type": "Interface",
        "tags": [],
        "label": "Plugin",
        "description": [
          "\nThe interface that should be returned by a `PluginInitializer` for a `standard` plugin.\n"
        ],
        "signature": [
          "Plugin",
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.Plugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              "CoreSetup",
              "<TPluginsStart, TStart>, plugins: TPluginsSetup) => TSetup"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-plugins-server",
                "id": "def-server.Plugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  "CoreSetup",
                  "<TPluginsStart, TStart>"
                ],
                "path": "src/core/packages/plugins/server/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-plugins-server",
                "id": "def-server.Plugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/packages/plugins/server/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.Plugin.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "(core: ",
              "CoreStart",
              ", plugins: TPluginsStart) => TStart"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-plugins-server",
                "id": "def-server.Plugin.start.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  "CoreStart"
                ],
                "path": "src/core/packages/plugins/server/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-plugins-server",
                "id": "def-server.Plugin.start.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsStart"
                ],
                "path": "src/core/packages/plugins/server/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.Plugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.MaybePromise",
                "text": "MaybePromise"
              },
              "<void>) | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.PluginConfigDescriptor",
        "type": "Interface",
        "tags": [],
        "label": "PluginConfigDescriptor",
        "description": [
          "\nDescribes a plugin configuration properties.\n"
        ],
        "signature": [
          "PluginConfigDescriptor",
          "<T>"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginConfigDescriptor.deprecations",
            "type": "Function",
            "tags": [],
            "label": "deprecations",
            "description": [
              "\nProvider for the {@link ConfigDeprecation} to apply to the plugin configuration."
            ],
            "signature": [
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecationProvider",
                "text": "ConfigDeprecationProvider"
              },
              " | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginConfigDescriptor.exposeToBrowser",
            "type": "Object",
            "tags": [],
            "label": "exposeToBrowser",
            "description": [
              "\nList of configuration properties that will be available on the client-side plugin."
            ],
            "signature": [
              "ExposedToBrowserDescriptor",
              "<T> | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginConfigDescriptor.dynamicConfig",
            "type": "Object",
            "tags": [],
            "label": "dynamicConfig",
            "description": [
              "\nList of configuration properties that can be dynamically changed via the PUT /internal/core/_settings API."
            ],
            "signature": [
              "DynamicConfigDescriptor",
              "<T> | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginConfigDescriptor.schema",
            "type": "Object",
            "tags": [],
            "label": "schema",
            "description": [
              "\nSchema to use to validate the plugin configuration.\n\n{@link PluginConfigSchema}"
            ],
            "signature": [
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.Type",
                "text": "Type"
              },
              "<T>"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginConfigDescriptor.exposeToUsage",
            "type": "Object",
            "tags": [],
            "label": "exposeToUsage",
            "description": [
              "\nExpose non-default configs to usage collection to be sent via telemetry.\nset a config to `true` to report the actual changed config value.\nset a config to `false` to report the changed config value as [redacted].\n\nAll changed configs except booleans and numbers will be reported\nas [redacted] unless otherwise specified.\n\n{@link MakeUsageFromSchema}"
            ],
            "signature": [
              "MakeUsageFromSchema",
              "<T> | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.PluginInitializerContext",
        "type": "Interface",
        "tags": [],
        "label": "PluginInitializerContext",
        "description": [
          "\nContext that's available to plugins during initialization stage.\n"
        ],
        "signature": [
          "PluginInitializerContext",
          "<ConfigSchema>"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginInitializerContext.opaqueId",
            "type": "Uncategorized",
            "tags": [],
            "label": "opaqueId",
            "description": [],
            "signature": [
              "symbol"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginInitializerContext.env",
            "type": "Object",
            "tags": [],
            "label": "env",
            "description": [],
            "signature": [
              "{ mode: ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.EnvironmentMode",
                "text": "EnvironmentMode"
              },
              "; packageInfo: Readonly<",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.PackageInfo",
                "text": "PackageInfo"
              },
              ">; instanceUuid: string; configs: readonly string[]; }"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginInitializerContext.node",
            "type": "Object",
            "tags": [],
            "label": "node",
            "description": [
              "\nAccess the configuration for this particular Kibana node.\nCan be used to determine which `roles` the current process was started with.\n"
            ],
            "signature": [
              "NodeInfo"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginInitializerContext.logger",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [
              "\n{@link LoggerFactory | logger factory} instance already bound to the plugin's logging context\n"
            ],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.LoggerFactory",
                "text": "LoggerFactory"
              }
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginInitializerContext.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [
              "\nAccessors for the plugin's configuration"
            ],
            "signature": [
              "{ legacy: { globalConfig$: ",
              "Observable",
              "<Readonly<{ elasticsearch: Readonly<{ readonly shardTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; readonly requestTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; readonly pingTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; }>; path: Readonly<{ readonly data: string; }>; savedObjects: Readonly<{ readonly maxImportPayloadBytes: Readonly<{ isGreaterThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isLessThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isEqualTo: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; getValueInBytes: () => number; toString: (returnUnit?: ",
              "ByteSizeValueUnit",
              " | undefined) => string; }>; }>; }>>; get: () => Readonly<{ elasticsearch: Readonly<{ readonly shardTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; readonly requestTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; readonly pingTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; }>; path: Readonly<{ readonly data: string; }>; savedObjects: Readonly<{ readonly maxImportPayloadBytes: Readonly<{ isGreaterThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isLessThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isEqualTo: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "common",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-common.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; getValueInBytes: () => number; toString: (returnUnit?: ",
              "ByteSizeValueUnit",
              " | undefined) => string; }>; }>; }>; }; create: <T = ConfigSchema>() => ",
              "Observable",
              "<T>; get: <T = ConfigSchema>() => T; }"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.PluginManifest",
        "type": "Interface",
        "tags": [],
        "label": "PluginManifest",
        "description": [
          "\nDescribes the set of required and optional properties plugin can define in its\nmandatory JSON manifest file.\n"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nIdentifier of the plugin. Must be a string in camelCase. Part of a plugin public contract.\nOther plugins leverage it to access plugin API, navigate to the plugin, etc."
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [
              "\nVersion of the plugin."
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [
              "\nThe version of Kibana the plugin is compatible with, defaults to \"version\"."
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.type",
            "type": "Enum",
            "tags": [],
            "label": "type",
            "description": [
              "\nType of the plugin, defaults to `standard`."
            ],
            "signature": [
              "PluginType"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.configPath",
            "type": "CompoundType",
            "tags": [],
            "label": "configPath",
            "description": [
              "\nRoot {@link ConfigPath | configuration path} used by the plugin, defaults\nto \"id\" in snake_case format.\n"
            ],
            "signature": [
              "string | string[]"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.requiredPlugins",
            "type": "Object",
            "tags": [],
            "label": "requiredPlugins",
            "description": [
              "\nAn optional list of the other plugins that **must be** installed and enabled\nfor this plugin to function properly."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.requiredBundles",
            "type": "Object",
            "tags": [],
            "label": "requiredBundles",
            "description": [
              "\nList of plugin ids that this plugin's UI code imports modules from that are\nnot in `requiredPlugins`.\n"
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.optionalPlugins",
            "type": "Object",
            "tags": [],
            "label": "optionalPlugins",
            "description": [
              "\nAn optional list of the other plugins that if installed and enabled **may be**\nleveraged by this plugin for some additional functionality but otherwise are\nnot required for this plugin to work properly."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.runtimePluginDependencies",
            "type": "Object",
            "tags": [],
            "label": "runtimePluginDependencies",
            "description": [
              "\nAn optional list of plugin dependencies that can be resolved dynamically at runtime\nusing the dynamic contract resolving capabilities from the plugin service."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.ui",
            "type": "boolean",
            "tags": [],
            "label": "ui",
            "description": [
              "\nSpecifies whether plugin includes some client/browser specific functionality\nthat should be included into client bundle via `public/ui_plugin.js` file."
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.server",
            "type": "boolean",
            "tags": [],
            "label": "server",
            "description": [
              "\nSpecifies whether plugin includes some server-side specific functionality."
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.extraPublicDirs",
            "type": "Array",
            "tags": [
              "deprecated"
            ],
            "label": "extraPublicDirs",
            "description": [
              "\nSpecifies directory names that can be imported by other ui-plugins built\nusing the same instance of the @kbn/optimizer. A temporary measure we plan\nto replace with better mechanisms for sharing static code between plugins"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": true,
            "trackAdoption": false,
            "references": [
              {
                "plugin": "@kbn/core",
                "path": "src/core/packages/plugins/server-internal/src/discovery/plugin_manifest_parser.ts"
              },
              {
                "plugin": "@kbn/core",
                "path": "src/core/packages/plugins/server-internal/src/discovery/plugin_manifest_parser.ts"
              },
              {
                "plugin": "@kbn/core",
                "path": "src/core/packages/plugins/server-internal/src/discovery/plugin_manifest_parser.ts"
              },
              {
                "plugin": "@kbn/core",
                "path": "src/core/packages/plugins/server-internal/src/discovery/plugin_manifest_parser.ts"
              },
              {
                "plugin": "@kbn/core",
                "path": "src/core/packages/plugins/server-internal/src/discovery/plugin_manifest_parser.ts"
              },
              {
                "plugin": "@kbn/core",
                "path": "src/core/packages/plugins/server-internal/src/discovery/plugin_manifest_parser.ts"
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.serviceFolders",
            "type": "Object",
            "tags": [],
            "label": "serviceFolders",
            "description": [
              "\nOnly used for the automatically generated API documentation. Specifying service\nfolders will cause your plugin API reference to be broken up into sub sections."
            ],
            "signature": [
              "readonly string[] | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.owner",
            "type": "Object",
            "tags": [],
            "label": "owner",
            "description": [],
            "signature": [
              "{ readonly name: string; readonly githubTeam?: string | undefined; }"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "\nTODO: make required once all plugins specify this.\nA brief description of what this plugin does and any capabilities it provides."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginManifest.enabledOnAnonymousPages",
            "type": "CompoundType",
            "tags": [],
            "label": "enabledOnAnonymousPages",
            "description": [
              "\nSpecifies whether this plugin - and its required dependencies - will be enabled for anonymous pages (login page, status page when\nconfigured, etc.) Default is false."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.PrebootPlugin",
        "type": "Interface",
        "tags": [],
        "label": "PrebootPlugin",
        "description": [
          "\nThe interface that should be returned by a `PluginInitializer` for a `preboot` plugin.\n"
        ],
        "signature": [
          "PrebootPlugin",
          "<TSetup, TPluginsSetup>"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PrebootPlugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              "CorePreboot",
              ", plugins: TPluginsSetup) => TSetup"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-plugins-server",
                "id": "def-server.PrebootPlugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  "CorePreboot"
                ],
                "path": "src/core/packages/plugins/server/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-plugins-server",
                "id": "def-server.PrebootPlugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/packages/plugins/server/src/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PrebootPlugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.DynamicConfigDescriptor",
        "type": "Type",
        "tags": [],
        "label": "DynamicConfigDescriptor",
        "description": [
          "\nType defining the list of configuration properties that can be dynamically updated\nObject properties can either be fully exposed or narrowed down to specific keys.\n"
        ],
        "signature": [
          "{ [Key in keyof T]?: (T[Key] extends Maybe<any[]> ? boolean : T[Key] extends Maybe<object> ? boolean | ",
          "DynamicConfigDescriptor",
          "<T[Key]> : boolean) | undefined; }"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.ExposedToBrowserDescriptor",
        "type": "Type",
        "tags": [],
        "label": "ExposedToBrowserDescriptor",
        "description": [
          "\nType defining the list of configuration properties that will be exposed on the client-side\nObject properties can either be fully exposed or narrowed down to specific keys.\n"
        ],
        "signature": [
          "{ [Key in keyof T]?: (T[Key] extends Maybe<any[]> ? boolean : T[Key] extends Maybe<object> ? boolean | ",
          "ExposedToBrowserDescriptor",
          "<T[Key]> : boolean) | undefined; }"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.MakeUsageFromSchema",
        "type": "Type",
        "tags": [],
        "label": "MakeUsageFromSchema",
        "description": [
          "\nList of configuration values that will be exposed to usage collection.\nIf parent node or actual config path is set to `true` then the actual value\nof these configs will be reoprted.\nIf parent node or actual config path is set to `false` then the config\nwill be reported as [redacted].\n"
        ],
        "signature": [
          "{ [Key in keyof T]?: (T[Key] extends Maybe<object[]> ? false : T[Key] extends Maybe<any[]> ? boolean : T[Key] extends Maybe<object> ? boolean | ",
          "MakeUsageFromSchema",
          "<T[Key]> : boolean) | undefined; }"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.PluginConfigSchema",
        "type": "Type",
        "tags": [],
        "label": "PluginConfigSchema",
        "description": [
          "\nDedicated type for plugin configuration schema.\n"
        ],
        "signature": [
          {
            "pluginId": "@kbn/config-schema",
            "scope": "common",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-common.Type",
            "text": "Type"
          },
          "<T>"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.PluginInitializer",
        "type": "Type",
        "tags": [],
        "label": "PluginInitializer",
        "description": [
          "\nThe `plugin` export at the root of a plugin's `server` directory should conform\nto this interface.\n"
        ],
        "signature": [
          "(core: ",
          "PluginInitializerContext",
          "<unknown>) => Promise<",
          "Plugin",
          "<TSetup, TStart, TPluginsSetup, TPluginsStart> | ",
          "PrebootPlugin",
          "<TSetup, TPluginsSetup>>"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.PluginInitializer.$1",
            "type": "Object",
            "tags": [],
            "label": "core",
            "description": [],
            "signature": [
              "PluginInitializerContext",
              "<unknown>"
            ],
            "path": "src/core/packages/plugins/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.SharedGlobalConfig",
        "type": "Type",
        "tags": [],
        "label": "SharedGlobalConfig",
        "description": [],
        "signature": [
          "{ readonly elasticsearch: Readonly<{ readonly shardTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; readonly requestTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; readonly pingTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: moment.unitOfTime.DurationConstructor | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; format: moment.Format; }>; }>; readonly path: Readonly<{ readonly data: string; }>; readonly savedObjects: Readonly<{ readonly maxImportPayloadBytes: Readonly<{ isGreaterThan: (other: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "common",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-common.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          ") => boolean; isLessThan: (other: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "common",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-common.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          ") => boolean; isEqualTo: (other: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "common",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-common.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          ") => boolean; getValueInBytes: () => number; toString: (returnUnit?: ",
          "ByteSizeValueUnit",
          " | undefined) => string; }>; }>; }"
        ],
        "path": "src/core/packages/plugins/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/core-plugins-server",
        "id": "def-server.SharedGlobalConfigKeys",
        "type": "Object",
        "tags": [],
        "label": "SharedGlobalConfigKeys",
        "description": [],
        "path": "src/core/packages/plugins/server/src/shared_global_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.SharedGlobalConfigKeys.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [
              "// We can add more if really needed"
            ],
            "signature": [
              "readonly [\"shardTimeout\", \"requestTimeout\", \"pingTimeout\"]"
            ],
            "path": "src/core/packages/plugins/server/src/shared_global_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.SharedGlobalConfigKeys.path",
            "type": "Object",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "readonly [\"data\"]"
            ],
            "path": "src/core/packages/plugins/server/src/shared_global_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-plugins-server",
            "id": "def-server.SharedGlobalConfigKeys.savedObjects",
            "type": "Object",
            "tags": [],
            "label": "savedObjects",
            "description": [],
            "signature": [
              "readonly [\"maxImportPayloadBytes\"]"
            ],
            "path": "src/core/packages/plugins/server/src/shared_global_config.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}