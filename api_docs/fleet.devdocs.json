{
  "id": "fleet",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "fleet",
        "id": "def-public.CustomAssetsAccordion",
        "type": "Function",
        "tags": [],
        "label": "CustomAssetsAccordion",
        "description": [],
        "signature": [
          "({ views, initialIsOpen, }: React.PropsWithChildren<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.CustomAssetsAccordionProps",
            "text": "CustomAssetsAccordionProps"
          },
          ">) => JSX.Element"
        ],
        "path": "x-pack/plugins/fleet/public/components/custom_assets_accordion.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.CustomAssetsAccordion.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{\n  views,\n  initialIsOpen = false,\n}",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.CustomAssetsAccordionProps",
                "text": "CustomAssetsAccordionProps"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/public/components/custom_assets_accordion.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditorDatastreamMappings",
        "type": "Function",
        "tags": [],
        "label": "PackagePolicyEditorDatastreamMappings",
        "description": [],
        "signature": [
          "({ packageInputStream, packageInfo }: React.PropsWithChildren<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyEditorDatastreamMappingsProps",
            "text": "PackagePolicyEditorDatastreamMappingsProps"
          },
          ">) => JSX.Element"
        ],
        "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_mappings.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditorDatastreamMappings.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ packageInputStream, packageInfo }",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditorDatastreamMappingsProps",
                "text": "PackagePolicyEditorDatastreamMappingsProps"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_mappings.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditorDatastreamPipelines",
        "type": "Function",
        "tags": [],
        "label": "PackagePolicyEditorDatastreamPipelines",
        "description": [],
        "signature": [
          "({ packageInputStream, packageInfo }: React.PropsWithChildren<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyEditorDatastreamPipelinesProps",
            "text": "PackagePolicyEditorDatastreamPipelinesProps"
          },
          ">) => JSX.Element | null"
        ],
        "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_pipelines.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditorDatastreamPipelines.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ packageInputStream, packageInfo }",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditorDatastreamPipelinesProps",
                "text": "PackagePolicyEditorDatastreamPipelinesProps"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_pipelines.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.pkgKeyFromPackageInfo",
        "type": "Function",
        "tags": [],
        "label": "pkgKeyFromPackageInfo",
        "description": [],
        "signature": [
          "<T extends { name: string; version: string; }>(packageInfo: T) => string"
        ],
        "path": "x-pack/plugins/fleet/public/services/pkg_key_from_package_info.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.pkgKeyFromPackageInfo.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "packageInfo",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "x-pack/plugins/fleet/public/services/pkg_key_from_package_info.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "fleet",
        "id": "def-public.AgentDetailsReassignPolicyAction",
        "type": "Interface",
        "tags": [],
        "label": "AgentDetailsReassignPolicyAction",
        "description": [
          "\nSupported routing state for the agent policy details page routes with deploy agents action"
        ],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.AgentDetailsReassignPolicyAction.onDoneNavigateTo",
            "type": "Object",
            "tags": [],
            "label": "onDoneNavigateTo",
            "description": [
              "On done, navigate to the given app"
            ],
            "signature": [
              "[appId: string, options?: ",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.NavigateToAppOptions",
                "text": "NavigateToAppOptions"
              },
              " | undefined] | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.AgentEnrollmentFlyoutFinalStepExtension",
        "type": "Interface",
        "tags": [],
        "label": "AgentEnrollmentFlyoutFinalStepExtension",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.AgentEnrollmentFlyoutFinalStepExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.AgentEnrollmentFlyoutFinalStepExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"agent-enrollment-flyout\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.AgentEnrollmentFlyoutFinalStepExtension.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.AgentEnrollmentFlyoutFinalStepExtension.Component",
            "type": "CompoundType",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ComponentClass<{}, any> | React.FunctionComponent<{}>"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.AgentPolicyDetailsDeployAgentAction",
        "type": "Interface",
        "tags": [],
        "label": "AgentPolicyDetailsDeployAgentAction",
        "description": [
          "\nSupported routing state for the agent policy details page routes with deploy agents action"
        ],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.AgentPolicyDetailsDeployAgentAction.onDoneNavigateTo",
            "type": "Object",
            "tags": [],
            "label": "onDoneNavigateTo",
            "description": [
              "On done, navigate to the given app"
            ],
            "signature": [
              "[appId: string, options?: ",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.NavigateToAppOptions",
                "text": "NavigateToAppOptions"
              },
              " | undefined] | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.CreatePackagePolicyRouteState",
        "type": "Interface",
        "tags": [],
        "label": "CreatePackagePolicyRouteState",
        "description": [
          "\nSupported routing state for the create package policy page routes"
        ],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.CreatePackagePolicyRouteState.onSaveNavigateTo",
            "type": "Object",
            "tags": [],
            "label": "onSaveNavigateTo",
            "description": [
              "On a successful save of the package policy, use navigate to the given app"
            ],
            "signature": [
              "[appId: string, options?: ",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.NavigateToAppOptions",
                "text": "NavigateToAppOptions"
              },
              " | undefined] | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.CreatePackagePolicyRouteState.onCancelNavigateTo",
            "type": "Object",
            "tags": [],
            "label": "onCancelNavigateTo",
            "description": [
              "On cancel, navigate to the given app"
            ],
            "signature": [
              "[appId: string, options?: ",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.NavigateToAppOptions",
                "text": "NavigateToAppOptions"
              },
              " | undefined] | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.CreatePackagePolicyRouteState.onCancelUrl",
            "type": "string",
            "tags": [],
            "label": "onCancelUrl",
            "description": [
              "Url to be used on cancel links"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.CreatePackagePolicyRouteState.onSaveQueryParams",
            "type": "Object",
            "tags": [],
            "label": "onSaveQueryParams",
            "description": [
              "supported query params for onSaveNavigateTo path"
            ],
            "signature": [
              "{ showAddAgentHelp?: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.OnSaveQueryParamOpts",
                "text": "OnSaveQueryParamOpts"
              },
              " | undefined; openEnrollmentFlyout?: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.OnSaveQueryParamOpts",
                "text": "OnSaveQueryParamOpts"
              },
              " | undefined; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.CustomAssetsAccordionProps",
        "type": "Interface",
        "tags": [],
        "label": "CustomAssetsAccordionProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/components/custom_assets_accordion.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.CustomAssetsAccordionProps.views",
            "type": "Array",
            "tags": [],
            "label": "views",
            "description": [],
            "signature": [
              "{ name: string; url: string; description: string; }[]"
            ],
            "path": "x-pack/plugins/fleet/public/components/custom_assets_accordion.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.CustomAssetsAccordionProps.initialIsOpen",
            "type": "CompoundType",
            "tags": [],
            "label": "initialIsOpen",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/components/custom_assets_accordion.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.DynamicPagePathValues",
        "type": "Interface",
        "tags": [],
        "label": "DynamicPagePathValues",
        "description": [],
        "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.DynamicPagePathValues.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[key: string]: string | boolean",
            "description": [],
            "signature": [
              "[key: string]:  string | boolean"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.IntegrationsAppBrowseRouteState",
        "type": "Interface",
        "tags": [],
        "label": "IntegrationsAppBrowseRouteState",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.IntegrationsAppBrowseRouteState.forAgentPolicyId",
            "type": "string",
            "tags": [],
            "label": "forAgentPolicyId",
            "description": [
              "The agent policy that we are browsing integrations for"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.IntegrationsAppBrowseRouteState.fromIntegrations",
            "type": "CompoundType",
            "tags": [],
            "label": "fromIntegrations",
            "description": [
              "The integration tab the user navigated to details from"
            ],
            "signature": [
              "\"installed\" | \"updates_available\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.NewPackagePolicy",
        "type": "Interface",
        "tags": [],
        "label": "NewPackagePolicy",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.id",
            "type": "CompoundType",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.namespace",
            "type": "string",
            "tags": [],
            "label": "namespace",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.is_managed",
            "type": "CompoundType",
            "tags": [],
            "label": "is_managed",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.policy_id",
            "type": "string",
            "tags": [],
            "label": "policy_id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.package",
            "type": "Object",
            "tags": [],
            "label": "package",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyPackage",
                "text": "PackagePolicyPackage"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.inputs",
            "type": "Array",
            "tags": [],
            "label": "inputs",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicyInput",
                "text": "NewPackagePolicyInput"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.vars",
            "type": "Object",
            "tags": [],
            "label": "vars",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyConfigRecord",
                "text": "PackagePolicyConfigRecord"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.NewPackagePolicy.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [],
            "signature": [
              "{ privileges?: { cluster?: string[] | undefined; } | undefined; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageAssetsExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackageAssetsExtension",
        "description": [
          "Extension point registration contract for Integration details Assets view"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageAssetsExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageAssetsExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-detail-assets\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageAssetsExtension.Component",
            "type": "Function",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ExoticComponent<{ children?: React.ReactNode; } | React.RefAttributes<React.Component<{}, any, any>>> & { readonly _result: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageAssetsComponent",
                "text": "PackageAssetsComponent"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackageAssetsExtension.Component.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [],
                "signature": [
                  "P"
                ],
                "path": "node_modules/@types/react/index.d.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageCustomExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackageCustomExtension",
        "description": [
          "Extension point registration contract for Integration details Custom view"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageCustomExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageCustomExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-detail-custom\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageCustomExtension.Component",
            "type": "Function",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ExoticComponent<(",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageCustomExtensionComponentProps",
                "text": "PackageCustomExtensionComponentProps"
              },
              " & React.RefAttributes<React.Component<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageCustomExtensionComponentProps",
                "text": "PackageCustomExtensionComponentProps"
              },
              ", any, any>>) | (",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageCustomExtensionComponentProps",
                "text": "PackageCustomExtensionComponentProps"
              },
              " & { children?: React.ReactNode; })> & { readonly _result: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageCustomExtensionComponent",
                "text": "PackageCustomExtensionComponent"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackageCustomExtension.Component.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [],
                "signature": [
                  "P"
                ],
                "path": "node_modules/@types/react/index.d.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageCustomExtensionComponentProps",
        "type": "Interface",
        "tags": [],
        "label": "PackageCustomExtensionComponentProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageCustomExtensionComponentProps.pkgkey",
            "type": "string",
            "tags": [],
            "label": "pkgkey",
            "description": [
              "The package key value that should be used used for URLs"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageCustomExtensionComponentProps.packageInfo",
            "type": "CompoundType",
            "tags": [],
            "label": "packageInfo",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryPackage",
                "text": "RegistryPackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">> | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ArchivePackage",
                "text": "ArchivePackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageGenericErrorsListProps",
        "type": "Interface",
        "tags": [],
        "label": "PackageGenericErrorsListProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackageGenericErrorsListProps.packageErrors",
            "type": "Array",
            "tags": [],
            "label": "packageErrors",
            "description": [
              "A list of errors from a package"
            ],
            "signature": [
              "FleetServerAgentComponentUnit",
              "[]"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyCreateExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyCreateExtension",
        "description": [
          "Extension point registration contract for Integration Policy Create views"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-policy-create\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateExtension.Component",
            "type": "Function",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ExoticComponent<(",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateExtensionComponentProps",
                "text": "PackagePolicyCreateExtensionComponentProps"
              },
              " & React.RefAttributes<React.Component<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateExtensionComponentProps",
                "text": "PackagePolicyCreateExtensionComponentProps"
              },
              ", any, any>>) | (",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateExtensionComponentProps",
                "text": "PackagePolicyCreateExtensionComponentProps"
              },
              " & { children?: React.ReactNode; })> & { readonly _result: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateExtensionComponent",
                "text": "PackagePolicyCreateExtensionComponent"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyCreateExtension.Component.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [],
                "signature": [
                  "P"
                ],
                "path": "node_modules/@types/react/index.d.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyCreateExtensionComponentProps",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyCreateExtensionComponentProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateExtensionComponentProps.newPolicy",
            "type": "Object",
            "tags": [],
            "label": "newPolicy",
            "description": [
              "The integration policy being created"
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateExtensionComponentProps.onChange",
            "type": "Function",
            "tags": [],
            "label": "onChange",
            "description": [
              "\nA callback that should be executed anytime a change to the Integration Policy needs to\nbe reported back to the Fleet Policy Edit page"
            ],
            "signature": [
              "(opts: { isValid: boolean; updatedPolicy: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              "; }) => void"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyCreateExtensionComponentProps.onChange.$1",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [],
                "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.PackagePolicyCreateExtensionComponentProps.onChange.$1.isValid",
                    "type": "boolean",
                    "tags": [],
                    "label": "isValid",
                    "description": [
                      "is current form state is valid"
                    ],
                    "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.PackagePolicyCreateExtensionComponentProps.onChange.$1.updatedPolicy",
                    "type": "Object",
                    "tags": [],
                    "label": "updatedPolicy",
                    "description": [
                      "The updated Integration Policy to be merged back and included in the API call"
                    ],
                    "signature": [
                      {
                        "pluginId": "fleet",
                        "scope": "common",
                        "docId": "kibFleetPluginApi",
                        "section": "def-common.NewPackagePolicy",
                        "text": "NewPackagePolicy"
                      }
                    ],
                    "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyCreateMultiStepExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyCreateMultiStepExtension",
        "description": [
          "Extension point registration contract for Integration Policy Create views in multi-step onboarding"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateMultiStepExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateMultiStepExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-policy-create-multi-step\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyCreateMultiStepExtension.Component",
            "type": "Function",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ExoticComponent<{ children?: React.ReactNode; } | React.RefAttributes<React.Component<{}, any, any>>> & { readonly _result: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateMultiStepExtensionComponent",
                "text": "PackagePolicyCreateMultiStepExtensionComponent"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyCreateMultiStepExtension.Component.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [],
                "signature": [
                  "P"
                ],
                "path": "node_modules/@types/react/index.d.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyEditExtension",
        "description": [
          "Extension point registration contract for Integration Policy Edit views"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-policy-edit\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtension.useLatestPackageVersion",
            "type": "CompoundType",
            "tags": [],
            "label": "useLatestPackageVersion",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtension.Component",
            "type": "Function",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ExoticComponent<(",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditExtensionComponentProps",
                "text": "PackagePolicyEditExtensionComponentProps"
              },
              " & React.RefAttributes<React.Component<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditExtensionComponentProps",
                "text": "PackagePolicyEditExtensionComponentProps"
              },
              ", any, any>>) | (",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditExtensionComponentProps",
                "text": "PackagePolicyEditExtensionComponentProps"
              },
              " & { children?: React.ReactNode; })> & { readonly _result: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditExtensionComponent",
                "text": "PackagePolicyEditExtensionComponent"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyEditExtension.Component.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [],
                "signature": [
                  "P"
                ],
                "path": "node_modules/@types/react/index.d.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditExtensionComponentProps",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyEditExtensionComponentProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtensionComponentProps.policy",
            "type": "Object",
            "tags": [],
            "label": "policy",
            "description": [
              "The current integration policy being edited"
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtensionComponentProps.newPolicy",
            "type": "Object",
            "tags": [],
            "label": "newPolicy",
            "description": [
              "The new (updated) integration policy that will be saved"
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditExtensionComponentProps.onChange",
            "type": "Function",
            "tags": [],
            "label": "onChange",
            "description": [
              "\nA callback that should be executed anytime a change to the Integration Policy needs to\nbe reported back to the Fleet Policy Edit page.\n\n**NOTE:**\nthis callback will be recreated everytime the policy data changes, thus logic around its\ninvocation should take that into consideration in order to avoid an endless loop."
            ],
            "signature": [
              "(opts: { isValid: boolean; updatedPolicy: Partial<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              ">; }) => void"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyEditExtensionComponentProps.onChange.$1",
                "type": "Object",
                "tags": [],
                "label": "opts",
                "description": [],
                "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.PackagePolicyEditExtensionComponentProps.onChange.$1.isValid",
                    "type": "boolean",
                    "tags": [],
                    "label": "isValid",
                    "description": [
                      "is current form state is valid"
                    ],
                    "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.PackagePolicyEditExtensionComponentProps.onChange.$1.updatedPolicy",
                    "type": "Object",
                    "tags": [],
                    "label": "updatedPolicy",
                    "description": [
                      "The updated Integration Policy to be merged back and included in the API call"
                    ],
                    "signature": [
                      "{ id?: string | number | undefined; name?: string | undefined; description?: string | undefined; namespace?: string | undefined; enabled?: boolean | undefined; is_managed?: boolean | undefined; policy_id?: string | undefined; package?: ",
                      {
                        "pluginId": "fleet",
                        "scope": "common",
                        "docId": "kibFleetPluginApi",
                        "section": "def-common.PackagePolicyPackage",
                        "text": "PackagePolicyPackage"
                      },
                      " | undefined; inputs?: ",
                      {
                        "pluginId": "fleet",
                        "scope": "common",
                        "docId": "kibFleetPluginApi",
                        "section": "def-common.NewPackagePolicyInput",
                        "text": "NewPackagePolicyInput"
                      },
                      "[] | undefined; vars?: ",
                      {
                        "pluginId": "fleet",
                        "scope": "common",
                        "docId": "kibFleetPluginApi",
                        "section": "def-common.PackagePolicyConfigRecord",
                        "text": "PackagePolicyConfigRecord"
                      },
                      " | undefined; elasticsearch?: { privileges?: { cluster?: string[] | undefined; } | undefined; } | undefined; }"
                    ],
                    "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditorDatastreamMappingsProps",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyEditorDatastreamMappingsProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_mappings.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditorDatastreamMappingsProps.packageInfo",
            "type": "CompoundType",
            "tags": [],
            "label": "packageInfo",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryPackage",
                "text": "RegistryPackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">> | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ArchivePackage",
                "text": "ArchivePackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_mappings.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditorDatastreamMappingsProps.packageInputStream",
            "type": "Object",
            "tags": [],
            "label": "packageInputStream",
            "description": [],
            "signature": [
              "{ id?: string | undefined; data_stream: { dataset: string; type: string; }; }"
            ],
            "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_mappings.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditorDatastreamPipelinesProps",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyEditorDatastreamPipelinesProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_pipelines.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditorDatastreamPipelinesProps.packageInfo",
            "type": "CompoundType",
            "tags": [],
            "label": "packageInfo",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryPackage",
                "text": "RegistryPackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">> | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ArchivePackage",
                "text": "ArchivePackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_pipelines.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditorDatastreamPipelinesProps.packageInputStream",
            "type": "Object",
            "tags": [],
            "label": "packageInputStream",
            "description": [],
            "signature": [
              "{ id?: string | undefined; data_stream: { dataset: string; type: string; }; }"
            ],
            "path": "x-pack/plugins/fleet/public/applications/fleet/sections/agent_policy/create_package_policy_page/components/datastream_pipelines.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditTabsExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyEditTabsExtension",
        "description": [
          "Extension point registration contract for Integration Policy Edit tabs views"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditTabsExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditTabsExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-policy-edit-tabs\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyEditTabsExtension.tabs",
            "type": "Array",
            "tags": [],
            "label": "tabs",
            "description": [],
            "signature": [
              "{ title: string; Component: React.LazyExoticComponent<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditExtensionComponent",
                "text": "PackagePolicyEditExtensionComponent"
              },
              ">; }[]"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyResponseExtension",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyResponseExtension",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyResponseExtension.package",
            "type": "string",
            "tags": [],
            "label": "package",
            "description": [],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyResponseExtension.view",
            "type": "string",
            "tags": [],
            "label": "view",
            "description": [],
            "signature": [
              "\"package-policy-response\""
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyResponseExtension.Component",
            "type": "Function",
            "tags": [],
            "label": "Component",
            "description": [],
            "signature": [
              "React.ExoticComponent<(",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyResponseExtensionComponentProps",
                "text": "PackagePolicyResponseExtensionComponentProps"
              },
              " & React.RefAttributes<React.Component<",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyResponseExtensionComponentProps",
                "text": "PackagePolicyResponseExtensionComponentProps"
              },
              ", any, any>>) | (",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyResponseExtensionComponentProps",
                "text": "PackagePolicyResponseExtensionComponentProps"
              },
              " & { children?: React.ReactNode; })> & { readonly _result: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyResponseExtensionComponent",
                "text": "PackagePolicyResponseExtensionComponent"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyResponseExtension.Component.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "props",
                "description": [],
                "signature": [
                  "P"
                ],
                "path": "node_modules/@types/react/index.d.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyResponseExtensionComponentProps",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyResponseExtensionComponentProps",
        "description": [],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyResponseExtensionComponentProps.agent",
            "type": "Object",
            "tags": [],
            "label": "agent",
            "description": [
              "The current agent to retrieve response from"
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Agent",
                "text": "Agent"
              }
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.PackagePolicyResponseExtensionComponentProps.onShowNeedsAttentionBadge",
            "type": "Function",
            "tags": [],
            "label": "onShowNeedsAttentionBadge",
            "description": [
              "A callback function to set the `needs attention` state"
            ],
            "signature": [
              "((val: boolean) => void) | undefined"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.PackagePolicyResponseExtensionComponentProps.onShowNeedsAttentionBadge.$1",
                "type": "boolean",
                "tags": [],
                "label": "val",
                "description": [],
                "signature": [
                  "boolean"
                ],
                "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.UIExtensionsStorage",
        "type": "Interface",
        "tags": [],
        "label": "UIExtensionsStorage",
        "description": [
          "Internal storage for registered UI Extension Points"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.UIExtensionsStorage.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[key: string]: Partial<Record<\"agent-enrollment-flyout\" | \"package-detail-assets\" | \"package-detail-custom\" | \"package-policy-create\" | \"package-policy-create-multi-step\" | \"package-policy-edit\" | \"package-policy-edit-tabs\" | \"package-policy-response\" | \"package-policy-replace-define-step\" | \"package-generic-errors-list\", UIExtens...",
            "description": [],
            "signature": [
              "[key: string]:  Partial<Record<\"agent-enrollment-flyout\" | \"package-detail-assets\" | \"package-detail-custom\" | \"package-policy-create\" | \"package-policy-create-multi-step\" | \"package-policy-edit\" | \"package-policy-edit-tabs\" | \"package-policy-response\" | \"package-policy-replace-define-step\" | \"package-generic-errors-list\", ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.UIExtensionPoint",
                "text": "UIExtensionPoint"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "fleet",
        "id": "def-public.AnyIntraAppRouteState",
        "type": "Type",
        "tags": [],
        "label": "AnyIntraAppRouteState",
        "description": [
          "\nAll possible Route states."
        ],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.AgentDetailsReassignPolicyAction",
            "text": "AgentDetailsReassignPolicyAction"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.AgentPolicyDetailsDeployAgentAction",
            "text": "AgentPolicyDetailsDeployAgentAction"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.CreatePackagePolicyRouteState",
            "text": "CreatePackagePolicyRouteState"
          }
        ],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.OnSaveQueryParamKeys",
        "type": "Type",
        "tags": [],
        "label": "OnSaveQueryParamKeys",
        "description": [
          "\nSupported query parameters for CreatePackagePolicyRouteState"
        ],
        "signature": [
          "\"showAddAgentHelp\" | \"openEnrollmentFlyout\""
        ],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.OnSaveQueryParamOpts",
        "type": "Type",
        "tags": [],
        "label": "OnSaveQueryParamOpts",
        "description": [
          "\nQuery string parameter options for CreatePackagePolicyRouteState"
        ],
        "signature": [
          "boolean | { renameKey?: string | undefined; policyIdAsValue?: boolean | undefined; }"
        ],
        "path": "x-pack/plugins/fleet/public/types/intra_app_route_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageAssetsComponent",
        "type": "Type",
        "tags": [],
        "label": "PackageAssetsComponent",
        "description": [
          "\nUI Component Extension for displaying custom views under the Assets tab for a given Integration"
        ],
        "signature": [
          "React.ComponentClass<{}, any> | React.FunctionComponent<{}>"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageCustomExtensionComponent",
        "type": "Type",
        "tags": [],
        "label": "PackageCustomExtensionComponent",
        "description": [
          "\nUI Component Extension is used to display a Custom tab (and view) under a given Integration"
        ],
        "signature": [
          "React.ComponentClass<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackageCustomExtensionComponentProps",
            "text": "PackageCustomExtensionComponentProps"
          },
          ", any> | React.FunctionComponent<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackageCustomExtensionComponentProps",
            "text": "PackageCustomExtensionComponentProps"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackageGenericErrorsListComponent",
        "type": "Type",
        "tags": [],
        "label": "PackageGenericErrorsListComponent",
        "description": [
          "\nUI Component Extension is used on the pages displaying the ability to see\na generic endpoint errors list"
        ],
        "signature": [
          "React.ComponentClass<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackageGenericErrorsListProps",
            "text": "PackageGenericErrorsListProps"
          },
          ", any> | React.FunctionComponent<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackageGenericErrorsListProps",
            "text": "PackageGenericErrorsListProps"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyCreateExtensionComponent",
        "type": "Type",
        "tags": [],
        "label": "PackagePolicyCreateExtensionComponent",
        "description": [
          "\nUI Component Extension is used on the pages displaying the ability to Create an\nIntegration Policy"
        ],
        "signature": [
          "React.ComponentClass<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyCreateExtensionComponentProps",
            "text": "PackagePolicyCreateExtensionComponentProps"
          },
          ", any> | React.FunctionComponent<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyCreateExtensionComponentProps",
            "text": "PackagePolicyCreateExtensionComponentProps"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyCreateMultiStepExtensionComponent",
        "type": "Type",
        "tags": [],
        "label": "PackagePolicyCreateMultiStepExtensionComponent",
        "description": [
          "\nUI Component Extension is used on the pages displaying the ability to Create a multi step\nIntegration Policy"
        ],
        "signature": [
          "React.ComponentClass<{}, any> | React.FunctionComponent<{}>"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyEditExtensionComponent",
        "type": "Type",
        "tags": [],
        "label": "PackagePolicyEditExtensionComponent",
        "description": [
          "\nUI Component Extension is used on the pages displaying the ability to edit an\nIntegration Policy"
        ],
        "signature": [
          "React.ComponentClass<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyEditExtensionComponentProps",
            "text": "PackagePolicyEditExtensionComponentProps"
          },
          ", any> | React.FunctionComponent<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyEditExtensionComponentProps",
            "text": "PackagePolicyEditExtensionComponentProps"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.PackagePolicyResponseExtensionComponent",
        "type": "Type",
        "tags": [],
        "label": "PackagePolicyResponseExtensionComponent",
        "description": [
          "\nUI Component Extension is used on the pages displaying the ability to see\nPolicy response view"
        ],
        "signature": [
          "React.ComponentClass<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyResponseExtensionComponentProps",
            "text": "PackagePolicyResponseExtensionComponentProps"
          },
          ", any> | React.FunctionComponent<",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyResponseExtensionComponentProps",
            "text": "PackagePolicyResponseExtensionComponentProps"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.UIExtensionPoint",
        "type": "Type",
        "tags": [],
        "label": "UIExtensionPoint",
        "description": [
          "Fleet UI Extension Point"
        ],
        "signature": [
          "PackagePolicyReplaceDefineStepExtension",
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyEditExtension",
            "text": "PackagePolicyEditExtension"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyResponseExtension",
            "text": "PackagePolicyResponseExtension"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyEditTabsExtension",
            "text": "PackagePolicyEditTabsExtension"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackageCustomExtension",
            "text": "PackageCustomExtension"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyCreateExtension",
            "text": "PackagePolicyCreateExtension"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackageAssetsExtension",
            "text": "PackageAssetsExtension"
          },
          " | ",
          "PackageGenericErrorsListExtension",
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.AgentEnrollmentFlyoutFinalStepExtension",
            "text": "AgentEnrollmentFlyoutFinalStepExtension"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.PackagePolicyCreateMultiStepExtension",
            "text": "PackagePolicyCreateMultiStepExtension"
          }
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-public.UIExtensionRegistrationCallback",
        "type": "Type",
        "tags": [],
        "label": "UIExtensionRegistrationCallback",
        "description": [
          "Register a Fleet UI extension"
        ],
        "signature": [
          "(extensionPoint: ",
          {
            "pluginId": "fleet",
            "scope": "public",
            "docId": "kibFleetPluginApi",
            "section": "def-public.UIExtensionPoint",
            "text": "UIExtensionPoint"
          },
          ") => void"
        ],
        "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.UIExtensionRegistrationCallback.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "extensionPoint",
            "description": [],
            "signature": [
              "PackagePolicyReplaceDefineStepExtension",
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditExtension",
                "text": "PackagePolicyEditExtension"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyResponseExtension",
                "text": "PackagePolicyResponseExtension"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyEditTabsExtension",
                "text": "PackagePolicyEditTabsExtension"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageCustomExtension",
                "text": "PackageCustomExtension"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateExtension",
                "text": "PackagePolicyCreateExtension"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackageAssetsExtension",
                "text": "PackageAssetsExtension"
              },
              " | ",
              "PackageGenericErrorsListExtension",
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.AgentEnrollmentFlyoutFinalStepExtension",
                "text": "AgentEnrollmentFlyoutFinalStepExtension"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.PackagePolicyCreateMultiStepExtension",
                "text": "PackagePolicyCreateMultiStepExtension"
              }
            ],
            "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "fleet",
        "id": "def-public.pagePathGetters",
        "type": "Object",
        "tags": [],
        "label": "pagePathGetters",
        "description": [],
        "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.base",
            "type": "Function",
            "tags": [],
            "label": "base",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.overview",
            "type": "Function",
            "tags": [],
            "label": "overview",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integrations",
            "type": "Function",
            "tags": [],
            "label": "integrations",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integrations_all",
            "type": "Function",
            "tags": [],
            "label": "integrations_all",
            "description": [],
            "signature": [
              "({ searchTerm, category, subCategory, }: { searchTerm?: string | undefined; category?: string | undefined; subCategory?: string | undefined; }) => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integrations_all.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    searchTerm,\n    category,\n    subCategory,\n  }",
                "description": [],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_all.$1.searchTerm",
                    "type": "string",
                    "tags": [],
                    "label": "searchTerm",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_all.$1.category",
                    "type": "string",
                    "tags": [],
                    "label": "category",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_all.$1.subCategory",
                    "type": "string",
                    "tags": [],
                    "label": "subCategory",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integrations_installed",
            "type": "Function",
            "tags": [],
            "label": "integrations_installed",
            "description": [],
            "signature": [
              "({ query, category }: { query?: string | undefined; category?: string | undefined; }) => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integrations_installed.$1",
                "type": "Object",
                "tags": [],
                "label": "{ query, category }",
                "description": [],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_installed.$1.query",
                    "type": "string",
                    "tags": [],
                    "label": "query",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_installed.$1.category",
                    "type": "string",
                    "tags": [],
                    "label": "category",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integrations_installed_updates_available",
            "type": "Function",
            "tags": [],
            "label": "integrations_installed_updates_available",
            "description": [],
            "signature": [
              "({ query, category, }: { query?: string | undefined; category?: string | undefined; }) => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integrations_installed_updates_available.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    query,\n    category,\n  }",
                "description": [],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_installed_updates_available.$1.query",
                    "type": "string",
                    "tags": [],
                    "label": "query",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-public.pagePathGetters.integrations_installed_updates_available.$1.category",
                    "type": "string",
                    "tags": [],
                    "label": "category",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_overview",
            "type": "Function",
            "tags": [],
            "label": "integration_details_overview",
            "description": [],
            "signature": [
              "({ pkgkey, integration }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_overview.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_policies",
            "type": "Function",
            "tags": [],
            "label": "integration_details_policies",
            "description": [],
            "signature": [
              "({ pkgkey, integration, addAgentToPolicyId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_policies.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration, addAgentToPolicyId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_assets",
            "type": "Function",
            "tags": [],
            "label": "integration_details_assets",
            "description": [],
            "signature": [
              "({ pkgkey, integration }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_assets.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_settings",
            "type": "Function",
            "tags": [],
            "label": "integration_details_settings",
            "description": [],
            "signature": [
              "({ pkgkey, integration }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_settings.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_custom",
            "type": "Function",
            "tags": [],
            "label": "integration_details_custom",
            "description": [],
            "signature": [
              "({ pkgkey, integration }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_custom.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_api_reference",
            "type": "Function",
            "tags": [],
            "label": "integration_details_api_reference",
            "description": [],
            "signature": [
              "({ pkgkey, integration }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_api_reference.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_policy_edit",
            "type": "Function",
            "tags": [],
            "label": "integration_policy_edit",
            "description": [],
            "signature": [
              "({ packagePolicyId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_policy_edit.$1",
                "type": "Object",
                "tags": [],
                "label": "{ packagePolicyId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_policy_upgrade",
            "type": "Function",
            "tags": [],
            "label": "integration_policy_upgrade",
            "description": [
              "// Upgrades happen on the same edit form, just with a flag set. Separate page record here\n// allows us to set different breadcrumbs for upgrades when needed."
            ],
            "signature": [
              "({ packagePolicyId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_policy_upgrade.$1",
                "type": "Object",
                "tags": [],
                "label": "{ packagePolicyId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.integration_details_language_clients",
            "type": "Function",
            "tags": [],
            "label": "integration_details_language_clients",
            "description": [
              "// This route allows rendering custom language integration pages registered in the language_client plugin"
            ],
            "signature": [
              "({ pkgkey }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.integration_details_language_clients.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.policies",
            "type": "Function",
            "tags": [],
            "label": "policies",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.policies_list",
            "type": "Function",
            "tags": [],
            "label": "policies_list",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.policy_details",
            "type": "Function",
            "tags": [],
            "label": "policy_details",
            "description": [],
            "signature": [
              "({ policyId, tabId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.policy_details.$1",
                "type": "Object",
                "tags": [],
                "label": "{ policyId, tabId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.add_integration_to_policy",
            "type": "Function",
            "tags": [],
            "label": "add_integration_to_policy",
            "description": [],
            "signature": [
              "({ pkgkey, integration, agentPolicyId, useMultiPageLayout }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.add_integration_to_policy.$1",
                "type": "Object",
                "tags": [],
                "label": "{ pkgkey, integration, agentPolicyId, useMultiPageLayout }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.edit_integration",
            "type": "Function",
            "tags": [],
            "label": "edit_integration",
            "description": [],
            "signature": [
              "({ policyId, packagePolicyId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.edit_integration.$1",
                "type": "Object",
                "tags": [],
                "label": "{ policyId, packagePolicyId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.upgrade_package_policy",
            "type": "Function",
            "tags": [],
            "label": "upgrade_package_policy",
            "description": [],
            "signature": [
              "({ policyId, packagePolicyId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.upgrade_package_policy.$1",
                "type": "Object",
                "tags": [],
                "label": "{ policyId, packagePolicyId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.agent_list",
            "type": "Function",
            "tags": [],
            "label": "agent_list",
            "description": [],
            "signature": [
              "({ kuery }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.agent_list.$1",
                "type": "Object",
                "tags": [],
                "label": "{ kuery }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.agent_details",
            "type": "Function",
            "tags": [],
            "label": "agent_details",
            "description": [],
            "signature": [
              "({ agentId, tabId, logQuery }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.agent_details.$1",
                "type": "Object",
                "tags": [],
                "label": "{ agentId, tabId, logQuery }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.agent_details_logs",
            "type": "Function",
            "tags": [],
            "label": "agent_details_logs",
            "description": [],
            "signature": [
              "({ agentId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.agent_details_logs.$1",
                "type": "Object",
                "tags": [],
                "label": "{ agentId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.agent_details_diagnostics",
            "type": "Function",
            "tags": [],
            "label": "agent_details_diagnostics",
            "description": [],
            "signature": [
              "({ agentId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.agent_details_diagnostics.$1",
                "type": "Object",
                "tags": [],
                "label": "{ agentId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.enrollment_tokens",
            "type": "Function",
            "tags": [],
            "label": "enrollment_tokens",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.data_streams",
            "type": "Function",
            "tags": [],
            "label": "data_streams",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings",
            "type": "Function",
            "tags": [],
            "label": "settings",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_edit_fleet_server_hosts",
            "type": "Function",
            "tags": [],
            "label": "settings_edit_fleet_server_hosts",
            "description": [],
            "signature": [
              "({ itemId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.settings_edit_fleet_server_hosts.$1",
                "type": "Object",
                "tags": [],
                "label": "{ itemId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_create_fleet_server_hosts",
            "type": "Function",
            "tags": [],
            "label": "settings_create_fleet_server_hosts",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_create_fleet_proxy",
            "type": "Function",
            "tags": [],
            "label": "settings_create_fleet_proxy",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_edit_fleet_proxy",
            "type": "Function",
            "tags": [],
            "label": "settings_edit_fleet_proxy",
            "description": [],
            "signature": [
              "({ itemId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.settings_edit_fleet_proxy.$1",
                "type": "Object",
                "tags": [],
                "label": "{ itemId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_edit_outputs",
            "type": "Function",
            "tags": [],
            "label": "settings_edit_outputs",
            "description": [],
            "signature": [
              "({ outputId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.settings_edit_outputs.$1",
                "type": "Object",
                "tags": [],
                "label": "{ outputId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_edit_download_sources",
            "type": "Function",
            "tags": [],
            "label": "settings_edit_download_sources",
            "description": [],
            "signature": [
              "({ downloadSourceId }: ",
              {
                "pluginId": "fleet",
                "scope": "public",
                "docId": "kibFleetPluginApi",
                "section": "def-public.DynamicPagePathValues",
                "text": "DynamicPagePathValues"
              },
              ") => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-public.pagePathGetters.settings_edit_download_sources.$1",
                "type": "Object",
                "tags": [],
                "label": "{ downloadSourceId }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "public",
                    "docId": "kibFleetPluginApi",
                    "section": "def-public.DynamicPagePathValues",
                    "text": "DynamicPagePathValues"
                  }
                ],
                "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_create_outputs",
            "type": "Function",
            "tags": [],
            "label": "settings_create_outputs",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.settings_create_download_sources",
            "type": "Function",
            "tags": [],
            "label": "settings_create_download_sources",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-public.pagePathGetters.debug",
            "type": "Function",
            "tags": [],
            "label": "debug",
            "description": [],
            "signature": [
              "() => [string, string]"
            ],
            "path": "x-pack/plugins/fleet/public/constants/page_paths.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "fleet",
      "id": "def-public.FleetSetup",
      "type": "Interface",
      "tags": [],
      "label": "FleetSetup",
      "description": [],
      "path": "x-pack/plugins/fleet/public/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "fleet",
      "id": "def-public.FleetStart",
      "type": "Interface",
      "tags": [],
      "label": "FleetStart",
      "description": [
        "\nDescribes public Fleet plugin contract returned at the `start` stage."
      ],
      "path": "x-pack/plugins/fleet/public/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "fleet",
          "id": "def-public.FleetStart.authz",
          "type": "Object",
          "tags": [],
          "label": "authz",
          "description": [
            "Authorization for the current user"
          ],
          "signature": [
            {
              "pluginId": "fleet",
              "scope": "common",
              "docId": "kibFleetPluginApi",
              "section": "def-common.FleetAuthz",
              "text": "FleetAuthz"
            }
          ],
          "path": "x-pack/plugins/fleet/public/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-public.FleetStart.registerExtension",
          "type": "Function",
          "tags": [],
          "label": "registerExtension",
          "description": [],
          "signature": [
            "(extensionPoint: ",
            {
              "pluginId": "fleet",
              "scope": "public",
              "docId": "kibFleetPluginApi",
              "section": "def-public.UIExtensionPoint",
              "text": "UIExtensionPoint"
            },
            ") => void"
          ],
          "path": "x-pack/plugins/fleet/public/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "fleet",
              "id": "def-public.FleetStart.registerExtension.$1",
              "type": "CompoundType",
              "tags": [],
              "label": "extensionPoint",
              "description": [],
              "signature": [
                "PackagePolicyReplaceDefineStepExtension",
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackagePolicyEditExtension",
                  "text": "PackagePolicyEditExtension"
                },
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackagePolicyResponseExtension",
                  "text": "PackagePolicyResponseExtension"
                },
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackagePolicyEditTabsExtension",
                  "text": "PackagePolicyEditTabsExtension"
                },
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackageCustomExtension",
                  "text": "PackageCustomExtension"
                },
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackagePolicyCreateExtension",
                  "text": "PackagePolicyCreateExtension"
                },
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackageAssetsExtension",
                  "text": "PackageAssetsExtension"
                },
                " | ",
                "PackageGenericErrorsListExtension",
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.AgentEnrollmentFlyoutFinalStepExtension",
                  "text": "AgentEnrollmentFlyoutFinalStepExtension"
                },
                " | ",
                {
                  "pluginId": "fleet",
                  "scope": "public",
                  "docId": "kibFleetPluginApi",
                  "section": "def-public.PackagePolicyCreateMultiStepExtension",
                  "text": "PackagePolicyCreateMultiStepExtension"
                }
              ],
              "path": "x-pack/plugins/fleet/public/types/ui_extensions.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        },
        {
          "parentPluginId": "fleet",
          "id": "def-public.FleetStart.isInitialized",
          "type": "Function",
          "tags": [],
          "label": "isInitialized",
          "description": [],
          "signature": [
            "() => Promise<true>"
          ],
          "path": "x-pack/plugins/fleet/public/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "fleet",
        "id": "def-server.AgentNotFoundError",
        "type": "Class",
        "tags": [],
        "label": "AgentNotFoundError",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "server",
            "docId": "kibFleetPluginApi",
            "section": "def-server.AgentNotFoundError",
            "text": "AgentNotFoundError"
          },
          " extends ",
          "FleetError"
        ],
        "path": "x-pack/plugins/fleet/server/errors/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.FleetUnauthorizedError",
        "type": "Class",
        "tags": [],
        "label": "FleetUnauthorizedError",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "server",
            "docId": "kibFleetPluginApi",
            "section": "def-server.FleetUnauthorizedError",
            "text": "FleetUnauthorizedError"
          },
          " extends ",
          "FleetError"
        ],
        "path": "x-pack/plugins/fleet/server/errors/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "fleet",
        "id": "def-server.buildAgentStatusRuntimeField",
        "type": "Function",
        "tags": [],
        "label": "buildAgentStatusRuntimeField",
        "description": [],
        "signature": [
          "(soClient: ",
          {
            "pluginId": "@kbn/core-saved-objects-api-server",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
            "section": "def-common.SavedObjectsClientContract",
            "text": "SavedObjectsClientContract"
          },
          ", pathPrefix: string | undefined) => Promise<",
          "MappingRuntimeFields",
          ">"
        ],
        "path": "x-pack/plugins/fleet/server/services/agents/build_status_runtime_field.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.buildAgentStatusRuntimeField.$1",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/build_status_runtime_field.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.buildAgentStatusRuntimeField.$2",
            "type": "string",
            "tags": [],
            "label": "pathPrefix",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/build_status_runtime_field.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.getRegistryUrl",
        "type": "Function",
        "tags": [],
        "label": "getRegistryUrl",
        "description": [],
        "signature": [
          "() => string"
        ],
        "path": "x-pack/plugins/fleet/server/services/epm/registry/registry_url.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.relativeDownloadUrlFromArtifact",
        "type": "Function",
        "tags": [],
        "label": "relativeDownloadUrlFromArtifact",
        "description": [],
        "signature": [
          "<T extends Pick<",
          {
            "pluginId": "fleet",
            "scope": "server",
            "docId": "kibFleetPluginApi",
            "section": "def-server.Artifact",
            "text": "Artifact"
          },
          ", \"decodedSha256\" | \"identifier\">>({ identifier, decodedSha256, }: T) => string"
        ],
        "path": "x-pack/plugins/fleet/server/services/artifacts/mappings.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.relativeDownloadUrlFromArtifact.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "{\n  identifier,\n  decodedSha256,\n}",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/mappings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "fleet",
        "id": "def-server.AgentClient",
        "type": "Interface",
        "tags": [],
        "label": "AgentClient",
        "description": [
          "\nA client for interacting with data about an Agent\n"
        ],
        "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentClient.getAgent",
            "type": "Function",
            "tags": [],
            "label": "getAgent",
            "description": [
              "\nGet an Agent by id"
            ],
            "signature": [
              "(agentId: string) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Agent",
                "text": "Agent"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentClient.getAgent.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentClient.getAgentStatusById",
            "type": "Function",
            "tags": [],
            "label": "getAgentStatusById",
            "description": [
              "\nReturn the status by the Agent's id"
            ],
            "signature": [
              "(agentId: string) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentStatus",
                "text": "AgentStatus"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentClient.getAgentStatusById.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentClient.getAgentStatusForAgentPolicy",
            "type": "Function",
            "tags": [],
            "label": "getAgentStatusForAgentPolicy",
            "description": [
              "\nReturn the status by the Agent's Policy id"
            ],
            "signature": [
              "(agentPolicyId?: string | undefined, filterKuery?: string | undefined) => Promise<{ events: number; total: number; online: number; error: number; offline: number; other: number; updating: number; inactive: number; unenrolled: number; }>"
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentClient.getAgentStatusForAgentPolicy.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentClient.getAgentStatusForAgentPolicy.$2",
                "type": "string",
                "tags": [],
                "label": "filterKuery",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentClient.listAgents",
            "type": "Function",
            "tags": [],
            "label": "listAgents",
            "description": [
              "\nList agents"
            ],
            "signature": [
              "(options: Readonly<{ page?: number | undefined; perPage?: number | undefined; sortField?: string | undefined; sortOrder?: \"asc\" | \"desc\" | undefined; kuery?: any; showUpgradeable?: boolean | undefined; } & {}> & { showInactive: boolean; }) => Promise<{ agents: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Agent",
                "text": "Agent"
              },
              "[]; total: number; page: number; perPage: number; }>"
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentClient.listAgents.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "Readonly<{ page?: number | undefined; perPage?: number | undefined; sortField?: string | undefined; sortOrder?: \"asc\" | \"desc\" | undefined; kuery?: any; showUpgradeable?: boolean | undefined; } & {}> & { showInactive: boolean; }"
                ],
                "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.AgentPolicyServiceInterface",
        "type": "Interface",
        "tags": [],
        "label": "AgentPolicyServiceInterface",
        "description": [
          "\nService that provides exported function that return information about EPM packages"
        ],
        "path": "x-pack/plugins/fleet/server/services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentPolicyServiceInterface.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", id: string, withPackagePolicies?: boolean) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentPolicy",
                "text": "AgentPolicy"
              },
              " | null>"
            ],
            "path": "x-pack/plugins/fleet/server/services/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.get.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.get.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.get.$3",
                "type": "boolean",
                "tags": [],
                "label": "withPackagePolicies",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentPolicyServiceInterface.list",
            "type": "Function",
            "tags": [],
            "label": "list",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", options: Readonly<{ page?: number | undefined; perPage?: number | undefined; sortField?: string | undefined; sortOrder?: \"asc\" | \"desc\" | undefined; kuery?: any; showUpgradeable?: boolean | undefined; } & {}> & { withPackagePolicies?: boolean | undefined; }) => Promise<{ items: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentPolicy",
                "text": "AgentPolicy"
              },
              "[]; total: number; page: number; perPage: number; }>"
            ],
            "path": "x-pack/plugins/fleet/server/services/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.list.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.list.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "Readonly<{ page?: number | undefined; perPage?: number | undefined; sortField?: string | undefined; sortOrder?: \"asc\" | \"desc\" | undefined; kuery?: any; showUpgradeable?: boolean | undefined; } & {}> & { withPackagePolicies?: boolean | undefined; }"
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentPolicyServiceInterface.getFullAgentPolicy",
            "type": "Function",
            "tags": [],
            "label": "getFullAgentPolicy",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", id: string, options?: { standalone: boolean; } | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicy",
                "text": "FullAgentPolicy"
              },
              " | null>"
            ],
            "path": "x-pack/plugins/fleet/server/services/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.getFullAgentPolicy.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.getFullAgentPolicy.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.getFullAgentPolicy.$3",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "{ standalone: boolean; } | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentPolicyServiceInterface.getByIds",
            "type": "Function",
            "tags": [],
            "label": "getByIds",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", ids: string[], options?: { fields?: string[] | undefined; withPackagePolicies?: boolean | undefined; ignoreMissing?: boolean | undefined; }) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentPolicy",
                "text": "AgentPolicy"
              },
              "[]>"
            ],
            "path": "x-pack/plugins/fleet/server/services/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.getByIds.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.getByIds.$2",
                "type": "Array",
                "tags": [],
                "label": "ids",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentPolicyServiceInterface.getByIds.$3",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "{ fields?: string[] | undefined; withPackagePolicies?: boolean | undefined; ignoreMissing?: boolean | undefined; }"
                ],
                "path": "x-pack/plugins/fleet/server/services/agent_policy.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.AgentService",
        "type": "Interface",
        "tags": [],
        "label": "AgentService",
        "description": [
          "\nA service for interacting with Agent data. See {@link AgentClient} for more information.\n"
        ],
        "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentService.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [
              "\nShould be used for end-user requests to Kibana. APIs will return errors if user does not have appropriate access."
            ],
            "signature": [
              "(req: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) => ",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.AgentClient",
                "text": "AgentClient"
              }
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.AgentService.asScoped.$1",
                "type": "Object",
                "tags": [],
                "label": "req",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.AgentService.asInternalUser",
            "type": "Object",
            "tags": [],
            "label": "asInternalUser",
            "description": [
              "\nOnly use for server-side usages (eg. telemetry), should not be used for end users unless an explicit authz check is\ndone."
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.AgentClient",
                "text": "AgentClient"
              }
            ],
            "path": "x-pack/plugins/fleet/server/services/agents/agent_service.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.Artifact",
        "type": "Interface",
        "tags": [],
        "label": "Artifact",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "server",
            "docId": "kibFleetPluginApi",
            "section": "def-server.Artifact",
            "text": "Artifact"
          },
          " extends ",
          "NewArtifact"
        ],
        "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.Artifact.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.Artifact.created",
            "type": "string",
            "tags": [],
            "label": "created",
            "description": [],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.ArtifactsClientInterface",
        "type": "Interface",
        "tags": [],
        "label": "ArtifactsClientInterface",
        "description": [
          "\nThe interface exposed out of Fleet's Artifact service via the client class"
        ],
        "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.getArtifact",
            "type": "Function",
            "tags": [],
            "label": "getArtifact",
            "description": [],
            "signature": [
              "(id: string) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.Artifact",
                "text": "Artifact"
              },
              " | undefined>"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.getArtifact.$1",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.createArtifact",
            "type": "Function",
            "tags": [],
            "label": "createArtifact",
            "description": [],
            "signature": [
              "(options: ",
              "ArtifactsClientCreateOptions",
              ") => Promise<",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.Artifact",
                "text": "Artifact"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.createArtifact.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "ArtifactsClientCreateOptions"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.bulkCreateArtifacts",
            "type": "Function",
            "tags": [],
            "label": "bulkCreateArtifacts",
            "description": [],
            "signature": [
              "(optionsList: ",
              "ArtifactsClientCreateOptions",
              "[]) => Promise<{ artifacts?: ",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.Artifact",
                "text": "Artifact"
              },
              "[] | undefined; errors?: Error[] | undefined; }>"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.bulkCreateArtifacts.$1",
                "type": "Array",
                "tags": [],
                "label": "optionsList",
                "description": [],
                "signature": [
                  "ArtifactsClientCreateOptions",
                  "[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.deleteArtifact",
            "type": "Function",
            "tags": [],
            "label": "deleteArtifact",
            "description": [],
            "signature": [
              "(id: string) => Promise<void>"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.deleteArtifact.$1",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.listArtifacts",
            "type": "Function",
            "tags": [],
            "label": "listArtifacts",
            "description": [],
            "signature": [
              "(options?: ",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.ListArtifactsProps",
                "text": "ListArtifactsProps"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListResult",
                "text": "ListResult"
              },
              "<",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.Artifact",
                "text": "Artifact"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.listArtifacts.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "server",
                    "docId": "kibFleetPluginApi",
                    "section": "def-server.ListArtifactsProps",
                    "text": "ListArtifactsProps"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.encodeContent",
            "type": "Function",
            "tags": [],
            "label": "encodeContent",
            "description": [],
            "signature": [
              "(content: string) => Promise<",
              "ArtifactEncodedMetadata",
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.encodeContent.$1",
                "type": "string",
                "tags": [],
                "label": "content",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.ArtifactsClientInterface.generateHash",
            "type": "Function",
            "tags": [],
            "label": "generateHash",
            "description": [],
            "signature": [
              "(content: string) => string"
            ],
            "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ArtifactsClientInterface.generateHash.$1",
                "type": "string",
                "tags": [],
                "label": "content",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.ESIndexPatternService",
        "type": "Interface",
        "tags": [],
        "label": "ESIndexPatternService",
        "description": [
          "\nService to return the index pattern of EPM packages"
        ],
        "path": "x-pack/plugins/fleet/server/services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.ESIndexPatternService.getESIndexPattern",
            "type": "Function",
            "tags": [],
            "label": "getESIndexPattern",
            "description": [],
            "signature": [
              "(savedObjectsClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", pkgName: string, datasetPath: string) => Promise<string | undefined>"
            ],
            "path": "x-pack/plugins/fleet/server/services/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.ESIndexPatternService.getESIndexPattern.$1",
                "type": "Object",
                "tags": [],
                "label": "savedObjectsClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.ESIndexPatternService.getESIndexPattern.$2",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.ESIndexPatternService.getESIndexPattern.$3",
                "type": "string",
                "tags": [],
                "label": "datasetPath",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.FleetSetupDeps",
        "type": "Interface",
        "tags": [],
        "label": "FleetSetupDeps",
        "description": [],
        "path": "x-pack/plugins/fleet/server/plugin.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.security",
            "type": "Object",
            "tags": [],
            "label": "security",
            "description": [],
            "signature": [
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.SecurityPluginSetup",
                "text": "SecurityPluginSetup"
              }
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.features",
            "type": "Object",
            "tags": [],
            "label": "features",
            "description": [],
            "signature": [
              {
                "pluginId": "features",
                "scope": "server",
                "docId": "kibFeaturesPluginApi",
                "section": "def-server.PluginSetupContract",
                "text": "PluginSetupContract"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.encryptedSavedObjects",
            "type": "Object",
            "tags": [],
            "label": "encryptedSavedObjects",
            "description": [],
            "signature": [
              {
                "pluginId": "encryptedSavedObjects",
                "scope": "server",
                "docId": "kibEncryptedSavedObjectsPluginApi",
                "section": "def-server.EncryptedSavedObjectsPluginSetup",
                "text": "EncryptedSavedObjectsPluginSetup"
              }
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.cloud",
            "type": "Object",
            "tags": [],
            "label": "cloud",
            "description": [],
            "signature": [
              {
                "pluginId": "cloud",
                "scope": "server",
                "docId": "kibCloudPluginApi",
                "section": "def-server.CloudSetup",
                "text": "CloudSetup"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.usageCollection",
            "type": "Object",
            "tags": [],
            "label": "usageCollection",
            "description": [],
            "signature": [
              {
                "pluginId": "usageCollection",
                "scope": "server",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-server.UsageCollectionSetup",
                "text": "UsageCollectionSetup"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.spaces",
            "type": "Object",
            "tags": [],
            "label": "spaces",
            "description": [],
            "signature": [
              {
                "pluginId": "spaces",
                "scope": "server",
                "docId": "kibSpacesPluginApi",
                "section": "def-server.SpacesPluginStart",
                "text": "SpacesPluginStart"
              }
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.telemetry",
            "type": "Object",
            "tags": [],
            "label": "telemetry",
            "description": [],
            "signature": [
              {
                "pluginId": "telemetry",
                "scope": "server",
                "docId": "kibTelemetryPluginApi",
                "section": "def-server.TelemetryPluginSetup",
                "text": "TelemetryPluginSetup"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.FleetSetupDeps.taskManager",
            "type": "Object",
            "tags": [],
            "label": "taskManager",
            "description": [],
            "signature": [
              {
                "pluginId": "taskManager",
                "scope": "server",
                "docId": "kibTaskManagerPluginApi",
                "section": "def-server.TaskManagerSetupContract",
                "text": "TaskManagerSetupContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PackageClient",
        "type": "Interface",
        "tags": [],
        "label": "PackageClient",
        "description": [],
        "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageClient.getInstallation",
            "type": "Function",
            "tags": [],
            "label": "getInstallation",
            "description": [],
            "signature": [
              "(pkgName: string) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installation",
                "text": "Installation"
              },
              " | undefined>"
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.getInstallation.$1",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageClient.ensureInstalledPackage",
            "type": "Function",
            "tags": [],
            "label": "ensureInstalledPackage",
            "description": [],
            "signature": [
              "(options: { pkgName: string; pkgVersion?: string | undefined; spaceId?: string | undefined; }) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installation",
                "text": "Installation"
              },
              " | undefined>"
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.ensureInstalledPackage.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackageClient.ensureInstalledPackage.$1.pkgName",
                    "type": "string",
                    "tags": [],
                    "label": "pkgName",
                    "description": [],
                    "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackageClient.ensureInstalledPackage.$1.pkgVersion",
                    "type": "string",
                    "tags": [],
                    "label": "pkgVersion",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackageClient.ensureInstalledPackage.$1.spaceId",
                    "type": "string",
                    "tags": [],
                    "label": "spaceId",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageClient.fetchFindLatestPackage",
            "type": "Function",
            "tags": [],
            "label": "fetchFindLatestPackage",
            "description": [],
            "signature": [
              "(packageName: string, options?: ",
              "FetchFindLatestPackageOptions",
              " | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryPackage",
                "text": "RegistryPackage"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.BundledPackage",
                "text": "BundledPackage"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.fetchFindLatestPackage.$1",
                "type": "string",
                "tags": [],
                "label": "packageName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.fetchFindLatestPackage.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "FetchFindLatestPackageOptions",
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageClient.getPackage",
            "type": "Function",
            "tags": [],
            "label": "getPackage",
            "description": [],
            "signature": [
              "(packageName: string, packageVersion: string) => Promise<{ packageInfo: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ArchivePackage",
                "text": "ArchivePackage"
              },
              "; paths: string[]; }>"
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.getPackage.$1",
                "type": "string",
                "tags": [],
                "label": "packageName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.getPackage.$2",
                "type": "string",
                "tags": [],
                "label": "packageVersion",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageClient.reinstallEsAssets",
            "type": "Function",
            "tags": [],
            "label": "reinstallEsAssets",
            "description": [],
            "signature": [
              "(packageInfo: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.InstallablePackage",
                "text": "InstallablePackage"
              },
              ", assetPaths: string[]) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EsAssetReference",
                "text": "EsAssetReference"
              },
              "[]>"
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.reinstallEsAssets.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "packageInfo",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.InstallablePackage",
                    "text": "InstallablePackage"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageClient.reinstallEsAssets.$2",
                "type": "Array",
                "tags": [],
                "label": "assetPaths",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PackagePolicyClient",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyClient",
        "description": [],
        "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.create",
            "type": "Function",
            "tags": [],
            "label": "create",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", packagePolicy: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              ", options?: { spaceId?: string | undefined; id?: string | undefined; user?: ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | undefined; bumpRevision?: boolean | undefined; force?: boolean | undefined; skipEnsureInstalled?: boolean | undefined; skipUniqueNameVerification?: boolean | undefined; overwrite?: boolean | undefined; packageInfo?: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageInfo",
                "text": "PackageInfo"
              },
              " | undefined; } | undefined, context?: ",
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined, request?: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.create.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.create.$2",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.create.$3",
                "type": "Object",
                "tags": [],
                "label": "packagePolicy",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.NewPackagePolicy",
                    "text": "NewPackagePolicy"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.create.$4",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.spaceId",
                    "type": "string",
                    "tags": [],
                    "label": "spaceId",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.id",
                    "type": "string",
                    "tags": [],
                    "label": "id",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.user",
                    "type": "Object",
                    "tags": [],
                    "label": "user",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "security",
                        "scope": "common",
                        "docId": "kibSecurityPluginApi",
                        "section": "def-common.AuthenticatedUser",
                        "text": "AuthenticatedUser"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.bumpRevision",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "bumpRevision",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.force",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "force",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.skipEnsureInstalled",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "skipEnsureInstalled",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.skipUniqueNameVerification",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "skipUniqueNameVerification",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.overwrite",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "overwrite",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.create.$4.packageInfo",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "packageInfo",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "fleet",
                        "scope": "common",
                        "docId": "kibFleetPluginApi",
                        "section": "def-common.PackageInfo",
                        "text": "PackageInfo"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.create.$5",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-request-handler-context-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                    "section": "def-common.RequestHandlerContext",
                    "text": "RequestHandlerContext"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.create.$6",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.bulkCreate",
            "type": "Function",
            "tags": [],
            "label": "bulkCreate",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", packagePolicies: ",
              "NewPackagePolicyWithId",
              "[], options?: { user?: ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | undefined; bumpRevision?: boolean | undefined; force?: true | undefined; } | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "[]>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkCreate.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkCreate.$2",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkCreate.$3",
                "type": "Array",
                "tags": [],
                "label": "packagePolicies",
                "description": [],
                "signature": [
                  "NewPackagePolicyWithId",
                  "[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkCreate.$4",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.bulkCreate.$4.user",
                    "type": "Object",
                    "tags": [],
                    "label": "user",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "security",
                        "scope": "common",
                        "docId": "kibSecurityPluginApi",
                        "section": "def-common.AuthenticatedUser",
                        "text": "AuthenticatedUser"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.bulkCreate.$4.bumpRevision",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "bumpRevision",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.bulkCreate.$4.force",
                    "type": "boolean",
                    "tags": [],
                    "label": "force",
                    "description": [],
                    "signature": [
                      "true | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.bulkUpdate",
            "type": "Function",
            "tags": [],
            "label": "bulkUpdate",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", packagePolicyUpdates: (",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              " & { version?: string | undefined; id: string; })[], options?: { user?: ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | undefined; force?: boolean | undefined; } | undefined, currentVersion?: string | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "[] | null>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkUpdate.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkUpdate.$2",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkUpdate.$3",
                "type": "Array",
                "tags": [],
                "label": "packagePolicyUpdates",
                "description": [],
                "signature": [
                  "(",
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.NewPackagePolicy",
                    "text": "NewPackagePolicy"
                  },
                  " & { version?: string | undefined; id: string; })[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkUpdate.$4",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.bulkUpdate.$4.user",
                    "type": "Object",
                    "tags": [],
                    "label": "user",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "security",
                        "scope": "common",
                        "docId": "kibSecurityPluginApi",
                        "section": "def-common.AuthenticatedUser",
                        "text": "AuthenticatedUser"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.bulkUpdate.$4.force",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "force",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.bulkUpdate.$5",
                "type": "string",
                "tags": [],
                "label": "currentVersion",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", id: string) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              " | null>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.get.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.get.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.findAllForAgentPolicy",
            "type": "Function",
            "tags": [],
            "label": "findAllForAgentPolicy",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", agentPolicyId: string) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "[]>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.findAllForAgentPolicy.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.findAllForAgentPolicy.$2",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.getByIDs",
            "type": "Function",
            "tags": [],
            "label": "getByIDs",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", ids: string[], options?: { ignoreMissing?: boolean | undefined; } | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "[] | null>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getByIDs.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getByIDs.$2",
                "type": "Array",
                "tags": [],
                "label": "ids",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getByIDs.$3",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.getByIDs.$3.ignoreMissing",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "ignoreMissing",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.list",
            "type": "Function",
            "tags": [],
            "label": "list",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", options: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListWithKuery",
                "text": "ListWithKuery"
              },
              " & { withAgentCount?: boolean | undefined; }) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListResult",
                "text": "ListResult"
              },
              "<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.list.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.list.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.ListWithKuery",
                    "text": "ListWithKuery"
                  },
                  " & { withAgentCount?: boolean | undefined; }"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.listIds",
            "type": "Function",
            "tags": [],
            "label": "listIds",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", options: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListWithKuery",
                "text": "ListWithKuery"
              },
              ") => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListResult",
                "text": "ListResult"
              },
              "<string>>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.listIds.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.listIds.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.ListWithKuery",
                    "text": "ListWithKuery"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", id: string, packagePolicyUpdate: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.UpdatePackagePolicy",
                "text": "UpdatePackagePolicy"
              },
              ", options?: { user?: ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | undefined; force?: boolean | undefined; skipUniqueNameVerification?: boolean | undefined; } | undefined, currentVersion?: string | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.update.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.update.$2",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.update.$3",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.update.$4",
                "type": "Object",
                "tags": [],
                "label": "packagePolicyUpdate",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.UpdatePackagePolicy",
                    "text": "UpdatePackagePolicy"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.update.$5",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.update.$5.user",
                    "type": "Object",
                    "tags": [],
                    "label": "user",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "security",
                        "scope": "common",
                        "docId": "kibSecurityPluginApi",
                        "section": "def-common.AuthenticatedUser",
                        "text": "AuthenticatedUser"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.update.$5.force",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "force",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.update.$5.skipUniqueNameVerification",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "skipUniqueNameVerification",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.update.$6",
                "type": "string",
                "tags": [],
                "label": "currentVersion",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.delete",
            "type": "Function",
            "tags": [],
            "label": "delete",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", ids: string[], options?: { user?: ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | undefined; skipUnassignFromAgentPolicies?: boolean | undefined; force?: boolean | undefined; } | undefined, context?: ",
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined, request?: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PostDeletePackagePoliciesResponse",
                "text": "PostDeletePackagePoliciesResponse"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.delete.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.delete.$2",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.delete.$3",
                "type": "Array",
                "tags": [],
                "label": "ids",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.delete.$4",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.delete.$4.user",
                    "type": "Object",
                    "tags": [],
                    "label": "user",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "security",
                        "scope": "common",
                        "docId": "kibSecurityPluginApi",
                        "section": "def-common.AuthenticatedUser",
                        "text": "AuthenticatedUser"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.delete.$4.skipUnassignFromAgentPolicies",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "skipUnassignFromAgentPolicies",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.delete.$4.force",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "force",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.delete.$5",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-request-handler-context-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                    "section": "def-common.RequestHandlerContext",
                    "text": "RequestHandlerContext"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.delete.$6",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.upgrade",
            "type": "Function",
            "tags": [],
            "label": "upgrade",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", ids: string[], options?: { user?: ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | undefined; force?: boolean | undefined; } | undefined, packagePolicy?: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              " | undefined, pkgVersion?: string | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.UpgradePackagePolicyResponse",
                "text": "UpgradePackagePolicyResponse"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.upgrade.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.upgrade.$2",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.upgrade.$3",
                "type": "Array",
                "tags": [],
                "label": "ids",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.upgrade.$4",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.upgrade.$4.user",
                    "type": "Object",
                    "tags": [],
                    "label": "user",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "security",
                        "scope": "common",
                        "docId": "kibSecurityPluginApi",
                        "section": "def-common.AuthenticatedUser",
                        "text": "AuthenticatedUser"
                      },
                      " | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "fleet",
                    "id": "def-server.PackagePolicyClient.upgrade.$4.force",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "force",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.upgrade.$5",
                "type": "Object",
                "tags": [],
                "label": "packagePolicy",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.PackagePolicy",
                    "text": "PackagePolicy"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.upgrade.$6",
                "type": "string",
                "tags": [],
                "label": "pkgVersion",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.getUpgradeDryRunDiff",
            "type": "Function",
            "tags": [],
            "label": "getUpgradeDryRunDiff",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", id: string, packagePolicy?: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              " | undefined, pkgVersion?: string | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.UpgradePackagePolicyDryRunResponseItem",
                "text": "UpgradePackagePolicyDryRunResponseItem"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getUpgradeDryRunDiff.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getUpgradeDryRunDiff.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getUpgradeDryRunDiff.$3",
                "type": "Object",
                "tags": [],
                "label": "packagePolicy",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.PackagePolicy",
                    "text": "PackagePolicy"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getUpgradeDryRunDiff.$4",
                "type": "string",
                "tags": [],
                "label": "pkgVersion",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.enrichPolicyWithDefaultsFromPackage",
            "type": "Function",
            "tags": [],
            "label": "enrichPolicyWithDefaultsFromPackage",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", newPolicy: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              ") => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.enrichPolicyWithDefaultsFromPackage.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.enrichPolicyWithDefaultsFromPackage.$2",
                "type": "Object",
                "tags": [],
                "label": "newPolicy",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.NewPackagePolicy",
                    "text": "NewPackagePolicy"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.buildPackagePolicyFromPackage",
            "type": "Function",
            "tags": [],
            "label": "buildPackagePolicyFromPackage",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", pkgName: string, logger?: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              " | undefined>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.buildPackagePolicyFromPackage.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.buildPackagePolicyFromPackage.$2",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.buildPackagePolicyFromPackage.$3",
                "type": "Object",
                "tags": [],
                "label": "logger",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.Logger",
                    "text": "Logger"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.runExternalCallbacks",
            "type": "Function",
            "tags": [],
            "label": "runExternalCallbacks",
            "description": [],
            "signature": [
              "<A extends \"packagePolicyCreate\" | \"packagePolicyPostCreate\" | \"packagePolicyDelete\" | \"packagePolicyPostDelete\" | \"packagePolicyUpdate\">(externalCallbackType: A, packagePolicy: A extends \"packagePolicyDelete\" ? ",
              "DeletePackagePoliciesResponse",
              " : A extends \"packagePolicyPostDelete\" ? ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PostDeletePackagePoliciesResponse",
                "text": "PostDeletePackagePoliciesResponse"
              },
              " : A extends \"packagePolicyPostCreate\" ? ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              " : A extends \"packagePolicyUpdate\" ? ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.UpdatePackagePolicy",
                "text": "UpdatePackagePolicy"
              },
              " : ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              ", soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", context?: ",
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined, request?: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined) => Promise<A extends \"packagePolicyDelete\" ? void : A extends \"packagePolicyPostDelete\" ? void : A extends \"packagePolicyPostCreate\" ? ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              " : A extends \"packagePolicyUpdate\" ? ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.UpdatePackagePolicy",
                "text": "UpdatePackagePolicy"
              },
              " : ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runExternalCallbacks.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "externalCallbackType",
                "description": [],
                "signature": [
                  "A"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runExternalCallbacks.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "packagePolicy",
                "description": [],
                "signature": [
                  "A extends \"packagePolicyDelete\" ? ",
                  "DeletePackagePoliciesResponse",
                  " : A extends \"packagePolicyPostDelete\" ? ",
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.PostDeletePackagePoliciesResponse",
                    "text": "PostDeletePackagePoliciesResponse"
                  },
                  " : A extends \"packagePolicyPostCreate\" ? ",
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.PackagePolicy",
                    "text": "PackagePolicy"
                  },
                  " : A extends \"packagePolicyUpdate\" ? ",
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.UpdatePackagePolicy",
                    "text": "UpdatePackagePolicy"
                  },
                  " : ",
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.NewPackagePolicy",
                    "text": "NewPackagePolicy"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runExternalCallbacks.$3",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runExternalCallbacks.$4",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runExternalCallbacks.$5",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-request-handler-context-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                    "section": "def-common.RequestHandlerContext",
                    "text": "RequestHandlerContext"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runExternalCallbacks.$6",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.runDeleteExternalCallbacks",
            "type": "Function",
            "tags": [],
            "label": "runDeleteExternalCallbacks",
            "description": [],
            "signature": [
              "(deletedPackagePolicies: ",
              "DeletePackagePoliciesResponse",
              ", soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", context?: ",
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined, request?: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined) => Promise<void>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runDeleteExternalCallbacks.$1",
                "type": "Array",
                "tags": [],
                "label": "deletedPackagePolicies",
                "description": [],
                "signature": [
                  "DeletePackagePoliciesResponse"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runDeleteExternalCallbacks.$2",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runDeleteExternalCallbacks.$3",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runDeleteExternalCallbacks.$4",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-request-handler-context-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                    "section": "def-common.RequestHandlerContext",
                    "text": "RequestHandlerContext"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runDeleteExternalCallbacks.$5",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.runPostDeleteExternalCallbacks",
            "type": "Function",
            "tags": [],
            "label": "runPostDeleteExternalCallbacks",
            "description": [],
            "signature": [
              "(deletedPackagePolicies: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PostDeletePackagePoliciesResponse",
                "text": "PostDeletePackagePoliciesResponse"
              },
              ", soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", esClient: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "common",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-common.ElasticsearchClient",
                "text": "ElasticsearchClient"
              },
              ", context?: ",
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined, request?: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined) => Promise<void>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runPostDeleteExternalCallbacks.$1",
                "type": "Array",
                "tags": [],
                "label": "deletedPackagePolicies",
                "description": [],
                "signature": [
                  {
                    "pluginId": "fleet",
                    "scope": "common",
                    "docId": "kibFleetPluginApi",
                    "section": "def-common.PostDeletePackagePoliciesResponse",
                    "text": "PostDeletePackagePoliciesResponse"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runPostDeleteExternalCallbacks.$2",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runPostDeleteExternalCallbacks.$3",
                "type": "Object",
                "tags": [],
                "label": "esClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "common",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-common.ElasticsearchClient",
                    "text": "ElasticsearchClient"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runPostDeleteExternalCallbacks.$4",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-request-handler-context-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                    "section": "def-common.RequestHandlerContext",
                    "text": "RequestHandlerContext"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.runPostDeleteExternalCallbacks.$5",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any> | undefined"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackagePolicyClient.getUpgradePackagePolicyInfo",
            "type": "Function",
            "tags": [],
            "label": "getUpgradePackagePolicyInfo",
            "description": [],
            "signature": [
              "(soClient: ",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              },
              ", id: string) => Promise<{ packagePolicy: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "; packageInfo: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageInfo",
                "text": "PackageInfo"
              },
              "; experimentalDataStreamFeatures: ",
              "ExperimentalDataStreamFeature",
              "[]; }>"
            ],
            "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getUpgradePackagePolicyInfo.$1",
                "type": "Object",
                "tags": [],
                "label": "soClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-saved-objects-api-server",
                    "scope": "common",
                    "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                    "section": "def-common.SavedObjectsClientContract",
                    "text": "SavedObjectsClientContract"
                  }
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackagePolicyClient.getUpgradePackagePolicyInfo.$2",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/server/services/package_policy_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PackageService",
        "type": "Interface",
        "tags": [],
        "label": "PackageService",
        "description": [],
        "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageService.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [],
            "signature": [
              "(request: ",
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) => ",
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.PackageClient",
                "text": "PackageClient"
              }
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-server.PackageService.asScoped.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PackageService.asInternalUser",
            "type": "Object",
            "tags": [],
            "label": "asInternalUser",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "server",
                "docId": "kibFleetPluginApi",
                "section": "def-server.PackageClient",
                "text": "PackageClient"
              }
            ],
            "path": "x-pack/plugins/fleet/server/services/epm/package_service.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "fleet",
        "id": "def-server.ExternalCallback",
        "type": "Type",
        "tags": [],
        "label": "ExternalCallback",
        "description": [
          "\nCallbacks supported by the Fleet plugin"
        ],
        "signature": [
          "ExternalCallbackCreate",
          " | ",
          "ExternalCallbackPostCreate",
          " | ",
          "ExternalCallbackDelete",
          " | ",
          "ExternalCallbackPostDelete",
          " | ",
          "ExternalCallbackUpdate"
        ],
        "path": "x-pack/plugins/fleet/server/types/extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.FleetConfigType",
        "type": "Type",
        "tags": [],
        "label": "FleetConfigType",
        "description": [],
        "signature": [
          "any"
        ],
        "path": "x-pack/plugins/fleet/server/config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.ListArtifactsProps",
        "type": "Type",
        "tags": [],
        "label": "ListArtifactsProps",
        "description": [],
        "signature": [
          "Pick<Readonly<{ page?: number | undefined; perPage?: number | undefined; sortField?: string | undefined; sortOrder?: \"asc\" | \"desc\" | undefined; kuery?: any; showUpgradeable?: boolean | undefined; } & {}>, \"page\" | \"perPage\" | \"sortOrder\" | \"kuery\"> & { sortField?: string | undefined; }"
        ],
        "path": "x-pack/plugins/fleet/server/services/artifacts/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PostPackagePolicyCreateCallback",
        "type": "Type",
        "tags": [],
        "label": "PostPackagePolicyCreateCallback",
        "description": [],
        "signature": [
          "(newPackagePolicy: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicy",
            "text": "NewPackagePolicy"
          },
          ", soClient: ",
          {
            "pluginId": "@kbn/core-saved-objects-api-server",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
            "section": "def-common.SavedObjectsClientContract",
            "text": "SavedObjectsClientContract"
          },
          ", esClient: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ", context?: ",
          {
            "pluginId": "@kbn/core-http-request-handler-context-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
            "section": "def-common.RequestHandlerContext",
            "text": "RequestHandlerContext"
          },
          " | undefined, request?: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | undefined) => Promise<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicy",
            "text": "NewPackagePolicy"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/server/types/extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyCreateCallback.$1",
            "type": "Object",
            "tags": [],
            "label": "newPackagePolicy",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyCreateCallback.$2",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyCreateCallback.$3",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyCreateCallback.$4",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyCreateCallback.$5",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PostPackagePolicyDeleteCallback",
        "type": "Type",
        "tags": [],
        "label": "PostPackagePolicyDeleteCallback",
        "description": [],
        "signature": [
          "(packagePolicies: ",
          "DeletePackagePoliciesResponse",
          ", soClient: ",
          {
            "pluginId": "@kbn/core-saved-objects-api-server",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
            "section": "def-common.SavedObjectsClientContract",
            "text": "SavedObjectsClientContract"
          },
          ", esClient: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ", context?: ",
          {
            "pluginId": "@kbn/core-http-request-handler-context-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
            "section": "def-common.RequestHandlerContext",
            "text": "RequestHandlerContext"
          },
          " | undefined, request?: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | undefined) => Promise<void>"
        ],
        "path": "x-pack/plugins/fleet/server/types/extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyDeleteCallback.$1",
            "type": "Array",
            "tags": [],
            "label": "packagePolicies",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyDeleteCallback.$2",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyDeleteCallback.$3",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyDeleteCallback.$4",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyDeleteCallback.$5",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PostPackagePolicyPostCreateCallback",
        "type": "Type",
        "tags": [],
        "label": "PostPackagePolicyPostCreateCallback",
        "description": [],
        "signature": [
          "(packagePolicy: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicy",
            "text": "PackagePolicy"
          },
          ", soClient: ",
          {
            "pluginId": "@kbn/core-saved-objects-api-server",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
            "section": "def-common.SavedObjectsClientContract",
            "text": "SavedObjectsClientContract"
          },
          ", esClient: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ", context?: ",
          {
            "pluginId": "@kbn/core-http-request-handler-context-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
            "section": "def-common.RequestHandlerContext",
            "text": "RequestHandlerContext"
          },
          " | undefined, request?: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | undefined) => Promise<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicy",
            "text": "PackagePolicy"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/server/types/extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostCreateCallback.$1",
            "type": "Object",
            "tags": [],
            "label": "packagePolicy",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostCreateCallback.$2",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostCreateCallback.$3",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostCreateCallback.$4",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostCreateCallback.$5",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PostPackagePolicyPostDeleteCallback",
        "type": "Type",
        "tags": [],
        "label": "PostPackagePolicyPostDeleteCallback",
        "description": [],
        "signature": [
          "(deletedPackagePolicies: ",
          "_DeepReadonlyArray",
          "<{ id: string; name?: string | undefined; success: boolean; package?: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicyPackage",
            "text": "PackagePolicyPackage"
          },
          " | undefined; policy_id?: string | undefined; statusCode?: number | undefined; body?: { message: string; } | undefined; }>, soClient: ",
          {
            "pluginId": "@kbn/core-saved-objects-api-server",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
            "section": "def-common.SavedObjectsClientContract",
            "text": "SavedObjectsClientContract"
          },
          ", esClient: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ", context?: ",
          {
            "pluginId": "@kbn/core-http-request-handler-context-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
            "section": "def-common.RequestHandlerContext",
            "text": "RequestHandlerContext"
          },
          " | undefined, request?: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | undefined) => Promise<void>"
        ],
        "path": "x-pack/plugins/fleet/server/types/extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostDeleteCallback.$1",
            "type": "Object",
            "tags": [],
            "label": "deletedPackagePolicies",
            "description": [],
            "signature": [
              "_DeepReadonlyArray",
              "<{ id: string; name?: string | undefined; success: boolean; package?: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyPackage",
                "text": "PackagePolicyPackage"
              },
              " | undefined; policy_id?: string | undefined; statusCode?: number | undefined; body?: { message: string; } | undefined; }>"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostDeleteCallback.$2",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostDeleteCallback.$3",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostDeleteCallback.$4",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PostPackagePolicyPostDeleteCallback.$5",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-server.PutPackagePolicyUpdateCallback",
        "type": "Type",
        "tags": [],
        "label": "PutPackagePolicyUpdateCallback",
        "description": [],
        "signature": [
          "(updatePackagePolicy: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpdatePackagePolicy",
            "text": "UpdatePackagePolicy"
          },
          ", soClient: ",
          {
            "pluginId": "@kbn/core-saved-objects-api-server",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
            "section": "def-common.SavedObjectsClientContract",
            "text": "SavedObjectsClientContract"
          },
          ", esClient: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ", context?: ",
          {
            "pluginId": "@kbn/core-http-request-handler-context-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
            "section": "def-common.RequestHandlerContext",
            "text": "RequestHandlerContext"
          },
          " | undefined, request?: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | undefined) => Promise<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpdatePackagePolicy",
            "text": "UpdatePackagePolicy"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/server/types/extensions.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-server.PutPackagePolicyUpdateCallback.$1",
            "type": "Object",
            "tags": [],
            "label": "updatePackagePolicy",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.UpdatePackagePolicy",
                "text": "UpdatePackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PutPackagePolicyUpdateCallback.$2",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClientContract",
                "text": "SavedObjectsClientContract"
              }
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PutPackagePolicyUpdateCallback.$3",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PutPackagePolicyUpdateCallback.$4",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-server.PutPackagePolicyUpdateCallback.$5",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined"
            ],
            "path": "x-pack/plugins/fleet/server/types/extensions.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "fleet",
      "id": "def-server.FleetSetupContract",
      "type": "Type",
      "tags": [],
      "label": "FleetSetupContract",
      "description": [],
      "signature": [
        "void"
      ],
      "path": "x-pack/plugins/fleet/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "fleet",
      "id": "def-server.FleetStartContract",
      "type": "Interface",
      "tags": [],
      "label": "FleetStartContract",
      "description": [
        "\nDescribes public Fleet plugin contract returned at the `startup` stage."
      ],
      "path": "x-pack/plugins/fleet/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.fleetSetupCompleted",
          "type": "Function",
          "tags": [],
          "label": "fleetSetupCompleted",
          "description": [
            "\nreturns a promise that resolved when fleet setup has been completed regardless if it was successful or failed).\nAny consumer of fleet start services should first `await` for this promise to be resolved before using those\nservices"
          ],
          "signature": [
            "() => Promise<void>"
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [],
          "returnComment": []
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.authz",
          "type": "Object",
          "tags": [],
          "label": "authz",
          "description": [],
          "signature": [
            "{ fromRequest(request: ",
            {
              "pluginId": "@kbn/core-http-server",
              "scope": "common",
              "docId": "kibKbnCoreHttpServerPluginApi",
              "section": "def-common.KibanaRequest",
              "text": "KibanaRequest"
            },
            "<unknown, unknown, unknown, any>): Promise<",
            {
              "pluginId": "fleet",
              "scope": "common",
              "docId": "kibFleetPluginApi",
              "section": "def-common.FleetAuthz",
              "text": "FleetAuthz"
            },
            ">; }"
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.esIndexPatternService",
          "type": "Object",
          "tags": [],
          "label": "esIndexPatternService",
          "description": [],
          "signature": [
            {
              "pluginId": "fleet",
              "scope": "server",
              "docId": "kibFleetPluginApi",
              "section": "def-server.ESIndexPatternService",
              "text": "ESIndexPatternService"
            }
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.packageService",
          "type": "Object",
          "tags": [],
          "label": "packageService",
          "description": [],
          "signature": [
            {
              "pluginId": "fleet",
              "scope": "server",
              "docId": "kibFleetPluginApi",
              "section": "def-server.PackageService",
              "text": "PackageService"
            }
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.agentService",
          "type": "Object",
          "tags": [],
          "label": "agentService",
          "description": [],
          "signature": [
            {
              "pluginId": "fleet",
              "scope": "server",
              "docId": "kibFleetPluginApi",
              "section": "def-server.AgentService",
              "text": "AgentService"
            }
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.packagePolicyService",
          "type": "Object",
          "tags": [],
          "label": "packagePolicyService",
          "description": [
            "\nServices for Fleet's package policies"
          ],
          "signature": [
            {
              "pluginId": "fleet",
              "scope": "server",
              "docId": "kibFleetPluginApi",
              "section": "def-server.PackagePolicyClient",
              "text": "PackagePolicyClient"
            }
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.agentPolicyService",
          "type": "Object",
          "tags": [],
          "label": "agentPolicyService",
          "description": [],
          "signature": [
            {
              "pluginId": "fleet",
              "scope": "server",
              "docId": "kibFleetPluginApi",
              "section": "def-server.AgentPolicyServiceInterface",
              "text": "AgentPolicyServiceInterface"
            }
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.registerExternalCallback",
          "type": "Function",
          "tags": [],
          "label": "registerExternalCallback",
          "description": [
            "\nRegister callbacks for inclusion in fleet API processing"
          ],
          "signature": [
            "(...args: ",
            {
              "pluginId": "fleet",
              "scope": "server",
              "docId": "kibFleetPluginApi",
              "section": "def-server.ExternalCallback",
              "text": "ExternalCallback"
            },
            ") => void"
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "fleet",
              "id": "def-server.FleetStartContract.registerExternalCallback.$1",
              "type": "CompoundType",
              "tags": [],
              "label": "args",
              "description": [],
              "signature": [
                {
                  "pluginId": "fleet",
                  "scope": "server",
                  "docId": "kibFleetPluginApi",
                  "section": "def-server.ExternalCallback",
                  "text": "ExternalCallback"
                }
              ],
              "path": "x-pack/plugins/fleet/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "fleet",
          "id": "def-server.FleetStartContract.createArtifactsClient",
          "type": "Function",
          "tags": [],
          "label": "createArtifactsClient",
          "description": [
            "\nCreate a Fleet Artifact Client instance"
          ],
          "signature": [
            "(packageName: string) => ",
            "FleetArtifactsClient"
          ],
          "path": "x-pack/plugins/fleet/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "fleet",
              "id": "def-server.FleetStartContract.createArtifactsClient.$1",
              "type": "string",
              "tags": [],
              "label": "packageName",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "x-pack/plugins/fleet/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "fleet",
        "id": "def-common.decodeCloudId",
        "type": "Function",
        "tags": [],
        "label": "decodeCloudId",
        "description": [],
        "signature": [
          "(cid: string) => { host: string; defaultPort: string; elasticsearchUrl: string; kibanaUrl: string; } | undefined"
        ],
        "path": "x-pack/plugins/fleet/common/services/decode_cloud_id.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.decodeCloudId.$1",
            "type": "string",
            "tags": [],
            "label": "cid",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/fleet/common/services/decode_cloud_id.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.getFileDataIndexName",
        "type": "Function",
        "tags": [],
        "label": "getFileDataIndexName",
        "description": [
          "\nReturns the index name for File data (chunks) storage for a given integration"
        ],
        "signature": [
          "(integrationName: string) => string"
        ],
        "path": "x-pack/plugins/fleet/common/services/file_storage.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.getFileDataIndexName.$1",
            "type": "string",
            "tags": [],
            "label": "integrationName",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/fleet/common/services/file_storage.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.getFileMetadataIndexName",
        "type": "Function",
        "tags": [],
        "label": "getFileMetadataIndexName",
        "description": [
          "\nReturns the index name for File Metadata storage for a given integration"
        ],
        "signature": [
          "(integrationName: string) => string"
        ],
        "path": "x-pack/plugins/fleet/common/services/file_storage.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.getFileMetadataIndexName.$1",
            "type": "string",
            "tags": [],
            "label": "integrationName",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/fleet/common/services/file_storage.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.isValidNamespace",
        "type": "Function",
        "tags": [],
        "label": "isValidNamespace",
        "description": [],
        "signature": [
          "(namespace: string) => { valid: boolean; error?: string | undefined; }"
        ],
        "path": "x-pack/plugins/fleet/common/services/is_valid_namespace.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.isValidNamespace.$1",
            "type": "string",
            "tags": [],
            "label": "namespace",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/fleet/common/services/is_valid_namespace.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "fleet",
        "id": "def-common.Agent",
        "type": "Interface",
        "tags": [],
        "label": "Agent",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Agent",
            "text": "Agent"
          },
          " extends AgentBase"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.access_api_key",
            "type": "string",
            "tags": [],
            "label": "access_api_key",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.default_api_key_history",
            "type": "Array",
            "tags": [],
            "label": "default_api_key_history",
            "description": [],
            "signature": [
              "{ id: string; retired_at: string; }[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.outputs",
            "type": "Object",
            "tags": [],
            "label": "outputs",
            "description": [],
            "signature": [
              "Record<string, { api_key_id: string; to_retire_api_key_ids?: { id: string; retired_at: string; }[] | undefined; }> | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.status",
            "type": "CompoundType",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentStatus",
                "text": "AgentStatus"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.packages",
            "type": "Array",
            "tags": [],
            "label": "packages",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.sort",
            "type": "Array",
            "tags": [],
            "label": "sort",
            "description": [],
            "signature": [
              "(string | number | null)[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Agent.metrics",
            "type": "Object",
            "tags": [],
            "label": "metrics",
            "description": [],
            "signature": [
              "AgentMetrics",
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AgentMetadata",
        "type": "Interface",
        "tags": [],
        "label": "AgentMetadata",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentMetadata.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[x: string]: any",
            "description": [],
            "signature": [
              "[x: string]:  any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AgentPolicy",
        "type": "Interface",
        "tags": [],
        "label": "AgentPolicy",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.AgentPolicy",
            "text": "AgentPolicy"
          },
          " extends Omit<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewAgentPolicy",
            "text": "NewAgentPolicy"
          },
          ", \"id\">"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.status",
            "type": "CompoundType",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              "\"active\" | \"inactive\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.package_policies",
            "type": "Array",
            "tags": [],
            "label": "package_policies",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.is_managed",
            "type": "boolean",
            "tags": [],
            "label": "is_managed",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.updated_at",
            "type": "string",
            "tags": [],
            "label": "updated_at",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.updated_by",
            "type": "string",
            "tags": [],
            "label": "updated_by",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.revision",
            "type": "number",
            "tags": [],
            "label": "revision",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AgentPolicy.agents",
            "type": "number",
            "tags": [],
            "label": "agents",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AssetParts",
        "type": "Interface",
        "tags": [],
        "label": "AssetParts",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.AssetParts.pkgkey",
            "type": "string",
            "tags": [],
            "label": "pkgkey",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AssetParts.dataset",
            "type": "string",
            "tags": [],
            "label": "dataset",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AssetParts.service",
            "type": "CompoundType",
            "tags": [],
            "label": "service",
            "description": [],
            "signature": [
              "\"kibana\" | \"elasticsearch\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AssetParts.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"input\" | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ElasticsearchAssetType",
                "text": "ElasticsearchAssetType"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.KibanaAssetType",
                "text": "KibanaAssetType"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.DocAssetType",
                "text": "DocAssetType"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AssetParts.file",
            "type": "string",
            "tags": [],
            "label": "file",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.BulkInstallPackageInfo",
        "type": "Interface",
        "tags": [],
        "label": "BulkInstallPackageInfo",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.BulkInstallPackageInfo.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.BulkInstallPackageInfo.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.BulkInstallPackageInfo.result",
            "type": "Object",
            "tags": [],
            "label": "result",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.InstallResult",
                "text": "InstallResult"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.BulkInstallPackagesResponse",
        "type": "Interface",
        "tags": [],
        "label": "BulkInstallPackagesResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.BulkInstallPackagesResponse.items",
            "type": "Array",
            "tags": [],
            "label": "items",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.BulkInstallPackageInfo",
                "text": "BulkInstallPackageInfo"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.IBulkInstallPackageHTTPError",
                "text": "IBulkInstallPackageHTTPError"
              },
              ")[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.BulkInstallPackagesResponse.response",
            "type": "Array",
            "tags": [],
            "label": "response",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.BulkInstallPackageInfo",
                "text": "BulkInstallPackageInfo"
              },
              " | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.IBulkInstallPackageHTTPError",
                "text": "IBulkInstallPackageHTTPError"
              },
              ")[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.BundledPackage",
        "type": "Interface",
        "tags": [],
        "label": "BundledPackage",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.BundledPackage.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.BundledPackage.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.BundledPackage.buffer",
            "type": "Object",
            "tags": [],
            "label": "buffer",
            "description": [],
            "signature": [
              "Buffer"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.CheckPermissionsResponse",
        "type": "Interface",
        "tags": [],
        "label": "CheckPermissionsResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/app.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.CheckPermissionsResponse.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "\"MISSING_SECURITY\" | \"MISSING_PRIVILEGES\" | \"MISSING_FLEET_SERVER_SETUP_PRIVILEGES\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/app.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.CheckPermissionsResponse.success",
            "type": "boolean",
            "tags": [],
            "label": "success",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/app.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.CopyAgentPolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "CopyAgentPolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.CopyAgentPolicyResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentPolicy",
                "text": "AgentPolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.CreateAgentPolicyRequest",
        "type": "Interface",
        "tags": [],
        "label": "CreateAgentPolicyRequest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.CreateAgentPolicyRequest.body",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewAgentPolicy",
                "text": "NewAgentPolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.CreateAgentPolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "CreateAgentPolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.CreateAgentPolicyResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentPolicy",
                "text": "AgentPolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.CreatePackagePolicyRequest",
        "type": "Interface",
        "tags": [],
        "label": "CreatePackagePolicyRequest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.CreatePackagePolicyRequest.body",
            "type": "CompoundType",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicy",
                "text": "NewPackagePolicy"
              },
              " & { force?: boolean | undefined; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.CreatePackagePolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "CreatePackagePolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.CreatePackagePolicyResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.DefaultPackagesInstallationError",
        "type": "Interface",
        "tags": [],
        "label": "DefaultPackagesInstallationError",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.DefaultPackagesInstallationError.installType",
            "type": "CompoundType",
            "tags": [],
            "label": "installType",
            "description": [],
            "signature": [
              "\"unknown\" | \"update\" | \"reinstall\" | \"reupdate\" | \"rollback\" | \"install\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.DefaultPackagesInstallationError.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "Error"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.DeleteAgentPolicyRequest",
        "type": "Interface",
        "tags": [],
        "label": "DeleteAgentPolicyRequest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.DeleteAgentPolicyRequest.body",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "{ agentPolicyId: string; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.DeleteAgentPolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "DeleteAgentPolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.DeleteAgentPolicyResponse.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.DeleteAgentPolicyResponse.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.DeletePackagePoliciesRequest",
        "type": "Interface",
        "tags": [],
        "label": "DeletePackagePoliciesRequest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.DeletePackagePoliciesRequest.body",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "{ packagePolicyIds: string[]; force?: boolean | undefined; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.EpmPackageAdditions",
        "type": "Interface",
        "tags": [],
        "label": "EpmPackageAdditions",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.EpmPackageAdditions.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EpmPackageAdditions.latestVersion",
            "type": "string",
            "tags": [],
            "label": "latestVersion",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EpmPackageAdditions.assets",
            "type": "CompoundType",
            "tags": [],
            "label": "assets",
            "description": [],
            "signature": [
              "Record<\"kibana\", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.KibanaAssetTypeToParts",
                "text": "KibanaAssetTypeToParts"
              },
              "> & Record<\"elasticsearch\", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ElasticsearchAssetTypeToParts",
                "text": "ElasticsearchAssetTypeToParts"
              },
              ">"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EpmPackageAdditions.notice",
            "type": "string",
            "tags": [],
            "label": "notice",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EpmPackageAdditions.licensePath",
            "type": "string",
            "tags": [],
            "label": "licensePath",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EpmPackageAdditions.keepPoliciesUpToDate",
            "type": "CompoundType",
            "tags": [],
            "label": "keepPoliciesUpToDate",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FleetAuthz",
        "type": "Interface",
        "tags": [],
        "label": "FleetAuthz",
        "description": [],
        "path": "x-pack/plugins/fleet/common/authz.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetAuthz.fleet",
            "type": "Object",
            "tags": [],
            "label": "fleet",
            "description": [],
            "signature": [
              "{ all: boolean; setup: boolean; readEnrollmentTokens: boolean; readAgentPolicies: boolean; }"
            ],
            "path": "x-pack/plugins/fleet/common/authz.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetAuthz.integrations",
            "type": "Object",
            "tags": [],
            "label": "integrations",
            "description": [],
            "signature": [
              "{ readPackageInfo: boolean; readInstalledPackages: boolean; installPackages: boolean; upgradePackages: boolean; removePackages: boolean; uploadPackages: boolean; readPackageSettings: boolean; writePackageSettings: boolean; readIntegrationPolicies: boolean; writeIntegrationPolicies: boolean; }"
            ],
            "path": "x-pack/plugins/fleet/common/authz.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetAuthz.packagePrivileges",
            "type": "Object",
            "tags": [],
            "label": "packagePrivileges",
            "description": [],
            "signature": [
              "{ [packageName: string]: { actions: { [key: string]: { executePackageAction: boolean; }; }; }; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/authz.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FleetErrorResponse",
        "type": "Interface",
        "tags": [],
        "label": "FleetErrorResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/error.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetErrorResponse.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/error.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetErrorResponse.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/error.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetErrorResponse.attributes",
            "type": "Object",
            "tags": [],
            "label": "attributes",
            "description": [],
            "signature": [
              "{ type?: \"verification_failed\" | undefined; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/error.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FleetServerAgent",
        "type": "Interface",
        "tags": [],
        "label": "FleetServerAgent",
        "description": [
          "\nAn Elastic Agent that has enrolled into Fleet"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent._version",
            "type": "number",
            "tags": [],
            "label": "_version",
            "description": [
              "\nThe version of the document in the index"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.shared_id",
            "type": "string",
            "tags": [],
            "label": "shared_id",
            "description": [
              "\nShared ID"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [
              "\nType"
            ],
            "signature": [
              "\"EPHEMERAL\" | \"PERMANENT\" | \"TEMPORARY\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.active",
            "type": "boolean",
            "tags": [],
            "label": "active",
            "description": [
              "\nActive flag"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.enrolled_at",
            "type": "string",
            "tags": [],
            "label": "enrolled_at",
            "description": [
              "\nDate/time the Elastic Agent enrolled"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.unenrolled_at",
            "type": "string",
            "tags": [],
            "label": "unenrolled_at",
            "description": [
              "\nDate/time the Elastic Agent unenrolled"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.unenrollment_started_at",
            "type": "string",
            "tags": [],
            "label": "unenrollment_started_at",
            "description": [
              "\nDate/time the Elastic Agent unenrolled started"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.upgraded_at",
            "type": "CompoundType",
            "tags": [],
            "label": "upgraded_at",
            "description": [
              "\nDate/time the Elastic Agent was last upgraded"
            ],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.upgrade_started_at",
            "type": "CompoundType",
            "tags": [],
            "label": "upgrade_started_at",
            "description": [
              "\nDate/time the Elastic Agent started the current upgrade"
            ],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.access_api_key_id",
            "type": "string",
            "tags": [],
            "label": "access_api_key_id",
            "description": [
              "\nID of the API key the Elastic Agent must used to contact Fleet Server"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.agent",
            "type": "Object",
            "tags": [],
            "label": "agent",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FleetServerAgentMetadata",
                "text": "FleetServerAgentMetadata"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.user_provided_metadata",
            "type": "Object",
            "tags": [],
            "label": "user_provided_metadata",
            "description": [
              "\nUser provided metadata information for the Elastic Agent"
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentMetadata",
                "text": "AgentMetadata"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.local_metadata",
            "type": "Object",
            "tags": [],
            "label": "local_metadata",
            "description": [
              "\nLocal metadata information for the Elastic Agent"
            ],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentMetadata",
                "text": "AgentMetadata"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.policy_id",
            "type": "string",
            "tags": [],
            "label": "policy_id",
            "description": [
              "\nThe policy ID for the Elastic Agent"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.policy_revision_idx",
            "type": "CompoundType",
            "tags": [],
            "label": "policy_revision_idx",
            "description": [
              "\nThe current policy revision_idx for the Elastic Agent"
            ],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.policy_coordinator_idx",
            "type": "number",
            "tags": [],
            "label": "policy_coordinator_idx",
            "description": [
              "\nThe current policy coordinator for the Elastic Agent"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.last_updated",
            "type": "string",
            "tags": [],
            "label": "last_updated",
            "description": [
              "\nDate/time the Elastic Agent was last updated"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.last_checkin",
            "type": "string",
            "tags": [],
            "label": "last_checkin",
            "description": [
              "\nDate/time the Elastic Agent checked in last time"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.last_checkin_status",
            "type": "CompoundType",
            "tags": [],
            "label": "last_checkin_status",
            "description": [
              "\nLast checkin status"
            ],
            "signature": [
              "\"error\" | \"online\" | \"updating\" | \"degraded\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.last_checkin_message",
            "type": "string",
            "tags": [],
            "label": "last_checkin_message",
            "description": [
              "\nLast checkin message"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.default_api_key_id",
            "type": "string",
            "tags": [],
            "label": "default_api_key_id",
            "description": [
              "\nID of the API key the Elastic Agent uses to authenticate with elasticsearch"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.default_api_key",
            "type": "string",
            "tags": [],
            "label": "default_api_key",
            "description": [
              "\nAPI key the Elastic Agent uses to authenticate with elasticsearch"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.updated_at",
            "type": "string",
            "tags": [],
            "label": "updated_at",
            "description": [
              "\nDate/time the Elastic Agent was last updated"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.packages",
            "type": "Array",
            "tags": [],
            "label": "packages",
            "description": [
              "\nPackages array"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.action_seq_no",
            "type": "number",
            "tags": [],
            "label": "action_seq_no",
            "description": [
              "\nThe last acknowledged action sequence number for the Elastic Agent"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [
              "\nA list of tags used for organizing/filtering agents"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.default_api_key_history",
            "type": "Array",
            "tags": [],
            "label": "default_api_key_history",
            "description": [
              "\nDefault API Key History"
            ],
            "signature": [
              "{ id: string; retired_at: string; }[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgent.components",
            "type": "Array",
            "tags": [],
            "label": "components",
            "description": [
              "\nComponents array"
            ],
            "signature": [
              "FleetServerAgentComponent[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FleetServerAgentMetadata",
        "type": "Interface",
        "tags": [],
        "label": "FleetServerAgentMetadata",
        "description": [
          "\nAn Elastic Agent metadata"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgentMetadata.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nThe unique identifier for the Elastic Agent"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgentMetadata.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [
              "\nThe version of the Elastic Agent"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FleetServerAgentMetadata.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[k: string]: any",
            "description": [],
            "signature": [
              "[k: string]:  any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FullAgentPolicy",
        "type": "Interface",
        "tags": [],
        "label": "FullAgentPolicy",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.outputs",
            "type": "Object",
            "tags": [],
            "label": "outputs",
            "description": [],
            "signature": [
              "{ [key: string]: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicyOutput",
                "text": "FullAgentPolicyOutput"
              },
              "; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.output_permissions",
            "type": "Object",
            "tags": [],
            "label": "output_permissions",
            "description": [],
            "signature": [
              "{ [output: string]: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicyOutputPermissions",
                "text": "FullAgentPolicyOutputPermissions"
              },
              "; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.fleet",
            "type": "CompoundType",
            "tags": [],
            "label": "fleet",
            "description": [],
            "signature": [
              "FullAgentPolicyFleetConfig",
              " | { kibana: ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicyKibanaConfig",
                "text": "FullAgentPolicyKibanaConfig"
              },
              "; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.inputs",
            "type": "Array",
            "tags": [],
            "label": "inputs",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicyInput",
                "text": "FullAgentPolicyInput"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.revision",
            "type": "number",
            "tags": [],
            "label": "revision",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicy.agent",
            "type": "Object",
            "tags": [],
            "label": "agent",
            "description": [],
            "signature": [
              "{ monitoring: { namespace?: string | undefined; use_output?: string | undefined; enabled: boolean; metrics: boolean; logs: boolean; }; download: { sourceURI: string; }; features: Record<string, { enabled: boolean; }>; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FullAgentPolicyInput",
        "type": "Interface",
        "tags": [],
        "label": "FullAgentPolicyInput",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.revision",
            "type": "number",
            "tags": [],
            "label": "revision",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.data_stream",
            "type": "Object",
            "tags": [],
            "label": "data_stream",
            "description": [],
            "signature": [
              "{ namespace: string; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.use_output",
            "type": "string",
            "tags": [],
            "label": "use_output",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.package_policy_id",
            "type": "string",
            "tags": [],
            "label": "package_policy_id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.meta",
            "type": "Object",
            "tags": [],
            "label": "meta",
            "description": [],
            "signature": [
              "{ [key: string]: unknown; package?: Pick<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyPackage",
                "text": "PackagePolicyPackage"
              },
              ", \"name\" | \"version\"> | undefined; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.streams",
            "type": "Array",
            "tags": [],
            "label": "streams",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicyInputStream",
                "text": "FullAgentPolicyInputStream"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInput.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[key: string]: any",
            "description": [],
            "signature": [
              "[key: string]:  any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FullAgentPolicyInputStream",
        "type": "Interface",
        "tags": [],
        "label": "FullAgentPolicyInputStream",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInputStream.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInputStream.data_stream",
            "type": "Object",
            "tags": [],
            "label": "data_stream",
            "description": [],
            "signature": [
              "{ dataset: string; type: string; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyInputStream.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[key: string]: any",
            "description": [],
            "signature": [
              "[key: string]:  any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FullAgentPolicyKibanaConfig",
        "type": "Interface",
        "tags": [],
        "label": "FullAgentPolicyKibanaConfig",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyKibanaConfig.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyKibanaConfig.protocol",
            "type": "string",
            "tags": [],
            "label": "protocol",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyKibanaConfig.path",
            "type": "string",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FullAgentPolicyOutputPermissions",
        "type": "Interface",
        "tags": [],
        "label": "FullAgentPolicyOutputPermissions",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.FullAgentPolicyOutputPermissions.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[packagePolicyName: string]: { cluster?: string[] | undefined; indices?: { names: string[]; privileges: string[]; }[] | undefined; }",
            "description": [],
            "signature": [
              "[packagePolicyName: string]:  { cluster?: string[] | undefined; indices?: { names: string[]; privileges: string[]; }[] | undefined; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetAgentPoliciesRequest",
        "type": "Interface",
        "tags": [],
        "label": "GetAgentPoliciesRequest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetAgentPoliciesRequest.query",
            "type": "CompoundType",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListWithKuery",
                "text": "ListWithKuery"
              },
              " & { full?: boolean | undefined; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetAgentsResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetAgentsResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.GetAgentsResponse",
            "text": "GetAgentsResponse"
          },
          " extends ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ListResult",
            "text": "ListResult"
          },
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Agent",
            "text": "Agent"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetAgentsResponse.list",
            "type": "Array",
            "tags": [],
            "label": "list",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Agent",
                "text": "Agent"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetAgentsResponse.statusSummary",
            "type": "Object",
            "tags": [],
            "label": "statusSummary",
            "description": [],
            "signature": [
              "Record<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentStatus",
                "text": "AgentStatus"
              },
              ", number> | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetAgentStatusResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetAgentStatusResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetAgentStatusResponse.results",
            "type": "Object",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              "{ events: number; total: number; online: number; error: number; offline: number; other: number; updating: number; inactive: number; unenrolled: number; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetFullAgentPolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetFullAgentPolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetFullAgentPolicyResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicy",
                "text": "FullAgentPolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetInfoResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetInfoResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetInfoResponse.item",
            "type": "CompoundType",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryPackage",
                "text": "RegistryPackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">> | ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Installable",
                "text": "Installable"
              },
              "<Merge<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ArchivePackage",
                "text": "ArchivePackage"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EpmPackageAdditions",
                "text": "EpmPackageAdditions"
              },
              ">>"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetInfoResponse.response",
            "type": "CompoundType",
            "tags": [],
            "label": "response",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageInfo",
                "text": "PackageInfo"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetOneAgentPolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetOneAgentPolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetOneAgentPolicyResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AgentPolicy",
                "text": "AgentPolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetOneAgentResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetOneAgentResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetOneAgentResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.Agent",
                "text": "Agent"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/agent.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetOnePackagePolicyResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetOnePackagePolicyResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetOnePackagePolicyResponse.item",
            "type": "Object",
            "tags": [],
            "label": "item",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetPackagePoliciesRequest",
        "type": "Interface",
        "tags": [],
        "label": "GetPackagePoliciesRequest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetPackagePoliciesRequest.query",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.ListWithKuery",
                "text": "ListWithKuery"
              }
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetPackagesResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetPackagesResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetPackagesResponse.items",
            "type": "Array",
            "tags": [],
            "label": "items",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageListItem",
                "text": "PackageListItem"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.GetPackagesResponse.response",
            "type": "Array",
            "tags": [],
            "label": "response",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageList",
                "text": "PackageList"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.IBulkInstallPackageHTTPError",
        "type": "Interface",
        "tags": [],
        "label": "IBulkInstallPackageHTTPError",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.IBulkInstallPackageHTTPError.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.IBulkInstallPackageHTTPError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.IBulkInstallPackageHTTPError.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | Error"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.Installation",
        "type": "Interface",
        "tags": [],
        "label": "Installation",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installation",
            "text": "Installation"
          },
          " extends ",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObjectAttributes",
            "text": "SavedObjectAttributes"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.installed_kibana",
            "type": "Array",
            "tags": [],
            "label": "installed_kibana",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.KibanaAssetReference",
                "text": "KibanaAssetReference"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.installed_es",
            "type": "Array",
            "tags": [],
            "label": "installed_es",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.EsAssetReference",
                "text": "EsAssetReference"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.package_assets",
            "type": "Array",
            "tags": [],
            "label": "package_assets",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageAssetReference",
                "text": "PackageAssetReference"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.es_index_patterns",
            "type": "Object",
            "tags": [],
            "label": "es_index_patterns",
            "description": [],
            "signature": [
              "{ [x: string]: string; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.install_status",
            "type": "CompoundType",
            "tags": [],
            "label": "install_status",
            "description": [],
            "signature": [
              "\"installed\" | \"installing\" | \"install_failed\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.install_version",
            "type": "string",
            "tags": [],
            "label": "install_version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.install_started_at",
            "type": "string",
            "tags": [],
            "label": "install_started_at",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.install_source",
            "type": "CompoundType",
            "tags": [],
            "label": "install_source",
            "description": [],
            "signature": [
              "\"upload\" | \"registry\" | \"bundled\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.installed_kibana_space_id",
            "type": "string",
            "tags": [],
            "label": "installed_kibana_space_id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.keep_policies_up_to_date",
            "type": "CompoundType",
            "tags": [],
            "label": "keep_policies_up_to_date",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.install_format_schema_version",
            "type": "string",
            "tags": [],
            "label": "install_format_schema_version",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.verification_status",
            "type": "CompoundType",
            "tags": [],
            "label": "verification_status",
            "description": [],
            "signature": [
              "\"unknown\" | \"verified\" | \"unverified\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.verification_key_id",
            "type": "CompoundType",
            "tags": [],
            "label": "verification_key_id",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.Installation.experimental_data_stream_features",
            "type": "Array",
            "tags": [],
            "label": "experimental_data_stream_features",
            "description": [],
            "signature": [
              "{ data_stream: string; features: Record<",
              "ExperimentalIndexingFeature",
              ", boolean>; }[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.InstallResult",
        "type": "Interface",
        "tags": [],
        "label": "InstallResult",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.InstallResult.assets",
            "type": "Array",
            "tags": [],
            "label": "assets",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.AssetReference",
                "text": "AssetReference"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.InstallResult.status",
            "type": "CompoundType",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              "\"installed\" | \"already_installed\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.InstallResult.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "Error | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.InstallResult.installType",
            "type": "CompoundType",
            "tags": [],
            "label": "installType",
            "description": [],
            "signature": [
              "\"unknown\" | \"update\" | \"reinstall\" | \"reupdate\" | \"rollback\" | \"install\""
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.InstallResult.installSource",
            "type": "CompoundType",
            "tags": [],
            "label": "installSource",
            "description": [],
            "signature": [
              "\"upload\" | \"registry\" | \"bundled\""
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ListResult",
        "type": "Interface",
        "tags": [],
        "label": "ListResult",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ListResult",
            "text": "ListResult"
          },
          "<T>"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListResult.items",
            "type": "Array",
            "tags": [],
            "label": "items",
            "description": [],
            "signature": [
              "T[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListResult.total",
            "type": "number",
            "tags": [],
            "label": "total",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListResult.page",
            "type": "number",
            "tags": [],
            "label": "page",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListResult.perPage",
            "type": "number",
            "tags": [],
            "label": "perPage",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ListWithKuery",
        "type": "Interface",
        "tags": [],
        "label": "ListWithKuery",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ListWithKuery",
            "text": "ListWithKuery"
          },
          " extends ",
          {
            "pluginId": "@kbn/core-http-browser",
            "scope": "common",
            "docId": "kibKbnCoreHttpBrowserPluginApi",
            "section": "def-common.HttpFetchQuery",
            "text": "HttpFetchQuery"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListWithKuery.page",
            "type": "number",
            "tags": [],
            "label": "page",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListWithKuery.perPage",
            "type": "number",
            "tags": [],
            "label": "perPage",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListWithKuery.sortField",
            "type": "string",
            "tags": [],
            "label": "sortField",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListWithKuery.sortOrder",
            "type": "CompoundType",
            "tags": [],
            "label": "sortOrder",
            "description": [],
            "signature": [
              "\"asc\" | \"desc\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.ListWithKuery.kuery",
            "type": "string",
            "tags": [],
            "label": "kuery",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/common.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.NewAgentPolicy",
        "type": "Interface",
        "tags": [],
        "label": "NewAgentPolicy",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.namespace",
            "type": "string",
            "tags": [],
            "label": "namespace",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.is_default",
            "type": "CompoundType",
            "tags": [],
            "label": "is_default",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.is_default_fleet_server",
            "type": "CompoundType",
            "tags": [],
            "label": "is_default_fleet_server",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.has_fleet_server",
            "type": "CompoundType",
            "tags": [],
            "label": "has_fleet_server",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.is_managed",
            "type": "CompoundType",
            "tags": [],
            "label": "is_managed",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.monitoring_enabled",
            "type": "Array",
            "tags": [],
            "label": "monitoring_enabled",
            "description": [],
            "signature": [
              "(\"metrics\" | \"logs\")[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.unenroll_timeout",
            "type": "number",
            "tags": [],
            "label": "unenroll_timeout",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.inactivity_timeout",
            "type": "number",
            "tags": [],
            "label": "inactivity_timeout",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.is_preconfigured",
            "type": "CompoundType",
            "tags": [],
            "label": "is_preconfigured",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.data_output_id",
            "type": "CompoundType",
            "tags": [],
            "label": "data_output_id",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.monitoring_output_id",
            "type": "CompoundType",
            "tags": [],
            "label": "monitoring_output_id",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.download_source_id",
            "type": "CompoundType",
            "tags": [],
            "label": "download_source_id",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.fleet_server_host_id",
            "type": "CompoundType",
            "tags": [],
            "label": "fleet_server_host_id",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.schema_version",
            "type": "string",
            "tags": [],
            "label": "schema_version",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewAgentPolicy.agent_features",
            "type": "Array",
            "tags": [],
            "label": "agent_features",
            "description": [],
            "signature": [
              "{ name: string; enabled: boolean; }[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.NewOutput",
        "type": "Interface",
        "tags": [],
        "label": "NewOutput",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/output.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.is_default",
            "type": "boolean",
            "tags": [],
            "label": "is_default",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.is_default_monitoring",
            "type": "boolean",
            "tags": [],
            "label": "is_default_monitoring",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.is_preconfigured",
            "type": "CompoundType",
            "tags": [],
            "label": "is_preconfigured",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"logstash\" | \"elasticsearch\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.ca_sha256",
            "type": "CompoundType",
            "tags": [],
            "label": "ca_sha256",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.ca_trusted_fingerprint",
            "type": "CompoundType",
            "tags": [],
            "label": "ca_trusted_fingerprint",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.config_yaml",
            "type": "CompoundType",
            "tags": [],
            "label": "config_yaml",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.ssl",
            "type": "CompoundType",
            "tags": [],
            "label": "ssl",
            "description": [],
            "signature": [
              "{ certificate_authorities?: string[] | undefined; certificate?: string | undefined; key?: string | undefined; } | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.proxy_id",
            "type": "CompoundType",
            "tags": [],
            "label": "proxy_id",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewOutput.shipper",
            "type": "CompoundType",
            "tags": [],
            "label": "shipper",
            "description": [],
            "signature": [
              "ShipperOutput",
              " | null | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/output.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.NewPackagePolicy",
        "type": "Interface",
        "tags": [],
        "label": "NewPackagePolicy",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.id",
            "type": "CompoundType",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.namespace",
            "type": "string",
            "tags": [],
            "label": "namespace",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.is_managed",
            "type": "CompoundType",
            "tags": [],
            "label": "is_managed",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.policy_id",
            "type": "string",
            "tags": [],
            "label": "policy_id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.package",
            "type": "Object",
            "tags": [],
            "label": "package",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyPackage",
                "text": "PackagePolicyPackage"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.inputs",
            "type": "Array",
            "tags": [],
            "label": "inputs",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicyInput",
                "text": "NewPackagePolicyInput"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.vars",
            "type": "Object",
            "tags": [],
            "label": "vars",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyConfigRecord",
                "text": "PackagePolicyConfigRecord"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicy.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [],
            "signature": [
              "{ privileges?: { cluster?: string[] | undefined; } | undefined; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.NewPackagePolicyInput",
        "type": "Interface",
        "tags": [],
        "label": "NewPackagePolicyInput",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.policy_template",
            "type": "string",
            "tags": [],
            "label": "policy_template",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.keep_enabled",
            "type": "CompoundType",
            "tags": [],
            "label": "keep_enabled",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.vars",
            "type": "Object",
            "tags": [],
            "label": "vars",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyConfigRecord",
                "text": "PackagePolicyConfigRecord"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyConfigRecord",
                "text": "PackagePolicyConfigRecord"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInput.streams",
            "type": "Array",
            "tags": [],
            "label": "streams",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.NewPackagePolicyInputStream",
                "text": "NewPackagePolicyInputStream"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.NewPackagePolicyInputStream",
        "type": "Interface",
        "tags": [],
        "label": "NewPackagePolicyInputStream",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.keep_enabled",
            "type": "CompoundType",
            "tags": [],
            "label": "keep_enabled",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.data_stream",
            "type": "Object",
            "tags": [],
            "label": "data_stream",
            "description": [],
            "signature": [
              "{ dataset: string; type: string; elasticsearch?: { privileges?: { indices?: string[] | undefined; } | undefined; index_mode?: string | undefined; source_mode?: string | undefined; } | undefined; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.release",
            "type": "CompoundType",
            "tags": [],
            "label": "release",
            "description": [],
            "signature": [
              "RegistryRelease",
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.vars",
            "type": "Object",
            "tags": [],
            "label": "vars",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyConfigRecord",
                "text": "PackagePolicyConfigRecord"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.NewPackagePolicyInputStream.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyConfigRecord",
                "text": "PackagePolicyConfigRecord"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackagePolicy",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicy",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicy",
            "text": "PackagePolicy"
          },
          " extends Omit<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicy",
            "text": "NewPackagePolicy"
          },
          ", \"inputs\">"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.inputs",
            "type": "Array",
            "tags": [],
            "label": "inputs",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyInput",
                "text": "PackagePolicyInput"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.agents",
            "type": "number",
            "tags": [],
            "label": "agents",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.revision",
            "type": "number",
            "tags": [],
            "label": "revision",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.updated_at",
            "type": "string",
            "tags": [],
            "label": "updated_at",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.updated_by",
            "type": "string",
            "tags": [],
            "label": "updated_by",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.created_at",
            "type": "string",
            "tags": [],
            "label": "created_at",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicy.created_by",
            "type": "string",
            "tags": [],
            "label": "created_by",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackagePolicyConfigRecordEntry",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyConfigRecordEntry",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyConfigRecordEntry.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyConfigRecordEntry.value",
            "type": "Any",
            "tags": [],
            "label": "value",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyConfigRecordEntry.frozen",
            "type": "CompoundType",
            "tags": [],
            "label": "frozen",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackagePolicyInput",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyInput",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicyInput",
            "text": "PackagePolicyInput"
          },
          " extends Omit<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicyInput",
            "text": "NewPackagePolicyInput"
          },
          ", \"streams\">"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyInput.streams",
            "type": "Array",
            "tags": [],
            "label": "streams",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicyInputStream",
                "text": "PackagePolicyInputStream"
              },
              "[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyInput.compiled_input",
            "type": "Any",
            "tags": [],
            "label": "compiled_input",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackagePolicyInputStream",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyInputStream",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicyInputStream",
            "text": "PackagePolicyInputStream"
          },
          " extends ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicyInputStream",
            "text": "NewPackagePolicyInputStream"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyInputStream.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyInputStream.compiled_stream",
            "type": "Any",
            "tags": [],
            "label": "compiled_stream",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackagePolicyPackage",
        "type": "Interface",
        "tags": [],
        "label": "PackagePolicyPackage",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyPackage.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyPackage.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyPackage.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackagePolicyPackage.experimental_data_stream_features",
            "type": "Array",
            "tags": [],
            "label": "experimental_data_stream_features",
            "description": [],
            "signature": [
              "ExperimentalDataStreamFeature",
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageSpecConditions",
        "type": "Interface",
        "tags": [],
        "label": "PackageSpecConditions",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecConditions.kibana",
            "type": "Object",
            "tags": [],
            "label": "kibana",
            "description": [],
            "signature": [
              "{ version: string; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecConditions.elastic",
            "type": "Object",
            "tags": [],
            "label": "elastic",
            "description": [],
            "signature": [
              "{ subscription: string; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageSpecIcon",
        "type": "Interface",
        "tags": [],
        "label": "PackageSpecIcon",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecIcon.src",
            "type": "string",
            "tags": [],
            "label": "src",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecIcon.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecIcon.size",
            "type": "string",
            "tags": [],
            "label": "size",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecIcon.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageSpecManifest",
        "type": "Interface",
        "tags": [],
        "label": "PackageSpecManifest",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.format_version",
            "type": "string",
            "tags": [],
            "label": "format_version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.license",
            "type": "string",
            "tags": [],
            "label": "license",
            "description": [],
            "signature": [
              "\"basic\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.source",
            "type": "Object",
            "tags": [],
            "label": "source",
            "description": [],
            "signature": [
              "{ license: string; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"input\" | \"integration\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.release",
            "type": "CompoundType",
            "tags": [],
            "label": "release",
            "description": [],
            "signature": [
              "\"beta\" | \"experimental\" | \"ga\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.categories",
            "type": "Array",
            "tags": [],
            "label": "categories",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageSpecCategory",
                "text": "PackageSpecCategory"
              },
              " | undefined)[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.conditions",
            "type": "Object",
            "tags": [],
            "label": "conditions",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageSpecConditions",
                "text": "PackageSpecConditions"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.icons",
            "type": "Array",
            "tags": [],
            "label": "icons",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageSpecIcon",
                "text": "PackageSpecIcon"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.screenshots",
            "type": "Array",
            "tags": [],
            "label": "screenshots",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackageSpecScreenshot",
                "text": "PackageSpecScreenshot"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.policy_templates",
            "type": "Array",
            "tags": [],
            "label": "policy_templates",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryPolicyTemplate",
                "text": "RegistryPolicyTemplate"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.vars",
            "type": "Array",
            "tags": [],
            "label": "vars",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryVarsEntry",
                "text": "RegistryVarsEntry"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.owner",
            "type": "Object",
            "tags": [],
            "label": "owner",
            "description": [],
            "signature": [
              "{ github: string; }"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecManifest.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [],
            "signature": [
              "Pick<",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryElasticsearch",
                "text": "RegistryElasticsearch"
              },
              ", \"index_template.settings\" | \"index_template.mappings\" | \"index_template.data_stream\"> | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageSpecScreenshot",
        "type": "Interface",
        "tags": [],
        "label": "PackageSpecScreenshot",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecScreenshot.src",
            "type": "string",
            "tags": [],
            "label": "src",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecScreenshot.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecScreenshot.size",
            "type": "string",
            "tags": [],
            "label": "size",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecScreenshot.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PackageSpecScreenshot.path",
            "type": "string",
            "tags": [],
            "label": "path",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PostFleetSetupResponse",
        "type": "Interface",
        "tags": [],
        "label": "PostFleetSetupResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/fleet_setup.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PostFleetSetupResponse.isInitialized",
            "type": "boolean",
            "tags": [],
            "label": "isInitialized",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/fleet_setup.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PostFleetSetupResponse.nonFatalErrors",
            "type": "Array",
            "tags": [],
            "label": "nonFatalErrors",
            "description": [],
            "signature": [
              "{ name: string; message: string; }[]"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/fleet_setup.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryDataStream",
        "type": "Interface",
        "tags": [],
        "label": "RegistryDataStream",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[key: string]: any",
            "description": [],
            "signature": [
              "[key: string]:  any"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.type",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.type]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.ilm_policy",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.ilm_policy]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.hidden",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryDataStreamKeys.hidden]",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.dataset",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.dataset]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.title",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.title]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.release",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryDataStreamKeys.release]",
            "description": [],
            "signature": [
              "\"beta\" | \"experimental\" | \"ga\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.streams",
            "type": "Array",
            "tags": [],
            "label": "[RegistryDataStreamKeys.streams]",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryStream",
                "text": "RegistryStream"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.package",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.package]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.path",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.path]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.ingest_pipeline",
            "type": "string",
            "tags": [],
            "label": "[RegistryDataStreamKeys.ingest_pipeline]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "[RegistryDataStreamKeys.elasticsearch]",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryElasticsearch",
                "text": "RegistryElasticsearch"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStream.RegistryDataStreamKeys.dataset_is_prefix",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryDataStreamKeys.dataset_is_prefix]",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryDataStreamPrivileges",
        "type": "Interface",
        "tags": [],
        "label": "RegistryDataStreamPrivileges",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStreamPrivileges.cluster",
            "type": "Array",
            "tags": [],
            "label": "cluster",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryDataStreamPrivileges.indices",
            "type": "Array",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryElasticsearch",
        "type": "Interface",
        "tags": [],
        "label": "RegistryElasticsearch",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.privileges",
            "type": "Object",
            "tags": [],
            "label": "privileges",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryDataStreamPrivileges",
                "text": "RegistryDataStreamPrivileges"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.index_template.settings",
            "type": "CompoundType",
            "tags": [],
            "label": "'index_template.settings'",
            "description": [],
            "signature": [
              "IndicesIndexSettings",
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.index_template.mappings",
            "type": "Object",
            "tags": [],
            "label": "'index_template.mappings'",
            "description": [],
            "signature": [
              "MappingTypeMapping",
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.index_template.data_stream",
            "type": "Object",
            "tags": [],
            "label": "'index_template.data_stream'",
            "description": [],
            "signature": [
              "RegistryDataStreamProperties",
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.ingest_pipeline.name",
            "type": "string",
            "tags": [],
            "label": "'ingest_pipeline.name'",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.source_mode",
            "type": "CompoundType",
            "tags": [],
            "label": "source_mode",
            "description": [],
            "signature": [
              "\"default\" | \"synthetic\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryElasticsearch.index_mode",
            "type": "string",
            "tags": [],
            "label": "index_mode",
            "description": [],
            "signature": [
              "\"time_series\" | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryImage",
        "type": "Interface",
        "tags": [],
        "label": "RegistryImage",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryImage",
            "text": "RegistryImage"
          },
          " extends ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackageSpecIcon",
            "text": "PackageSpecIcon"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryImage.path",
            "type": "string",
            "tags": [],
            "label": "path",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryInput",
        "type": "Interface",
        "tags": [],
        "label": "RegistryInput",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.type",
            "type": "string",
            "tags": [],
            "label": "[RegistryInputKeys.type]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.title",
            "type": "string",
            "tags": [],
            "label": "[RegistryInputKeys.title]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.description",
            "type": "string",
            "tags": [],
            "label": "[RegistryInputKeys.description]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.template_path",
            "type": "string",
            "tags": [],
            "label": "[RegistryInputKeys.template_path]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.condition",
            "type": "string",
            "tags": [],
            "label": "[RegistryInputKeys.condition]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.input_group",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryInputKeys.input_group]",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryInputGroup",
                "text": "RegistryInputGroup"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryInput.RegistryInputKeys.vars",
            "type": "Array",
            "tags": [],
            "label": "[RegistryInputKeys.vars]",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryVarsEntry",
                "text": "RegistryVarsEntry"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryStream",
        "type": "Interface",
        "tags": [],
        "label": "RegistryStream",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryStream.RegistryStreamKeys.input",
            "type": "string",
            "tags": [],
            "label": "[RegistryStreamKeys.input]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryStream.RegistryStreamKeys.title",
            "type": "string",
            "tags": [],
            "label": "[RegistryStreamKeys.title]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryStream.RegistryStreamKeys.description",
            "type": "string",
            "tags": [],
            "label": "[RegistryStreamKeys.description]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryStream.RegistryStreamKeys.enabled",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryStreamKeys.enabled]",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryStream.RegistryStreamKeys.vars",
            "type": "Array",
            "tags": [],
            "label": "[RegistryStreamKeys.vars]",
            "description": [],
            "signature": [
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.RegistryVarsEntry",
                "text": "RegistryVarsEntry"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryStream.RegistryStreamKeys.template_path",
            "type": "string",
            "tags": [],
            "label": "[RegistryStreamKeys.template_path]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryVarsEntry",
        "type": "Interface",
        "tags": [],
        "label": "RegistryVarsEntry",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.name",
            "type": "string",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.name]",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.title",
            "type": "string",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.title]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.description",
            "type": "string",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.description]",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.type",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.type]",
            "description": [],
            "signature": [
              "\"string\" | \"text\" | \"yaml\" | \"textarea\" | \"password\" | \"integer\" | \"bool\""
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.required",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.required]",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.show_user",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.show_user]",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.multi",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.multi]",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.default",
            "type": "CompoundType",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.default]",
            "description": [],
            "signature": [
              "string | boolean | string[] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.RegistryVarsEntry.RegistryVarsEntryKeys.os",
            "type": "Object",
            "tags": [],
            "label": "[RegistryVarsEntryKeys.os]",
            "description": [],
            "signature": [
              "{ [key: string]: { default: string | string[]; }; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.UpdatePackagePolicy",
        "type": "Interface",
        "tags": [],
        "label": "UpdatePackagePolicy",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpdatePackagePolicy",
            "text": "UpdatePackagePolicy"
          },
          " extends ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicy",
            "text": "NewPackagePolicy"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpdatePackagePolicy.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.UpgradePackagePolicyBaseResponse",
        "type": "Interface",
        "tags": [],
        "label": "UpgradePackagePolicyBaseResponse",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyBaseResponse.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyBaseResponse.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyBaseResponse.body",
            "type": "Object",
            "tags": [],
            "label": "body",
            "description": [],
            "signature": [
              "{ message: string; } | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.UpgradePackagePolicyDryRunResponseItem",
        "type": "Interface",
        "tags": [],
        "label": "UpgradePackagePolicyDryRunResponseItem",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpgradePackagePolicyDryRunResponseItem",
            "text": "UpgradePackagePolicyDryRunResponseItem"
          },
          " extends ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpgradePackagePolicyBaseResponse",
            "text": "UpgradePackagePolicyBaseResponse"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyDryRunResponseItem.hasErrors",
            "type": "boolean",
            "tags": [],
            "label": "hasErrors",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyDryRunResponseItem.diff",
            "type": "Object",
            "tags": [],
            "label": "diff",
            "description": [],
            "signature": [
              "[",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.PackagePolicy",
                "text": "PackagePolicy"
              },
              ", ",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.DryRunPackagePolicy",
                "text": "DryRunPackagePolicy"
              },
              "] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyDryRunResponseItem.agent_diff",
            "type": "Object",
            "tags": [],
            "label": "agent_diff",
            "description": [],
            "signature": [
              "[",
              {
                "pluginId": "fleet",
                "scope": "common",
                "docId": "kibFleetPluginApi",
                "section": "def-common.FullAgentPolicyInput",
                "text": "FullAgentPolicyInput"
              },
              "[]] | undefined"
            ],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.UpgradePackagePolicyResponseItem",
        "type": "Interface",
        "tags": [],
        "label": "UpgradePackagePolicyResponseItem",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpgradePackagePolicyResponseItem",
            "text": "UpgradePackagePolicyResponseItem"
          },
          " extends ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpgradePackagePolicyBaseResponse",
            "text": "UpgradePackagePolicyBaseResponse"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyResponseItem.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.UpgradePackagePolicyResponseItem.success",
            "type": "boolean",
            "tags": [],
            "label": "success",
            "description": [],
            "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "fleet",
        "id": "def-common.ElasticsearchAssetType",
        "type": "Enum",
        "tags": [],
        "label": "ElasticsearchAssetType",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.KibanaAssetType",
        "type": "Enum",
        "tags": [],
        "label": "KibanaAssetType",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.KibanaSavedObjectType",
        "type": "Enum",
        "tags": [],
        "label": "KibanaSavedObjectType",
        "description": [],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_ACTIONS_INDEX",
        "type": "string",
        "tags": [],
        "label": "AGENT_ACTIONS_INDEX",
        "description": [],
        "signature": [
          "\".fleet-actions\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_ACTIONS_RESULTS_INDEX",
        "type": "string",
        "tags": [],
        "label": "AGENT_ACTIONS_RESULTS_INDEX",
        "description": [],
        "signature": [
          "\".fleet-actions-results\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_POLICY_INDEX",
        "type": "string",
        "tags": [],
        "label": "AGENT_POLICY_INDEX",
        "description": [],
        "signature": [
          "\".fleet-policies\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_POLICY_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "AGENT_POLICY_SAVED_OBJECT_TYPE",
        "description": [],
        "signature": [
          "\"ingest-agent-policies\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_UPDATE_LAST_CHECKIN_INTERVAL_MS",
        "type": "number",
        "tags": [],
        "label": "AGENT_UPDATE_LAST_CHECKIN_INTERVAL_MS",
        "description": [],
        "signature": [
          "30000"
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENTS_INDEX",
        "type": "string",
        "tags": [],
        "label": "AGENTS_INDEX",
        "description": [],
        "signature": [
          "\".fleet-agents\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENTS_PREFIX",
        "type": "string",
        "tags": [],
        "label": "AGENTS_PREFIX",
        "description": [],
        "signature": [
          "\"fleet-agents\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AgentStatus",
        "type": "Type",
        "tags": [],
        "label": "AgentStatus",
        "description": [],
        "signature": [
          "\"error\" | \"offline\" | \"online\" | \"inactive\" | \"enrolling\" | \"unenrolling\" | \"unenrolled\" | \"updating\" | \"degraded\""
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ArchivePackage",
        "type": "Type",
        "tags": [],
        "label": "ArchivePackage",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackageSpecManifest",
            "text": "PackageSpecManifest"
          },
          " & Pick<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryPackage",
            "text": "RegistryPackage"
          },
          ", \"elasticsearch\" | \"internal\" | \"assets\" | \"readme\" | \"data_streams\">"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AssetReference",
        "type": "Type",
        "tags": [],
        "label": "AssetReference",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.EsAssetReference",
            "text": "EsAssetReference"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetReference",
            "text": "KibanaAssetReference"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ASSETS_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "ASSETS_SAVED_OBJECT_TYPE",
        "description": [],
        "signature": [
          "\"epm-packages-assets\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AssetsGroupedByServiceByType",
        "type": "Type",
        "tags": [],
        "label": "AssetsGroupedByServiceByType",
        "description": [],
        "signature": [
          "Record<\"kibana\", ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetTypeToParts",
            "text": "KibanaAssetTypeToParts"
          },
          "> & Record<\"elasticsearch\", ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetTypeToParts",
            "text": "ElasticsearchAssetTypeToParts"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.BulkGetAgentPoliciesResponse",
        "type": "Type",
        "tags": [],
        "label": "BulkGetAgentPoliciesResponse",
        "description": [],
        "signature": [
          "BulkGetResult",
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.GetAgentPoliciesResponseItem",
            "text": "GetAgentPoliciesResponseItem"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.BulkGetPackagePoliciesResponse",
        "type": "Type",
        "tags": [],
        "label": "BulkGetPackagePoliciesResponse",
        "description": [],
        "signature": [
          "BulkGetResult",
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicy",
            "text": "PackagePolicy"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.DocAssetType",
        "type": "Type",
        "tags": [],
        "label": "DocAssetType",
        "description": [],
        "signature": [
          "\"license\" | \"notice\" | \"doc\""
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.DryRunPackagePolicy",
        "type": "Type",
        "tags": [],
        "label": "DryRunPackagePolicy",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewPackagePolicy",
            "text": "NewPackagePolicy"
          },
          " & { errors?: { key: string | undefined; message: string; }[] | undefined; missingVars?: string[] | undefined; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ElasticsearchAssetParts",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchAssetParts",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.AssetParts",
            "text": "AssetParts"
          },
          " & { service: \"elasticsearch\"; type: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetType",
            "text": "ElasticsearchAssetType"
          },
          "; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ElasticsearchAssetTypeToParts",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchAssetTypeToParts",
        "description": [],
        "signature": [
          "{ component_template: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; ingest_pipeline: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; index_template: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; ilm_policy: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; transform: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; data_stream_ilm_policy: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; ml_model: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetParts",
            "text": "ElasticsearchAssetParts"
          },
          "[]; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.EsAssetReference",
        "type": "Type",
        "tags": [],
        "label": "EsAssetReference",
        "description": [],
        "signature": [
          "Pick<",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObjectReference",
            "text": "SavedObjectReference"
          },
          ", \"id\"> & { type: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ElasticsearchAssetType",
            "text": "ElasticsearchAssetType"
          },
          "; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_APM_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_APM_PACKAGE",
        "description": [],
        "signature": [
          "\"apm\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_CLOUD_SECURITY_POSTURE_KSPM_POLICY_TEMPLATE",
        "type": "string",
        "tags": [],
        "label": "FLEET_CLOUD_SECURITY_POSTURE_KSPM_POLICY_TEMPLATE",
        "description": [],
        "signature": [
          "\"kspm\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_CLOUD_SECURITY_POSTURE_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_CLOUD_SECURITY_POSTURE_PACKAGE",
        "description": [],
        "signature": [
          "\"cloud_security_posture\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_ELASTIC_AGENT_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_ELASTIC_AGENT_PACKAGE",
        "description": [],
        "signature": [
          "\"elastic_agent\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_ENDPOINT_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_ENDPOINT_PACKAGE",
        "description": [],
        "signature": [
          "\"endpoint\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_KUBERNETES_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_KUBERNETES_PACKAGE",
        "description": [],
        "signature": [
          "\"kubernetes\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_SERVER_ARTIFACTS_INDEX",
        "type": "string",
        "tags": [],
        "label": "FLEET_SERVER_ARTIFACTS_INDEX",
        "description": [],
        "signature": [
          "\".fleet-artifacts\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_SERVER_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_SERVER_PACKAGE",
        "description": [],
        "signature": [
          "\"fleet_server\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_SERVER_SERVERS_INDEX",
        "type": "string",
        "tags": [],
        "label": "FLEET_SERVER_SERVERS_INDEX",
        "description": [],
        "signature": [
          "\".fleet-servers\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_SYNTHETICS_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_SYNTHETICS_PACKAGE",
        "description": [],
        "signature": [
          "\"synthetics\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FLEET_SYSTEM_PACKAGE",
        "type": "string",
        "tags": [],
        "label": "FLEET_SYSTEM_PACKAGE",
        "description": [],
        "signature": [
          "\"system\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FleetServerAgentComponentStatus",
        "type": "Type",
        "tags": [],
        "label": "FleetServerAgentComponentStatus",
        "description": [],
        "signature": [
          "\"failed\" | \"degraded\" | \"starting\" | \"configuring\" | \"healthy\" | \"stopping\" | \"stopped\""
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FullAgentPolicyOutput",
        "type": "Type",
        "tags": [],
        "label": "FullAgentPolicyOutput",
        "description": [],
        "signature": [
          "Pick<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Output",
            "text": "Output"
          },
          ", \"type\" | \"hosts\" | \"ca_sha256\"> & { [key: string]: any; proxy_url?: string | undefined; proxy_headers?: any; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetAgentPoliciesResponse",
        "type": "Type",
        "tags": [],
        "label": "GetAgentPoliciesResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ListResult",
            "text": "ListResult"
          },
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.GetAgentPoliciesResponseItem",
            "text": "GetAgentPoliciesResponseItem"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetAgentPoliciesResponseItem",
        "type": "Type",
        "tags": [],
        "label": "GetAgentPoliciesResponseItem",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.AgentPolicy",
            "text": "AgentPolicy"
          },
          " & { agents?: number | undefined; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.GetPackagePoliciesResponse",
        "type": "Type",
        "tags": [],
        "label": "GetPackagePoliciesResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ListResult",
            "text": "ListResult"
          },
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicy",
            "text": "PackagePolicy"
          },
          ">"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.Installable",
        "type": "Type",
        "tags": [],
        "label": "Installable",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.InstallStatusExcluded",
            "text": "InstallStatusExcluded"
          },
          "<T> | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.InstalledRegistry",
            "text": "InstalledRegistry"
          },
          "<T> | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installing",
            "text": "Installing"
          },
          "<T> | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NotInstalled",
            "text": "NotInstalled"
          },
          "<T> | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.InstallFailed",
            "text": "InstallFailed"
          },
          "<T>"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.InstallablePackage",
        "type": "Type",
        "tags": [],
        "label": "InstallablePackage",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryPackage",
            "text": "RegistryPackage"
          },
          " | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ArchivePackage",
            "text": "ArchivePackage"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.InstalledRegistry",
        "type": "Type",
        "tags": [],
        "label": "InstalledRegistry",
        "description": [],
        "signature": [
          "T & { status: \"installed\"; savedObject: ",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObject",
            "text": "SavedObject"
          },
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installation",
            "text": "Installation"
          },
          ">; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.InstallFailed",
        "type": "Type",
        "tags": [],
        "label": "InstallFailed",
        "description": [],
        "signature": [
          "T & { status: \"install_failed\"; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.Installing",
        "type": "Type",
        "tags": [],
        "label": "Installing",
        "description": [],
        "signature": [
          "T & { status: \"installing\"; savedObject: ",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObject",
            "text": "SavedObject"
          },
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installation",
            "text": "Installation"
          },
          ">; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.InstallStatusExcluded",
        "type": "Type",
        "tags": [],
        "label": "InstallStatusExcluded",
        "description": [],
        "signature": [
          "T & { status: undefined; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.INTEGRATIONS_PLUGIN_ID",
        "type": "string",
        "tags": [],
        "label": "INTEGRATIONS_PLUGIN_ID",
        "description": [],
        "signature": [
          "\"integrations\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/plugin.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.KibanaAssetParts",
        "type": "Type",
        "tags": [],
        "label": "KibanaAssetParts",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.AssetParts",
            "text": "AssetParts"
          },
          " & { service: \"kibana\"; type: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetType",
            "text": "KibanaAssetType"
          },
          "; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.KibanaAssetReference",
        "type": "Type",
        "tags": [],
        "label": "KibanaAssetReference",
        "description": [],
        "signature": [
          "Pick<",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObjectReference",
            "text": "SavedObjectReference"
          },
          ", \"id\"> & { type: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaSavedObjectType",
            "text": "KibanaSavedObjectType"
          },
          "; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.KibanaAssetTypeToParts",
        "type": "Type",
        "tags": [],
        "label": "KibanaAssetTypeToParts",
        "description": [],
        "signature": [
          "{ dashboard: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; visualization: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; search: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; index_pattern: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; map: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; lens: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; security_rule: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; csp_rule_template: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; ml_module: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; tag: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; osquery_pack_asset: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; osquery_saved_query: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.KibanaAssetParts",
            "text": "KibanaAssetParts"
          },
          "[]; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.NotInstalled",
        "type": "Type",
        "tags": [],
        "label": "NotInstalled",
        "description": [],
        "signature": [
          "T & { status: \"not_installed\"; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.Output",
        "type": "Type",
        "tags": [],
        "label": "Output",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.NewOutput",
            "text": "NewOutput"
          },
          " & { id: string; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/output.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.OUTPUT_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "OUTPUT_SAVED_OBJECT_TYPE",
        "description": [],
        "signature": [
          "\"ingest-outputs\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/output.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PACKAGE_POLICY_API_ROOT",
        "type": "string",
        "tags": [],
        "label": "PACKAGE_POLICY_API_ROOT",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PACKAGE_POLICY_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "PACKAGE_POLICY_SAVED_OBJECT_TYPE",
        "description": [],
        "signature": [
          "\"ingest-package-policies\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageAssetReference",
        "type": "Type",
        "tags": [],
        "label": "PackageAssetReference",
        "description": [],
        "signature": [
          "Pick<",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObjectReference",
            "text": "SavedObjectReference"
          },
          ", \"id\"> & { type: \"epm-packages-assets\"; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageInfo",
        "type": "Type",
        "tags": [],
        "label": "PackageInfo",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installable",
            "text": "Installable"
          },
          "<Merge<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryPackage",
            "text": "RegistryPackage"
          },
          ", ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.EpmPackageAdditions",
            "text": "EpmPackageAdditions"
          },
          ">> | ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installable",
            "text": "Installable"
          },
          "<Merge<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.ArchivePackage",
            "text": "ArchivePackage"
          },
          ", ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.EpmPackageAdditions",
            "text": "EpmPackageAdditions"
          },
          ">>"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageList",
        "type": "Type",
        "tags": [],
        "label": "PackageList",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackageListItem",
            "text": "PackageListItem"
          },
          "[]"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageListItem",
        "type": "Type",
        "tags": [],
        "label": "PackageListItem",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.Installable",
            "text": "Installable"
          },
          "<",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistrySearchResult",
            "text": "RegistrySearchResult"
          },
          "> & { integration?: string | undefined; id: string; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackagePolicyConfigRecord",
        "type": "Type",
        "tags": [],
        "label": "PackagePolicyConfigRecord",
        "description": [],
        "signature": [
          "{ [x: string]: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicyConfigRecordEntry",
            "text": "PackagePolicyConfigRecordEntry"
          },
          "; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PACKAGES_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "PACKAGES_SAVED_OBJECT_TYPE",
        "description": [],
        "signature": [
          "\"epm-packages\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PackageSpecCategory",
        "type": "Type",
        "tags": [],
        "label": "PackageSpecCategory",
        "description": [],
        "signature": [
          "\"custom\" | \"aws\" | \"azure\" | \"cloud\" | \"config_management\" | \"containers\" | \"crm\" | \"datastore\" | \"elastic_stack\" | \"google_cloud\" | \"infrastructure\" | \"kubernetes\" | \"languages\" | \"message_queue\" | \"monitoring\" | \"network\" | \"notification\" | \"os_system\" | \"productivity\" | \"security\" | \"support\" | \"threat_intel\" | \"ticketing\" | \"version_control\" | \"web\""
        ],
        "path": "x-pack/plugins/fleet/common/types/models/package_spec.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PLUGIN_ID",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_ID",
        "description": [],
        "signature": [
          "\"fleet\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/plugin.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PostDeletePackagePoliciesResponse",
        "type": "Type",
        "tags": [],
        "label": "PostDeletePackagePoliciesResponse",
        "description": [],
        "signature": [
          "{ id: string; name?: string | undefined; success: boolean; package?: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackagePolicyPackage",
            "text": "PackagePolicyPackage"
          },
          " | undefined; policy_id?: string | undefined; statusCode?: number | undefined; body?: { message: string; } | undefined; }[]"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PRECONFIGURATION_DELETION_RECORD_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "PRECONFIGURATION_DELETION_RECORD_SAVED_OBJECT_TYPE",
        "description": [],
        "signature": [
          "\"fleet-preconfiguration-deletion-record\""
        ],
        "path": "x-pack/plugins/fleet/common/constants/preconfiguration.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryInputGroup",
        "type": "Type",
        "tags": [],
        "label": "RegistryInputGroup",
        "description": [],
        "signature": [
          "\"metrics\" | \"logs\""
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryPackage",
        "type": "Type",
        "tags": [],
        "label": "RegistryPackage",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackageSpecManifest",
            "text": "PackageSpecManifest"
          },
          " & Partial<RegistryOverridesToOptional> & RegistryAdditionalProperties & RegistryOverridePropertyValue"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistryPolicyTemplate",
        "type": "Type",
        "tags": [],
        "label": "RegistryPolicyTemplate",
        "description": [],
        "signature": [
          "RegistryPolicyIntegrationTemplate",
          " | ",
          "RegistryPolicyInputOnlyTemplate"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.RegistrySearchResult",
        "type": "Type",
        "tags": [],
        "label": "RegistrySearchResult",
        "description": [],
        "signature": [
          "{ name: string; description: string; type?: \"input\" | \"integration\" | undefined; path: string; download: string; title: string; icons?: (",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackageSpecIcon",
            "text": "PackageSpecIcon"
          },
          "[] & ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryImage",
            "text": "RegistryImage"
          },
          "[]) | undefined; categories?: (",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.PackageSpecCategory",
            "text": "PackageSpecCategory"
          },
          " | undefined)[] | undefined; version: string; internal?: boolean | undefined; release?: \"beta\" | \"experimental\" | \"ga\" | undefined; policy_templates?: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryPolicyTemplate",
            "text": "RegistryPolicyTemplate"
          },
          "[] | undefined; data_streams?: ",
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.RegistryDataStream",
            "text": "RegistryDataStream"
          },
          "[] | undefined; }"
        ],
        "path": "x-pack/plugins/fleet/common/types/models/epm.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.SETUP_API_ROUTE",
        "type": "string",
        "tags": [],
        "label": "SETUP_API_ROUTE",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.SO_SEARCH_LIMIT",
        "type": "number",
        "tags": [],
        "label": "SO_SEARCH_LIMIT",
        "description": [],
        "signature": [
          "10000"
        ],
        "path": "x-pack/plugins/fleet/common/constants/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.UpdatePackagePolicyResponse",
        "type": "Type",
        "tags": [],
        "label": "UpdatePackagePolicyResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.CreatePackagePolicyResponse",
            "text": "CreatePackagePolicyResponse"
          }
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.UpgradePackagePolicyResponse",
        "type": "Type",
        "tags": [],
        "label": "UpgradePackagePolicyResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "fleet",
            "scope": "common",
            "docId": "kibFleetPluginApi",
            "section": "def-common.UpgradePackagePolicyResponseItem",
            "text": "UpgradePackagePolicyResponseItem"
          },
          "[]"
        ],
        "path": "x-pack/plugins/fleet/common/types/rest_spec/package_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_API_ROUTES",
        "type": "Object",
        "tags": [],
        "label": "AGENT_API_ROUTES",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.LIST_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIST_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.INFO_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INFO_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.UPDATE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "UPDATE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.BULK_UPDATE_AGENT_TAGS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_UPDATE_AGENT_TAGS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.DELETE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "DELETE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.CHECKIN_PATTERN",
            "type": "string",
            "tags": [],
            "label": "CHECKIN_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.ACKS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "ACKS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.ACTIONS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "ACTIONS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.CANCEL_ACTIONS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "CANCEL_ACTIONS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.UNENROLL_PATTERN",
            "type": "string",
            "tags": [],
            "label": "UNENROLL_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.BULK_UNENROLL_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_UNENROLL_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.REASSIGN_PATTERN",
            "type": "string",
            "tags": [],
            "label": "REASSIGN_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.BULK_REASSIGN_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_REASSIGN_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.REQUEST_DIAGNOSTICS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "REQUEST_DIAGNOSTICS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.BULK_REQUEST_DIAGNOSTICS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_REQUEST_DIAGNOSTICS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.AVAILABLE_VERSIONS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "AVAILABLE_VERSIONS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.STATUS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "STATUS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.DATA_PATTERN",
            "type": "string",
            "tags": [],
            "label": "DATA_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.STATUS_PATTERN_DEPRECATED",
            "type": "string",
            "tags": [],
            "label": "STATUS_PATTERN_DEPRECATED",
            "description": [
              "// deprecated since 8.0"
            ],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.UPGRADE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "UPGRADE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.BULK_UPGRADE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_UPGRADE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.ACTION_STATUS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "ACTION_STATUS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.LIST_TAGS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIST_TAGS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.LIST_UPLOADS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIST_UPLOADS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_API_ROUTES.GET_UPLOAD_FILE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "GET_UPLOAD_FILE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENT_POLICY_API_ROUTES",
        "type": "Object",
        "tags": [],
        "label": "AGENT_POLICY_API_ROUTES",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.LIST_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIST_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.BULK_GET_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_GET_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.INFO_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INFO_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.CREATE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "CREATE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.UPDATE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "UPDATE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.COPY_PATTERN",
            "type": "string",
            "tags": [],
            "label": "COPY_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.DELETE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "DELETE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.FULL_INFO_PATTERN",
            "type": "string",
            "tags": [],
            "label": "FULL_INFO_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENT_POLICY_API_ROUTES.FULL_INFO_DOWNLOAD_PATTERN",
            "type": "string",
            "tags": [],
            "label": "FULL_INFO_DOWNLOAD_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.agentPolicyRouteService",
        "type": "Object",
        "tags": [],
        "label": "agentPolicyRouteService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getListPath",
            "type": "Function",
            "tags": [],
            "label": "getListPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getBulkGetPath",
            "type": "Function",
            "tags": [],
            "label": "getBulkGetPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getInfoPath",
            "type": "Function",
            "tags": [],
            "label": "getInfoPath",
            "description": [],
            "signature": [
              "(agentPolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentPolicyRouteService.getInfoPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getCreatePath",
            "type": "Function",
            "tags": [],
            "label": "getCreatePath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getUpdatePath",
            "type": "Function",
            "tags": [],
            "label": "getUpdatePath",
            "description": [],
            "signature": [
              "(agentPolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentPolicyRouteService.getUpdatePath.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getCopyPath",
            "type": "Function",
            "tags": [],
            "label": "getCopyPath",
            "description": [],
            "signature": [
              "(agentPolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentPolicyRouteService.getCopyPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getDeletePath",
            "type": "Function",
            "tags": [],
            "label": "getDeletePath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getInfoFullPath",
            "type": "Function",
            "tags": [],
            "label": "getInfoFullPath",
            "description": [],
            "signature": [
              "(agentPolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentPolicyRouteService.getInfoFullPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getInfoFullDownloadPath",
            "type": "Function",
            "tags": [],
            "label": "getInfoFullDownloadPath",
            "description": [],
            "signature": [
              "(agentPolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentPolicyRouteService.getInfoFullDownloadPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getK8sInfoPath",
            "type": "Function",
            "tags": [],
            "label": "getK8sInfoPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getK8sFullDownloadPath",
            "type": "Function",
            "tags": [],
            "label": "getK8sFullDownloadPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getResetOnePreconfiguredAgentPolicyPath",
            "type": "Function",
            "tags": [],
            "label": "getResetOnePreconfiguredAgentPolicyPath",
            "description": [],
            "signature": [
              "(agentPolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentPolicyRouteService.getResetOnePreconfiguredAgentPolicyPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentPolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentPolicyRouteService.getResetAllPreconfiguredAgentPolicyPath",
            "type": "Function",
            "tags": [],
            "label": "getResetAllPreconfiguredAgentPolicyPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.agentPolicyStatuses",
        "type": "Object",
        "tags": [],
        "label": "agentPolicyStatuses",
        "description": [],
        "signature": [
          "{ readonly Active: \"active\"; readonly Inactive: \"inactive\"; }"
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent_policy.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.agentRouteService",
        "type": "Object",
        "tags": [],
        "label": "agentRouteService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getInfoPath",
            "type": "Function",
            "tags": [],
            "label": "getInfoPath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getInfoPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getUpdatePath",
            "type": "Function",
            "tags": [],
            "label": "getUpdatePath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getUpdatePath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getBulkUpdateTagsPath",
            "type": "Function",
            "tags": [],
            "label": "getBulkUpdateTagsPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getUnenrollPath",
            "type": "Function",
            "tags": [],
            "label": "getUnenrollPath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getUnenrollPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getBulkUnenrollPath",
            "type": "Function",
            "tags": [],
            "label": "getBulkUnenrollPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getReassignPath",
            "type": "Function",
            "tags": [],
            "label": "getReassignPath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getReassignPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getBulkReassignPath",
            "type": "Function",
            "tags": [],
            "label": "getBulkReassignPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getUpgradePath",
            "type": "Function",
            "tags": [],
            "label": "getUpgradePath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getUpgradePath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getBulkUpgradePath",
            "type": "Function",
            "tags": [],
            "label": "getBulkUpgradePath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getActionStatusPath",
            "type": "Function",
            "tags": [],
            "label": "getActionStatusPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getCancelActionPath",
            "type": "Function",
            "tags": [],
            "label": "getCancelActionPath",
            "description": [],
            "signature": [
              "(actionId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getCancelActionPath.$1",
                "type": "string",
                "tags": [],
                "label": "actionId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getListPath",
            "type": "Function",
            "tags": [],
            "label": "getListPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getStatusPath",
            "type": "Function",
            "tags": [],
            "label": "getStatusPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getIncomingDataPath",
            "type": "Function",
            "tags": [],
            "label": "getIncomingDataPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getCreateActionPath",
            "type": "Function",
            "tags": [],
            "label": "getCreateActionPath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getCreateActionPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getListTagsPath",
            "type": "Function",
            "tags": [],
            "label": "getListTagsPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getAvailableVersionsPath",
            "type": "Function",
            "tags": [],
            "label": "getAvailableVersionsPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getRequestDiagnosticsPath",
            "type": "Function",
            "tags": [],
            "label": "getRequestDiagnosticsPath",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getRequestDiagnosticsPath.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getBulkRequestDiagnosticsPath",
            "type": "Function",
            "tags": [],
            "label": "getBulkRequestDiagnosticsPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getListAgentUploads",
            "type": "Function",
            "tags": [],
            "label": "getListAgentUploads",
            "description": [],
            "signature": [
              "(agentId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getListAgentUploads.$1",
                "type": "string",
                "tags": [],
                "label": "agentId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.agentRouteService.getAgentFileDownloadLink",
            "type": "Function",
            "tags": [],
            "label": "getAgentFileDownloadLink",
            "description": [],
            "signature": [
              "(fileId: string, fileName: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getAgentFileDownloadLink.$1",
                "type": "string",
                "tags": [],
                "label": "fileId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-common.agentRouteService.getAgentFileDownloadLink.$2",
                "type": "string",
                "tags": [],
                "label": "fileName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.AGENTS_SETUP_API_ROUTES",
        "type": "Object",
        "tags": [],
        "label": "AGENTS_SETUP_API_ROUTES",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENTS_SETUP_API_ROUTES.INFO_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INFO_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.AGENTS_SETUP_API_ROUTES.CREATE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "CREATE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.appRoutesService",
        "type": "Object",
        "tags": [],
        "label": "appRoutesService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.appRoutesService.getCheckPermissionsPath",
            "type": "Function",
            "tags": [],
            "label": "getCheckPermissionsPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.appRoutesService.getRegenerateServiceTokenPath",
            "type": "Function",
            "tags": [],
            "label": "getRegenerateServiceTokenPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.appRoutesService.postHealthCheckPath",
            "type": "Function",
            "tags": [],
            "label": "postHealthCheckPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.ENDPOINT_PRIVILEGES",
        "type": "Object",
        "tags": [],
        "label": "ENDPOINT_PRIVILEGES",
        "description": [
          "\ndefines endpoint package privileges\nthe key is the name of the packagePrivilege (ie. 'readSecuritySolution')\nthe value object is for mapping kibana privileges and capabilities\nsee x-pack/plugins/fleet/server/services/security/security.ts for example of how object values are used"
        ],
        "signature": [
          "{ [x: string]: PrivilegeMapObject; }"
        ],
        "path": "x-pack/plugins/fleet/common/constants/authz.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.EPM_API_ROUTES",
        "type": "Object",
        "tags": [],
        "label": "EPM_API_ROUTES",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.BULK_INSTALL_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_INSTALL_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.LIST_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIST_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.LIMITED_LIST_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIMITED_LIST_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.INFO_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INFO_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.INSTALL_FROM_REGISTRY_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INSTALL_FROM_REGISTRY_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.INSTALL_BY_UPLOAD_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INSTALL_BY_UPLOAD_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.DELETE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "DELETE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.FILEPATH_PATTERN",
            "type": "string",
            "tags": [],
            "label": "FILEPATH_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.CATEGORIES_PATTERN",
            "type": "string",
            "tags": [],
            "label": "CATEGORIES_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.STATS_PATTERN",
            "type": "string",
            "tags": [],
            "label": "STATS_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.INFO_PATTERN_DEPRECATED",
            "type": "string",
            "tags": [],
            "label": "INFO_PATTERN_DEPRECATED",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.INSTALL_FROM_REGISTRY_PATTERN_DEPRECATED",
            "type": "string",
            "tags": [],
            "label": "INSTALL_FROM_REGISTRY_PATTERN_DEPRECATED",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.EPM_API_ROUTES.DELETE_PATTERN_DEPRECATED",
            "type": "string",
            "tags": [],
            "label": "DELETE_PATTERN_DEPRECATED",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.epmRouteService",
        "type": "Object",
        "tags": [],
        "label": "epmRouteService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getCategoriesPath",
            "type": "Function",
            "tags": [],
            "label": "getCategoriesPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getListPath",
            "type": "Function",
            "tags": [],
            "label": "getListPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getListLimitedPath",
            "type": "Function",
            "tags": [],
            "label": "getListLimitedPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getInfoPath",
            "type": "Function",
            "tags": [],
            "label": "getInfoPath",
            "description": [],
            "signature": [
              "(pkgName: string, pkgVersion?: string | undefined) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getInfoPath.$1",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getInfoPath.$2",
                "type": "string",
                "tags": [],
                "label": "pkgVersion",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getStatsPath",
            "type": "Function",
            "tags": [],
            "label": "getStatsPath",
            "description": [],
            "signature": [
              "(pkgName: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getStatsPath.$1",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getFilePath",
            "type": "Function",
            "tags": [],
            "label": "getFilePath",
            "description": [],
            "signature": [
              "(filePath: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getFilePath.$1",
                "type": "string",
                "tags": [],
                "label": "filePath",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getInstallPath",
            "type": "Function",
            "tags": [],
            "label": "getInstallPath",
            "description": [],
            "signature": [
              "(pkgName: string, pkgVersion: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getInstallPath.$1",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getInstallPath.$2",
                "type": "string",
                "tags": [],
                "label": "pkgVersion",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getBulkInstallPath",
            "type": "Function",
            "tags": [],
            "label": "getBulkInstallPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getRemovePath",
            "type": "Function",
            "tags": [],
            "label": "getRemovePath",
            "description": [],
            "signature": [
              "(pkgName: string, pkgVersion: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getRemovePath.$1",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getRemovePath.$2",
                "type": "string",
                "tags": [],
                "label": "pkgVersion",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.epmRouteService.getUpdatePath",
            "type": "Function",
            "tags": [],
            "label": "getUpdatePath",
            "description": [],
            "signature": [
              "(pkgName: string, pkgVersion: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getUpdatePath.$1",
                "type": "string",
                "tags": [],
                "label": "pkgName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "fleet",
                "id": "def-common.epmRouteService.getUpdatePath.$2",
                "type": "string",
                "tags": [],
                "label": "pkgVersion",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.FleetServerAgentComponentStatuses",
        "type": "Object",
        "tags": [],
        "label": "FleetServerAgentComponentStatuses",
        "description": [],
        "signature": [
          "readonly [\"starting\", \"configuring\", \"healthy\", \"degraded\", \"failed\", \"stopping\", \"stopped\"]"
        ],
        "path": "x-pack/plugins/fleet/common/constants/agent.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.fleetSetupRouteService",
        "type": "Object",
        "tags": [],
        "label": "fleetSetupRouteService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.fleetSetupRouteService.getFleetSetupPath",
            "type": "Function",
            "tags": [],
            "label": "getFleetSetupPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.fleetSetupRouteService.postFleetSetupPath",
            "type": "Function",
            "tags": [],
            "label": "postFleetSetupPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.INVALID_NAMESPACE_CHARACTERS",
        "type": "Object",
        "tags": [],
        "label": "INVALID_NAMESPACE_CHARACTERS",
        "description": [],
        "signature": [
          "RegExp"
        ],
        "path": "x-pack/plugins/fleet/common/services/is_valid_namespace.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.PACKAGE_POLICY_API_ROUTES",
        "type": "Object",
        "tags": [],
        "label": "PACKAGE_POLICY_API_ROUTES",
        "description": [],
        "path": "x-pack/plugins/fleet/common/constants/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.LIST_PATTERN",
            "type": "string",
            "tags": [],
            "label": "LIST_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.BULK_GET_PATTERN",
            "type": "string",
            "tags": [],
            "label": "BULK_GET_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.INFO_PATTERN",
            "type": "string",
            "tags": [],
            "label": "INFO_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.CREATE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "CREATE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.UPDATE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "UPDATE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.DELETE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "DELETE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.UPGRADE_PATTERN",
            "type": "string",
            "tags": [],
            "label": "UPGRADE_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.DRYRUN_PATTERN",
            "type": "string",
            "tags": [],
            "label": "DRYRUN_PATTERN",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.PACKAGE_POLICY_API_ROUTES.ORPHANED_INTEGRATION_POLICIES",
            "type": "string",
            "tags": [],
            "label": "ORPHANED_INTEGRATION_POLICIES",
            "description": [],
            "path": "x-pack/plugins/fleet/common/constants/routes.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.packagePolicyRouteService",
        "type": "Object",
        "tags": [],
        "label": "packagePolicyRouteService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getListPath",
            "type": "Function",
            "tags": [],
            "label": "getListPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getInfoPath",
            "type": "Function",
            "tags": [],
            "label": "getInfoPath",
            "description": [],
            "signature": [
              "(packagePolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.packagePolicyRouteService.getInfoPath.$1",
                "type": "string",
                "tags": [],
                "label": "packagePolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getCreatePath",
            "type": "Function",
            "tags": [],
            "label": "getCreatePath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getUpdatePath",
            "type": "Function",
            "tags": [],
            "label": "getUpdatePath",
            "description": [],
            "signature": [
              "(packagePolicyId: string) => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "fleet",
                "id": "def-common.packagePolicyRouteService.getUpdatePath.$1",
                "type": "string",
                "tags": [],
                "label": "packagePolicyId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/fleet/common/services/routes.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getDeletePath",
            "type": "Function",
            "tags": [],
            "label": "getDeletePath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getUpgradePath",
            "type": "Function",
            "tags": [],
            "label": "getUpgradePath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getDryRunPath",
            "type": "Function",
            "tags": [],
            "label": "getDryRunPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "fleet",
            "id": "def-common.packagePolicyRouteService.getOrphanedIntegrationPoliciesPath",
            "type": "Function",
            "tags": [],
            "label": "getOrphanedIntegrationPoliciesPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "fleet",
        "id": "def-common.setupRouteService",
        "type": "Object",
        "tags": [],
        "label": "setupRouteService",
        "description": [],
        "path": "x-pack/plugins/fleet/common/services/routes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "fleet",
            "id": "def-common.setupRouteService.getSetupPath",
            "type": "Function",
            "tags": [],
            "label": "getSetupPath",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/fleet/common/services/routes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ]
  }
}